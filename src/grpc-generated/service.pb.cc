// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: service.proto
// Protobuf C++ Version: 5.28.2

#include "service.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protos {
              template <typename>
PROTOBUF_CONSTEXPR WaitRequestMessage::WaitRequestMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct WaitRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitRequestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitRequestMessageDefaultTypeInternal() {}
  union {
    WaitRequestMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitRequestMessageDefaultTypeInternal _WaitRequestMessage_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR View_Wide::View_Wide(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct View_WideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR View_WideDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~View_WideDefaultTypeInternal() {}
  union {
    View_Wide _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 View_WideDefaultTypeInternal _View_Wide_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR View_Synch::View_Synch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct View_SynchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR View_SynchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~View_SynchDefaultTypeInternal() {}
  union {
    View_Synch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 View_SynchDefaultTypeInternal _View_Synch_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR View_Normal::View_Normal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct View_NormalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR View_NormalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~View_NormalDefaultTypeInternal() {}
  union {
    View_Normal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 View_NormalDefaultTypeInternal _View_Normal_default_instance_;

inline constexpr View_ChangeWidth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : view_width_{static_cast< ::protos::ViewWidth >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR View_ChangeWidth::View_ChangeWidth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct View_ChangeWidthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR View_ChangeWidthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~View_ChangeWidthDefaultTypeInternal() {}
  union {
    View_ChangeWidth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 View_ChangeWidthDefaultTypeInternal _View_ChangeWidth_default_instance_;

inline constexpr TurnNeck::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : moment_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TurnNeck::TurnNeck(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TurnNeckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnNeckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnNeckDefaultTypeInternal() {}
  union {
    TurnNeck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnNeckDefaultTypeInternal _TurnNeck_default_instance_;

inline constexpr Turn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : relative_direction_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Turn::Turn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TurnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnDefaultTypeInternal() {}
  union {
    Turn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnDefaultTypeInternal _Turn_default_instance_;

inline constexpr Tackle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : power_or_dir_{0},
        foul_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Tackle::Tackle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TackleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TackleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TackleDefaultTypeInternal() {}
  union {
    Tackle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TackleDefaultTypeInternal _Tackle_default_instance_;

inline constexpr StaminaMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stamina_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StaminaMessage::StaminaMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StaminaMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaminaMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaminaMessageDefaultTypeInternal() {}
  union {
    StaminaMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaminaMessageDefaultTypeInternal _StaminaMessage_default_instance_;

inline constexpr StaminaCapacityMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stamina_capacity_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StaminaCapacityMessage::StaminaCapacityMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StaminaCapacityMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaminaCapacityMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaminaCapacityMessageDefaultTypeInternal() {}
  union {
    StaminaCapacityMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaminaCapacityMessageDefaultTypeInternal _StaminaCapacityMessage_default_instance_;

inline constexpr SetplayMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : wait_step_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetplayMessage::SetplayMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetplayMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetplayMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetplayMessageDefaultTypeInternal() {}
  union {
    SetplayMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetplayMessageDefaultTypeInternal _SetplayMessage_default_instance_;

inline constexpr RpcVector2D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        dist_{0},
        angle_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RpcVector2D::RpcVector2D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcVector2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcVector2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcVector2DDefaultTypeInternal() {}
  union {
    RpcVector2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcVector2DDefaultTypeInternal _RpcVector2D_default_instance_;

inline constexpr RegisterResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : team_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_id_{0},
        agent_type_{static_cast< ::protos::AgentType >(0)},
        uniform_number_{0},
        rpc_server_language_type_{static_cast< ::protos::RpcServerLanguageType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;

inline constexpr RegisterRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : team_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        agent_type_{static_cast< ::protos::AgentType >(0)},
        uniform_number_{0},
        rpc_version_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;

inline constexpr RecoveryMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : recovery_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RecoveryMessage::RecoveryMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RecoveryMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoveryMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoveryMessageDefaultTypeInternal() {}
  union {
    RecoveryMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoveryMessageDefaultTypeInternal _RecoveryMessage_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PointToOf::PointToOf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PointToOfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointToOfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointToOfDefaultTypeInternal() {}
  union {
    PointToOf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointToOfDefaultTypeInternal _PointToOf_default_instance_;

inline constexpr PointTo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PointTo::PointTo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointToDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointToDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointToDefaultTypeInternal() {}
  union {
    PointTo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointToDefaultTypeInternal _PointTo_default_instance_;

inline constexpr OffsideLineMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : offside_line_x_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OffsideLineMessage::OffsideLineMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OffsideLineMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OffsideLineMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OffsideLineMessageDefaultTypeInternal() {}
  union {
    OffsideLineMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OffsideLineMessageDefaultTypeInternal _OffsideLineMessage_default_instance_;

inline constexpr Neck_TurnToRelative::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : angle_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToRelative::Neck_TurnToRelative(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToRelativeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToRelativeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToRelativeDefaultTypeInternal() {}
  union {
    Neck_TurnToRelative _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToRelativeDefaultTypeInternal _Neck_TurnToRelative_default_instance_;

inline constexpr Neck_TurnToPlayerOrScan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : side_{static_cast< ::protos::Side >(0)},
        uniform_number_{0},
        count_threshold_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToPlayerOrScan::Neck_TurnToPlayerOrScan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToPlayerOrScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToPlayerOrScanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToPlayerOrScanDefaultTypeInternal() {}
  union {
    Neck_TurnToPlayerOrScan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToPlayerOrScanDefaultTypeInternal _Neck_TurnToPlayerOrScan_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToLowConfTeammate::Neck_TurnToLowConfTeammate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Neck_TurnToLowConfTeammateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToLowConfTeammateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToLowConfTeammateDefaultTypeInternal() {}
  union {
    Neck_TurnToLowConfTeammate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToLowConfTeammateDefaultTypeInternal _Neck_TurnToLowConfTeammate_default_instance_;

inline constexpr Neck_TurnToGoalieOrScan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : count_threshold_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToGoalieOrScan::Neck_TurnToGoalieOrScan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToGoalieOrScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToGoalieOrScanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToGoalieOrScanDefaultTypeInternal() {}
  union {
    Neck_TurnToGoalieOrScan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToGoalieOrScanDefaultTypeInternal _Neck_TurnToGoalieOrScan_default_instance_;

inline constexpr Neck_TurnToBallOrScan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : count_threshold_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToBallOrScan::Neck_TurnToBallOrScan(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToBallOrScanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToBallOrScanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToBallOrScanDefaultTypeInternal() {}
  union {
    Neck_TurnToBallOrScan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToBallOrScanDefaultTypeInternal _Neck_TurnToBallOrScan_default_instance_;

inline constexpr Neck_TurnToBallAndPlayer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : side_{static_cast< ::protos::Side >(0)},
        uniform_number_{0},
        count_threshold_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToBallAndPlayer::Neck_TurnToBallAndPlayer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToBallAndPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToBallAndPlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToBallAndPlayerDefaultTypeInternal() {}
  union {
    Neck_TurnToBallAndPlayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToBallAndPlayerDefaultTypeInternal _Neck_TurnToBallAndPlayer_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToBall::Neck_TurnToBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Neck_TurnToBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToBallDefaultTypeInternal() {}
  union {
    Neck_TurnToBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToBallDefaultTypeInternal _Neck_TurnToBall_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Neck_ScanPlayers::Neck_ScanPlayers(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Neck_ScanPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_ScanPlayersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_ScanPlayersDefaultTypeInternal() {}
  union {
    Neck_ScanPlayers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_ScanPlayersDefaultTypeInternal _Neck_ScanPlayers_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Neck_ScanField::Neck_ScanField(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Neck_ScanFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_ScanFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_ScanFieldDefaultTypeInternal() {}
  union {
    Neck_ScanField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_ScanFieldDefaultTypeInternal _Neck_ScanField_default_instance_;

inline constexpr Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Move::Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveDefaultTypeInternal _Move_default_instance_;

inline constexpr Kick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : power_{0},
        relative_direction_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Kick::Kick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickDefaultTypeInternal() {}
  union {
    Kick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickDefaultTypeInternal _Kick_default_instance_;

inline constexpr InterceptMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : our_{false},
        uniform_number_{0},
        cycle_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InterceptMessage::InterceptMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InterceptMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterceptMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterceptMessageDefaultTypeInternal() {}
  union {
    InterceptMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterceptMessageDefaultTypeInternal _InterceptMessage_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosShoot::HeliosShoot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosShootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosShootDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosShootDefaultTypeInternal() {}
  union {
    HeliosShoot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosShootDefaultTypeInternal _HeliosShoot_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosSetPlay::HeliosSetPlay(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosSetPlayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosSetPlayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosSetPlayDefaultTypeInternal() {}
  union {
    HeliosSetPlay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosSetPlayDefaultTypeInternal _HeliosSetPlay_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosPenalty::HeliosPenalty(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosPenaltyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosPenaltyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosPenaltyDefaultTypeInternal() {}
  union {
    HeliosPenalty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosPenaltyDefaultTypeInternal _HeliosPenalty_default_instance_;

inline constexpr HeliosOffensivePlanner::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : direct_pass_{false},
        lead_pass_{false},
        through_pass_{false},
        short_dribble_{false},
        long_dribble_{false},
        cross_{false},
        simple_pass_{false},
        simple_dribble_{false},
        simple_shoot_{false},
        server_side_decision_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HeliosOffensivePlanner::HeliosOffensivePlanner(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeliosOffensivePlannerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosOffensivePlannerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosOffensivePlannerDefaultTypeInternal() {}
  union {
    HeliosOffensivePlanner _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosOffensivePlannerDefaultTypeInternal _HeliosOffensivePlanner_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosGoalieMove::HeliosGoalieMove(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosGoalieMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosGoalieMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosGoalieMoveDefaultTypeInternal() {}
  union {
    HeliosGoalieMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosGoalieMoveDefaultTypeInternal _HeliosGoalieMove_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosGoalieKick::HeliosGoalieKick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosGoalieKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosGoalieKickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosGoalieKickDefaultTypeInternal() {}
  union {
    HeliosGoalieKick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosGoalieKickDefaultTypeInternal _HeliosGoalieKick_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosGoalie::HeliosGoalie(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosGoalieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosGoalieDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosGoalieDefaultTypeInternal() {}
  union {
    HeliosGoalie _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosGoalieDefaultTypeInternal _HeliosGoalie_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosCommunicaion::HeliosCommunicaion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosCommunicaionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosCommunicaionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosCommunicaionDefaultTypeInternal() {}
  union {
    HeliosCommunicaion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosCommunicaionDefaultTypeInternal _HeliosCommunicaion_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosBasicOffensive::HeliosBasicOffensive(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosBasicOffensiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosBasicOffensiveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosBasicOffensiveDefaultTypeInternal() {}
  union {
    HeliosBasicOffensive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosBasicOffensiveDefaultTypeInternal _HeliosBasicOffensive_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HeliosBasicMove::HeliosBasicMove(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HeliosBasicMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeliosBasicMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeliosBasicMoveDefaultTypeInternal() {}
  union {
    HeliosBasicMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeliosBasicMoveDefaultTypeInternal _HeliosBasicMove_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Focus_Reset::Focus_Reset(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Focus_ResetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Focus_ResetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Focus_ResetDefaultTypeInternal() {}
  union {
    Focus_Reset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Focus_ResetDefaultTypeInternal _Focus_Reset_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Empty::Empty(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DoRecover::DoRecover(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DoRecoverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoRecoverDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoRecoverDefaultTypeInternal() {}
  union {
    DoRecover _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoRecoverDefaultTypeInternal _DoRecover_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DoKickOff::DoKickOff(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DoKickOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoKickOffDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoKickOffDefaultTypeInternal() {}
  union {
    DoKickOff _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoKickOffDefaultTypeInternal _DoKickOff_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DoHeliosSubstitute::DoHeliosSubstitute(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DoHeliosSubstituteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoHeliosSubstituteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoHeliosSubstituteDefaultTypeInternal() {}
  union {
    DoHeliosSubstitute _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoHeliosSubstituteDefaultTypeInternal _DoHeliosSubstitute_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DoHeliosSayPlayerTypes::DoHeliosSayPlayerTypes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DoHeliosSayPlayerTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoHeliosSayPlayerTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoHeliosSayPlayerTypesDefaultTypeInternal() {}
  union {
    DoHeliosSayPlayerTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoHeliosSayPlayerTypesDefaultTypeInternal _DoHeliosSayPlayerTypes_default_instance_;

inline constexpr DoChangePlayerType::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : our_side_{false},
        uniform_number_{0},
        type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DoChangePlayerType::DoChangePlayerType(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DoChangePlayerTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoChangePlayerTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoChangePlayerTypeDefaultTypeInternal() {}
  union {
    DoChangePlayerType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoChangePlayerTypeDefaultTypeInternal _DoChangePlayerType_default_instance_;

inline constexpr DoChangeMode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : game_mode_type_{static_cast< ::protos::GameModeType >(0)},
        side_{static_cast< ::protos::Side >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DoChangeMode::DoChangeMode(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DoChangeModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoChangeModeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoChangeModeDefaultTypeInternal() {}
  union {
    DoChangeMode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoChangeModeDefaultTypeInternal _DoChangeMode_default_instance_;

inline constexpr DefenseLineMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : defense_line_x_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DefenseLineMessage::DefenseLineMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DefenseLineMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefenseLineMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefenseLineMessageDefaultTypeInternal() {}
  union {
    DefenseLineMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefenseLineMessageDefaultTypeInternal _DefenseLineMessage_default_instance_;

inline constexpr DebugClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DebugClient::DebugClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DebugClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugClientDefaultTypeInternal() {}
  union {
    DebugClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugClientDefaultTypeInternal _DebugClient_default_instance_;

inline constexpr Dash::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : power_{0},
        relative_direction_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Dash::Dash(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DashDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DashDefaultTypeInternal() {}
  union {
    Dash _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DashDefaultTypeInternal _Dash_default_instance_;

inline constexpr ChangeView::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : view_width_{static_cast< ::protos::ViewWidth >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChangeView::ChangeView(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChangeViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeViewDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeViewDefaultTypeInternal() {}
  union {
    ChangeView _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeViewDefaultTypeInternal _ChangeView_default_instance_;

inline constexpr ChangePlayerType::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uniform_number_{0},
        type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChangePlayerType::ChangePlayerType(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChangePlayerTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePlayerTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePlayerTypeDefaultTypeInternal() {}
  union {
    ChangePlayerType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePlayerTypeDefaultTypeInternal _ChangePlayerType_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Catch::Catch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CatchDefaultTypeInternal() {}
  union {
    Catch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CatchDefaultTypeInternal _Catch_default_instance_;

inline constexpr Body_TurnToBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cycle_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_TurnToBall::Body_TurnToBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_TurnToBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_TurnToBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_TurnToBallDefaultTypeInternal() {}
  union {
    Body_TurnToBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_TurnToBallDefaultTypeInternal _Body_TurnToBall_default_instance_;

inline constexpr Body_TurnToAngle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : angle_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_TurnToAngle::Body_TurnToAngle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_TurnToAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_TurnToAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_TurnToAngleDefaultTypeInternal() {}
  union {
    Body_TurnToAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_TurnToAngleDefaultTypeInternal _Body_TurnToAngle_default_instance_;

inline constexpr Body_StopDash::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : save_recovery_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_StopDash::Body_StopDash(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_StopDashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_StopDashDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_StopDashDefaultTypeInternal() {}
  union {
    Body_StopDash _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_StopDashDefaultTypeInternal _Body_StopDash_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Body_StopBall::Body_StopBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Body_StopBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_StopBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_StopBallDefaultTypeInternal() {}
  union {
    Body_StopBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_StopBallDefaultTypeInternal _Body_StopBall_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Body_ClearBall::Body_ClearBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Body_ClearBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_ClearBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_ClearBallDefaultTypeInternal() {}
  union {
    Body_ClearBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_ClearBallDefaultTypeInternal _Body_ClearBall_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Body_AdvanceBall::Body_AdvanceBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Body_AdvanceBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_AdvanceBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_AdvanceBallDefaultTypeInternal() {}
  union {
    Body_AdvanceBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_AdvanceBallDefaultTypeInternal _Body_AdvanceBall_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Bhv_ScanField::Bhv_ScanField(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Bhv_ScanFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_ScanFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_ScanFieldDefaultTypeInternal() {}
  union {
    Bhv_ScanField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_ScanFieldDefaultTypeInternal _Bhv_ScanField_default_instance_;

inline constexpr Bhv_NeckBodyToBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : angle_buf_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Bhv_NeckBodyToBall::Bhv_NeckBodyToBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Bhv_NeckBodyToBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_NeckBodyToBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_NeckBodyToBallDefaultTypeInternal() {}
  union {
    Bhv_NeckBodyToBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_NeckBodyToBallDefaultTypeInternal _Bhv_NeckBodyToBall_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Bhv_Emergency::Bhv_Emergency(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Bhv_EmergencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_EmergencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_EmergencyDefaultTypeInternal() {}
  union {
    Bhv_Emergency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_EmergencyDefaultTypeInternal _Bhv_Emergency_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Bhv_BodyNeckToBall::Bhv_BodyNeckToBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Bhv_BodyNeckToBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_BodyNeckToBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_BodyNeckToBallDefaultTypeInternal() {}
  union {
    Bhv_BodyNeckToBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_BodyNeckToBallDefaultTypeInternal _Bhv_BodyNeckToBall_default_instance_;

inline constexpr BestPlannerActionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : index_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BestPlannerActionResponse::BestPlannerActionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BestPlannerActionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestPlannerActionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestPlannerActionResponseDefaultTypeInternal() {}
  union {
    BestPlannerActionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestPlannerActionResponseDefaultTypeInternal _BestPlannerActionResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AttentionToOf::AttentionToOf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AttentionToOfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttentionToOfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttentionToOfDefaultTypeInternal() {}
  union {
    AttentionToOf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttentionToOfDefaultTypeInternal _AttentionToOf_default_instance_;

inline constexpr AttentionTo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : side_{static_cast< ::protos::Side >(0)},
        unum_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AttentionTo::AttentionTo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AttentionToDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttentionToDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttentionToDefaultTypeInternal() {}
  union {
    AttentionTo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttentionToDefaultTypeInternal _AttentionTo_default_instance_;

inline constexpr AddText::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{static_cast< ::protos::LoggerLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AddText::AddText(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTextDefaultTypeInternal() {}
  union {
    AddText _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTextDefaultTypeInternal _AddText_default_instance_;

inline constexpr AddRectangle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{static_cast< ::protos::LoggerLevel >(0)},
        left_{0},
        top_{0},
        length_{0},
        width_{0},
        fill_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AddRectangle::AddRectangle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddRectangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRectangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRectangleDefaultTypeInternal() {}
  union {
    AddRectangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRectangleDefaultTypeInternal _AddRectangle_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR WorldModel_HeliosHomePositionsEntry_DoNotUse::WorldModel_HeliosHomePositionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : WorldModel_HeliosHomePositionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : WorldModel_HeliosHomePositionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct WorldModel_HeliosHomePositionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldModel_HeliosHomePositionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldModel_HeliosHomePositionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorldModel_HeliosHomePositionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldModel_HeliosHomePositionsEntry_DoNotUseDefaultTypeInternal _WorldModel_HeliosHomePositionsEntry_DoNotUse_default_instance_;

inline constexpr TwoPlayerMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        first_position_{nullptr},
        second_position_{nullptr},
        first_uniform_number_{0},
        second_uniform_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TwoPlayerMessage::TwoPlayerMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TwoPlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwoPlayerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwoPlayerMessageDefaultTypeInternal() {}
  union {
    TwoPlayerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwoPlayerMessageDefaultTypeInternal _TwoPlayerMessage_default_instance_;

inline constexpr ThreePlayerMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        first_position_{nullptr},
        second_position_{nullptr},
        third_position_{nullptr},
        first_uniform_number_{0},
        second_uniform_number_{0},
        third_uniform_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ThreePlayerMessage::ThreePlayerMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ThreePlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreePlayerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreePlayerMessageDefaultTypeInternal() {}
  union {
    ThreePlayerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreePlayerMessageDefaultTypeInternal _ThreePlayerMessage_default_instance_;

inline constexpr TeammateMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        uniform_number_{0},
        body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TeammateMessage::TeammateMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TeammateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeammateMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeammateMessageDefaultTypeInternal() {}
  union {
    TeammateMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeammateMessageDefaultTypeInternal _TeammateMessage_default_instance_;

inline constexpr ServerParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        replay_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        landmark_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_log_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_log_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_log_fixed_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_log_fixed_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_date_format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        team_l_start_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        team_r_start_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        keepaway_log_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        keepaway_log_fixed_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        module_dir_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coach_msg_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fixed_teamname_l_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fixed_teamname_r_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        register_response_{nullptr},
        inertia_moment_{0},
        player_size_{0},
        player_decay_{0},
        player_rand_{0},
        player_weight_{0},
        player_speed_max_{0},
        player_accel_max_{0},
        stamina_max_{0},
        stamina_inc_max_{0},
        recover_init_{0},
        recover_dec_thr_{0},
        recover_min_{0},
        recover_dec_{0},
        effort_init_{0},
        effort_dec_thr_{0},
        effort_min_{0},
        effort_dec_{0},
        effort_inc_thr_{0},
        effort_inc_{0},
        kick_rand_{0},
        player_rand_factor_l_{0},
        player_rand_factor_r_{0},
        kick_rand_factor_l_{0},
        kick_rand_factor_r_{0},
        ball_size_{0},
        ball_decay_{0},
        ball_rand_{0},
        ball_weight_{0},
        ball_speed_max_{0},
        ball_accel_max_{0},
        dash_power_rate_{0},
        kick_power_rate_{0},
        kickable_margin_{0},
        control_radius_{0},
        control_radius_width_{0},
        max_power_{0},
        min_power_{0},
        max_moment_{0},
        min_moment_{0},
        max_neck_moment_{0},
        min_neck_moment_{0},
        max_neck_angle_{0},
        min_neck_angle_{0},
        visible_angle_{0},
        visible_distance_{0},
        wind_dir_{0},
        wind_force_{0},
        wind_angle_{0},
        wind_rand_{0},
        kickable_area_{0},
        catch_area_l_{0},
        catch_area_w_{0},
        catch_probability_{0},
        team_actuator_noise_{false},
        wind_none_{false},
        use_wind_random_{false},
        use_offside_{false},
        goalie_max_moves_{0},
        corner_kick_margin_{0},
        offside_active_area_size_{0},
        coach_say_count_max_{0},
        coach_say_msg_size_{0},
        clang_win_size_{0},
        clang_define_win_{0},
        clang_meta_win_{0},
        clang_advice_win_{0},
        clang_info_win_{0},
        clang_mess_delay_{0},
        clang_mess_per_cycle_{0},
        half_time_{0},
        simulator_step_{0},
        send_step_{0},
        recv_step_{0},
        sense_body_step_{0},
        lcm_step_{0},
        player_say_msg_size_{0},
        player_hear_max_{0},
        player_hear_inc_{0},
        player_hear_decay_{0},
        catch_ban_cycle_{0},
        slow_down_factor_{0},
        offside_kick_margin_{0},
        audio_cut_dist_{0},
        dist_quantize_step_{0},
        landmark_dist_quantize_step_{0},
        dir_quantize_step_{0},
        dist_quantize_step_l_{0},
        dist_quantize_step_r_{0},
        landmark_dist_quantize_step_l_{0},
        landmark_dist_quantize_step_r_{0},
        kickoff_offside_{false},
        coach_mode_{false},
        coach_with_referee_mode_{false},
        use_old_coach_hear_{false},
        dir_quantize_step_l_{0},
        dir_quantize_step_r_{0},
        slowness_on_top_for_left_team_{0},
        slowness_on_top_for_right_team_{0},
        start_goal_l_{0},
        start_goal_r_{0},
        drop_ball_time_{0},
        fullstate_l_{false},
        fullstate_r_{false},
        synch_mode_{false},
        verbose_mode_{false},
        synch_offset_{0},
        synch_micro_sleep_{0},
        point_to_ban_{0},
        point_to_duration_{0},
        player_port_{0},
        trainer_port_{0},
        online_coach_port_{0},
        coach_send_vi_step_{0},
        send_comms_{false},
        text_logging_{false},
        game_logging_{false},
        use_text_log_fixed_{false},
        game_log_version_{0},
        use_game_log_fixed_{false},
        use_text_log_dated_{false},
        use_game_log_dated_{false},
        log_times_{false},
        text_log_compression_{0},
        game_log_compression_{0},
        tackle_dist_{0},
        tackle_back_dist_{0},
        tackle_width_{0},
        tackle_exponent_{0},
        record_message_{false},
        use_profile_{false},
        free_kick_faults_{false},
        back_passes_{false},
        tackle_cycles_{0},
        tackle_power_rate_{0},
        freeform_wait_period_{0},
        freeform_send_period_{0},
        stopped_ball_vel_{0},
        max_goal_kicks_{0},
        clang_del_win_{0},
        clang_rule_win_{0},
        kick_off_wait_{0},
        connect_wait_{0},
        proper_goal_kicks_{false},
        auto_mode_{false},
        keepaway_mode_{false},
        keepaway_logging_{false},
        game_over_wait_{0},
        keepaway_length_{0},
        keepaway_width_{0},
        keepaway_start_{0},
        nr_normal_halfs_{0},
        nr_extra_halfs_{0},
        keepaway_log_fixed_{false},
        keepaway_log_dated_{false},
        penalty_shoot_outs_{false},
        pen_random_winner_{false},
        pen_before_setup_wait_{0},
        pen_setup_wait_{0},
        pen_ready_wait_{0},
        pen_taken_wait_{0},
        pen_nr_kicks_{0},
        pen_max_extra_kicks_{0},
        pen_dist_x_{0},
        pen_max_goalie_dist_x_{0},
        ball_stuck_area_{0},
        max_tackle_power_{0},
        max_back_tackle_power_{0},
        player_speed_max_min_{0},
        pen_allow_mult_kicks_{false},
        pen_coach_moves_players_{false},
        golden_goal_{false},
        extra_stamina_{0},
        synch_see_offset_{0},
        extra_half_time_{0},
        stamina_capacity_{0},
        max_dash_angle_{0},
        min_dash_angle_{0},
        dash_angle_step_{0},
        side_dash_rate_{0},
        back_dash_rate_{0},
        max_dash_power_{0},
        min_dash_power_{0},
        tackle_rand_factor_{0},
        foul_detect_probability_{0},
        foul_exponent_{0},
        foul_cycles_{0},
        red_card_probability_{0},
        illegal_defense_duration_{0},
        illegal_defense_number_{0},
        illegal_defense_dist_x_{0},
        illegal_defense_width_{0},
        max_catch_angle_{0},
        min_catch_angle_{0},
        random_seed_{0},
        long_kick_power_factor_{0},
        long_kick_delay_{0},
        max_monitors_{0},
        catchable_area_{0},
        real_speed_max_{0},
        pitch_half_length_{0},
        pitch_half_width_{0},
        our_penalty_area_line_x_{0},
        their_penalty_area_line_x_{0},
        penalty_area_half_width_{0},
        penalty_area_length_{0},
        goal_width_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerParam::ServerParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerParamDefaultTypeInternal() {}
  union {
    ServerParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerParamDefaultTypeInternal _ServerParam_default_instance_;

inline constexpr SelfMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        self_position_{nullptr},
        self_body_direction_{0},
        self_stamina_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SelfMessage::SelfMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelfMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfMessageDefaultTypeInternal() {}
  union {
    SelfMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfMessageDefaultTypeInternal _SelfMessage_default_instance_;

inline constexpr Self::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        seen_position_{nullptr},
        heard_position_{nullptr},
        velocity_{nullptr},
        seen_velocity_{nullptr},
        pos_count_{0},
        seen_pos_count_{0},
        heard_pos_count_{0},
        vel_count_{0},
        seen_vel_count_{0},
        ghost_count_{0},
        id_{0},
        side_{static_cast< ::protos::Side >(0)},
        uniform_number_{0},
        uniform_number_count_{0},
        body_direction_{0},
        body_direction_count_{0},
        face_direction_{0},
        face_direction_count_{0},
        point_to_direction_{0},
        point_to_direction_count_{0},
        dist_from_ball_{0},
        is_goalie_{false},
        is_kicking_{false},
        is_tackling_{false},
        is_kickable_{false},
        angle_from_ball_{0},
        ball_reach_steps_{0},
        relative_neck_direction_{0},
        stamina_{0},
        catch_probability_{0},
        tackle_probability_{0},
        foul_probability_{0},
        view_width_{static_cast< ::protos::ViewWidth >(0)},
        type_id_{0},
        kick_rate_{0},
        recovery_{0},
        stamina_capacity_{0},
        card_{static_cast< ::protos::CardType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Self::Self(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfDefaultTypeInternal() {}
  union {
    Self _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfDefaultTypeInternal _Self_default_instance_;

inline constexpr RpcPredictState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ball_position_{nullptr},
        ball_velocity_{nullptr},
        spend_time_{0},
        ball_holder_unum_{0},
        our_defense_line_x_{0},
        our_offense_line_x_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RpcPredictState::RpcPredictState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcPredictStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcPredictStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcPredictStateDefaultTypeInternal() {}
  union {
    RpcPredictState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcPredictStateDefaultTypeInternal _RpcPredictState_default_instance_;

inline constexpr RpcCooperativeAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_point_{nullptr},
        category_{static_cast< ::protos::RpcActionCategory >(0)},
        index_{0},
        sender_unum_{0},
        target_unum_{0},
        first_ball_speed_{0},
        first_turn_moment_{0},
        first_dash_power_{0},
        first_dash_angle_relative_{0},
        duration_step_{0},
        kick_count_{0},
        turn_count_{0},
        dash_count_{0},
        final_action_{false},
        parent_index_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RpcCooperativeAction::RpcCooperativeAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcCooperativeActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcCooperativeActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcCooperativeActionDefaultTypeInternal() {}
  union {
    RpcCooperativeAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcCooperativeActionDefaultTypeInternal _RpcCooperativeAction_default_instance_;

inline constexpr PlayerType::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        register_response_{nullptr},
        id_{0},
        stamina_inc_max_{0},
        player_decay_{0},
        inertia_moment_{0},
        dash_power_rate_{0},
        player_size_{0},
        kickable_margin_{0},
        kick_rand_{0},
        extra_stamina_{0},
        effort_max_{0},
        effort_min_{0},
        kick_power_rate_{0},
        foul_detect_probability_{0},
        catchable_area_l_stretch_{0},
        unum_far_length_{0},
        unum_too_far_length_{0},
        team_far_length_{0},
        team_too_far_length_{0},
        player_max_observation_length_{0},
        ball_vel_far_length_{0},
        ball_vel_too_far_length_{0},
        ball_max_observation_length_{0},
        flag_chg_far_length_{0},
        flag_chg_too_far_length_{0},
        flag_max_observation_length_{0},
        kickable_area_{0},
        reliable_catchable_dist_{0},
        max_catchable_dist_{0},
        real_speed_max_{0},
        player_speed_max2_{0},
        real_speed_max2_{0},
        cycles_to_reach_max_speed_{0},
        player_speed_max_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerType::PlayerType(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTypeDefaultTypeInternal() {}
  union {
    PlayerType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTypeDefaultTypeInternal _PlayerType_default_instance_;

inline constexpr PlayerParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        register_response_{nullptr},
        player_types_{0},
        subs_max_{0},
        pt_max_{0},
        allow_mult_default_type_{false},
        player_speed_max_delta_min_{0},
        player_speed_max_delta_max_{0},
        stamina_inc_max_delta_factor_{0},
        player_decay_delta_min_{0},
        player_decay_delta_max_{0},
        inertia_moment_delta_factor_{0},
        dash_power_rate_delta_min_{0},
        dash_power_rate_delta_max_{0},
        player_size_delta_factor_{0},
        kickable_margin_delta_min_{0},
        kickable_margin_delta_max_{0},
        kick_rand_delta_factor_{0},
        extra_stamina_delta_min_{0},
        extra_stamina_delta_max_{0},
        effort_max_delta_factor_{0},
        effort_min_delta_factor_{0},
        random_seed_{0},
        new_dash_power_rate_delta_min_{0},
        new_dash_power_rate_delta_max_{0},
        new_stamina_inc_max_delta_factor_{0},
        kick_power_rate_delta_min_{0},
        kick_power_rate_delta_max_{0},
        foul_detect_probability_delta_factor_{0},
        catchable_area_l_stretch_min_{0},
        catchable_area_l_stretch_max_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerParam::PlayerParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerParamDefaultTypeInternal() {}
  union {
    PlayerParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerParamDefaultTypeInternal _PlayerParam_default_instance_;

inline constexpr Player::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        seen_position_{nullptr},
        heard_position_{nullptr},
        velocity_{nullptr},
        seen_velocity_{nullptr},
        pos_count_{0},
        seen_pos_count_{0},
        heard_pos_count_{0},
        vel_count_{0},
        seen_vel_count_{0},
        ghost_count_{0},
        dist_from_self_{0},
        angle_from_self_{0},
        id_{0},
        side_{static_cast< ::protos::Side >(0)},
        uniform_number_{0},
        uniform_number_count_{0},
        body_direction_{0},
        body_direction_count_{0},
        face_direction_{0},
        face_direction_count_{0},
        point_to_direction_{0},
        point_to_direction_count_{0},
        is_goalie_{false},
        is_kicking_{false},
        is_tackling_{false},
        dist_from_ball_{0},
        angle_from_ball_{0},
        ball_reach_steps_{0},
        type_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Player::Player(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;

inline constexpr PassRequestMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PassRequestMessage::PassRequestMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PassRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassRequestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassRequestMessageDefaultTypeInternal() {}
  union {
    PassRequestMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassRequestMessageDefaultTypeInternal _PassRequestMessage_default_instance_;

inline constexpr PassMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        receiver_point_{nullptr},
        ball_position_{nullptr},
        ball_velocity_{nullptr},
        receiver_uniform_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PassMessage::PassMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PassMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassMessageDefaultTypeInternal() {}
  union {
    PassMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassMessageDefaultTypeInternal _PassMessage_default_instance_;

inline constexpr OpponentMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        uniform_number_{0},
        body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OpponentMessage::OpponentMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OpponentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpponentMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpponentMessageDefaultTypeInternal() {}
  union {
    OpponentMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpponentMessageDefaultTypeInternal _OpponentMessage_default_instance_;

inline constexpr OnePlayerMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        uniform_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OnePlayerMessage::OnePlayerMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OnePlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnePlayerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnePlayerMessageDefaultTypeInternal() {}
  union {
    OnePlayerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnePlayerMessageDefaultTypeInternal _OnePlayerMessage_default_instance_;

inline constexpr Neck_TurnToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Neck_TurnToPoint::Neck_TurnToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Neck_TurnToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Neck_TurnToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Neck_TurnToPointDefaultTypeInternal() {}
  union {
    Neck_TurnToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Neck_TurnToPointDefaultTypeInternal _Neck_TurnToPoint_default_instance_;

inline constexpr InterceptInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        final_self_position_{nullptr},
        action_type_{static_cast< ::protos::InterceptActionType >(0)},
        turn_steps_{0},
        turn_angle_{0},
        dash_steps_{0},
        dash_power_{0},
        dash_dir_{0},
        final_ball_dist_{0},
        final_stamina_{0},
        value_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InterceptInfo::InterceptInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InterceptInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterceptInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterceptInfoDefaultTypeInternal() {}
  union {
    InterceptInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterceptInfoDefaultTypeInternal _InterceptInfo_default_instance_;

inline constexpr InitMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        register_response_{nullptr},
        debug_mode_{false} {}

template <typename>
PROTOBUF_CONSTEXPR InitMessage::InitMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InitMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitMessageDefaultTypeInternal() {}
  union {
    InitMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitMessageDefaultTypeInternal _InitMessage_default_instance_;

inline constexpr GoalieMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        goalie_position_{nullptr},
        goalie_uniform_number_{0},
        goalie_body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GoalieMessage::GoalieMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GoalieMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoalieMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoalieMessageDefaultTypeInternal() {}
  union {
    GoalieMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoalieMessageDefaultTypeInternal _GoalieMessage_default_instance_;

inline constexpr GoalieAndPlayerMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        goalie_position_{nullptr},
        player_position_{nullptr},
        goalie_uniform_number_{0},
        goalie_body_direction_{0},
        player_uniform_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GoalieAndPlayerMessage::GoalieAndPlayerMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GoalieAndPlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoalieAndPlayerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoalieAndPlayerMessageDefaultTypeInternal() {}
  union {
    GoalieAndPlayerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoalieAndPlayerMessageDefaultTypeInternal _GoalieAndPlayerMessage_default_instance_;

inline constexpr Focus_MoveToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Focus_MoveToPoint::Focus_MoveToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Focus_MoveToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Focus_MoveToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Focus_MoveToPointDefaultTypeInternal() {}
  union {
    Focus_MoveToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Focus_MoveToPointDefaultTypeInternal _Focus_MoveToPoint_default_instance_;

inline constexpr DribbleMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        queue_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DribbleMessage::DribbleMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DribbleMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DribbleMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DribbleMessageDefaultTypeInternal() {}
  union {
    DribbleMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DribbleMessageDefaultTypeInternal _DribbleMessage_default_instance_;

inline constexpr DoMovePlayer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        our_side_{false},
        uniform_number_{0},
        body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DoMovePlayer::DoMovePlayer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DoMovePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoMovePlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoMovePlayerDefaultTypeInternal() {}
  union {
    DoMovePlayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoMovePlayerDefaultTypeInternal _DoMovePlayer_default_instance_;

inline constexpr DoMoveBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DoMoveBall::DoMoveBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DoMoveBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoMoveBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoMoveBallDefaultTypeInternal() {}
  union {
    DoMoveBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoMoveBallDefaultTypeInternal _DoMoveBall_default_instance_;

inline constexpr CoachAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CoachAction::CoachAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CoachActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoachActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoachActionDefaultTypeInternal() {}
  union {
    CoachAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoachActionDefaultTypeInternal _CoachAction_default_instance_;

inline constexpr Body_TurnToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        cycle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_TurnToPoint::Body_TurnToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_TurnToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_TurnToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_TurnToPointDefaultTypeInternal() {}
  union {
    Body_TurnToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_TurnToPointDefaultTypeInternal _Body_TurnToPoint_default_instance_;

inline constexpr Body_TackleToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        min_probability_{0},
        min_speed_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_TackleToPoint::Body_TackleToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_TackleToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_TackleToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_TackleToPointDefaultTypeInternal() {}
  union {
    Body_TackleToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_TackleToPointDefaultTypeInternal _Body_TackleToPoint_default_instance_;

inline constexpr Body_SmartKick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        first_speed_{0},
        first_speed_threshold_{0},
        max_steps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_SmartKick::Body_SmartKick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_SmartKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_SmartKickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_SmartKickDefaultTypeInternal() {}
  union {
    Body_SmartKick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_SmartKickDefaultTypeInternal _Body_SmartKick_default_instance_;

inline constexpr Body_KickOneStep::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        first_speed_{0},
        force_mode_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Body_KickOneStep::Body_KickOneStep(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_KickOneStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_KickOneStepDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_KickOneStepDefaultTypeInternal() {}
  union {
    Body_KickOneStep _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_KickOneStepDefaultTypeInternal _Body_KickOneStep_default_instance_;

inline constexpr Body_Intercept::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        face_point_{nullptr},
        save_recovery_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Body_Intercept::Body_Intercept(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_InterceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_InterceptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_InterceptDefaultTypeInternal() {}
  union {
    Body_Intercept _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_InterceptDefaultTypeInternal _Body_Intercept_default_instance_;

inline constexpr Body_HoldBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        turn_target_point_{nullptr},
        kick_target_point_{nullptr},
        do_turn_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Body_HoldBall::Body_HoldBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_HoldBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_HoldBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_HoldBallDefaultTypeInternal() {}
  union {
    Body_HoldBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_HoldBallDefaultTypeInternal _Body_HoldBall_default_instance_;

inline constexpr Body_GoToPointDodge::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        dash_power_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_GoToPointDodge::Body_GoToPointDodge(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_GoToPointDodgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_GoToPointDodgeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_GoToPointDodgeDefaultTypeInternal() {}
  union {
    Body_GoToPointDodge _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_GoToPointDodgeDefaultTypeInternal _Body_GoToPointDodge_default_instance_;

inline constexpr Body_GoToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        distance_threshold_{0},
        max_dash_power_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Body_GoToPoint::Body_GoToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_GoToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_GoToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_GoToPointDefaultTypeInternal() {}
  union {
    Body_GoToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_GoToPointDefaultTypeInternal _Body_GoToPoint_default_instance_;

inline constexpr Body_Dribble::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        distance_threshold_{0},
        dash_power_{0},
        dash_count_{0},
        dodge_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Body_Dribble::Body_Dribble(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Body_DribbleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Body_DribbleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Body_DribbleDefaultTypeInternal() {}
  union {
    Body_Dribble _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Body_DribbleDefaultTypeInternal _Body_Dribble_default_instance_;

inline constexpr Bhv_NeckBodyToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr},
        angle_buf_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Bhv_NeckBodyToPoint::Bhv_NeckBodyToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Bhv_NeckBodyToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_NeckBodyToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_NeckBodyToPointDefaultTypeInternal() {}
  union {
    Bhv_NeckBodyToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_NeckBodyToPointDefaultTypeInternal _Bhv_NeckBodyToPoint_default_instance_;

inline constexpr Bhv_GoToPointLookBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_point_{nullptr},
        distance_threshold_{0},
        max_dash_power_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Bhv_GoToPointLookBall::Bhv_GoToPointLookBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Bhv_GoToPointLookBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_GoToPointLookBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_GoToPointLookBallDefaultTypeInternal() {}
  union {
    Bhv_GoToPointLookBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_GoToPointLookBallDefaultTypeInternal _Bhv_GoToPointLookBall_default_instance_;

inline constexpr Bhv_BodyNeckToPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Bhv_BodyNeckToPoint::Bhv_BodyNeckToPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Bhv_BodyNeckToPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_BodyNeckToPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_BodyNeckToPointDefaultTypeInternal() {}
  union {
    Bhv_BodyNeckToPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_BodyNeckToPointDefaultTypeInternal _Bhv_BodyNeckToPoint_default_instance_;

inline constexpr Bhv_BeforeKickOff::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Bhv_BeforeKickOff::Bhv_BeforeKickOff(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Bhv_BeforeKickOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Bhv_BeforeKickOffDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Bhv_BeforeKickOffDefaultTypeInternal() {}
  union {
    Bhv_BeforeKickOff _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Bhv_BeforeKickOffDefaultTypeInternal _Bhv_BeforeKickOff_default_instance_;

inline constexpr BallPlayerMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ball_position_{nullptr},
        ball_velocity_{nullptr},
        player_position_{nullptr},
        uniform_number_{0},
        body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BallPlayerMessage::BallPlayerMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BallPlayerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallPlayerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallPlayerMessageDefaultTypeInternal() {}
  union {
    BallPlayerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallPlayerMessageDefaultTypeInternal _BallPlayerMessage_default_instance_;

inline constexpr BallMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ball_position_{nullptr},
        ball_velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BallMessage::BallMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BallMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallMessageDefaultTypeInternal() {}
  union {
    BallMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallMessageDefaultTypeInternal _BallMessage_default_instance_;

inline constexpr BallGoalieMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ball_position_{nullptr},
        ball_velocity_{nullptr},
        goalie_position_{nullptr},
        goalie_body_direction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BallGoalieMessage::BallGoalieMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BallGoalieMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallGoalieMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallGoalieMessageDefaultTypeInternal() {}
  union {
    BallGoalieMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallGoalieMessageDefaultTypeInternal _BallGoalieMessage_default_instance_;

inline constexpr Ball::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        relative_position_{nullptr},
        seen_position_{nullptr},
        heard_position_{nullptr},
        velocity_{nullptr},
        seen_velocity_{nullptr},
        heard_velocity_{nullptr},
        pos_count_{0},
        seen_pos_count_{0},
        heard_pos_count_{0},
        vel_count_{0},
        seen_vel_count_{0},
        heard_vel_count_{0},
        lost_count_{0},
        ghost_count_{0},
        dist_from_self_{0},
        angle_from_self_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Ball::Ball(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallDefaultTypeInternal() {}
  union {
    Ball _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallDefaultTypeInternal _Ball_default_instance_;

inline constexpr AddTriangle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        point1_{nullptr},
        point2_{nullptr},
        point3_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)},
        fill_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AddTriangle::AddTriangle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddTriangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTriangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTriangleDefaultTypeInternal() {}
  union {
    AddTriangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTriangleDefaultTypeInternal _AddTriangle_default_instance_;

inline constexpr AddSector::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        center_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)},
        min_radius_{0},
        max_radius_{0},
        start_angle_{0},
        span_angel_{0},
        fill_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AddSector::AddSector(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddSectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddSectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddSectorDefaultTypeInternal() {}
  union {
    AddSector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddSectorDefaultTypeInternal _AddSector_default_instance_;

inline constexpr AddPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        point_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AddPoint::AddPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPointDefaultTypeInternal() {}
  union {
    AddPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPointDefaultTypeInternal _AddPoint_default_instance_;

inline constexpr AddMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AddMessage::AddMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddMessageDefaultTypeInternal() {}
  union {
    AddMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddMessageDefaultTypeInternal _AddMessage_default_instance_;

inline constexpr AddLine::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_{nullptr},
        end_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AddLine::AddLine(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddLineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddLineDefaultTypeInternal() {}
  union {
    AddLine _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddLineDefaultTypeInternal _AddLine_default_instance_;

inline constexpr AddCircle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        center_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)},
        radius_{0},
        fill_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AddCircle::AddCircle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddCircleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddCircleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddCircleDefaultTypeInternal() {}
  union {
    AddCircle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddCircleDefaultTypeInternal _AddCircle_default_instance_;

inline constexpr AddArc::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        center_{nullptr},
        level_{static_cast< ::protos::LoggerLevel >(0)},
        radius_{0},
        start_angle_{0},
        span_angel_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AddArc::AddArc(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddArcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddArcDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddArcDefaultTypeInternal() {}
  union {
    AddArc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddArcDefaultTypeInternal _AddArc_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR WorldModel_TheirPlayersDictEntry_DoNotUse::WorldModel_TheirPlayersDictEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : WorldModel_TheirPlayersDictEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : WorldModel_TheirPlayersDictEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct WorldModel_TheirPlayersDictEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldModel_TheirPlayersDictEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldModel_TheirPlayersDictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorldModel_TheirPlayersDictEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldModel_TheirPlayersDictEntry_DoNotUseDefaultTypeInternal _WorldModel_TheirPlayersDictEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR WorldModel_OurPlayersDictEntry_DoNotUse::WorldModel_OurPlayersDictEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : WorldModel_OurPlayersDictEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : WorldModel_OurPlayersDictEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct WorldModel_OurPlayersDictEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldModel_OurPlayersDictEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldModel_OurPlayersDictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorldModel_OurPlayersDictEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldModel_OurPlayersDictEntry_DoNotUseDefaultTypeInternal _WorldModel_OurPlayersDictEntry_DoNotUse_default_instance_;

inline constexpr TrainerAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TrainerAction::TrainerAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrainerActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainerActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainerActionDefaultTypeInternal() {}
  union {
    TrainerAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainerActionDefaultTypeInternal _TrainerAction_default_instance_;

inline constexpr Say::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Say::Say(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SayDefaultTypeInternal() {}
  union {
    Say _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SayDefaultTypeInternal _Say_default_instance_;

inline constexpr RpcActionState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        action_{nullptr},
        predict_state_{nullptr},
        evaluation_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RpcActionState::RpcActionState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcActionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcActionStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcActionStateDefaultTypeInternal() {}
  union {
    RpcActionState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcActionStateDefaultTypeInternal _RpcActionState_default_instance_;

inline constexpr Log::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : log_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Log::Log(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;

inline constexpr InterceptTable::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : self_intercept_info_{},
        self_reach_steps_{0},
        first_teammate_reach_steps_{0},
        second_teammate_reach_steps_{0},
        first_opponent_reach_steps_{0},
        second_opponent_reach_steps_{0},
        first_teammate_id_{0},
        second_teammate_id_{0},
        first_opponent_id_{0},
        second_opponent_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InterceptTable::InterceptTable(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InterceptTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterceptTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterceptTableDefaultTypeInternal() {}
  union {
    InterceptTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterceptTableDefaultTypeInternal _InterceptTable_default_instance_;

inline constexpr CoachActions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CoachActions::CoachActions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CoachActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoachActionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoachActionsDefaultTypeInternal() {}
  union {
    CoachActions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoachActionsDefaultTypeInternal _CoachActions_default_instance_;

inline constexpr WorldModel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        teammates_{},
        opponents_{},
        unknowns_{},
        our_players_dict_{},
        their_players_dict_{},
        helios_home_positions_{},
        our_team_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        their_team_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        intercept_table_{nullptr},
        self_{nullptr},
        ball_{nullptr},
        our_side_{static_cast< ::protos::Side >(0)},
        last_set_play_start_time_{0},
        our_goalie_uniform_number_{0},
        their_goalie_uniform_number_{0},
        offside_line_x_{0},
        ofside_line_x_count_{0},
        kickable_teammate_id_{0},
        kickable_opponent_id_{0},
        last_kick_side_{static_cast< ::protos::Side >(0)},
        last_kicker_uniform_number_{0},
        cycle_{0},
        game_mode_type_{static_cast< ::protos::GameModeType >(0)},
        left_team_score_{0},
        right_team_score_{0},
        stoped_cycle_{0},
        is_our_set_play_{false},
        is_their_set_play_{false},
        is_penalty_kick_mode_{false},
        our_team_score_{0},
        their_team_score_{0},
        our_defense_line_x_{0},
        their_defense_line_x_{0},
        our_defense_player_line_x_{0},
        their_defense_player_line_x_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorldModel::WorldModel(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorldModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldModelDefaultTypeInternal() {}
  union {
    WorldModel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldModelDefaultTypeInternal _WorldModel_default_instance_;

inline constexpr TrainerActions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TrainerActions::TrainerActions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrainerActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainerActionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainerActionsDefaultTypeInternal() {}
  union {
    TrainerActions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainerActionsDefaultTypeInternal _TrainerActions_default_instance_;

inline constexpr PlayerAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerAction::PlayerAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerActionDefaultTypeInternal() {}
  union {
    PlayerAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerActionDefaultTypeInternal _PlayerAction_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR BestPlannerActionRequest_PairsEntry_DoNotUse::BestPlannerActionRequest_PairsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : BestPlannerActionRequest_PairsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : BestPlannerActionRequest_PairsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct BestPlannerActionRequest_PairsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestPlannerActionRequest_PairsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestPlannerActionRequest_PairsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BestPlannerActionRequest_PairsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestPlannerActionRequest_PairsEntry_DoNotUseDefaultTypeInternal _BestPlannerActionRequest_PairsEntry_DoNotUse_default_instance_;

inline constexpr State::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        register_response_{nullptr},
        world_model_{nullptr},
        full_world_model_{nullptr},
        need_preprocess_{false} {}

template <typename>
PROTOBUF_CONSTEXPR State::State(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateDefaultTypeInternal _State_default_instance_;

inline constexpr PlayerActions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        ignore_preprocess_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerActions::PlayerActions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerActionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerActionsDefaultTypeInternal() {}
  union {
    PlayerActions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerActionsDefaultTypeInternal _PlayerActions_default_instance_;

inline constexpr BestPlannerActionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pairs_{},
        register_response_{nullptr},
        state_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BestPlannerActionRequest::BestPlannerActionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BestPlannerActionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BestPlannerActionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BestPlannerActionRequestDefaultTypeInternal() {}
  union {
    BestPlannerActionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BestPlannerActionRequestDefaultTypeInternal _BestPlannerActionRequest_default_instance_;
}  // namespace protos
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_service_2eproto[9];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_service_2eproto = nullptr;
const ::uint32_t
    TableStruct_service_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::RpcVector2D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RpcVector2D, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcVector2D, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcVector2D, _impl_.dist_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcVector2D, _impl_.angle_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::RegisterRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RegisterRequest, _impl_.agent_type_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterRequest, _impl_.team_name_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterRequest, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterRequest, _impl_.rpc_version_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _impl_.client_id_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _impl_.agent_type_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _impl_.team_name_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::RegisterResponse, _impl_.rpc_server_language_type_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.relative_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.seen_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.heard_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.seen_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.heard_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.seen_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.heard_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.seen_vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.heard_vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.lost_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.ghost_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.dist_from_self_),
        PROTOBUF_FIELD_OFFSET(::protos::Ball, _impl_.angle_from_self_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.seen_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.heard_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.seen_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.seen_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.heard_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.seen_vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.ghost_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.dist_from_self_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.angle_from_self_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.uniform_number_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.is_goalie_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.body_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.body_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.face_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.face_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.point_to_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.point_to_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.is_kicking_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.dist_from_ball_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.angle_from_ball_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.ball_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.is_tackling_),
        PROTOBUF_FIELD_OFFSET(::protos::Player, _impl_.type_id_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.seen_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.heard_position_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.seen_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.seen_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.heard_pos_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.seen_vel_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.ghost_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.uniform_number_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.is_goalie_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.body_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.body_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.face_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.face_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.point_to_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.point_to_direction_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.is_kicking_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.dist_from_ball_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.angle_from_ball_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.ball_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.is_tackling_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.relative_neck_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.stamina_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.is_kickable_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.catch_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.tackle_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.foul_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.view_width_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.type_id_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.kick_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.recovery_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.stamina_capacity_),
        PROTOBUF_FIELD_OFFSET(::protos::Self, _impl_.card_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.action_type_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.turn_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.turn_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.dash_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.dash_power_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.dash_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.final_self_position_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.final_ball_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.final_stamina_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptInfo, _impl_.value_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.self_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.first_teammate_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.second_teammate_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.first_opponent_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.second_opponent_reach_steps_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.first_teammate_id_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.second_teammate_id_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.first_opponent_id_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.second_opponent_id_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptTable, _impl_.self_intercept_info_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_OurPlayersDictEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_OurPlayersDictEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_TheirPlayersDictEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.intercept_table_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_team_name_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_team_name_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_side_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.last_set_play_start_time_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.self_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.ball_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.teammates_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.opponents_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.unknowns_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_players_dict_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_players_dict_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_goalie_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_goalie_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.offside_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.ofside_line_x_count_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.kickable_teammate_id_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.kickable_opponent_id_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.last_kick_side_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.last_kicker_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.game_mode_type_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.left_team_score_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.right_team_score_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.is_our_set_play_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.is_their_set_play_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.stoped_cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_team_score_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_team_score_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.is_penalty_kick_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.helios_home_positions_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_defense_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_defense_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.our_defense_player_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::WorldModel, _impl_.their_defense_player_line_x_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::State, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::State, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::State, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::State, _impl_.world_model_),
        PROTOBUF_FIELD_OFFSET(::protos::State, _impl_.full_world_model_),
        PROTOBUF_FIELD_OFFSET(::protos::State, _impl_.need_preprocess_),
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::InitMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::InitMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::InitMessage, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::InitMessage, _impl_.debug_mode_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Dash, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Dash, _impl_.power_),
        PROTOBUF_FIELD_OFFSET(::protos::Dash, _impl_.relative_direction_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Turn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Turn, _impl_.relative_direction_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Kick, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Kick, _impl_.power_),
        PROTOBUF_FIELD_OFFSET(::protos::Kick, _impl_.relative_direction_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Tackle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Tackle, _impl_.power_or_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::Tackle, _impl_.foul_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Catch, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Move, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::protos::Move, _impl_.y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::TurnNeck, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::TurnNeck, _impl_.moment_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::ChangeView, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::ChangeView, _impl_.view_width_),
        PROTOBUF_FIELD_OFFSET(::protos::BallMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::BallMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BallMessage, _impl_.ball_position_),
        PROTOBUF_FIELD_OFFSET(::protos::BallMessage, _impl_.ball_velocity_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _impl_.receiver_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _impl_.receiver_point_),
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _impl_.ball_position_),
        PROTOBUF_FIELD_OFFSET(::protos::PassMessage, _impl_.ball_velocity_),
        ~0u,
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::InterceptMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::InterceptMessage, _impl_.our_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptMessage, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::InterceptMessage, _impl_.cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::GoalieMessage, _impl_.goalie_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieMessage, _impl_.goalie_position_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieMessage, _impl_.goalie_body_direction_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_.goalie_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_.goalie_position_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_.goalie_body_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_.player_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::GoalieAndPlayerMessage, _impl_.player_position_),
        ~0u,
        0,
        ~0u,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::OffsideLineMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::OffsideLineMessage, _impl_.offside_line_x_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DefenseLineMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DefenseLineMessage, _impl_.defense_line_x_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::WaitRequestMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::SetplayMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::SetplayMessage, _impl_.wait_step_),
        PROTOBUF_FIELD_OFFSET(::protos::PassRequestMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::PassRequestMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PassRequestMessage, _impl_.target_point_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::StaminaMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::StaminaMessage, _impl_.stamina_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::RecoveryMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RecoveryMessage, _impl_.recovery_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::StaminaCapacityMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::StaminaCapacityMessage, _impl_.stamina_capacity_),
        PROTOBUF_FIELD_OFFSET(::protos::DribbleMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::DribbleMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DribbleMessage, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::DribbleMessage, _impl_.queue_count_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _impl_.ball_position_),
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _impl_.ball_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _impl_.goalie_position_),
        PROTOBUF_FIELD_OFFSET(::protos::BallGoalieMessage, _impl_.goalie_body_direction_),
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::OnePlayerMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::OnePlayerMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::OnePlayerMessage, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::OnePlayerMessage, _impl_.position_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _impl_.first_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _impl_.first_position_),
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _impl_.second_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::TwoPlayerMessage, _impl_.second_position_),
        ~0u,
        0,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.first_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.first_position_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.second_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.second_position_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.third_uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::ThreePlayerMessage, _impl_.third_position_),
        ~0u,
        0,
        ~0u,
        1,
        ~0u,
        2,
        PROTOBUF_FIELD_OFFSET(::protos::SelfMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::SelfMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::SelfMessage, _impl_.self_position_),
        PROTOBUF_FIELD_OFFSET(::protos::SelfMessage, _impl_.self_body_direction_),
        PROTOBUF_FIELD_OFFSET(::protos::SelfMessage, _impl_.self_stamina_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::TeammateMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::TeammateMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::TeammateMessage, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::TeammateMessage, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::TeammateMessage, _impl_.body_direction_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::OpponentMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::OpponentMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::OpponentMessage, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::OpponentMessage, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::OpponentMessage, _impl_.body_direction_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_.ball_position_),
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_.ball_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_.player_position_),
        PROTOBUF_FIELD_OFFSET(::protos::BallPlayerMessage, _impl_.body_direction_),
        0,
        1,
        ~0u,
        2,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Say, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::protos::Say, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::protos::Say, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::PointTo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PointTo, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::protos::PointTo, _impl_.y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::PointToOf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::AttentionTo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AttentionTo, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protos::AttentionTo, _impl_.unum_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::AttentionToOf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::AddText, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddText, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddText, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::protos::AddPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddPoint, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddPoint, _impl_.point_),
        PROTOBUF_FIELD_OFFSET(::protos::AddPoint, _impl_.color_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _impl_.start_),
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _impl_.end_),
        PROTOBUF_FIELD_OFFSET(::protos::AddLine, _impl_.color_),
        ~0u,
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.center_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.radius_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.start_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.span_angel_),
        PROTOBUF_FIELD_OFFSET(::protos::AddArc, _impl_.color_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_.center_),
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_.radius_),
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::protos::AddCircle, _impl_.fill_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.point1_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.point2_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.point3_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::protos::AddTriangle, _impl_.fill_),
        ~0u,
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.left_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.top_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.length_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::protos::AddRectangle, _impl_.fill_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.center_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.min_radius_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.max_radius_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.start_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.span_angel_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::protos::AddSector, _impl_.fill_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::protos::AddMessage, _impl_.color_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Log, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::protos::Log, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::protos::Log, _impl_.log_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DebugClient, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DebugClient, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPoint, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPoint, _impl_.distance_threshold_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPoint, _impl_.max_dash_power_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _impl_.first_speed_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _impl_.first_speed_threshold_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_SmartKick, _impl_.max_steps_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BeforeKickOff, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BeforeKickOff, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BeforeKickOff, _impl_.point_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BodyNeckToBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BodyNeckToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BodyNeckToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_BodyNeckToPoint, _impl_.point_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_Emergency, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_GoToPointLookBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_GoToPointLookBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_GoToPointLookBall, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_GoToPointLookBall, _impl_.distance_threshold_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_GoToPointLookBall, _impl_.max_dash_power_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToBall, _impl_.angle_buf_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToPoint, _impl_.point_),
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_NeckBodyToPoint, _impl_.angle_buf_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Bhv_ScanField, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_AdvanceBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_ClearBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_.distance_threshold_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_.dash_power_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_.dash_count_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Dribble, _impl_.dodge_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPointDodge, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPointDodge, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPointDodge, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_GoToPointDodge, _impl_.dash_power_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Body_HoldBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_HoldBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_HoldBall, _impl_.do_turn_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_HoldBall, _impl_.turn_target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_HoldBall, _impl_.kick_target_point_),
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::Body_Intercept, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Intercept, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_Intercept, _impl_.save_recovery_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_Intercept, _impl_.face_point_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::protos::Body_KickOneStep, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_KickOneStep, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_KickOneStep, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_KickOneStep, _impl_.first_speed_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_KickOneStep, _impl_.force_mode_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_StopBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_StopDash, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_StopDash, _impl_.save_recovery_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TackleToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TackleToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_TackleToPoint, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TackleToPoint, _impl_.min_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TackleToPoint, _impl_.min_speed_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToAngle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToAngle, _impl_.angle_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToBall, _impl_.cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToPoint, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::Body_TurnToPoint, _impl_.cycle_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Focus_MoveToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Focus_MoveToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Focus_MoveToPoint, _impl_.target_point_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Focus_Reset, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_ScanField, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_ScanPlayers, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallAndPlayer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallAndPlayer, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallAndPlayer, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallAndPlayer, _impl_.count_threshold_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallOrScan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBallOrScan, _impl_.count_threshold_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToGoalieOrScan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToGoalieOrScan, _impl_.count_threshold_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToLowConfTeammate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPlayerOrScan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPlayerOrScan, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPlayerOrScan, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPlayerOrScan, _impl_.count_threshold_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToPoint, _impl_.target_point_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToRelative, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Neck_TurnToRelative, _impl_.angle_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::View_ChangeWidth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::View_ChangeWidth, _impl_.view_width_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::View_Normal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::View_Synch, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::View_Wide, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosGoalie, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosGoalieMove, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosGoalieKick, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosShoot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.direct_pass_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.lead_pass_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.through_pass_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.short_dribble_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.long_dribble_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.cross_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.simple_pass_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.simple_dribble_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.simple_shoot_),
        PROTOBUF_FIELD_OFFSET(::protos::HeliosOffensivePlanner, _impl_.server_side_decision_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosBasicOffensive, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosBasicMove, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosSetPlay, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosPenalty, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::HeliosCommunicaion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::PlayerAction, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::protos::PlayerAction, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::protos::PlayerAction, _impl_.action_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::PlayerActions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PlayerActions, _impl_.actions_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerActions, _impl_.ignore_preprocess_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::ChangePlayerType, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::ChangePlayerType, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::ChangePlayerType, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoHeliosSubstitute, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoHeliosSayPlayerTypes, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::CoachAction, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::protos::CoachAction, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::protos::CoachAction, _impl_.action_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::CoachActions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::CoachActions, _impl_.actions_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoKickOff, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DoMoveBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMoveBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DoMoveBall, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMoveBall, _impl_.velocity_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _impl_.our_side_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::protos::DoMovePlayer, _impl_.body_direction_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoRecover, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoChangeMode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DoChangeMode, _impl_.game_mode_type_),
        PROTOBUF_FIELD_OFFSET(::protos::DoChangeMode, _impl_.side_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::DoChangePlayerType, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::DoChangePlayerType, _impl_.our_side_),
        PROTOBUF_FIELD_OFFSET(::protos::DoChangePlayerType, _impl_.uniform_number_),
        PROTOBUF_FIELD_OFFSET(::protos::DoChangePlayerType, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::TrainerAction, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::protos::TrainerAction, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::protos::TrainerAction, _impl_.action_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::TrainerActions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::TrainerActions, _impl_.actions_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.inertia_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_decay_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_rand_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_weight_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_speed_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_accel_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.stamina_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.stamina_inc_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.recover_init_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.recover_dec_thr_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.recover_min_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.recover_dec_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_init_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_dec_thr_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_min_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_dec_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_inc_thr_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.effort_inc_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kick_rand_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.team_actuator_noise_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_rand_factor_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_rand_factor_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kick_rand_factor_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kick_rand_factor_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_decay_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_rand_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_weight_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_speed_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_accel_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dash_power_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kick_power_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kickable_margin_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.control_radius_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.control_radius_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_neck_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_neck_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_neck_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_neck_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.visible_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.visible_distance_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.wind_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.wind_force_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.wind_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.wind_rand_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kickable_area_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.catch_area_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.catch_area_w_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.catch_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.goalie_max_moves_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.corner_kick_margin_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.offside_active_area_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.wind_none_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_wind_random_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_say_count_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_say_msg_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_win_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_define_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_meta_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_advice_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_info_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_mess_delay_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_mess_per_cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.half_time_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.simulator_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.send_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.recv_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.sense_body_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.lcm_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_say_msg_size_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_hear_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_hear_inc_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_hear_decay_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.catch_ban_cycle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.slow_down_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_offside_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kickoff_offside_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.offside_kick_margin_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.audio_cut_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dist_quantize_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.landmark_dist_quantize_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dir_quantize_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dist_quantize_step_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dist_quantize_step_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.landmark_dist_quantize_step_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.landmark_dist_quantize_step_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dir_quantize_step_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dir_quantize_step_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_with_referee_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_old_coach_hear_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.slowness_on_top_for_left_team_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.slowness_on_top_for_right_team_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.start_goal_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.start_goal_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.fullstate_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.fullstate_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.drop_ball_time_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.synch_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.synch_offset_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.synch_micro_sleep_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.point_to_ban_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.point_to_duration_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_port_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.trainer_port_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.online_coach_port_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.verbose_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_send_vi_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.replay_file_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.landmark_file_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.send_comms_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.text_logging_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_logging_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_log_version_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.text_log_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_log_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.text_log_fixed_name_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_log_fixed_name_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_text_log_fixed_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_game_log_fixed_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_text_log_dated_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_game_log_dated_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.log_date_format_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.log_times_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.record_message_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.text_log_compression_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_log_compression_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.use_profile_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_back_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_exponent_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_cycles_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_power_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.freeform_wait_period_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.freeform_send_period_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.free_kick_faults_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.back_passes_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.proper_goal_kicks_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.stopped_ball_vel_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_goal_kicks_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_del_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.clang_rule_win_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.auto_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.kick_off_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.connect_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.game_over_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.team_l_start_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.team_r_start_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_mode_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_length_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_logging_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_log_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_log_fixed_name_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_log_fixed_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_log_dated_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.keepaway_start_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.nr_normal_halfs_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.nr_extra_halfs_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.penalty_shoot_outs_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_before_setup_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_setup_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_ready_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_taken_wait_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_nr_kicks_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_max_extra_kicks_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_dist_x_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_random_winner_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_allow_mult_kicks_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_max_goalie_dist_x_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pen_coach_moves_players_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.module_dir_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.ball_stuck_area_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.coach_msg_file_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_tackle_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_back_tackle_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.player_speed_max_min_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.extra_stamina_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.synch_see_offset_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.extra_half_time_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.stamina_capacity_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_dash_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_dash_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.dash_angle_step_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.side_dash_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.back_dash_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_dash_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_dash_power_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.tackle_rand_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.foul_detect_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.foul_exponent_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.foul_cycles_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.golden_goal_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.red_card_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.illegal_defense_duration_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.illegal_defense_number_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.illegal_defense_dist_x_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.illegal_defense_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.fixed_teamname_l_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.fixed_teamname_r_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_catch_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.min_catch_angle_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.random_seed_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.long_kick_power_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.long_kick_delay_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.max_monitors_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.catchable_area_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.real_speed_max_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pitch_half_length_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.pitch_half_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.our_penalty_area_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.their_penalty_area_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.penalty_area_half_width_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.penalty_area_length_),
        PROTOBUF_FIELD_OFFSET(::protos::ServerParam, _impl_.goal_width_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_types_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.subs_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.pt_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.allow_mult_default_type_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_speed_max_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_speed_max_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.stamina_inc_max_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_decay_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_decay_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.inertia_moment_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.dash_power_rate_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.dash_power_rate_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.player_size_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.kickable_margin_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.kickable_margin_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.kick_rand_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.extra_stamina_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.extra_stamina_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.effort_max_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.effort_min_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.random_seed_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.new_dash_power_rate_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.new_dash_power_rate_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.new_stamina_inc_max_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.kick_power_rate_delta_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.kick_power_rate_delta_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.foul_detect_probability_delta_factor_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.catchable_area_l_stretch_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerParam, _impl_.catchable_area_l_stretch_max_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.stamina_inc_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.player_decay_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.inertia_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.dash_power_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.player_size_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.kickable_margin_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.kick_rand_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.extra_stamina_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.effort_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.effort_min_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.kick_power_rate_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.foul_detect_probability_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.catchable_area_l_stretch_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.unum_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.unum_too_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.team_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.team_too_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.player_max_observation_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.ball_vel_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.ball_vel_too_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.ball_max_observation_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.flag_chg_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.flag_chg_too_far_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.flag_max_observation_length_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.kickable_area_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.reliable_catchable_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.max_catchable_dist_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.real_speed_max_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.player_speed_max2_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.real_speed_max2_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.cycles_to_reach_max_speed_),
        PROTOBUF_FIELD_OFFSET(::protos::PlayerType, _impl_.player_speed_max_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.category_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.sender_unum_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.target_unum_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.target_point_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.first_ball_speed_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.first_turn_moment_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.first_dash_power_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.first_dash_angle_relative_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.duration_step_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.kick_count_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.turn_count_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.dash_count_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.final_action_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcCooperativeAction, _impl_.parent_index_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.spend_time_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.ball_holder_unum_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.ball_position_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.ball_velocity_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.our_defense_line_x_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcPredictState, _impl_.our_offense_line_x_),
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::RpcActionState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcActionState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::RpcActionState, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcActionState, _impl_.predict_state_),
        PROTOBUF_FIELD_OFFSET(::protos::RpcActionState, _impl_.evaluation_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest_PairsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest, _impl_.register_response_),
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest, _impl_.pairs_),
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionRequest, _impl_.state_),
        0,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::BestPlannerActionResponse, _impl_.index_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Empty, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::protos::RpcVector2D)},
        {12, -1, -1, sizeof(::protos::RegisterRequest)},
        {24, -1, -1, sizeof(::protos::RegisterResponse)},
        {37, 62, -1, sizeof(::protos::Ball)},
        {79, 117, -1, sizeof(::protos::Player)},
        {147, 194, -1, sizeof(::protos::Self)},
        {233, 251, -1, sizeof(::protos::InterceptInfo)},
        {261, -1, -1, sizeof(::protos::InterceptTable)},
        {279, 289, -1, sizeof(::protos::WorldModel_OurPlayersDictEntry_DoNotUse)},
        {291, 301, -1, sizeof(::protos::WorldModel_TheirPlayersDictEntry_DoNotUse)},
        {303, 313, -1, sizeof(::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse)},
        {315, 358, -1, sizeof(::protos::WorldModel)},
        {393, 405, -1, sizeof(::protos::State)},
        {409, 419, -1, sizeof(::protos::InitMessage)},
        {421, -1, -1, sizeof(::protos::Dash)},
        {431, -1, -1, sizeof(::protos::Turn)},
        {440, -1, -1, sizeof(::protos::Kick)},
        {450, -1, -1, sizeof(::protos::Tackle)},
        {460, -1, -1, sizeof(::protos::Catch)},
        {468, -1, -1, sizeof(::protos::Move)},
        {478, -1, -1, sizeof(::protos::TurnNeck)},
        {487, -1, -1, sizeof(::protos::ChangeView)},
        {496, 506, -1, sizeof(::protos::BallMessage)},
        {508, 520, -1, sizeof(::protos::PassMessage)},
        {524, -1, -1, sizeof(::protos::InterceptMessage)},
        {535, 546, -1, sizeof(::protos::GoalieMessage)},
        {549, 562, -1, sizeof(::protos::GoalieAndPlayerMessage)},
        {567, -1, -1, sizeof(::protos::OffsideLineMessage)},
        {576, -1, -1, sizeof(::protos::DefenseLineMessage)},
        {585, -1, -1, sizeof(::protos::WaitRequestMessage)},
        {593, -1, -1, sizeof(::protos::SetplayMessage)},
        {602, 611, -1, sizeof(::protos::PassRequestMessage)},
        {612, -1, -1, sizeof(::protos::StaminaMessage)},
        {621, -1, -1, sizeof(::protos::RecoveryMessage)},
        {630, -1, -1, sizeof(::protos::StaminaCapacityMessage)},
        {639, 649, -1, sizeof(::protos::DribbleMessage)},
        {651, 663, -1, sizeof(::protos::BallGoalieMessage)},
        {667, 677, -1, sizeof(::protos::OnePlayerMessage)},
        {679, 691, -1, sizeof(::protos::TwoPlayerMessage)},
        {695, 709, -1, sizeof(::protos::ThreePlayerMessage)},
        {715, 726, -1, sizeof(::protos::SelfMessage)},
        {729, 740, -1, sizeof(::protos::TeammateMessage)},
        {743, 754, -1, sizeof(::protos::OpponentMessage)},
        {757, 770, -1, sizeof(::protos::BallPlayerMessage)},
        {775, -1, -1, sizeof(::protos::Say)},
        {806, -1, -1, sizeof(::protos::PointTo)},
        {816, -1, -1, sizeof(::protos::PointToOf)},
        {824, -1, -1, sizeof(::protos::AttentionTo)},
        {834, -1, -1, sizeof(::protos::AttentionToOf)},
        {842, -1, -1, sizeof(::protos::AddText)},
        {852, 863, -1, sizeof(::protos::AddPoint)},
        {866, 878, -1, sizeof(::protos::AddLine)},
        {882, 896, -1, sizeof(::protos::AddArc)},
        {902, 915, -1, sizeof(::protos::AddCircle)},
        {920, 934, -1, sizeof(::protos::AddTriangle)},
        {940, -1, -1, sizeof(::protos::AddRectangle)},
        {955, 971, -1, sizeof(::protos::AddSector)},
        {979, 991, -1, sizeof(::protos::AddMessage)},
        {995, -1, -1, sizeof(::protos::Log)},
        {1013, -1, -1, sizeof(::protos::DebugClient)},
        {1022, 1033, -1, sizeof(::protos::Body_GoToPoint)},
        {1036, 1048, -1, sizeof(::protos::Body_SmartKick)},
        {1052, 1061, -1, sizeof(::protos::Bhv_BeforeKickOff)},
        {1062, -1, -1, sizeof(::protos::Bhv_BodyNeckToBall)},
        {1070, 1079, -1, sizeof(::protos::Bhv_BodyNeckToPoint)},
        {1080, -1, -1, sizeof(::protos::Bhv_Emergency)},
        {1088, 1099, -1, sizeof(::protos::Bhv_GoToPointLookBall)},
        {1102, -1, -1, sizeof(::protos::Bhv_NeckBodyToBall)},
        {1111, 1121, -1, sizeof(::protos::Bhv_NeckBodyToPoint)},
        {1123, -1, -1, sizeof(::protos::Bhv_ScanField)},
        {1131, -1, -1, sizeof(::protos::Body_AdvanceBall)},
        {1139, -1, -1, sizeof(::protos::Body_ClearBall)},
        {1147, 1160, -1, sizeof(::protos::Body_Dribble)},
        {1165, 1175, -1, sizeof(::protos::Body_GoToPointDodge)},
        {1177, 1188, -1, sizeof(::protos::Body_HoldBall)},
        {1191, 1201, -1, sizeof(::protos::Body_Intercept)},
        {1203, 1214, -1, sizeof(::protos::Body_KickOneStep)},
        {1217, -1, -1, sizeof(::protos::Body_StopBall)},
        {1225, -1, -1, sizeof(::protos::Body_StopDash)},
        {1234, 1245, -1, sizeof(::protos::Body_TackleToPoint)},
        {1248, -1, -1, sizeof(::protos::Body_TurnToAngle)},
        {1257, -1, -1, sizeof(::protos::Body_TurnToBall)},
        {1266, 1276, -1, sizeof(::protos::Body_TurnToPoint)},
        {1278, 1287, -1, sizeof(::protos::Focus_MoveToPoint)},
        {1288, -1, -1, sizeof(::protos::Focus_Reset)},
        {1296, -1, -1, sizeof(::protos::Neck_ScanField)},
        {1304, -1, -1, sizeof(::protos::Neck_ScanPlayers)},
        {1312, -1, -1, sizeof(::protos::Neck_TurnToBallAndPlayer)},
        {1323, -1, -1, sizeof(::protos::Neck_TurnToBallOrScan)},
        {1332, -1, -1, sizeof(::protos::Neck_TurnToBall)},
        {1340, -1, -1, sizeof(::protos::Neck_TurnToGoalieOrScan)},
        {1349, -1, -1, sizeof(::protos::Neck_TurnToLowConfTeammate)},
        {1357, -1, -1, sizeof(::protos::Neck_TurnToPlayerOrScan)},
        {1368, 1377, -1, sizeof(::protos::Neck_TurnToPoint)},
        {1378, -1, -1, sizeof(::protos::Neck_TurnToRelative)},
        {1387, -1, -1, sizeof(::protos::View_ChangeWidth)},
        {1396, -1, -1, sizeof(::protos::View_Normal)},
        {1404, -1, -1, sizeof(::protos::View_Synch)},
        {1412, -1, -1, sizeof(::protos::View_Wide)},
        {1420, -1, -1, sizeof(::protos::HeliosGoalie)},
        {1428, -1, -1, sizeof(::protos::HeliosGoalieMove)},
        {1436, -1, -1, sizeof(::protos::HeliosGoalieKick)},
        {1444, -1, -1, sizeof(::protos::HeliosShoot)},
        {1452, -1, -1, sizeof(::protos::HeliosOffensivePlanner)},
        {1470, -1, -1, sizeof(::protos::HeliosBasicOffensive)},
        {1478, -1, -1, sizeof(::protos::HeliosBasicMove)},
        {1486, -1, -1, sizeof(::protos::HeliosSetPlay)},
        {1494, -1, -1, sizeof(::protos::HeliosPenalty)},
        {1502, -1, -1, sizeof(::protos::HeliosCommunicaion)},
        {1510, -1, -1, sizeof(::protos::PlayerAction)},
        {1583, -1, -1, sizeof(::protos::PlayerActions)},
        {1593, -1, -1, sizeof(::protos::ChangePlayerType)},
        {1603, -1, -1, sizeof(::protos::DoHeliosSubstitute)},
        {1611, -1, -1, sizeof(::protos::DoHeliosSayPlayerTypes)},
        {1619, -1, -1, sizeof(::protos::CoachAction)},
        {1631, -1, -1, sizeof(::protos::CoachActions)},
        {1640, -1, -1, sizeof(::protos::DoKickOff)},
        {1648, 1658, -1, sizeof(::protos::DoMoveBall)},
        {1660, 1672, -1, sizeof(::protos::DoMovePlayer)},
        {1676, -1, -1, sizeof(::protos::DoRecover)},
        {1684, -1, -1, sizeof(::protos::DoChangeMode)},
        {1694, -1, -1, sizeof(::protos::DoChangePlayerType)},
        {1705, -1, -1, sizeof(::protos::TrainerAction)},
        {1720, -1, -1, sizeof(::protos::TrainerActions)},
        {1729, 1959, -1, sizeof(::protos::ServerParam)},
        {2181, 2219, -1, sizeof(::protos::PlayerParam)},
        {2249, 2291, -1, sizeof(::protos::PlayerType)},
        {2325, 2349, -1, sizeof(::protos::RpcCooperativeAction)},
        {2365, 2379, -1, sizeof(::protos::RpcPredictState)},
        {2385, 2396, -1, sizeof(::protos::RpcActionState)},
        {2399, 2409, -1, sizeof(::protos::BestPlannerActionRequest_PairsEntry_DoNotUse)},
        {2411, 2422, -1, sizeof(::protos::BestPlannerActionRequest)},
        {2425, -1, -1, sizeof(::protos::BestPlannerActionResponse)},
        {2434, -1, -1, sizeof(::protos::Empty)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protos::_RpcVector2D_default_instance_._instance,
    &::protos::_RegisterRequest_default_instance_._instance,
    &::protos::_RegisterResponse_default_instance_._instance,
    &::protos::_Ball_default_instance_._instance,
    &::protos::_Player_default_instance_._instance,
    &::protos::_Self_default_instance_._instance,
    &::protos::_InterceptInfo_default_instance_._instance,
    &::protos::_InterceptTable_default_instance_._instance,
    &::protos::_WorldModel_OurPlayersDictEntry_DoNotUse_default_instance_._instance,
    &::protos::_WorldModel_TheirPlayersDictEntry_DoNotUse_default_instance_._instance,
    &::protos::_WorldModel_HeliosHomePositionsEntry_DoNotUse_default_instance_._instance,
    &::protos::_WorldModel_default_instance_._instance,
    &::protos::_State_default_instance_._instance,
    &::protos::_InitMessage_default_instance_._instance,
    &::protos::_Dash_default_instance_._instance,
    &::protos::_Turn_default_instance_._instance,
    &::protos::_Kick_default_instance_._instance,
    &::protos::_Tackle_default_instance_._instance,
    &::protos::_Catch_default_instance_._instance,
    &::protos::_Move_default_instance_._instance,
    &::protos::_TurnNeck_default_instance_._instance,
    &::protos::_ChangeView_default_instance_._instance,
    &::protos::_BallMessage_default_instance_._instance,
    &::protos::_PassMessage_default_instance_._instance,
    &::protos::_InterceptMessage_default_instance_._instance,
    &::protos::_GoalieMessage_default_instance_._instance,
    &::protos::_GoalieAndPlayerMessage_default_instance_._instance,
    &::protos::_OffsideLineMessage_default_instance_._instance,
    &::protos::_DefenseLineMessage_default_instance_._instance,
    &::protos::_WaitRequestMessage_default_instance_._instance,
    &::protos::_SetplayMessage_default_instance_._instance,
    &::protos::_PassRequestMessage_default_instance_._instance,
    &::protos::_StaminaMessage_default_instance_._instance,
    &::protos::_RecoveryMessage_default_instance_._instance,
    &::protos::_StaminaCapacityMessage_default_instance_._instance,
    &::protos::_DribbleMessage_default_instance_._instance,
    &::protos::_BallGoalieMessage_default_instance_._instance,
    &::protos::_OnePlayerMessage_default_instance_._instance,
    &::protos::_TwoPlayerMessage_default_instance_._instance,
    &::protos::_ThreePlayerMessage_default_instance_._instance,
    &::protos::_SelfMessage_default_instance_._instance,
    &::protos::_TeammateMessage_default_instance_._instance,
    &::protos::_OpponentMessage_default_instance_._instance,
    &::protos::_BallPlayerMessage_default_instance_._instance,
    &::protos::_Say_default_instance_._instance,
    &::protos::_PointTo_default_instance_._instance,
    &::protos::_PointToOf_default_instance_._instance,
    &::protos::_AttentionTo_default_instance_._instance,
    &::protos::_AttentionToOf_default_instance_._instance,
    &::protos::_AddText_default_instance_._instance,
    &::protos::_AddPoint_default_instance_._instance,
    &::protos::_AddLine_default_instance_._instance,
    &::protos::_AddArc_default_instance_._instance,
    &::protos::_AddCircle_default_instance_._instance,
    &::protos::_AddTriangle_default_instance_._instance,
    &::protos::_AddRectangle_default_instance_._instance,
    &::protos::_AddSector_default_instance_._instance,
    &::protos::_AddMessage_default_instance_._instance,
    &::protos::_Log_default_instance_._instance,
    &::protos::_DebugClient_default_instance_._instance,
    &::protos::_Body_GoToPoint_default_instance_._instance,
    &::protos::_Body_SmartKick_default_instance_._instance,
    &::protos::_Bhv_BeforeKickOff_default_instance_._instance,
    &::protos::_Bhv_BodyNeckToBall_default_instance_._instance,
    &::protos::_Bhv_BodyNeckToPoint_default_instance_._instance,
    &::protos::_Bhv_Emergency_default_instance_._instance,
    &::protos::_Bhv_GoToPointLookBall_default_instance_._instance,
    &::protos::_Bhv_NeckBodyToBall_default_instance_._instance,
    &::protos::_Bhv_NeckBodyToPoint_default_instance_._instance,
    &::protos::_Bhv_ScanField_default_instance_._instance,
    &::protos::_Body_AdvanceBall_default_instance_._instance,
    &::protos::_Body_ClearBall_default_instance_._instance,
    &::protos::_Body_Dribble_default_instance_._instance,
    &::protos::_Body_GoToPointDodge_default_instance_._instance,
    &::protos::_Body_HoldBall_default_instance_._instance,
    &::protos::_Body_Intercept_default_instance_._instance,
    &::protos::_Body_KickOneStep_default_instance_._instance,
    &::protos::_Body_StopBall_default_instance_._instance,
    &::protos::_Body_StopDash_default_instance_._instance,
    &::protos::_Body_TackleToPoint_default_instance_._instance,
    &::protos::_Body_TurnToAngle_default_instance_._instance,
    &::protos::_Body_TurnToBall_default_instance_._instance,
    &::protos::_Body_TurnToPoint_default_instance_._instance,
    &::protos::_Focus_MoveToPoint_default_instance_._instance,
    &::protos::_Focus_Reset_default_instance_._instance,
    &::protos::_Neck_ScanField_default_instance_._instance,
    &::protos::_Neck_ScanPlayers_default_instance_._instance,
    &::protos::_Neck_TurnToBallAndPlayer_default_instance_._instance,
    &::protos::_Neck_TurnToBallOrScan_default_instance_._instance,
    &::protos::_Neck_TurnToBall_default_instance_._instance,
    &::protos::_Neck_TurnToGoalieOrScan_default_instance_._instance,
    &::protos::_Neck_TurnToLowConfTeammate_default_instance_._instance,
    &::protos::_Neck_TurnToPlayerOrScan_default_instance_._instance,
    &::protos::_Neck_TurnToPoint_default_instance_._instance,
    &::protos::_Neck_TurnToRelative_default_instance_._instance,
    &::protos::_View_ChangeWidth_default_instance_._instance,
    &::protos::_View_Normal_default_instance_._instance,
    &::protos::_View_Synch_default_instance_._instance,
    &::protos::_View_Wide_default_instance_._instance,
    &::protos::_HeliosGoalie_default_instance_._instance,
    &::protos::_HeliosGoalieMove_default_instance_._instance,
    &::protos::_HeliosGoalieKick_default_instance_._instance,
    &::protos::_HeliosShoot_default_instance_._instance,
    &::protos::_HeliosOffensivePlanner_default_instance_._instance,
    &::protos::_HeliosBasicOffensive_default_instance_._instance,
    &::protos::_HeliosBasicMove_default_instance_._instance,
    &::protos::_HeliosSetPlay_default_instance_._instance,
    &::protos::_HeliosPenalty_default_instance_._instance,
    &::protos::_HeliosCommunicaion_default_instance_._instance,
    &::protos::_PlayerAction_default_instance_._instance,
    &::protos::_PlayerActions_default_instance_._instance,
    &::protos::_ChangePlayerType_default_instance_._instance,
    &::protos::_DoHeliosSubstitute_default_instance_._instance,
    &::protos::_DoHeliosSayPlayerTypes_default_instance_._instance,
    &::protos::_CoachAction_default_instance_._instance,
    &::protos::_CoachActions_default_instance_._instance,
    &::protos::_DoKickOff_default_instance_._instance,
    &::protos::_DoMoveBall_default_instance_._instance,
    &::protos::_DoMovePlayer_default_instance_._instance,
    &::protos::_DoRecover_default_instance_._instance,
    &::protos::_DoChangeMode_default_instance_._instance,
    &::protos::_DoChangePlayerType_default_instance_._instance,
    &::protos::_TrainerAction_default_instance_._instance,
    &::protos::_TrainerActions_default_instance_._instance,
    &::protos::_ServerParam_default_instance_._instance,
    &::protos::_PlayerParam_default_instance_._instance,
    &::protos::_PlayerType_default_instance_._instance,
    &::protos::_RpcCooperativeAction_default_instance_._instance,
    &::protos::_RpcPredictState_default_instance_._instance,
    &::protos::_RpcActionState_default_instance_._instance,
    &::protos::_BestPlannerActionRequest_PairsEntry_DoNotUse_default_instance_._instance,
    &::protos::_BestPlannerActionRequest_default_instance_._instance,
    &::protos::_BestPlannerActionResponse_default_instance_._instance,
    &::protos::_Empty_default_instance_._instance,
};
const char descriptor_table_protodef_service_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rservice.proto\022\006protos\"@\n\013RpcVector2D\022\t"
    "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\014\n\004dist\030\003 \001(\002\022\r\n\005an"
    "gle\030\004 \001(\002\"x\n\017RegisterRequest\022%\n\nagent_ty"
    "pe\030\001 \001(\0162\021.protos.AgentType\022\021\n\tteam_name"
    "\030\002 \001(\t\022\026\n\016uniform_number\030\003 \001(\005\022\023\n\013rpc_ve"
    "rsion\030\004 \001(\005\"\270\001\n\020RegisterResponse\022\021\n\tclie"
    "nt_id\030\001 \001(\005\022%\n\nagent_type\030\002 \001(\0162\021.protos"
    ".AgentType\022\021\n\tteam_name\030\003 \001(\t\022\026\n\016uniform"
    "_number\030\004 \001(\005\022\?\n\030rpc_server_language_typ"
    "e\030\005 \001(\0162\035.protos.RpcServerLanguageType\"\230"
    "\004\n\004Ball\022%\n\010position\030\001 \001(\0132\023.protos.RpcVe"
    "ctor2D\022.\n\021relative_position\030\002 \001(\0132\023.prot"
    "os.RpcVector2D\022*\n\rseen_position\030\003 \001(\0132\023."
    "protos.RpcVector2D\022+\n\016heard_position\030\004 \001"
    "(\0132\023.protos.RpcVector2D\022%\n\010velocity\030\005 \001("
    "\0132\023.protos.RpcVector2D\022*\n\rseen_velocity\030"
    "\006 \001(\0132\023.protos.RpcVector2D\022+\n\016heard_velo"
    "city\030\007 \001(\0132\023.protos.RpcVector2D\022\021\n\tpos_c"
    "ount\030\010 \001(\005\022\026\n\016seen_pos_count\030\t \001(\005\022\027\n\017he"
    "ard_pos_count\030\n \001(\005\022\021\n\tvel_count\030\013 \001(\005\022\026"
    "\n\016seen_vel_count\030\014 \001(\005\022\027\n\017heard_vel_coun"
    "t\030\r \001(\005\022\022\n\nlost_count\030\016 \001(\005\022\023\n\013ghost_cou"
    "nt\030\017 \001(\005\022\026\n\016dist_from_self\030\020 \001(\002\022\027\n\017angl"
    "e_from_self\030\021 \001(\002\"\260\006\n\006Player\022%\n\010position"
    "\030\001 \001(\0132\023.protos.RpcVector2D\022*\n\rseen_posi"
    "tion\030\002 \001(\0132\023.protos.RpcVector2D\022+\n\016heard"
    "_position\030\003 \001(\0132\023.protos.RpcVector2D\022%\n\010"
    "velocity\030\004 \001(\0132\023.protos.RpcVector2D\022*\n\rs"
    "een_velocity\030\005 \001(\0132\023.protos.RpcVector2D\022"
    "\021\n\tpos_count\030\006 \001(\005\022\026\n\016seen_pos_count\030\007 \001"
    "(\005\022\027\n\017heard_pos_count\030\010 \001(\005\022\021\n\tvel_count"
    "\030\t \001(\005\022\026\n\016seen_vel_count\030\n \001(\005\022\023\n\013ghost_"
    "count\030\013 \001(\005\022\026\n\016dist_from_self\030\014 \001(\002\022\027\n\017a"
    "ngle_from_self\030\r \001(\002\022\n\n\002id\030\016 \001(\005\022\032\n\004side"
    "\030\017 \001(\0162\014.protos.Side\022\026\n\016uniform_number\030\020"
    " \001(\005\022\034\n\024uniform_number_count\030\021 \001(\005\022\021\n\tis"
    "_goalie\030\022 \001(\010\022\026\n\016body_direction\030\023 \001(\002\022\034\n"
    "\024body_direction_count\030\024 \001(\005\022\026\n\016face_dire"
    "ction\030\025 \001(\002\022\034\n\024face_direction_count\030\026 \001("
    "\005\022\032\n\022point_to_direction\030\027 \001(\002\022 \n\030point_t"
    "o_direction_count\030\030 \001(\005\022\022\n\nis_kicking\030\031 "
    "\001(\010\022\026\n\016dist_from_ball\030\032 \001(\002\022\027\n\017angle_fro"
    "m_ball\030\033 \001(\002\022\030\n\020ball_reach_steps\030\034 \001(\005\022\023"
    "\n\013is_tackling\030\035 \001(\010\022\017\n\007type_id\030\036 \001(\005\"\233\010\n"
    "\004Self\022%\n\010position\030\001 \001(\0132\023.protos.RpcVect"
    "or2D\022*\n\rseen_position\030\002 \001(\0132\023.protos.Rpc"
    "Vector2D\022+\n\016heard_position\030\003 \001(\0132\023.proto"
    "s.RpcVector2D\022%\n\010velocity\030\004 \001(\0132\023.protos"
    ".RpcVector2D\022*\n\rseen_velocity\030\005 \001(\0132\023.pr"
    "otos.RpcVector2D\022\021\n\tpos_count\030\006 \001(\005\022\026\n\016s"
    "een_pos_count\030\007 \001(\005\022\027\n\017heard_pos_count\030\010"
    " \001(\005\022\021\n\tvel_count\030\t \001(\005\022\026\n\016seen_vel_coun"
    "t\030\n \001(\005\022\023\n\013ghost_count\030\013 \001(\005\022\n\n\002id\030\014 \001(\005"
    "\022\032\n\004side\030\r \001(\0162\014.protos.Side\022\026\n\016uniform_"
    "number\030\016 \001(\005\022\034\n\024uniform_number_count\030\017 \001"
    "(\005\022\021\n\tis_goalie\030\020 \001(\010\022\026\n\016body_direction\030"
    "\021 \001(\002\022\034\n\024body_direction_count\030\022 \001(\005\022\026\n\016f"
    "ace_direction\030\023 \001(\002\022\034\n\024face_direction_co"
    "unt\030\024 \001(\005\022\032\n\022point_to_direction\030\025 \001(\002\022 \n"
    "\030point_to_direction_count\030\026 \001(\005\022\022\n\nis_ki"
    "cking\030\027 \001(\010\022\026\n\016dist_from_ball\030\030 \001(\002\022\027\n\017a"
    "ngle_from_ball\030\031 \001(\002\022\030\n\020ball_reach_steps"
    "\030\032 \001(\005\022\023\n\013is_tackling\030\033 \001(\010\022\037\n\027relative_"
    "neck_direction\030\034 \001(\002\022\017\n\007stamina\030\035 \001(\002\022\023\n"
    "\013is_kickable\030\036 \001(\010\022\031\n\021catch_probability\030"
    "\037 \001(\002\022\032\n\022tackle_probability\030  \001(\002\022\030\n\020fou"
    "l_probability\030! \001(\002\022%\n\nview_width\030\" \001(\0162"
    "\021.protos.ViewWidth\022\017\n\007type_id\030# \001(\005\022\021\n\tk"
    "ick_rate\030$ \001(\002\022\020\n\010recovery\030% \001(\002\022\030\n\020stam"
    "ina_capacity\030& \001(\002\022\036\n\004card\030\' \001(\0162\020.proto"
    "s.CardType\"\224\002\n\rInterceptInfo\0220\n\013action_t"
    "ype\030\001 \001(\0162\033.protos.InterceptActionType\022\022"
    "\n\nturn_steps\030\002 \001(\005\022\022\n\nturn_angle\030\003 \001(\002\022\022"
    "\n\ndash_steps\030\004 \001(\005\022\022\n\ndash_power\030\005 \001(\002\022\020"
    "\n\010dash_dir\030\006 \001(\002\0220\n\023final_self_position\030"
    "\007 \001(\0132\023.protos.RpcVector2D\022\027\n\017final_ball"
    "_dist\030\010 \001(\002\022\025\n\rfinal_stamina\030\t \001(\002\022\r\n\005va"
    "lue\030\n \001(\002\"\336\002\n\016InterceptTable\022\030\n\020self_rea"
    "ch_steps\030\001 \001(\005\022\"\n\032first_teammate_reach_s"
    "teps\030\002 \001(\005\022#\n\033second_teammate_reach_step"
    "s\030\003 \001(\005\022\"\n\032first_opponent_reach_steps\030\004 "
    "\001(\005\022#\n\033second_opponent_reach_steps\030\005 \001(\005"
    "\022\031\n\021first_teammate_id\030\006 \001(\005\022\032\n\022second_te"
    "ammate_id\030\007 \001(\005\022\031\n\021first_opponent_id\030\010 \001"
    "(\005\022\032\n\022second_opponent_id\030\t \001(\005\0222\n\023self_i"
    "ntercept_info\030\n \003(\0132\025.protos.InterceptIn"
    "fo\"\223\013\n\nWorldModel\022/\n\017intercept_table\030\001 \001"
    "(\0132\026.protos.InterceptTable\022\025\n\rour_team_n"
    "ame\030\002 \001(\t\022\027\n\017their_team_name\030\003 \001(\t\022\036\n\010ou"
    "r_side\030\004 \001(\0162\014.protos.Side\022 \n\030last_set_p"
    "lay_start_time\030\005 \001(\005\022\032\n\004self\030\006 \001(\0132\014.pro"
    "tos.Self\022\032\n\004ball\030\007 \001(\0132\014.protos.Ball\022!\n\t"
    "teammates\030\010 \003(\0132\016.protos.Player\022!\n\toppon"
    "ents\030\t \003(\0132\016.protos.Player\022 \n\010unknowns\030\n"
    " \003(\0132\016.protos.Player\022@\n\020our_players_dict"
    "\030\013 \003(\0132&.protos.WorldModel.OurPlayersDic"
    "tEntry\022D\n\022their_players_dict\030\014 \003(\0132(.pro"
    "tos.WorldModel.TheirPlayersDictEntry\022!\n\031"
    "our_goalie_uniform_number\030\r \001(\005\022#\n\033their"
    "_goalie_uniform_number\030\016 \001(\005\022\026\n\016offside_"
    "line_x\030\017 \001(\002\022\033\n\023ofside_line_x_count\030\020 \001("
    "\005\022\034\n\024kickable_teammate_id\030\021 \001(\005\022\034\n\024kicka"
    "ble_opponent_id\030\022 \001(\005\022$\n\016last_kick_side\030"
    "\023 \001(\0162\014.protos.Side\022\"\n\032last_kicker_unifo"
    "rm_number\030\024 \001(\005\022\r\n\005cycle\030\025 \001(\005\022,\n\016game_m"
    "ode_type\030\026 \001(\0162\024.protos.GameModeType\022\027\n\017"
    "left_team_score\030\027 \001(\005\022\030\n\020right_team_scor"
    "e\030\030 \001(\005\022\027\n\017is_our_set_play\030\031 \001(\010\022\031\n\021is_t"
    "heir_set_play\030\032 \001(\010\022\024\n\014stoped_cycle\030\033 \001("
    "\005\022\026\n\016our_team_score\030\034 \001(\005\022\030\n\020their_team_"
    "score\030\035 \001(\005\022\034\n\024is_penalty_kick_mode\030\036 \001("
    "\010\022J\n\025helios_home_positions\030\037 \003(\0132+.proto"
    "s.WorldModel.HeliosHomePositionsEntry\022\032\n"
    "\022our_defense_line_x\030  \001(\001\022\034\n\024their_defen"
    "se_line_x\030! \001(\001\022!\n\031our_defense_player_li"
    "ne_x\030\" \001(\001\022#\n\033their_defense_player_line_"
    "x\030# \001(\001\032E\n\023OurPlayersDictEntry\022\013\n\003key\030\001 "
    "\001(\005\022\035\n\005value\030\002 \001(\0132\016.protos.Player:\0028\001\032G"
    "\n\025TheirPlayersDictEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005"
    "value\030\002 \001(\0132\016.protos.Player:\0028\001\032O\n\030Helio"
    "sHomePositionsEntry\022\013\n\003key\030\001 \001(\005\022\"\n\005valu"
    "e\030\002 \001(\0132\023.protos.RpcVector2D:\0028\001\"\254\001\n\005Sta"
    "te\0223\n\021register_response\030\001 \001(\0132\030.protos.R"
    "egisterResponse\022\'\n\013world_model\030\002 \001(\0132\022.p"
    "rotos.WorldModel\022,\n\020full_world_model\030\003 \001"
    "(\0132\022.protos.WorldModel\022\027\n\017need_preproces"
    "s\030\004 \001(\010\"V\n\013InitMessage\0223\n\021register_respo"
    "nse\030\001 \001(\0132\030.protos.RegisterResponse\022\022\n\nd"
    "ebug_mode\030\002 \001(\010\"1\n\004Dash\022\r\n\005power\030\001 \001(\002\022\032"
    "\n\022relative_direction\030\002 \001(\002\"\"\n\004Turn\022\032\n\022re"
    "lative_direction\030\001 \001(\002\"1\n\004Kick\022\r\n\005power\030"
    "\001 \001(\002\022\032\n\022relative_direction\030\002 \001(\002\",\n\006Tac"
    "kle\022\024\n\014power_or_dir\030\001 \001(\002\022\014\n\004foul\030\002 \001(\010\""
    "\007\n\005Catch\"\034\n\004Move\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\032"
    "\n\010TurnNeck\022\016\n\006moment\030\001 \001(\002\"3\n\nChangeView"
    "\022%\n\nview_width\030\001 \001(\0162\021.protos.ViewWidth\""
    "e\n\013BallMessage\022*\n\rball_position\030\001 \001(\0132\023."
    "protos.RpcVector2D\022*\n\rball_velocity\030\002 \001("
    "\0132\023.protos.RpcVector2D\"\263\001\n\013PassMessage\022\037"
    "\n\027receiver_uniform_number\030\001 \001(\005\022+\n\016recei"
    "ver_point\030\002 \001(\0132\023.protos.RpcVector2D\022*\n\r"
    "ball_position\030\003 \001(\0132\023.protos.RpcVector2D"
    "\022*\n\rball_velocity\030\004 \001(\0132\023.protos.RpcVect"
    "or2D\"F\n\020InterceptMessage\022\013\n\003our\030\001 \001(\010\022\026\n"
    "\016uniform_number\030\002 \001(\005\022\r\n\005cycle\030\003 \001(\005\"{\n\r"
    "GoalieMessage\022\035\n\025goalie_uniform_number\030\001"
    " \001(\005\022,\n\017goalie_position\030\002 \001(\0132\023.protos.R"
    "pcVector2D\022\035\n\025goalie_body_direction\030\003 \001("
    "\002\"\321\001\n\026GoalieAndPlayerMessage\022\035\n\025goalie_u"
    "niform_number\030\001 \001(\005\022,\n\017goalie_position\030\002"
    " \001(\0132\023.protos.RpcVector2D\022\035\n\025goalie_body"
    "_direction\030\003 \001(\002\022\035\n\025player_uniform_numbe"
    "r\030\004 \001(\005\022,\n\017player_position\030\005 \001(\0132\023.proto"
    "s.RpcVector2D\",\n\022OffsideLineMessage\022\026\n\016o"
    "ffside_line_x\030\001 \001(\002\",\n\022DefenseLineMessag"
    "e\022\026\n\016defense_line_x\030\001 \001(\002\"\024\n\022WaitRequest"
    "Message\"#\n\016SetplayMessage\022\021\n\twait_step\030\001"
    " \001(\005\"\?\n\022PassRequestMessage\022)\n\014target_poi"
    "nt\030\001 \001(\0132\023.protos.RpcVector2D\"!\n\016Stamina"
    "Message\022\017\n\007stamina\030\001 \001(\002\"#\n\017RecoveryMess"
    "age\022\020\n\010recovery\030\001 \001(\002\"2\n\026StaminaCapacity"
    "Message\022\030\n\020stamina_capacity\030\001 \001(\002\"P\n\016Dri"
    "bbleMessage\022)\n\014target_point\030\001 \001(\0132\023.prot"
    "os.RpcVector2D\022\023\n\013queue_count\030\002 \001(\005\"\270\001\n\021"
    "BallGoalieMessage\022*\n\rball_position\030\001 \001(\013"
    "2\023.protos.RpcVector2D\022*\n\rball_velocity\030\002"
    " \001(\0132\023.protos.RpcVector2D\022,\n\017goalie_posi"
    "tion\030\003 \001(\0132\023.protos.RpcVector2D\022\035\n\025goali"
    "e_body_direction\030\004 \001(\002\"Q\n\020OnePlayerMessa"
    "ge\022\026\n\016uniform_number\030\001 \001(\005\022%\n\010position\030\002"
    " \001(\0132\023.protos.RpcVector2D\"\252\001\n\020TwoPlayerM"
    "essage\022\034\n\024first_uniform_number\030\001 \001(\005\022+\n\016"
    "first_position\030\002 \001(\0132\023.protos.RpcVector2"
    "D\022\035\n\025second_uniform_number\030\003 \001(\005\022,\n\017seco"
    "nd_position\030\004 \001(\0132\023.protos.RpcVector2D\"\367"
    "\001\n\022ThreePlayerMessage\022\034\n\024first_uniform_n"
    "umber\030\001 \001(\005\022+\n\016first_position\030\002 \001(\0132\023.pr"
    "otos.RpcVector2D\022\035\n\025second_uniform_numbe"
    "r\030\003 \001(\005\022,\n\017second_position\030\004 \001(\0132\023.proto"
    "s.RpcVector2D\022\034\n\024third_uniform_number\030\005 "
    "\001(\005\022+\n\016third_position\030\006 \001(\0132\023.protos.Rpc"
    "Vector2D\"l\n\013SelfMessage\022*\n\rself_position"
    "\030\001 \001(\0132\023.protos.RpcVector2D\022\033\n\023self_body"
    "_direction\030\002 \001(\002\022\024\n\014self_stamina\030\003 \001(\002\"h"
    "\n\017TeammateMessage\022\026\n\016uniform_number\030\001 \001("
    "\005\022%\n\010position\030\002 \001(\0132\023.protos.RpcVector2D"
    "\022\026\n\016body_direction\030\003 \001(\002\"h\n\017OpponentMess"
    "age\022\026\n\016uniform_number\030\001 \001(\005\022%\n\010position\030"
    "\002 \001(\0132\023.protos.RpcVector2D\022\026\n\016body_direc"
    "tion\030\003 \001(\002\"\311\001\n\021BallPlayerMessage\022*\n\rball"
    "_position\030\001 \001(\0132\023.protos.RpcVector2D\022*\n\r"
    "ball_velocity\030\002 \001(\0132\023.protos.RpcVector2D"
    "\022\026\n\016uniform_number\030\003 \001(\005\022,\n\017player_posit"
    "ion\030\004 \001(\0132\023.protos.RpcVector2D\022\026\n\016body_d"
    "irection\030\005 \001(\002\"\320\t\n\003Say\022+\n\014ball_message\030\001"
    " \001(\0132\023.protos.BallMessageH\000\022+\n\014pass_mess"
    "age\030\002 \001(\0132\023.protos.PassMessageH\000\0225\n\021inte"
    "rcept_message\030\003 \001(\0132\030.protos.InterceptMe"
    "ssageH\000\022/\n\016goalie_message\030\004 \001(\0132\025.protos"
    ".GoalieMessageH\000\022C\n\031goalie_and_player_me"
    "ssage\030\005 \001(\0132\036.protos.GoalieAndPlayerMess"
    "ageH\000\022:\n\024offside_line_message\030\006 \001(\0132\032.pr"
    "otos.OffsideLineMessageH\000\022:\n\024defense_lin"
    "e_message\030\007 \001(\0132\032.protos.DefenseLineMess"
    "ageH\000\022:\n\024wait_request_message\030\010 \001(\0132\032.pr"
    "otos.WaitRequestMessageH\000\0221\n\017setplay_mes"
    "sage\030\t \001(\0132\026.protos.SetplayMessageH\000\022:\n\024"
    "pass_request_message\030\n \001(\0132\032.protos.Pass"
    "RequestMessageH\000\0221\n\017stamina_message\030\013 \001("
    "\0132\026.protos.StaminaMessageH\000\0223\n\020recovery_"
    "message\030\014 \001(\0132\027.protos.RecoveryMessageH\000"
    "\022B\n\030stamina_capacity_message\030\r \001(\0132\036.pro"
    "tos.StaminaCapacityMessageH\000\0221\n\017dribble_"
    "message\030\016 \001(\0132\026.protos.DribbleMessageH\000\022"
    "8\n\023ball_goalie_message\030\017 \001(\0132\031.protos.Ba"
    "llGoalieMessageH\000\0226\n\022one_player_message\030"
    "\020 \001(\0132\030.protos.OnePlayerMessageH\000\0226\n\022two"
    "_player_message\030\021 \001(\0132\030.protos.TwoPlayer"
    "MessageH\000\022:\n\024three_player_message\030\022 \001(\0132"
    "\032.protos.ThreePlayerMessageH\000\022+\n\014self_me"
    "ssage\030\023 \001(\0132\023.protos.SelfMessageH\000\0223\n\020te"
    "ammate_message\030\024 \001(\0132\027.protos.TeammateMe"
    "ssageH\000\0223\n\020opponent_message\030\025 \001(\0132\027.prot"
    "os.OpponentMessageH\000\0228\n\023ball_player_mess"
    "age\030\026 \001(\0132\031.protos.BallPlayerMessageH\000B\t"
    "\n\007message\"\037\n\007PointTo\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002\"\013\n\tPointToOf\"7\n\013AttentionTo\022\032\n\004side\030\001"
    " \001(\0162\014.protos.Side\022\014\n\004unum\030\002 \001(\005\"\017\n\rAtte"
    "ntionToOf\">\n\007AddText\022\"\n\005level\030\001 \001(\0162\023.pr"
    "otos.LoggerLevel\022\017\n\007message\030\002 \001(\t\"a\n\010Add"
    "Point\022\"\n\005level\030\001 \001(\0162\023.protos.LoggerLeve"
    "l\022\"\n\005point\030\002 \001(\0132\023.protos.RpcVector2D\022\r\n"
    "\005color\030\003 \001(\t\"\202\001\n\007AddLine\022\"\n\005level\030\001 \001(\0162"
    "\023.protos.LoggerLevel\022\"\n\005start\030\002 \001(\0132\023.pr"
    "otos.RpcVector2D\022 \n\003end\030\003 \001(\0132\023.protos.R"
    "pcVector2D\022\r\n\005color\030\004 \001(\t\"\231\001\n\006AddArc\022\"\n\005"
    "level\030\001 \001(\0162\023.protos.LoggerLevel\022#\n\006cent"
    "er\030\002 \001(\0132\023.protos.RpcVector2D\022\016\n\006radius\030"
    "\003 \001(\002\022\023\n\013start_angle\030\004 \001(\002\022\022\n\nspan_angel"
    "\030\005 \001(\002\022\r\n\005color\030\006 \001(\t\"\201\001\n\tAddCircle\022\"\n\005l"
    "evel\030\001 \001(\0162\023.protos.LoggerLevel\022#\n\006cente"
    "r\030\002 \001(\0132\023.protos.RpcVector2D\022\016\n\006radius\030\003"
    " \001(\002\022\r\n\005color\030\004 \001(\t\022\014\n\004fill\030\005 \001(\010\"\275\001\n\013Ad"
    "dTriangle\022\"\n\005level\030\001 \001(\0162\023.protos.Logger"
    "Level\022#\n\006point1\030\002 \001(\0132\023.protos.RpcVector"
    "2D\022#\n\006point2\030\003 \001(\0132\023.protos.RpcVector2D\022"
    "#\n\006point3\030\004 \001(\0132\023.protos.RpcVector2D\022\r\n\005"
    "color\030\005 \001(\t\022\014\n\004fill\030\006 \001(\010\"\211\001\n\014AddRectang"
    "le\022\"\n\005level\030\001 \001(\0162\023.protos.LoggerLevel\022\014"
    "\n\004left\030\002 \001(\002\022\013\n\003top\030\003 \001(\002\022\016\n\006length\030\004 \001("
    "\002\022\r\n\005width\030\005 \001(\002\022\r\n\005color\030\006 \001(\t\022\014\n\004fill\030"
    "\007 \001(\010\"\302\001\n\tAddSector\022\"\n\005level\030\001 \001(\0162\023.pro"
    "tos.LoggerLevel\022#\n\006center\030\002 \001(\0132\023.protos"
    ".RpcVector2D\022\022\n\nmin_radius\030\003 \001(\002\022\022\n\nmax_"
    "radius\030\004 \001(\002\022\023\n\013start_angle\030\005 \001(\002\022\022\n\nspa"
    "n_angel\030\006 \001(\002\022\r\n\005color\030\007 \001(\t\022\014\n\004fill\030\010 \001"
    "(\010\"w\n\nAddMessage\022\"\n\005level\030\001 \001(\0162\023.protos"
    ".LoggerLevel\022%\n\010position\030\002 \001(\0132\023.protos."
    "RpcVector2D\022\017\n\007message\030\003 \001(\t\022\r\n\005color\030\004 "
    "\001(\t\"\371\002\n\003Log\022#\n\010add_text\030\001 \001(\0132\017.protos.A"
    "ddTextH\000\022%\n\tadd_point\030\002 \001(\0132\020.protos.Add"
    "PointH\000\022#\n\010add_line\030\003 \001(\0132\017.protos.AddLi"
    "neH\000\022!\n\007add_arc\030\004 \001(\0132\016.protos.AddArcH\000\022"
    "\'\n\nadd_circle\030\005 \001(\0132\021.protos.AddCircleH\000"
    "\022+\n\014add_triangle\030\006 \001(\0132\023.protos.AddTrian"
    "gleH\000\022-\n\radd_rectangle\030\007 \001(\0132\024.protos.Ad"
    "dRectangleH\000\022\'\n\nadd_sector\030\010 \001(\0132\021.proto"
    "s.AddSectorH\000\022)\n\013add_message\030\t \001(\0132\022.pro"
    "tos.AddMessageH\000B\005\n\003log\"\036\n\013DebugClient\022\017"
    "\n\007message\030\001 \001(\t\"o\n\016Body_GoToPoint\022)\n\014tar"
    "get_point\030\001 \001(\0132\023.protos.RpcVector2D\022\032\n\022"
    "distance_threshold\030\002 \001(\002\022\026\n\016max_dash_pow"
    "er\030\003 \001(\002\"\202\001\n\016Body_SmartKick\022)\n\014target_po"
    "int\030\001 \001(\0132\023.protos.RpcVector2D\022\023\n\013first_"
    "speed\030\002 \001(\002\022\035\n\025first_speed_threshold\030\003 \001"
    "(\002\022\021\n\tmax_steps\030\004 \001(\005\"7\n\021Bhv_BeforeKickO"
    "ff\022\"\n\005point\030\001 \001(\0132\023.protos.RpcVector2D\"\024"
    "\n\022Bhv_BodyNeckToBall\"9\n\023Bhv_BodyNeckToPo"
    "int\022\"\n\005point\030\001 \001(\0132\023.protos.RpcVector2D\""
    "\017\n\rBhv_Emergency\"v\n\025Bhv_GoToPointLookBal"
    "l\022)\n\014target_point\030\001 \001(\0132\023.protos.RpcVect"
    "or2D\022\032\n\022distance_threshold\030\002 \001(\002\022\026\n\016max_"
    "dash_power\030\003 \001(\002\"\'\n\022Bhv_NeckBodyToBall\022\021"
    "\n\tangle_buf\030\001 \001(\002\"L\n\023Bhv_NeckBodyToPoint"
    "\022\"\n\005point\030\001 \001(\0132\023.protos.RpcVector2D\022\021\n\t"
    "angle_buf\030\002 \001(\002\"\017\n\rBhv_ScanField\"\022\n\020Body"
    "_AdvanceBall\"\020\n\016Body_ClearBall\"\214\001\n\014Body_"
    "Dribble\022)\n\014target_point\030\001 \001(\0132\023.protos.R"
    "pcVector2D\022\032\n\022distance_threshold\030\002 \001(\002\022\022"
    "\n\ndash_power\030\003 \001(\002\022\022\n\ndash_count\030\004 \001(\005\022\r"
    "\n\005dodge\030\005 \001(\010\"T\n\023Body_GoToPointDodge\022)\n\014"
    "target_point\030\001 \001(\0132\023.protos.RpcVector2D\022"
    "\022\n\ndash_power\030\002 \001(\002\"\200\001\n\rBody_HoldBall\022\017\n"
    "\007do_turn\030\001 \001(\010\022.\n\021turn_target_point\030\002 \001("
    "\0132\023.protos.RpcVector2D\022.\n\021kick_target_po"
    "int\030\003 \001(\0132\023.protos.RpcVector2D\"P\n\016Body_I"
    "ntercept\022\025\n\rsave_recovery\030\001 \001(\010\022\'\n\nface_"
    "point\030\002 \001(\0132\023.protos.RpcVector2D\"f\n\020Body"
    "_KickOneStep\022)\n\014target_point\030\001 \001(\0132\023.pro"
    "tos.RpcVector2D\022\023\n\013first_speed\030\002 \001(\002\022\022\n\n"
    "force_mode\030\003 \001(\010\"\017\n\rBody_StopBall\"&\n\rBod"
    "y_StopDash\022\025\n\rsave_recovery\030\001 \001(\010\"k\n\022Bod"
    "y_TackleToPoint\022)\n\014target_point\030\001 \001(\0132\023."
    "protos.RpcVector2D\022\027\n\017min_probability\030\002 "
    "\001(\002\022\021\n\tmin_speed\030\003 \001(\002\"!\n\020Body_TurnToAng"
    "le\022\r\n\005angle\030\001 \001(\002\" \n\017Body_TurnToBall\022\r\n\005"
    "cycle\030\001 \001(\005\"L\n\020Body_TurnToPoint\022)\n\014targe"
    "t_point\030\001 \001(\0132\023.protos.RpcVector2D\022\r\n\005cy"
    "cle\030\002 \001(\005\">\n\021Focus_MoveToPoint\022)\n\014target"
    "_point\030\001 \001(\0132\023.protos.RpcVector2D\"\r\n\013Foc"
    "us_Reset\"\020\n\016Neck_ScanField\"\022\n\020Neck_ScanP"
    "layers\"g\n\030Neck_TurnToBallAndPlayer\022\032\n\004si"
    "de\030\001 \001(\0162\014.protos.Side\022\026\n\016uniform_number"
    "\030\002 \001(\005\022\027\n\017count_threshold\030\003 \001(\005\"0\n\025Neck_"
    "TurnToBallOrScan\022\027\n\017count_threshold\030\001 \001("
    "\005\"\021\n\017Neck_TurnToBall\"2\n\027Neck_TurnToGoali"
    "eOrScan\022\027\n\017count_threshold\030\001 \001(\005\"\034\n\032Neck"
    "_TurnToLowConfTeammate\"f\n\027Neck_TurnToPla"
    "yerOrScan\022\032\n\004side\030\001 \001(\0162\014.protos.Side\022\026\n"
    "\016uniform_number\030\002 \001(\005\022\027\n\017count_threshold"
    "\030\003 \001(\005\"=\n\020Neck_TurnToPoint\022)\n\014target_poi"
    "nt\030\001 \001(\0132\023.protos.RpcVector2D\"$\n\023Neck_Tu"
    "rnToRelative\022\r\n\005angle\030\001 \001(\002\"9\n\020View_Chan"
    "geWidth\022%\n\nview_width\030\001 \001(\0162\021.protos.Vie"
    "wWidth\"\r\n\013View_Normal\"\014\n\nView_Synch\"\013\n\tV"
    "iew_Wide\"\016\n\014HeliosGoalie\"\022\n\020HeliosGoalie"
    "Move\"\022\n\020HeliosGoalieKick\"\r\n\013HeliosShoot\""
    "\363\001\n\026HeliosOffensivePlanner\022\023\n\013direct_pas"
    "s\030\001 \001(\010\022\021\n\tlead_pass\030\002 \001(\010\022\024\n\014through_pa"
    "ss\030\003 \001(\010\022\025\n\rshort_dribble\030\004 \001(\010\022\024\n\014long_"
    "dribble\030\005 \001(\010\022\r\n\005cross\030\006 \001(\010\022\023\n\013simple_p"
    "ass\030\007 \001(\010\022\026\n\016simple_dribble\030\010 \001(\010\022\024\n\014sim"
    "ple_shoot\030\t \001(\010\022\034\n\024server_side_decision\030"
    "\n \001(\010\"\026\n\024HeliosBasicOffensive\"\021\n\017HeliosB"
    "asicMove\"\017\n\rHeliosSetPlay\"\017\n\rHeliosPenal"
    "ty\"\024\n\022HeliosCommunicaion\"\355\031\n\014PlayerActio"
    "n\022\034\n\004dash\030\001 \001(\0132\014.protos.DashH\000\022\034\n\004turn\030"
    "\002 \001(\0132\014.protos.TurnH\000\022\034\n\004kick\030\003 \001(\0132\014.pr"
    "otos.KickH\000\022 \n\006tackle\030\004 \001(\0132\016.protos.Tac"
    "kleH\000\022\036\n\005catch\030\005 \001(\0132\r.protos.CatchH\000\022\034\n"
    "\004move\030\006 \001(\0132\014.protos.MoveH\000\022%\n\tturn_neck"
    "\030\007 \001(\0132\020.protos.TurnNeckH\000\022)\n\013change_vie"
    "w\030\010 \001(\0132\022.protos.ChangeViewH\000\022\032\n\003say\030\t \001"
    "(\0132\013.protos.SayH\000\022#\n\010point_to\030\n \001(\0132\017.pr"
    "otos.PointToH\000\022(\n\013point_to_of\030\013 \001(\0132\021.pr"
    "otos.PointToOfH\000\022+\n\014attention_to\030\014 \001(\0132\023"
    ".protos.AttentionToH\000\0220\n\017attention_to_of"
    "\030\r \001(\0132\025.protos.AttentionToOfH\000\022\032\n\003log\030\016"
    " \001(\0132\013.protos.LogH\000\022+\n\014debug_client\030\017 \001("
    "\0132\023.protos.DebugClientH\000\0222\n\020body_go_to_p"
    "oint\030\020 \001(\0132\026.protos.Body_GoToPointH\000\0221\n\017"
    "body_smart_kick\030\021 \001(\0132\026.protos.Body_Smar"
    "tKickH\000\0228\n\023bhv_before_kick_off\030\022 \001(\0132\031.p"
    "rotos.Bhv_BeforeKickOffH\000\022;\n\025bhv_body_ne"
    "ck_to_ball\030\023 \001(\0132\032.protos.Bhv_BodyNeckTo"
    "BallH\000\022=\n\026bhv_body_neck_to_point\030\024 \001(\0132\033"
    ".protos.Bhv_BodyNeckToPointH\000\022.\n\rbhv_eme"
    "rgency\030\025 \001(\0132\025.protos.Bhv_EmergencyH\000\022B\n"
    "\031bhv_go_to_point_look_ball\030\026 \001(\0132\035.proto"
    "s.Bhv_GoToPointLookBallH\000\022;\n\025bhv_neck_bo"
    "dy_to_ball\030\027 \001(\0132\032.protos.Bhv_NeckBodyTo"
    "BallH\000\022=\n\026bhv_neck_body_to_point\030\030 \001(\0132\033"
    ".protos.Bhv_NeckBodyToPointH\000\022/\n\016bhv_sca"
    "n_field\030\031 \001(\0132\025.protos.Bhv_ScanFieldH\000\0225"
    "\n\021body_advance_ball\030\032 \001(\0132\030.protos.Body_"
    "AdvanceBallH\000\0221\n\017body_clear_ball\030\033 \001(\0132\026"
    ".protos.Body_ClearBallH\000\022,\n\014body_dribble"
    "\030\034 \001(\0132\024.protos.Body_DribbleH\000\022=\n\026body_g"
    "o_to_point_dodge\030\035 \001(\0132\033.protos.Body_GoT"
    "oPointDodgeH\000\022/\n\016body_hold_ball\030\036 \001(\0132\025."
    "protos.Body_HoldBallH\000\0220\n\016body_intercept"
    "\030\037 \001(\0132\026.protos.Body_InterceptH\000\0226\n\022body"
    "_kick_one_step\030  \001(\0132\030.protos.Body_KickO"
    "neStepH\000\022/\n\016body_stop_ball\030! \001(\0132\025.proto"
    "s.Body_StopBallH\000\022/\n\016body_stop_dash\030\" \001("
    "\0132\025.protos.Body_StopDashH\000\022:\n\024body_tackl"
    "e_to_point\030# \001(\0132\032.protos.Body_TackleToP"
    "ointH\000\0226\n\022body_turn_to_angle\030$ \001(\0132\030.pro"
    "tos.Body_TurnToAngleH\000\0224\n\021body_turn_to_b"
    "all\030% \001(\0132\027.protos.Body_TurnToBallH\000\0226\n\022"
    "body_turn_to_point\030& \001(\0132\030.protos.Body_T"
    "urnToPointH\000\0228\n\023focus_move_to_point\030\' \001("
    "\0132\031.protos.Focus_MoveToPointH\000\022*\n\013focus_"
    "reset\030( \001(\0132\023.protos.Focus_ResetH\000\0221\n\017ne"
    "ck_scan_field\030) \001(\0132\026.protos.Neck_ScanFi"
    "eldH\000\0225\n\021neck_scan_players\030* \001(\0132\030.proto"
    "s.Neck_ScanPlayersH\000\022H\n\034neck_turn_to_bal"
    "l_and_player\030+ \001(\0132 .protos.Neck_TurnToB"
    "allAndPlayerH\000\022B\n\031neck_turn_to_ball_or_s"
    "can\030, \001(\0132\035.protos.Neck_TurnToBallOrScan"
    "H\000\0224\n\021neck_turn_to_ball\030- \001(\0132\027.protos.N"
    "eck_TurnToBallH\000\022F\n\033neck_turn_to_goalie_"
    "or_scan\030. \001(\0132\037.protos.Neck_TurnToGoalie"
    "OrScanH\000\022L\n\036neck_turn_to_low_conf_teamma"
    "te\030/ \001(\0132\".protos.Neck_TurnToLowConfTeam"
    "mateH\000\022F\n\033neck_turn_to_player_or_scan\0300 "
    "\001(\0132\037.protos.Neck_TurnToPlayerOrScanH\000\0226"
    "\n\022neck_turn_to_point\0301 \001(\0132\030.protos.Neck"
    "_TurnToPointH\000\022<\n\025neck_turn_to_relative\030"
    "2 \001(\0132\033.protos.Neck_TurnToRelativeH\000\0225\n\021"
    "view_change_width\0303 \001(\0132\030.protos.View_Ch"
    "angeWidthH\000\022*\n\013view_normal\0304 \001(\0132\023.proto"
    "s.View_NormalH\000\022(\n\nview_synch\0305 \001(\0132\022.pr"
    "otos.View_SynchH\000\022&\n\tview_wide\0306 \001(\0132\021.p"
    "rotos.View_WideH\000\022-\n\rhelios_goalie\0307 \001(\013"
    "2\024.protos.HeliosGoalieH\000\0226\n\022helios_goali"
    "e_move\0308 \001(\0132\030.protos.HeliosGoalieMoveH\000"
    "\0226\n\022helios_goalie_kick\0309 \001(\0132\030.protos.He"
    "liosGoalieKickH\000\022+\n\014helios_shoot\030: \001(\0132\023"
    ".protos.HeliosShootH\000\022B\n\030helios_offensiv"
    "e_planner\030; \001(\0132\036.protos.HeliosOffensive"
    "PlannerH\000\022>\n\026helios_basic_offensive\030< \001("
    "\0132\034.protos.HeliosBasicOffensiveH\000\0224\n\021hel"
    "ios_basic_move\030= \001(\0132\027.protos.HeliosBasi"
    "cMoveH\000\0220\n\017helios_set_play\030> \001(\0132\025.proto"
    "s.HeliosSetPlayH\000\022/\n\016helios_penalty\030\? \001("
    "\0132\025.protos.HeliosPenaltyH\000\022:\n\024helios_com"
    "munication\030@ \001(\0132\032.protos.HeliosCommunic"
    "aionH\000B\010\n\006action\"Q\n\rPlayerActions\022%\n\007act"
    "ions\030\001 \003(\0132\024.protos.PlayerAction\022\031\n\021igno"
    "re_preprocess\030\002 \001(\010\"8\n\020ChangePlayerType\022"
    "\026\n\016uniform_number\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\024\n"
    "\022DoHeliosSubstitute\"\030\n\026DoHeliosSayPlayer"
    "Types\"\322\001\n\013CoachAction\0227\n\023change_player_t"
    "ypes\030\001 \001(\0132\030.protos.ChangePlayerTypeH\000\022:"
    "\n\024do_helios_substitute\030\002 \001(\0132\032.protos.Do"
    "HeliosSubstituteH\000\022D\n\032do_helios_say_play"
    "er_types\030\003 \001(\0132\036.protos.DoHeliosSayPlaye"
    "rTypesH\000B\010\n\006action\"4\n\014CoachActions\022$\n\007ac"
    "tions\030\001 \003(\0132\023.protos.CoachAction\"\013\n\tDoKi"
    "ckOff\"Z\n\nDoMoveBall\022%\n\010position\030\001 \001(\0132\023."
    "protos.RpcVector2D\022%\n\010velocity\030\002 \001(\0132\023.p"
    "rotos.RpcVector2D\"w\n\014DoMovePlayer\022\020\n\010our"
    "_side\030\001 \001(\010\022\026\n\016uniform_number\030\002 \001(\005\022%\n\010p"
    "osition\030\003 \001(\0132\023.protos.RpcVector2D\022\026\n\016bo"
    "dy_direction\030\004 \001(\002\"\013\n\tDoRecover\"X\n\014DoCha"
    "ngeMode\022,\n\016game_mode_type\030\001 \001(\0162\024.protos"
    ".GameModeType\022\032\n\004side\030\002 \001(\0162\014.protos.Sid"
    "e\"L\n\022DoChangePlayerType\022\020\n\010our_side\030\001 \001("
    "\010\022\026\n\016uniform_number\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\""
    "\265\002\n\rTrainerAction\022(\n\013do_kick_off\030\001 \001(\0132\021"
    ".protos.DoKickOffH\000\022*\n\014do_move_ball\030\002 \001("
    "\0132\022.protos.DoMoveBallH\000\022.\n\016do_move_playe"
    "r\030\003 \001(\0132\024.protos.DoMovePlayerH\000\022\'\n\ndo_re"
    "cover\030\004 \001(\0132\021.protos.DoRecoverH\000\022.\n\016do_c"
    "hange_mode\030\005 \001(\0132\024.protos.DoChangeModeH\000"
    "\022;\n\025do_change_player_type\030\006 \001(\0132\032.protos"
    ".DoChangePlayerTypeH\000B\010\n\006action\"8\n\016Train"
    "erActions\022&\n\007actions\030\001 \003(\0132\025.protos.Trai"
    "nerAction\"\335,\n\013ServerParam\0223\n\021register_re"
    "sponse\030\001 \001(\0132\030.protos.RegisterResponse\022\026"
    "\n\016inertia_moment\030\002 \001(\002\022\023\n\013player_size\030\003 "
    "\001(\002\022\024\n\014player_decay\030\004 \001(\002\022\023\n\013player_rand"
    "\030\005 \001(\002\022\025\n\rplayer_weight\030\006 \001(\002\022\030\n\020player_"
    "speed_max\030\007 \001(\002\022\030\n\020player_accel_max\030\010 \001("
    "\002\022\023\n\013stamina_max\030\t \001(\002\022\027\n\017stamina_inc_ma"
    "x\030\n \001(\002\022\024\n\014recover_init\030\013 \001(\002\022\027\n\017recover"
    "_dec_thr\030\014 \001(\002\022\023\n\013recover_min\030\r \001(\002\022\023\n\013r"
    "ecover_dec\030\016 \001(\002\022\023\n\013effort_init\030\017 \001(\002\022\026\n"
    "\016effort_dec_thr\030\020 \001(\002\022\022\n\neffort_min\030\021 \001("
    "\002\022\022\n\neffort_dec\030\022 \001(\002\022\026\n\016effort_inc_thr\030"
    "\023 \001(\002\022\022\n\neffort_inc\030\024 \001(\002\022\021\n\tkick_rand\030\025"
    " \001(\002\022\033\n\023team_actuator_noise\030\026 \001(\010\022\034\n\024pla"
    "yer_rand_factor_l\030\027 \001(\002\022\034\n\024player_rand_f"
    "actor_r\030\030 \001(\002\022\032\n\022kick_rand_factor_l\030\031 \001("
    "\002\022\032\n\022kick_rand_factor_r\030\032 \001(\002\022\021\n\tball_si"
    "ze\030\033 \001(\002\022\022\n\nball_decay\030\034 \001(\002\022\021\n\tball_ran"
    "d\030\035 \001(\002\022\023\n\013ball_weight\030\036 \001(\002\022\026\n\016ball_spe"
    "ed_max\030\037 \001(\002\022\026\n\016ball_accel_max\030  \001(\002\022\027\n\017"
    "dash_power_rate\030! \001(\002\022\027\n\017kick_power_rate"
    "\030\" \001(\002\022\027\n\017kickable_margin\030# \001(\002\022\026\n\016contr"
    "ol_radius\030$ \001(\002\022\034\n\024control_radius_width\030"
    "% \001(\002\022\021\n\tmax_power\030& \001(\002\022\021\n\tmin_power\030\' "
    "\001(\002\022\022\n\nmax_moment\030( \001(\002\022\022\n\nmin_moment\030) "
    "\001(\002\022\027\n\017max_neck_moment\030* \001(\002\022\027\n\017min_neck"
    "_moment\030+ \001(\002\022\026\n\016max_neck_angle\030, \001(\002\022\026\n"
    "\016min_neck_angle\030- \001(\002\022\025\n\rvisible_angle\030."
    " \001(\002\022\030\n\020visible_distance\030/ \001(\002\022\020\n\010wind_d"
    "ir\0300 \001(\002\022\022\n\nwind_force\0301 \001(\002\022\022\n\nwind_ang"
    "le\0302 \001(\002\022\021\n\twind_rand\0303 \001(\002\022\025\n\rkickable_"
    "area\0304 \001(\002\022\024\n\014catch_area_l\0305 \001(\002\022\024\n\014catc"
    "h_area_w\0306 \001(\002\022\031\n\021catch_probability\0307 \001("
    "\002\022\030\n\020goalie_max_moves\0308 \001(\005\022\032\n\022corner_ki"
    "ck_margin\0309 \001(\002\022 \n\030offside_active_area_s"
    "ize\030: \001(\002\022\021\n\twind_none\030; \001(\010\022\027\n\017use_wind"
    "_random\030< \001(\010\022\033\n\023coach_say_count_max\030= \001"
    "(\005\022\032\n\022coach_say_msg_size\030> \001(\005\022\026\n\016clang_"
    "win_size\030\? \001(\005\022\030\n\020clang_define_win\030@ \001(\005"
    "\022\026\n\016clang_meta_win\030A \001(\005\022\030\n\020clang_advice"
    "_win\030B \001(\005\022\026\n\016clang_info_win\030C \001(\005\022\030\n\020cl"
    "ang_mess_delay\030D \001(\005\022\034\n\024clang_mess_per_c"
    "ycle\030E \001(\005\022\021\n\thalf_time\030F \001(\005\022\026\n\016simulat"
    "or_step\030G \001(\005\022\021\n\tsend_step\030H \001(\005\022\021\n\trecv"
    "_step\030I \001(\005\022\027\n\017sense_body_step\030J \001(\005\022\020\n\010"
    "lcm_step\030K \001(\005\022\033\n\023player_say_msg_size\030L "
    "\001(\005\022\027\n\017player_hear_max\030M \001(\005\022\027\n\017player_h"
    "ear_inc\030N \001(\005\022\031\n\021player_hear_decay\030O \001(\005"
    "\022\027\n\017catch_ban_cycle\030P \001(\005\022\030\n\020slow_down_f"
    "actor\030Q \001(\005\022\023\n\013use_offside\030R \001(\010\022\027\n\017kick"
    "off_offside\030S \001(\010\022\033\n\023offside_kick_margin"
    "\030T \001(\002\022\026\n\016audio_cut_dist\030U \001(\002\022\032\n\022dist_q"
    "uantize_step\030V \001(\002\022#\n\033landmark_dist_quan"
    "tize_step\030W \001(\002\022\031\n\021dir_quantize_step\030X \001"
    "(\002\022\034\n\024dist_quantize_step_l\030Y \001(\002\022\034\n\024dist"
    "_quantize_step_r\030Z \001(\002\022%\n\035landmark_dist_"
    "quantize_step_l\030[ \001(\002\022%\n\035landmark_dist_q"
    "uantize_step_r\030\\ \001(\002\022\033\n\023dir_quantize_ste"
    "p_l\030] \001(\002\022\033\n\023dir_quantize_step_r\030^ \001(\002\022\022"
    "\n\ncoach_mode\030_ \001(\010\022\037\n\027coach_with_referee"
    "_mode\030` \001(\010\022\032\n\022use_old_coach_hear\030a \001(\010\022"
    "%\n\035slowness_on_top_for_left_team\030b \001(\002\022&"
    "\n\036slowness_on_top_for_right_team\030c \001(\002\022\024"
    "\n\014start_goal_l\030d \001(\005\022\024\n\014start_goal_r\030e \001"
    "(\005\022\023\n\013fullstate_l\030f \001(\010\022\023\n\013fullstate_r\030g"
    " \001(\010\022\026\n\016drop_ball_time\030h \001(\005\022\022\n\nsynch_mo"
    "de\030i \001(\010\022\024\n\014synch_offset\030j \001(\005\022\031\n\021synch_"
    "micro_sleep\030k \001(\005\022\024\n\014point_to_ban\030l \001(\005\022"
    "\031\n\021point_to_duration\030m \001(\005\022\023\n\013player_por"
    "t\030n \001(\005\022\024\n\014trainer_port\030o \001(\005\022\031\n\021online_"
    "coach_port\030p \001(\005\022\024\n\014verbose_mode\030q \001(\010\022\032"
    "\n\022coach_send_vi_step\030r \001(\005\022\023\n\013replay_fil"
    "e\030s \001(\t\022\025\n\rlandmark_file\030t \001(\t\022\022\n\nsend_c"
    "omms\030u \001(\010\022\024\n\014text_logging\030v \001(\010\022\024\n\014game"
    "_logging\030w \001(\010\022\030\n\020game_log_version\030x \001(\005"
    "\022\024\n\014text_log_dir\030y \001(\t\022\024\n\014game_log_dir\030z"
    " \001(\t\022\033\n\023text_log_fixed_name\030{ \001(\t\022\033\n\023gam"
    "e_log_fixed_name\030| \001(\t\022\032\n\022use_text_log_f"
    "ixed\030} \001(\010\022\032\n\022use_game_log_fixed\030~ \001(\010\022\032"
    "\n\022use_text_log_dated\030\177 \001(\010\022\033\n\022use_game_l"
    "og_dated\030\200\001 \001(\010\022\030\n\017log_date_format\030\201\001 \001("
    "\t\022\022\n\tlog_times\030\202\001 \001(\010\022\027\n\016record_message\030"
    "\203\001 \001(\010\022\035\n\024text_log_compression\030\204\001 \001(\005\022\035\n"
    "\024game_log_compression\030\205\001 \001(\005\022\024\n\013use_prof"
    "ile\030\206\001 \001(\010\022\024\n\013tackle_dist\030\207\001 \001(\002\022\031\n\020tack"
    "le_back_dist\030\210\001 \001(\002\022\025\n\014tackle_width\030\211\001 \001"
    "(\002\022\030\n\017tackle_exponent\030\212\001 \001(\002\022\026\n\rtackle_c"
    "ycles\030\213\001 \001(\005\022\032\n\021tackle_power_rate\030\214\001 \001(\002"
    "\022\035\n\024freeform_wait_period\030\215\001 \001(\005\022\035\n\024freef"
    "orm_send_period\030\216\001 \001(\005\022\031\n\020free_kick_faul"
    "ts\030\217\001 \001(\010\022\024\n\013back_passes\030\220\001 \001(\010\022\032\n\021prope"
    "r_goal_kicks\030\221\001 \001(\010\022\031\n\020stopped_ball_vel\030"
    "\222\001 \001(\002\022\027\n\016max_goal_kicks\030\223\001 \001(\005\022\026\n\rclang"
    "_del_win\030\224\001 \001(\005\022\027\n\016clang_rule_win\030\225\001 \001(\005"
    "\022\022\n\tauto_mode\030\226\001 \001(\010\022\026\n\rkick_off_wait\030\227\001"
    " \001(\005\022\025\n\014connect_wait\030\230\001 \001(\005\022\027\n\016game_over"
    "_wait\030\231\001 \001(\005\022\025\n\014team_l_start\030\232\001 \001(\t\022\025\n\014t"
    "eam_r_start\030\233\001 \001(\t\022\026\n\rkeepaway_mode\030\234\001 \001"
    "(\010\022\030\n\017keepaway_length\030\235\001 \001(\002\022\027\n\016keepaway"
    "_width\030\236\001 \001(\002\022\031\n\020keepaway_logging\030\237\001 \001(\010"
    "\022\031\n\020keepaway_log_dir\030\240\001 \001(\t\022 \n\027keepaway_"
    "log_fixed_name\030\241\001 \001(\t\022\033\n\022keepaway_log_fi"
    "xed\030\242\001 \001(\010\022\033\n\022keepaway_log_dated\030\243\001 \001(\010\022"
    "\027\n\016keepaway_start\030\244\001 \001(\005\022\030\n\017nr_normal_ha"
    "lfs\030\245\001 \001(\005\022\027\n\016nr_extra_halfs\030\246\001 \001(\005\022\033\n\022p"
    "enalty_shoot_outs\030\247\001 \001(\010\022\036\n\025pen_before_s"
    "etup_wait\030\250\001 \001(\005\022\027\n\016pen_setup_wait\030\251\001 \001("
    "\005\022\027\n\016pen_ready_wait\030\252\001 \001(\005\022\027\n\016pen_taken_"
    "wait\030\253\001 \001(\005\022\025\n\014pen_nr_kicks\030\254\001 \001(\005\022\034\n\023pe"
    "n_max_extra_kicks\030\255\001 \001(\005\022\023\n\npen_dist_x\030\256"
    "\001 \001(\002\022\032\n\021pen_random_winner\030\257\001 \001(\010\022\035\n\024pen"
    "_allow_mult_kicks\030\260\001 \001(\010\022\036\n\025pen_max_goal"
    "ie_dist_x\030\261\001 \001(\002\022 \n\027pen_coach_moves_play"
    "ers\030\262\001 \001(\010\022\023\n\nmodule_dir\030\263\001 \001(\t\022\030\n\017ball_"
    "stuck_area\030\264\001 \001(\002\022\027\n\016coach_msg_file\030\265\001 \001"
    "(\t\022\031\n\020max_tackle_power\030\266\001 \001(\002\022\036\n\025max_bac"
    "k_tackle_power\030\267\001 \001(\002\022\035\n\024player_speed_ma"
    "x_min\030\270\001 \001(\002\022\026\n\rextra_stamina\030\271\001 \001(\002\022\031\n\020"
    "synch_see_offset\030\272\001 \001(\005\022\030\n\017extra_half_ti"
    "me\030\273\001 \001(\005\022\031\n\020stamina_capacity\030\274\001 \001(\002\022\027\n\016"
    "max_dash_angle\030\275\001 \001(\002\022\027\n\016min_dash_angle\030"
    "\276\001 \001(\002\022\030\n\017dash_angle_step\030\277\001 \001(\002\022\027\n\016side"
    "_dash_rate\030\300\001 \001(\002\022\027\n\016back_dash_rate\030\301\001 \001"
    "(\002\022\027\n\016max_dash_power\030\302\001 \001(\002\022\027\n\016min_dash_"
    "power\030\303\001 \001(\002\022\033\n\022tackle_rand_factor\030\304\001 \001("
    "\002\022 \n\027foul_detect_probability\030\305\001 \001(\002\022\026\n\rf"
    "oul_exponent\030\306\001 \001(\002\022\024\n\013foul_cycles\030\307\001 \001("
    "\005\022\024\n\013golden_goal\030\310\001 \001(\010\022\035\n\024red_card_prob"
    "ability\030\311\001 \001(\002\022!\n\030illegal_defense_durati"
    "on\030\312\001 \001(\005\022\037\n\026illegal_defense_number\030\313\001 \001"
    "(\005\022\037\n\026illegal_defense_dist_x\030\314\001 \001(\002\022\036\n\025i"
    "llegal_defense_width\030\315\001 \001(\002\022\031\n\020fixed_tea"
    "mname_l\030\316\001 \001(\t\022\031\n\020fixed_teamname_r\030\317\001 \001("
    "\t\022\030\n\017max_catch_angle\030\320\001 \001(\002\022\030\n\017min_catch"
    "_angle\030\321\001 \001(\002\022\024\n\013random_seed\030\322\001 \001(\005\022\037\n\026l"
    "ong_kick_power_factor\030\323\001 \001(\002\022\030\n\017long_kic"
    "k_delay\030\324\001 \001(\005\022\025\n\014max_monitors\030\325\001 \001(\005\022\027\n"
    "\016catchable_area\030\326\001 \001(\002\022\027\n\016real_speed_max"
    "\030\327\001 \001(\002\022\032\n\021pitch_half_length\030\330\001 \001(\002\022\031\n\020p"
    "itch_half_width\030\331\001 \001(\002\022 \n\027our_penalty_ar"
    "ea_line_x\030\332\001 \001(\002\022\"\n\031their_penalty_area_l"
    "ine_x\030\333\001 \001(\002\022 \n\027penalty_area_half_width\030"
    "\334\001 \001(\002\022\034\n\023penalty_area_length\030\335\001 \001(\002\022\023\n\n"
    "goal_width\030\336\001 \001(\002\"\215\010\n\013PlayerParam\0223\n\021reg"
    "ister_response\030\001 \001(\0132\030.protos.RegisterRe"
    "sponse\022\024\n\014player_types\030\002 \001(\005\022\020\n\010subs_max"
    "\030\003 \001(\005\022\016\n\006pt_max\030\004 \001(\005\022\037\n\027allow_mult_def"
    "ault_type\030\005 \001(\010\022\"\n\032player_speed_max_delt"
    "a_min\030\006 \001(\002\022\"\n\032player_speed_max_delta_ma"
    "x\030\007 \001(\002\022$\n\034stamina_inc_max_delta_factor\030"
    "\010 \001(\002\022\036\n\026player_decay_delta_min\030\t \001(\002\022\036\n"
    "\026player_decay_delta_max\030\n \001(\002\022#\n\033inertia"
    "_moment_delta_factor\030\013 \001(\002\022!\n\031dash_power"
    "_rate_delta_min\030\014 \001(\002\022!\n\031dash_power_rate"
    "_delta_max\030\r \001(\002\022 \n\030player_size_delta_fa"
    "ctor\030\016 \001(\002\022!\n\031kickable_margin_delta_min\030"
    "\017 \001(\002\022!\n\031kickable_margin_delta_max\030\020 \001(\002"
    "\022\036\n\026kick_rand_delta_factor\030\021 \001(\002\022\037\n\027extr"
    "a_stamina_delta_min\030\022 \001(\002\022\037\n\027extra_stami"
    "na_delta_max\030\023 \001(\002\022\037\n\027effort_max_delta_f"
    "actor\030\024 \001(\002\022\037\n\027effort_min_delta_factor\030\025"
    " \001(\002\022\023\n\013random_seed\030\026 \001(\005\022%\n\035new_dash_po"
    "wer_rate_delta_min\030\027 \001(\002\022%\n\035new_dash_pow"
    "er_rate_delta_max\030\030 \001(\002\022(\n new_stamina_i"
    "nc_max_delta_factor\030\031 \001(\002\022!\n\031kick_power_"
    "rate_delta_min\030\032 \001(\002\022!\n\031kick_power_rate_"
    "delta_max\030\033 \001(\002\022,\n$foul_detect_probabili"
    "ty_delta_factor\030\034 \001(\002\022$\n\034catchable_area_"
    "l_stretch_min\030\035 \001(\002\022$\n\034catchable_area_l_"
    "stretch_max\030\036 \001(\002\"\277\007\n\nPlayerType\0223\n\021regi"
    "ster_response\030\001 \001(\0132\030.protos.RegisterRes"
    "ponse\022\n\n\002id\030\002 \001(\005\022\027\n\017stamina_inc_max\030\003 \001"
    "(\002\022\024\n\014player_decay\030\004 \001(\002\022\026\n\016inertia_mome"
    "nt\030\005 \001(\002\022\027\n\017dash_power_rate\030\006 \001(\002\022\023\n\013pla"
    "yer_size\030\007 \001(\002\022\027\n\017kickable_margin\030\010 \001(\002\022"
    "\021\n\tkick_rand\030\t \001(\002\022\025\n\rextra_stamina\030\n \001("
    "\002\022\022\n\neffort_max\030\013 \001(\002\022\022\n\neffort_min\030\014 \001("
    "\002\022\027\n\017kick_power_rate\030\r \001(\002\022\037\n\027foul_detec"
    "t_probability\030\016 \001(\002\022 \n\030catchable_area_l_"
    "stretch\030\017 \001(\002\022\027\n\017unum_far_length\030\020 \001(\002\022\033"
    "\n\023unum_too_far_length\030\021 \001(\002\022\027\n\017team_far_"
    "length\030\022 \001(\002\022\033\n\023team_too_far_length\030\023 \001("
    "\002\022%\n\035player_max_observation_length\030\024 \001(\002"
    "\022\033\n\023ball_vel_far_length\030\025 \001(\002\022\037\n\027ball_ve"
    "l_too_far_length\030\026 \001(\002\022#\n\033ball_max_obser"
    "vation_length\030\027 \001(\002\022\033\n\023flag_chg_far_leng"
    "th\030\030 \001(\002\022\037\n\027flag_chg_too_far_length\030\031 \001("
    "\002\022#\n\033flag_max_observation_length\030\032 \001(\002\022\025"
    "\n\rkickable_area\030\033 \001(\002\022\037\n\027reliable_catcha"
    "ble_dist\030\034 \001(\002\022\032\n\022max_catchable_dist\030\035 \001"
    "(\002\022\026\n\016real_speed_max\030\036 \001(\002\022\031\n\021player_spe"
    "ed_max2\030\037 \001(\002\022\027\n\017real_speed_max2\030  \001(\002\022!"
    "\n\031cycles_to_reach_max_speed\030! \001(\005\022\030\n\020pla"
    "yer_speed_max\030\" \001(\002\"\255\003\n\024RpcCooperativeAc"
    "tion\022+\n\010category\030\001 \001(\0162\031.protos.RpcActio"
    "nCategory\022\r\n\005index\030\002 \001(\005\022\023\n\013sender_unum\030"
    "\003 \001(\005\022\023\n\013target_unum\030\004 \001(\005\022)\n\014target_poi"
    "nt\030\005 \001(\0132\023.protos.RpcVector2D\022\030\n\020first_b"
    "all_speed\030\006 \001(\001\022\031\n\021first_turn_moment\030\007 \001"
    "(\001\022\030\n\020first_dash_power\030\010 \001(\001\022!\n\031first_da"
    "sh_angle_relative\030\t \001(\001\022\025\n\rduration_step"
    "\030\n \001(\005\022\022\n\nkick_count\030\013 \001(\005\022\022\n\nturn_count"
    "\030\014 \001(\005\022\022\n\ndash_count\030\r \001(\005\022\024\n\014final_acti"
    "on\030\016 \001(\010\022\023\n\013description\030\017 \001(\t\022\024\n\014parent_"
    "index\030\020 \001(\005\"\317\001\n\017RpcPredictState\022\022\n\nspend"
    "_time\030\001 \001(\005\022\030\n\020ball_holder_unum\030\002 \001(\005\022*\n"
    "\rball_position\030\003 \001(\0132\023.protos.RpcVector2"
    "D\022*\n\rball_velocity\030\004 \001(\0132\023.protos.RpcVec"
    "tor2D\022\032\n\022our_defense_line_x\030\005 \001(\001\022\032\n\022our"
    "_offense_line_x\030\006 \001(\001\"\202\001\n\016RpcActionState"
    "\022,\n\006action\030\001 \001(\0132\034.protos.RpcCooperative"
    "Action\022.\n\rpredict_state\030\002 \001(\0132\027.protos.R"
    "pcPredictState\022\022\n\nevaluation\030\003 \001(\001\"\357\001\n\030B"
    "estPlannerActionRequest\0223\n\021register_resp"
    "onse\030\001 \001(\0132\030.protos.RegisterResponse\022:\n\005"
    "pairs\030\002 \003(\0132+.protos.BestPlannerActionRe"
    "quest.PairsEntry\022\034\n\005state\030\003 \001(\0132\r.protos"
    ".State\032D\n\nPairsEntry\022\013\n\003key\030\001 \001(\005\022%\n\005val"
    "ue\030\002 \001(\0132\026.protos.RpcActionState:\0028\001\"*\n\031"
    "BestPlannerActionResponse\022\r\n\005index\030\001 \001(\005"
    "\"\007\n\005Empty*-\n\tViewWidth\022\n\n\006NARROW\020\000\022\n\n\006NO"
    "RMAL\020\001\022\010\n\004WIDE\020\002*{\n\025RpcServerLanguageTyp"
    "e\022\024\n\020UNKNOWN_LANGUAGE\020\000\022\n\n\006PYThON\020\001\022\010\n\004J"
    "AVA\020\002\022\007\n\003CPP\020\003\022\n\n\006CSHARP\020\004\022\010\n\004RUBY\020\005\022\017\n\013"
    "JAVE_SCRIPT\020\006\022\006\n\002GO\020\007*(\n\004Side\022\013\n\007UNKNOWN"
    "\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002*\262\002\n\013LoggerLevel\022"
    "\r\n\tNoneLevel\020\000\022\n\n\006SYSTEM\020\001\022\n\n\006SENSOR\020\002\022\t"
    "\n\005WORLD\020\004\022\n\n\006ACTION\020\010\022\r\n\tINTERCEPT\020\020\022\010\n\004"
    "KICK\020 \022\010\n\004HOLD\020@\022\014\n\007DRIBBLE\020\200\001\022\t\n\004PASS\020\200"
    "\002\022\n\n\005CROSS\020\200\004\022\n\n\005SHOOT\020\200\010\022\n\n\005CLEAR\020\200\020\022\n\n"
    "\005BLOCK\020\200 \022\t\n\004MARK\020\200@\022\021\n\013POSITIONING\020\200\200\001\022"
    "\n\n\004ROLE\020\200\200\002\022\n\n\004TEAM\020\200\200\004\022\023\n\rCOMMUNICATION"
    "\020\200\200\010\022\016\n\010ANALYZER\020\200\200\020\022\022\n\014ACTION_CHAIN\020\200\200 "
    "\022\n\n\004PLAN\020\200\200@*,\n\010CardType\022\013\n\007NO_CARD\020\000\022\n\n"
    "\006YELLOW\020\001\022\007\n\003RED\020\002*v\n\023InterceptActionTyp"
    "e\022!\n\035UNKNOWN_Intercept_Action_Type\020\000\022\r\n\t"
    "OMNI_DASH\020\001\022\025\n\021TURN_FORWARD_DASH\020\002\022\026\n\022TU"
    "RN_BACKWARD_DASH\020\003*\273\004\n\014GameModeType\022\021\n\rB"
    "eforeKickOff\020\000\022\014\n\010TimeOver\020\001\022\n\n\006PlayOn\020\002"
    "\022\014\n\010KickOff_\020\003\022\013\n\007KickIn_\020\004\022\r\n\tFreeKick_"
    "\020\005\022\017\n\013CornerKick_\020\006\022\r\n\tGoalKick_\020\007\022\016\n\nAf"
    "terGoal_\020\010\022\014\n\010OffSide_\020\t\022\020\n\014PenaltyKick_"
    "\020\n\022\021\n\rFirstHalfOver\020\013\022\t\n\005Pause\020\014\022\t\n\005Huma"
    "n\020\r\022\017\n\013FoulCharge_\020\016\022\r\n\tFoulPush_\020\017\022\031\n\025F"
    "oulMultipleAttacker_\020\020\022\020\n\014FoulBallOut_\020\021"
    "\022\r\n\tBackPass_\020\022\022\022\n\016FreeKickFault_\020\023\022\017\n\013C"
    "atchFault_\020\024\022\020\n\014IndFreeKick_\020\025\022\021\n\rPenalt"
    "ySetup_\020\026\022\021\n\rPenaltyReady_\020\027\022\021\n\rPenaltyT"
    "aken_\020\030\022\020\n\014PenaltyMiss_\020\031\022\021\n\rPenaltyScor"
    "e_\020\032\022\023\n\017IllegalDefense_\020\033\022\023\n\017PenaltyOnfi"
    "eld_\020\034\022\020\n\014PenaltyFoul_\020\035\022\020\n\014GoalieCatch_"
    "\020\036\022\016\n\nExtendHalf\020\037\022\014\n\010MODE_MAX\020 *2\n\tAgen"
    "tType\022\013\n\007PlayerT\020\000\022\n\n\006CoachT\020\001\022\014\n\010Traine"
    "rT\020\002*w\n\021RpcActionCategory\022\013\n\007AC_Hold\020\000\022\016"
    "\n\nAC_Dribble\020\001\022\013\n\007AC_Pass\020\002\022\014\n\010AC_Shoot\020"
    "\003\022\014\n\010AC_Clear\020\004\022\013\n\007AC_Move\020\005\022\017\n\013AC_NoAct"
    "ion\020\0062\373\004\n\004Game\022:\n\020GetPlayerActions\022\r.pro"
    "tos.State\032\025.protos.PlayerActions\"\000\0228\n\017Ge"
    "tCoachActions\022\r.protos.State\032\024.protos.Co"
    "achActions\"\000\022<\n\021GetTrainerActions\022\r.prot"
    "os.State\032\026.protos.TrainerActions\"\000\0227\n\017Se"
    "ndInitMessage\022\023.protos.InitMessage\032\r.pro"
    "tos.Empty\"\000\0228\n\020SendServerParams\022\023.protos"
    ".ServerParam\032\r.protos.Empty\"\000\0228\n\020SendPla"
    "yerParams\022\023.protos.PlayerParam\032\r.protos."
    "Empty\"\000\0225\n\016SendPlayerType\022\022.protos.Playe"
    "rType\032\r.protos.Empty\"\000\022\?\n\010Register\022\027.pro"
    "tos.RegisterRequest\032\030.protos.RegisterRes"
    "ponse\"\000\022;\n\016SendByeCommand\022\030.protos.Regis"
    "terResponse\032\r.protos.Empty\"\000\022]\n\024GetBestP"
    "lannerAction\022 .protos.BestPlannerActionR"
    "equest\032!.protos.BestPlannerActionRespons"
    "e\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_service_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_service_2eproto = {
    false,
    false,
    28851,
    descriptor_table_protodef_service_2eproto,
    "service.proto",
    &descriptor_table_service_2eproto_once,
    nullptr,
    0,
    134,
    schemas,
    file_default_instances,
    TableStruct_service_2eproto::offsets,
    file_level_enum_descriptors_service_2eproto,
    file_level_service_descriptors_service_2eproto,
};
namespace protos {
const ::google::protobuf::EnumDescriptor* ViewWidth_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ViewWidth_internal_data_[] = {
    196608u, 0u, };
bool ViewWidth_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RpcServerLanguageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t RpcServerLanguageType_internal_data_[] = {
    524288u, 0u, };
bool RpcServerLanguageType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* Side_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Side_internal_data_[] = {
    196608u, 0u, };
bool Side_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* LoggerLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t LoggerLevel_internal_data_[] = {
    196608u, 917568u, 536879138u, 536870912u, 16384u, 1024u, 262144u, 256u, 4096u, 65536u, 1048576u, 128u, 512u, 2048u, 8192u, 32768u, 131072u, 524288u, };
bool LoggerLevel_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, LoggerLevel_internal_data_);
}
const ::google::protobuf::EnumDescriptor* CardType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t CardType_internal_data_[] = {
    196608u, 0u, };
bool CardType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* InterceptActionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t InterceptActionType_internal_data_[] = {
    262144u, 0u, };
bool InterceptActionType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* GameModeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t GameModeType_internal_data_[] = {
    2162688u, 0u, };
bool GameModeType_IsValid(int value) {
  return 0 <= value && value <= 32;
}
const ::google::protobuf::EnumDescriptor* AgentType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t AgentType_internal_data_[] = {
    196608u, 0u, };
bool AgentType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RpcActionCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_enum_descriptors_service_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t RpcActionCategory_internal_data_[] = {
    458752u, 0u, };
bool RpcActionCategory_IsValid(int value) {
  return 0 <= value && value <= 6;
}
// ===================================================================

class RpcVector2D::_Internal {
 public:
};

RpcVector2D::RpcVector2D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RpcVector2D)
}
RpcVector2D::RpcVector2D(
    ::google::protobuf::Arena* arena, const RpcVector2D& from)
    : RpcVector2D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RpcVector2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RpcVector2D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, angle_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::angle_));
}
RpcVector2D::~RpcVector2D() {
  // @@protoc_insertion_point(destructor:protos.RpcVector2D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcVector2D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RpcVector2D::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RpcVector2D_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RpcVector2D::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RpcVector2D>(),
            ::google::protobuf::Message::GetNewImpl<RpcVector2D>(),
            ::google::protobuf::Message::GetClearImpl<RpcVector2D>(), &RpcVector2D::ByteSizeLong,
                &RpcVector2D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_._cached_size_),
            false,
        },
        &RpcVector2D::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RpcVector2D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> RpcVector2D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RpcVector2D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float angle = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.angle_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.y_)}},
    // float dist = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.dist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dist = 3;
    {PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.dist_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle = 4;
    {PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RpcVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RpcVector2D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.angle_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.angle_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RpcVector2D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RpcVector2D& this_ = static_cast<const RpcVector2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RpcVector2D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RpcVector2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RpcVector2D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float dist = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_dist(), target);
          }

          // float angle = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_angle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RpcVector2D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RpcVector2D::ByteSizeLong(const MessageLite& base) {
          const RpcVector2D& this_ = static_cast<const RpcVector2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RpcVector2D::ByteSizeLong() const {
          const RpcVector2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RpcVector2D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float dist = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist()) != 0) {
              total_size += 5;
            }
            // float angle = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RpcVector2D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcVector2D*>(&to_msg);
  auto& from = static_cast<const RpcVector2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RpcVector2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist()) != 0) {
    _this->_impl_.dist_ = from._impl_.dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle()) != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcVector2D::CopyFrom(const RpcVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RpcVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcVector2D::InternalSwap(RpcVector2D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.angle_)
      + sizeof(RpcVector2D::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(RpcVector2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata RpcVector2D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RegisterRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::RegisterRequest& from_msg)
      : team_name_(arena, from.team_name_),
        _cached_size_{0} {}

RegisterRequest::RegisterRequest(
    ::google::protobuf::Arena* arena,
    const RegisterRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RegisterRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, agent_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, agent_type_),
           offsetof(Impl_, rpc_version_) -
               offsetof(Impl_, agent_type_) +
               sizeof(Impl_::rpc_version_));

  // @@protoc_insertion_point(copy_constructor:protos.RegisterRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : team_name_(arena),
        _cached_size_{0} {}

inline void RegisterRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, agent_type_),
           0,
           offsetof(Impl_, rpc_version_) -
               offsetof(Impl_, agent_type_) +
               sizeof(Impl_::rpc_version_));
}
RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:protos.RegisterRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisterRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RegisterRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RegisterRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RegisterRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RegisterRequest>(),
            ::google::protobuf::Message::GetNewImpl<RegisterRequest>(),
            ::google::protobuf::Message::GetClearImpl<RegisterRequest>(), &RegisterRequest::ByteSizeLong,
                &RegisterRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_._cached_size_),
            false,
        },
        &RegisterRequest::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RegisterRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 40, 2> RegisterRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RegisterRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 rpc_version = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterRequest, _impl_.rpc_version_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.rpc_version_)}},
    // .protos.AgentType agent_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterRequest, _impl_.agent_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.agent_type_)}},
    // string team_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.team_name_)}},
    // int32 uniform_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterRequest, _impl_.uniform_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.uniform_number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.AgentType agent_type = 1;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.agent_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string team_name = 2;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.team_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 uniform_number = 3;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 rpc_version = 4;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.rpc_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\26\0\11\0\0\0\0\0"
    "protos.RegisterRequest"
    "team_name"
  }},
};

PROTOBUF_NOINLINE void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RegisterRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_name_.ClearToEmpty();
  ::memset(&_impl_.agent_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rpc_version_) -
      reinterpret_cast<char*>(&_impl_.agent_type_)) + sizeof(_impl_.rpc_version_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RegisterRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RegisterRequest& this_ = static_cast<const RegisterRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RegisterRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RegisterRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RegisterRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.AgentType agent_type = 1;
          if (this_._internal_agent_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_agent_type(), target);
          }

          // string team_name = 2;
          if (!this_._internal_team_name().empty()) {
            const std::string& _s = this_._internal_team_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.RegisterRequest.team_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 uniform_number = 3;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 rpc_version = 4;
          if (this_._internal_rpc_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_rpc_version(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RegisterRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RegisterRequest::ByteSizeLong(const MessageLite& base) {
          const RegisterRequest& this_ = static_cast<const RegisterRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RegisterRequest::ByteSizeLong() const {
          const RegisterRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RegisterRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string team_name = 2;
            if (!this_._internal_team_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_team_name());
            }
            // .protos.AgentType agent_type = 1;
            if (this_._internal_agent_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_agent_type());
            }
            // int32 uniform_number = 3;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 rpc_version = 4;
            if (this_._internal_rpc_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_rpc_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RegisterRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RegisterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_team_name().empty()) {
    _this->_internal_set_team_name(from._internal_team_name());
  }
  if (from._internal_agent_type() != 0) {
    _this->_impl_.agent_type_ = from._impl_.agent_type_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_rpc_version() != 0) {
    _this->_impl_.rpc_version_ = from._impl_.rpc_version_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RegisterRequest::InternalSwap(RegisterRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.team_name_, &other->_impl_.team_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.rpc_version_)
      + sizeof(RegisterRequest::_impl_.rpc_version_)
      - PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.agent_type_)>(
          reinterpret_cast<char*>(&_impl_.agent_type_),
          reinterpret_cast<char*>(&other->_impl_.agent_type_));
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RegisterResponse)
}
inline PROTOBUF_NDEBUG_INLINE RegisterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::RegisterResponse& from_msg)
      : team_name_(arena, from.team_name_),
        _cached_size_{0} {}

RegisterResponse::RegisterResponse(
    ::google::protobuf::Arena* arena,
    const RegisterResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RegisterResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_id_),
           offsetof(Impl_, rpc_server_language_type_) -
               offsetof(Impl_, client_id_) +
               sizeof(Impl_::rpc_server_language_type_));

  // @@protoc_insertion_point(copy_constructor:protos.RegisterResponse)
}
inline PROTOBUF_NDEBUG_INLINE RegisterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : team_name_(arena),
        _cached_size_{0} {}

inline void RegisterResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_id_),
           0,
           offsetof(Impl_, rpc_server_language_type_) -
               offsetof(Impl_, client_id_) +
               sizeof(Impl_::rpc_server_language_type_));
}
RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:protos.RegisterResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisterResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RegisterResponse::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RegisterResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RegisterResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RegisterResponse>(),
            ::google::protobuf::Message::GetNewImpl<RegisterResponse>(),
            ::google::protobuf::Message::GetClearImpl<RegisterResponse>(), &RegisterResponse::ByteSizeLong,
                &RegisterResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_._cached_size_),
            false,
        },
        &RegisterResponse::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RegisterResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 41, 2> RegisterResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RegisterResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 client_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterResponse, _impl_.client_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.client_id_)}},
    // .protos.AgentType agent_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterResponse, _impl_.agent_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.agent_type_)}},
    // string team_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.team_name_)}},
    // int32 uniform_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterResponse, _impl_.uniform_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.uniform_number_)}},
    // .protos.RpcServerLanguageType rpc_server_language_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterResponse, _impl_.rpc_server_language_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.rpc_server_language_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 client_id = 1;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.client_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.AgentType agent_type = 2;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.agent_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string team_name = 3;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.team_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 uniform_number = 4;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcServerLanguageType rpc_server_language_type = 5;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.rpc_server_language_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\27\0\0\11\0\0\0\0"
    "protos.RegisterResponse"
    "team_name"
  }},
};

PROTOBUF_NOINLINE void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RegisterResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_name_.ClearToEmpty();
  ::memset(&_impl_.client_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rpc_server_language_type_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.rpc_server_language_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RegisterResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RegisterResponse& this_ = static_cast<const RegisterResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RegisterResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RegisterResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RegisterResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 client_id = 1;
          if (this_._internal_client_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_client_id(), target);
          }

          // .protos.AgentType agent_type = 2;
          if (this_._internal_agent_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_agent_type(), target);
          }

          // string team_name = 3;
          if (!this_._internal_team_name().empty()) {
            const std::string& _s = this_._internal_team_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.RegisterResponse.team_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 uniform_number = 4;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_uniform_number(), target);
          }

          // .protos.RpcServerLanguageType rpc_server_language_type = 5;
          if (this_._internal_rpc_server_language_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_rpc_server_language_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RegisterResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RegisterResponse::ByteSizeLong(const MessageLite& base) {
          const RegisterResponse& this_ = static_cast<const RegisterResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RegisterResponse::ByteSizeLong() const {
          const RegisterResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RegisterResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string team_name = 3;
            if (!this_._internal_team_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_team_name());
            }
            // int32 client_id = 1;
            if (this_._internal_client_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_client_id());
            }
            // .protos.AgentType agent_type = 2;
            if (this_._internal_agent_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_agent_type());
            }
            // int32 uniform_number = 4;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // .protos.RpcServerLanguageType rpc_server_language_type = 5;
            if (this_._internal_rpc_server_language_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_rpc_server_language_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RegisterResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RegisterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_team_name().empty()) {
    _this->_internal_set_team_name(from._internal_team_name());
  }
  if (from._internal_client_id() != 0) {
    _this->_impl_.client_id_ = from._impl_.client_id_;
  }
  if (from._internal_agent_type() != 0) {
    _this->_impl_.agent_type_ = from._impl_.agent_type_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_rpc_server_language_type() != 0) {
    _this->_impl_.rpc_server_language_type_ = from._impl_.rpc_server_language_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RegisterResponse::InternalSwap(RegisterResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.team_name_, &other->_impl_.team_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.rpc_server_language_type_)
      + sizeof(RegisterResponse::_impl_.rpc_server_language_type_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Ball::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Ball>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Ball, _impl_._has_bits_);
};

Ball::Ball(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Ball)
}
inline PROTOBUF_NDEBUG_INLINE Ball::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Ball& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Ball::Ball(
    ::google::protobuf::Arena* arena,
    const Ball& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Ball* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.relative_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.relative_position_)
                        : nullptr;
  _impl_.seen_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_position_)
                        : nullptr;
  _impl_.heard_position_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.heard_position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.velocity_)
                        : nullptr;
  _impl_.seen_velocity_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_velocity_)
                        : nullptr;
  _impl_.heard_velocity_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.heard_velocity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pos_count_),
           offsetof(Impl_, angle_from_self_) -
               offsetof(Impl_, pos_count_) +
               sizeof(Impl_::angle_from_self_));

  // @@protoc_insertion_point(copy_constructor:protos.Ball)
}
inline PROTOBUF_NDEBUG_INLINE Ball::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Ball::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, angle_from_self_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::angle_from_self_));
}
Ball::~Ball() {
  // @@protoc_insertion_point(destructor:protos.Ball)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Ball::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.relative_position_;
  delete _impl_.seen_position_;
  delete _impl_.heard_position_;
  delete _impl_.velocity_;
  delete _impl_.seen_velocity_;
  delete _impl_.heard_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Ball::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Ball_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Ball::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Ball>(),
            ::google::protobuf::Message::GetNewImpl<Ball>(),
            ::google::protobuf::Message::GetClearImpl<Ball>(), &Ball::ByteSizeLong,
                &Ball::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Ball, _impl_._cached_size_),
            false,
        },
        &Ball::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Ball::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 7, 0, 2> Ball::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Ball, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Ball>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.position_)}},
    // .protos.RpcVector2D relative_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Ball, _impl_.relative_position_)}},
    // .protos.RpcVector2D seen_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_position_)}},
    // .protos.RpcVector2D heard_position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_position_)}},
    // .protos.RpcVector2D velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Ball, _impl_.velocity_)}},
    // .protos.RpcVector2D seen_velocity = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_velocity_)}},
    // .protos.RpcVector2D heard_velocity = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_velocity_)}},
    // int32 pos_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.pos_count_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.pos_count_)}},
    // int32 seen_pos_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.seen_pos_count_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_pos_count_)}},
    // int32 heard_pos_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.heard_pos_count_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_pos_count_)}},
    // int32 vel_count = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.vel_count_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.vel_count_)}},
    // int32 seen_vel_count = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.seen_vel_count_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_vel_count_)}},
    // int32 heard_vel_count = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.heard_vel_count_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_vel_count_)}},
    // int32 lost_count = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.lost_count_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.lost_count_)}},
    // int32 ghost_count = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ball, _impl_.ghost_count_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.ghost_count_)}},
    // float dist_from_self = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.dist_from_self_)}},
    // float angle_from_self = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(Ball, _impl_.angle_from_self_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D position = 1;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D relative_position = 2;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.relative_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_position = 3;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D heard_position = 4;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_position_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D velocity = 5;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.velocity_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_velocity = 6;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_velocity_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D heard_velocity = 7;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_velocity_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 pos_count = 8;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_pos_count = 9;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heard_pos_count = 10;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 vel_count = 11;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_vel_count = 12;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.seen_vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heard_vel_count = 13;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.heard_vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lost_count = 14;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.lost_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ghost_count = 15;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.ghost_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float dist_from_self = 16;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.dist_from_self_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_from_self = 17;
    {PROTOBUF_FIELD_OFFSET(Ball, _impl_.angle_from_self_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Ball)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.relative_position_ != nullptr);
      _impl_.relative_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.seen_position_ != nullptr);
      _impl_.seen_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.heard_position_ != nullptr);
      _impl_.heard_position_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.seen_velocity_ != nullptr);
      _impl_.seen_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.heard_velocity_ != nullptr);
      _impl_.heard_velocity_->Clear();
    }
  }
  ::memset(&_impl_.pos_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.angle_from_self_) -
      reinterpret_cast<char*>(&_impl_.pos_count_)) + sizeof(_impl_.angle_from_self_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Ball::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Ball& this_ = static_cast<const Ball&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Ball::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Ball& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Ball)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D relative_position = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.relative_position_, this_._impl_.relative_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_position = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.seen_position_, this_._impl_.seen_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D heard_position = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.heard_position_, this_._impl_.heard_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D velocity = 5;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_velocity = 6;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.seen_velocity_, this_._impl_.seen_velocity_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D heard_velocity = 7;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.heard_velocity_, this_._impl_.heard_velocity_->GetCachedSize(), target,
                stream);
          }

          // int32 pos_count = 8;
          if (this_._internal_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_pos_count(), target);
          }

          // int32 seen_pos_count = 9;
          if (this_._internal_seen_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_seen_pos_count(), target);
          }

          // int32 heard_pos_count = 10;
          if (this_._internal_heard_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_heard_pos_count(), target);
          }

          // int32 vel_count = 11;
          if (this_._internal_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_vel_count(), target);
          }

          // int32 seen_vel_count = 12;
          if (this_._internal_seen_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_seen_vel_count(), target);
          }

          // int32 heard_vel_count = 13;
          if (this_._internal_heard_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_heard_vel_count(), target);
          }

          // int32 lost_count = 14;
          if (this_._internal_lost_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_lost_count(), target);
          }

          // int32 ghost_count = 15;
          if (this_._internal_ghost_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_ghost_count(), target);
          }

          // float dist_from_self = 16;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_self()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_dist_from_self(), target);
          }

          // float angle_from_self = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_self()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_angle_from_self(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Ball)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Ball::ByteSizeLong(const MessageLite& base) {
          const Ball& this_ = static_cast<const Ball&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Ball::ByteSizeLong() const {
          const Ball& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Ball)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000007fu) {
            // .protos.RpcVector2D position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .protos.RpcVector2D relative_position = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.relative_position_);
            }
            // .protos.RpcVector2D seen_position = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_position_);
            }
            // .protos.RpcVector2D heard_position = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heard_position_);
            }
            // .protos.RpcVector2D velocity = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
            // .protos.RpcVector2D seen_velocity = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_velocity_);
            }
            // .protos.RpcVector2D heard_velocity = 7;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heard_velocity_);
            }
          }
           {
            // int32 pos_count = 8;
            if (this_._internal_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pos_count());
            }
            // int32 seen_pos_count = 9;
            if (this_._internal_seen_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_pos_count());
            }
            // int32 heard_pos_count = 10;
            if (this_._internal_heard_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_heard_pos_count());
            }
            // int32 vel_count = 11;
            if (this_._internal_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_vel_count());
            }
            // int32 seen_vel_count = 12;
            if (this_._internal_seen_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_vel_count());
            }
            // int32 heard_vel_count = 13;
            if (this_._internal_heard_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_heard_vel_count());
            }
            // int32 lost_count = 14;
            if (this_._internal_lost_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lost_count());
            }
            // int32 ghost_count = 15;
            if (this_._internal_ghost_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ghost_count());
            }
            // float dist_from_self = 16;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_self()) != 0) {
              total_size += 6;
            }
            // float angle_from_self = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_self()) != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Ball::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Ball*>(&to_msg);
  auto& from = static_cast<const Ball&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Ball)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.relative_position_ != nullptr);
      if (_this->_impl_.relative_position_ == nullptr) {
        _this->_impl_.relative_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.relative_position_);
      } else {
        _this->_impl_.relative_position_->MergeFrom(*from._impl_.relative_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.seen_position_ != nullptr);
      if (_this->_impl_.seen_position_ == nullptr) {
        _this->_impl_.seen_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_position_);
      } else {
        _this->_impl_.seen_position_->MergeFrom(*from._impl_.seen_position_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.heard_position_ != nullptr);
      if (_this->_impl_.heard_position_ == nullptr) {
        _this->_impl_.heard_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.heard_position_);
      } else {
        _this->_impl_.heard_position_->MergeFrom(*from._impl_.heard_position_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.seen_velocity_ != nullptr);
      if (_this->_impl_.seen_velocity_ == nullptr) {
        _this->_impl_.seen_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_velocity_);
      } else {
        _this->_impl_.seen_velocity_->MergeFrom(*from._impl_.seen_velocity_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.heard_velocity_ != nullptr);
      if (_this->_impl_.heard_velocity_ == nullptr) {
        _this->_impl_.heard_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.heard_velocity_);
      } else {
        _this->_impl_.heard_velocity_->MergeFrom(*from._impl_.heard_velocity_);
      }
    }
  }
  if (from._internal_pos_count() != 0) {
    _this->_impl_.pos_count_ = from._impl_.pos_count_;
  }
  if (from._internal_seen_pos_count() != 0) {
    _this->_impl_.seen_pos_count_ = from._impl_.seen_pos_count_;
  }
  if (from._internal_heard_pos_count() != 0) {
    _this->_impl_.heard_pos_count_ = from._impl_.heard_pos_count_;
  }
  if (from._internal_vel_count() != 0) {
    _this->_impl_.vel_count_ = from._impl_.vel_count_;
  }
  if (from._internal_seen_vel_count() != 0) {
    _this->_impl_.seen_vel_count_ = from._impl_.seen_vel_count_;
  }
  if (from._internal_heard_vel_count() != 0) {
    _this->_impl_.heard_vel_count_ = from._impl_.heard_vel_count_;
  }
  if (from._internal_lost_count() != 0) {
    _this->_impl_.lost_count_ = from._impl_.lost_count_;
  }
  if (from._internal_ghost_count() != 0) {
    _this->_impl_.ghost_count_ = from._impl_.ghost_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_from_self()) != 0) {
    _this->_impl_.dist_from_self_ = from._impl_.dist_from_self_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_from_self()) != 0) {
    _this->_impl_.angle_from_self_ = from._impl_.angle_from_self_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Ball::InternalSwap(Ball* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ball, _impl_.angle_from_self_)
      + sizeof(Ball::_impl_.angle_from_self_)
      - PROTOBUF_FIELD_OFFSET(Ball, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Player::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Player>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Player, _impl_._has_bits_);
};

Player::Player(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Player)
}
inline PROTOBUF_NDEBUG_INLINE Player::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Player& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Player::Player(
    ::google::protobuf::Arena* arena,
    const Player& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Player* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.seen_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_position_)
                        : nullptr;
  _impl_.heard_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.heard_position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.velocity_)
                        : nullptr;
  _impl_.seen_velocity_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_velocity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pos_count_),
           offsetof(Impl_, type_id_) -
               offsetof(Impl_, pos_count_) +
               sizeof(Impl_::type_id_));

  // @@protoc_insertion_point(copy_constructor:protos.Player)
}
inline PROTOBUF_NDEBUG_INLINE Player::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Player::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, type_id_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::type_id_));
}
Player::~Player() {
  // @@protoc_insertion_point(destructor:protos.Player)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Player::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.seen_position_;
  delete _impl_.heard_position_;
  delete _impl_.velocity_;
  delete _impl_.seen_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Player::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Player_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Player::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Player>(),
            ::google::protobuf::Message::GetNewImpl<Player>(),
            ::google::protobuf::Message::GetClearImpl<Player>(), &Player::ByteSizeLong,
                &Player::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Player, _impl_._cached_size_),
            false,
        },
        &Player::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Player::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 30, 5, 0, 2> Player::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Player, _impl_._has_bits_),
    0, // no _extensions_
    30, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3221225472,  // skipmap
    offsetof(decltype(_table_), field_entries),
    30,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Player>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.position_)}},
    // .protos.RpcVector2D seen_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_position_)}},
    // .protos.RpcVector2D heard_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Player, _impl_.heard_position_)}},
    // .protos.RpcVector2D velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Player, _impl_.velocity_)}},
    // .protos.RpcVector2D seen_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_velocity_)}},
    // int32 pos_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.pos_count_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.pos_count_)}},
    // int32 seen_pos_count = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.seen_pos_count_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_pos_count_)}},
    // int32 heard_pos_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.heard_pos_count_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.heard_pos_count_)}},
    // int32 vel_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.vel_count_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.vel_count_)}},
    // int32 seen_vel_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.seen_vel_count_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_vel_count_)}},
    // int32 ghost_count = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.ghost_count_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.ghost_count_)}},
    // float dist_from_self = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.dist_from_self_)}},
    // float angle_from_self = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.angle_from_self_)}},
    // int32 id = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.id_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.id_)}},
    // .protos.Side side = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Player, _impl_.side_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.side_)}},
    // int32 uniform_number = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.uniform_number_)}},
    // int32 uniform_number_count = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.uniform_number_count_)}},
    // bool is_goalie = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.is_goalie_)}},
    // float body_direction = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.body_direction_)}},
    // int32 body_direction_count = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.body_direction_count_)}},
    // float face_direction = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.face_direction_)}},
    // int32 face_direction_count = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.face_direction_count_)}},
    // float point_to_direction = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.point_to_direction_)}},
    // int32 point_to_direction_count = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.point_to_direction_count_)}},
    // bool is_kicking = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.is_kicking_)}},
    // float dist_from_ball = 26;
    {::_pbi::TcParser::FastF32S2,
     {469, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.dist_from_ball_)}},
    // float angle_from_ball = 27;
    {::_pbi::TcParser::FastF32S2,
     {477, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.angle_from_ball_)}},
    // int32 ball_reach_steps = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.ball_reach_steps_)}},
    // bool is_tackling = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.is_tackling_)}},
    // int32 type_id = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.type_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D position = 1;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_position = 2;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D heard_position = 3;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.heard_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D velocity = 4;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.velocity_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_velocity_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 pos_count = 6;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_pos_count = 7;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heard_pos_count = 8;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.heard_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 vel_count = 9;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_vel_count = 10;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.seen_vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ghost_count = 11;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.ghost_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float dist_from_self = 12;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.dist_from_self_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_from_self = 13;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.angle_from_self_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 id = 14;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Side side = 15;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 uniform_number = 16;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 uniform_number_count = 17;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.uniform_number_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_goalie = 18;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.is_goalie_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float body_direction = 19;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 body_direction_count = 20;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.body_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float face_direction = 21;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.face_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 face_direction_count = 22;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.face_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float point_to_direction = 23;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.point_to_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 point_to_direction_count = 24;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.point_to_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_kicking = 25;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.is_kicking_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float dist_from_ball = 26;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.dist_from_ball_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_from_ball = 27;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.angle_from_ball_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 ball_reach_steps = 28;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.ball_reach_steps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_tackling = 29;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.is_tackling_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 type_id = 30;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.type_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Player)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.seen_position_ != nullptr);
      _impl_.seen_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.heard_position_ != nullptr);
      _impl_.heard_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.seen_velocity_ != nullptr);
      _impl_.seen_velocity_->Clear();
    }
  }
  ::memset(&_impl_.pos_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_id_) -
      reinterpret_cast<char*>(&_impl_.pos_count_)) + sizeof(_impl_.type_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Player::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Player& this_ = static_cast<const Player&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Player::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Player& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Player)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_position = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.seen_position_, this_._impl_.seen_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D heard_position = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.heard_position_, this_._impl_.heard_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D velocity = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_velocity = 5;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.seen_velocity_, this_._impl_.seen_velocity_->GetCachedSize(), target,
                stream);
          }

          // int32 pos_count = 6;
          if (this_._internal_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_pos_count(), target);
          }

          // int32 seen_pos_count = 7;
          if (this_._internal_seen_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_seen_pos_count(), target);
          }

          // int32 heard_pos_count = 8;
          if (this_._internal_heard_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_heard_pos_count(), target);
          }

          // int32 vel_count = 9;
          if (this_._internal_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_vel_count(), target);
          }

          // int32 seen_vel_count = 10;
          if (this_._internal_seen_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_seen_vel_count(), target);
          }

          // int32 ghost_count = 11;
          if (this_._internal_ghost_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_ghost_count(), target);
          }

          // float dist_from_self = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_self()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_dist_from_self(), target);
          }

          // float angle_from_self = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_self()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_angle_from_self(), target);
          }

          // int32 id = 14;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_id(), target);
          }

          // .protos.Side side = 15;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                15, this_._internal_side(), target);
          }

          // int32 uniform_number = 16;
          if (this_._internal_uniform_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_uniform_number(), target);
          }

          // int32 uniform_number_count = 17;
          if (this_._internal_uniform_number_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                17, this_._internal_uniform_number_count(), target);
          }

          // bool is_goalie = 18;
          if (this_._internal_is_goalie() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_is_goalie(), target);
          }

          // float body_direction = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_body_direction(), target);
          }

          // int32 body_direction_count = 20;
          if (this_._internal_body_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                20, this_._internal_body_direction_count(), target);
          }

          // float face_direction = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_face_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_face_direction(), target);
          }

          // int32 face_direction_count = 22;
          if (this_._internal_face_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                22, this_._internal_face_direction_count(), target);
          }

          // float point_to_direction = 23;
          if (::absl::bit_cast<::uint32_t>(this_._internal_point_to_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                23, this_._internal_point_to_direction(), target);
          }

          // int32 point_to_direction_count = 24;
          if (this_._internal_point_to_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                24, this_._internal_point_to_direction_count(), target);
          }

          // bool is_kicking = 25;
          if (this_._internal_is_kicking() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                25, this_._internal_is_kicking(), target);
          }

          // float dist_from_ball = 26;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_ball()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                26, this_._internal_dist_from_ball(), target);
          }

          // float angle_from_ball = 27;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_ball()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                27, this_._internal_angle_from_ball(), target);
          }

          // int32 ball_reach_steps = 28;
          if (this_._internal_ball_reach_steps() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                28, this_._internal_ball_reach_steps(), target);
          }

          // bool is_tackling = 29;
          if (this_._internal_is_tackling() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                29, this_._internal_is_tackling(), target);
          }

          // int32 type_id = 30;
          if (this_._internal_type_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                30, this_._internal_type_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Player)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Player::ByteSizeLong(const MessageLite& base) {
          const Player& this_ = static_cast<const Player&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Player::ByteSizeLong() const {
          const Player& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Player)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .protos.RpcVector2D position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .protos.RpcVector2D seen_position = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_position_);
            }
            // .protos.RpcVector2D heard_position = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heard_position_);
            }
            // .protos.RpcVector2D velocity = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
            // .protos.RpcVector2D seen_velocity = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_velocity_);
            }
          }
           {
            // int32 pos_count = 6;
            if (this_._internal_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pos_count());
            }
            // int32 seen_pos_count = 7;
            if (this_._internal_seen_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_pos_count());
            }
            // int32 heard_pos_count = 8;
            if (this_._internal_heard_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_heard_pos_count());
            }
            // int32 vel_count = 9;
            if (this_._internal_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_vel_count());
            }
            // int32 seen_vel_count = 10;
            if (this_._internal_seen_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_vel_count());
            }
            // int32 ghost_count = 11;
            if (this_._internal_ghost_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ghost_count());
            }
            // float dist_from_self = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_self()) != 0) {
              total_size += 5;
            }
            // float angle_from_self = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_self()) != 0) {
              total_size += 5;
            }
            // int32 id = 14;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // .protos.Side side = 15;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // int32 uniform_number = 16;
            if (this_._internal_uniform_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uniform_number());
            }
            // int32 uniform_number_count = 17;
            if (this_._internal_uniform_number_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uniform_number_count());
            }
            // float body_direction = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 6;
            }
            // int32 body_direction_count = 20;
            if (this_._internal_body_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_body_direction_count());
            }
            // float face_direction = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_face_direction()) != 0) {
              total_size += 6;
            }
            // int32 face_direction_count = 22;
            if (this_._internal_face_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_face_direction_count());
            }
            // float point_to_direction = 23;
            if (::absl::bit_cast<::uint32_t>(this_._internal_point_to_direction()) != 0) {
              total_size += 6;
            }
            // int32 point_to_direction_count = 24;
            if (this_._internal_point_to_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_point_to_direction_count());
            }
            // bool is_goalie = 18;
            if (this_._internal_is_goalie() != 0) {
              total_size += 3;
            }
            // bool is_kicking = 25;
            if (this_._internal_is_kicking() != 0) {
              total_size += 3;
            }
            // bool is_tackling = 29;
            if (this_._internal_is_tackling() != 0) {
              total_size += 3;
            }
            // float dist_from_ball = 26;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_ball()) != 0) {
              total_size += 6;
            }
            // float angle_from_ball = 27;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_ball()) != 0) {
              total_size += 6;
            }
            // int32 ball_reach_steps = 28;
            if (this_._internal_ball_reach_steps() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_ball_reach_steps());
            }
            // int32 type_id = 30;
            if (this_._internal_type_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_type_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Player::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Player)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.seen_position_ != nullptr);
      if (_this->_impl_.seen_position_ == nullptr) {
        _this->_impl_.seen_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_position_);
      } else {
        _this->_impl_.seen_position_->MergeFrom(*from._impl_.seen_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.heard_position_ != nullptr);
      if (_this->_impl_.heard_position_ == nullptr) {
        _this->_impl_.heard_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.heard_position_);
      } else {
        _this->_impl_.heard_position_->MergeFrom(*from._impl_.heard_position_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.seen_velocity_ != nullptr);
      if (_this->_impl_.seen_velocity_ == nullptr) {
        _this->_impl_.seen_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_velocity_);
      } else {
        _this->_impl_.seen_velocity_->MergeFrom(*from._impl_.seen_velocity_);
      }
    }
  }
  if (from._internal_pos_count() != 0) {
    _this->_impl_.pos_count_ = from._impl_.pos_count_;
  }
  if (from._internal_seen_pos_count() != 0) {
    _this->_impl_.seen_pos_count_ = from._impl_.seen_pos_count_;
  }
  if (from._internal_heard_pos_count() != 0) {
    _this->_impl_.heard_pos_count_ = from._impl_.heard_pos_count_;
  }
  if (from._internal_vel_count() != 0) {
    _this->_impl_.vel_count_ = from._impl_.vel_count_;
  }
  if (from._internal_seen_vel_count() != 0) {
    _this->_impl_.seen_vel_count_ = from._impl_.seen_vel_count_;
  }
  if (from._internal_ghost_count() != 0) {
    _this->_impl_.ghost_count_ = from._impl_.ghost_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_from_self()) != 0) {
    _this->_impl_.dist_from_self_ = from._impl_.dist_from_self_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_from_self()) != 0) {
    _this->_impl_.angle_from_self_ = from._impl_.angle_from_self_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_uniform_number_count() != 0) {
    _this->_impl_.uniform_number_count_ = from._impl_.uniform_number_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  if (from._internal_body_direction_count() != 0) {
    _this->_impl_.body_direction_count_ = from._impl_.body_direction_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_face_direction()) != 0) {
    _this->_impl_.face_direction_ = from._impl_.face_direction_;
  }
  if (from._internal_face_direction_count() != 0) {
    _this->_impl_.face_direction_count_ = from._impl_.face_direction_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_point_to_direction()) != 0) {
    _this->_impl_.point_to_direction_ = from._impl_.point_to_direction_;
  }
  if (from._internal_point_to_direction_count() != 0) {
    _this->_impl_.point_to_direction_count_ = from._impl_.point_to_direction_count_;
  }
  if (from._internal_is_goalie() != 0) {
    _this->_impl_.is_goalie_ = from._impl_.is_goalie_;
  }
  if (from._internal_is_kicking() != 0) {
    _this->_impl_.is_kicking_ = from._impl_.is_kicking_;
  }
  if (from._internal_is_tackling() != 0) {
    _this->_impl_.is_tackling_ = from._impl_.is_tackling_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_from_ball()) != 0) {
    _this->_impl_.dist_from_ball_ = from._impl_.dist_from_ball_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_from_ball()) != 0) {
    _this->_impl_.angle_from_ball_ = from._impl_.angle_from_ball_;
  }
  if (from._internal_ball_reach_steps() != 0) {
    _this->_impl_.ball_reach_steps_ = from._impl_.ball_reach_steps_;
  }
  if (from._internal_type_id() != 0) {
    _this->_impl_.type_id_ = from._impl_.type_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Player::InternalSwap(Player* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.type_id_)
      + sizeof(Player::_impl_.type_id_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Player::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Self::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Self>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Self, _impl_._has_bits_);
};

Self::Self(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Self)
}
inline PROTOBUF_NDEBUG_INLINE Self::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Self& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Self::Self(
    ::google::protobuf::Arena* arena,
    const Self& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Self* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.seen_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_position_)
                        : nullptr;
  _impl_.heard_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.heard_position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.velocity_)
                        : nullptr;
  _impl_.seen_velocity_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.seen_velocity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pos_count_),
           offsetof(Impl_, card_) -
               offsetof(Impl_, pos_count_) +
               sizeof(Impl_::card_));

  // @@protoc_insertion_point(copy_constructor:protos.Self)
}
inline PROTOBUF_NDEBUG_INLINE Self::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Self::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, card_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::card_));
}
Self::~Self() {
  // @@protoc_insertion_point(destructor:protos.Self)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Self::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.seen_position_;
  delete _impl_.heard_position_;
  delete _impl_.velocity_;
  delete _impl_.seen_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Self::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Self_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Self::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Self>(),
            ::google::protobuf::Message::GetNewImpl<Self>(),
            ::google::protobuf::Message::GetClearImpl<Self>(), &Self::ByteSizeLong,
                &Self::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Self, _impl_._cached_size_),
            false,
        },
        &Self::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Self::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 39, 5, 0, 7> Self::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Self, _impl_._has_bits_),
    0, // no _extensions_
    39, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    39,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Self>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.position_)}},
    // .protos.RpcVector2D seen_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_position_)}},
    // .protos.RpcVector2D heard_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Self, _impl_.heard_position_)}},
    // .protos.RpcVector2D velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Self, _impl_.velocity_)}},
    // .protos.RpcVector2D seen_velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_velocity_)}},
    // int32 pos_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.pos_count_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.pos_count_)}},
    // int32 seen_pos_count = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.seen_pos_count_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_pos_count_)}},
    // int32 heard_pos_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.heard_pos_count_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.heard_pos_count_)}},
    // int32 vel_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.vel_count_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.vel_count_)}},
    // int32 seen_vel_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.seen_vel_count_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_vel_count_)}},
    // int32 ghost_count = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.ghost_count_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.ghost_count_)}},
    // int32 id = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.id_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.id_)}},
    // .protos.Side side = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.side_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.side_)}},
    // int32 uniform_number = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.uniform_number_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.uniform_number_)}},
    // int32 uniform_number_count = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Self, _impl_.uniform_number_count_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.uniform_number_count_)}},
    // bool is_goalie = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.is_goalie_)}},
    // float body_direction = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.body_direction_)}},
    // int32 body_direction_count = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.body_direction_count_)}},
    // float face_direction = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.face_direction_)}},
    // int32 face_direction_count = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.face_direction_count_)}},
    // float point_to_direction = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.point_to_direction_)}},
    // int32 point_to_direction_count = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.point_to_direction_count_)}},
    // bool is_kicking = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.is_kicking_)}},
    // float dist_from_ball = 24;
    {::_pbi::TcParser::FastF32S2,
     {453, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.dist_from_ball_)}},
    // float angle_from_ball = 25;
    {::_pbi::TcParser::FastF32S2,
     {461, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.angle_from_ball_)}},
    // int32 ball_reach_steps = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.ball_reach_steps_)}},
    // bool is_tackling = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.is_tackling_)}},
    // float relative_neck_direction = 28;
    {::_pbi::TcParser::FastF32S2,
     {485, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.relative_neck_direction_)}},
    // float stamina = 29;
    {::_pbi::TcParser::FastF32S2,
     {493, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.stamina_)}},
    // bool is_kickable = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.is_kickable_)}},
    // float catch_probability = 31;
    {::_pbi::TcParser::FastF32S2,
     {509, 63, 0, PROTOBUF_FIELD_OFFSET(Self, _impl_.catch_probability_)}},
  }}, {{
    33, 0, 1,
    65408, 32,
    65535, 65535
  }}, {{
    // .protos.RpcVector2D position = 1;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_position = 2;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D heard_position = 3;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.heard_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D velocity = 4;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.velocity_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D seen_velocity = 5;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_velocity_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 pos_count = 6;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_pos_count = 7;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 heard_pos_count = 8;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.heard_pos_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 vel_count = 9;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seen_vel_count = 10;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.seen_vel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ghost_count = 11;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.ghost_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 id = 12;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Side side = 13;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 uniform_number = 14;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 uniform_number_count = 15;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.uniform_number_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_goalie = 16;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.is_goalie_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float body_direction = 17;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 body_direction_count = 18;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.body_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float face_direction = 19;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.face_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 face_direction_count = 20;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.face_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float point_to_direction = 21;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.point_to_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 point_to_direction_count = 22;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.point_to_direction_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_kicking = 23;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.is_kicking_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float dist_from_ball = 24;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.dist_from_ball_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angle_from_ball = 25;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.angle_from_ball_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 ball_reach_steps = 26;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.ball_reach_steps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_tackling = 27;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.is_tackling_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float relative_neck_direction = 28;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.relative_neck_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float stamina = 29;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.stamina_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool is_kickable = 30;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.is_kickable_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float catch_probability = 31;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.catch_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tackle_probability = 32;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.tackle_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float foul_probability = 33;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.foul_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .protos.ViewWidth view_width = 34;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.view_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 type_id = 35;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.type_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float kick_rate = 36;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.kick_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float recovery = 37;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.recovery_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float stamina_capacity = 38;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.stamina_capacity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .protos.CardType card = 39;
    {PROTOBUF_FIELD_OFFSET(Self, _impl_.card_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Self::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Self)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.seen_position_ != nullptr);
      _impl_.seen_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.heard_position_ != nullptr);
      _impl_.heard_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.seen_velocity_ != nullptr);
      _impl_.seen_velocity_->Clear();
    }
  }
  ::memset(&_impl_.pos_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.card_) -
      reinterpret_cast<char*>(&_impl_.pos_count_)) + sizeof(_impl_.card_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Self::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Self& this_ = static_cast<const Self&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Self::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Self& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Self)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_position = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.seen_position_, this_._impl_.seen_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D heard_position = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.heard_position_, this_._impl_.heard_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D velocity = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D seen_velocity = 5;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.seen_velocity_, this_._impl_.seen_velocity_->GetCachedSize(), target,
                stream);
          }

          // int32 pos_count = 6;
          if (this_._internal_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_pos_count(), target);
          }

          // int32 seen_pos_count = 7;
          if (this_._internal_seen_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_seen_pos_count(), target);
          }

          // int32 heard_pos_count = 8;
          if (this_._internal_heard_pos_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_heard_pos_count(), target);
          }

          // int32 vel_count = 9;
          if (this_._internal_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_vel_count(), target);
          }

          // int32 seen_vel_count = 10;
          if (this_._internal_seen_vel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_seen_vel_count(), target);
          }

          // int32 ghost_count = 11;
          if (this_._internal_ghost_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_ghost_count(), target);
          }

          // int32 id = 12;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_id(), target);
          }

          // .protos.Side side = 13;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                13, this_._internal_side(), target);
          }

          // int32 uniform_number = 14;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 uniform_number_count = 15;
          if (this_._internal_uniform_number_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_uniform_number_count(), target);
          }

          // bool is_goalie = 16;
          if (this_._internal_is_goalie() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                16, this_._internal_is_goalie(), target);
          }

          // float body_direction = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_body_direction(), target);
          }

          // int32 body_direction_count = 18;
          if (this_._internal_body_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                18, this_._internal_body_direction_count(), target);
          }

          // float face_direction = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_face_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_face_direction(), target);
          }

          // int32 face_direction_count = 20;
          if (this_._internal_face_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                20, this_._internal_face_direction_count(), target);
          }

          // float point_to_direction = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_point_to_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_point_to_direction(), target);
          }

          // int32 point_to_direction_count = 22;
          if (this_._internal_point_to_direction_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                22, this_._internal_point_to_direction_count(), target);
          }

          // bool is_kicking = 23;
          if (this_._internal_is_kicking() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                23, this_._internal_is_kicking(), target);
          }

          // float dist_from_ball = 24;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_ball()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                24, this_._internal_dist_from_ball(), target);
          }

          // float angle_from_ball = 25;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_ball()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                25, this_._internal_angle_from_ball(), target);
          }

          // int32 ball_reach_steps = 26;
          if (this_._internal_ball_reach_steps() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                26, this_._internal_ball_reach_steps(), target);
          }

          // bool is_tackling = 27;
          if (this_._internal_is_tackling() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                27, this_._internal_is_tackling(), target);
          }

          // float relative_neck_direction = 28;
          if (::absl::bit_cast<::uint32_t>(this_._internal_relative_neck_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                28, this_._internal_relative_neck_direction(), target);
          }

          // float stamina = 29;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                29, this_._internal_stamina(), target);
          }

          // bool is_kickable = 30;
          if (this_._internal_is_kickable() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_is_kickable(), target);
          }

          // float catch_probability = 31;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catch_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                31, this_._internal_catch_probability(), target);
          }

          // float tackle_probability = 32;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                32, this_._internal_tackle_probability(), target);
          }

          // float foul_probability = 33;
          if (::absl::bit_cast<::uint32_t>(this_._internal_foul_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                33, this_._internal_foul_probability(), target);
          }

          // .protos.ViewWidth view_width = 34;
          if (this_._internal_view_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                34, this_._internal_view_width(), target);
          }

          // int32 type_id = 35;
          if (this_._internal_type_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                35, this_._internal_type_id(), target);
          }

          // float kick_rate = 36;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                36, this_._internal_kick_rate(), target);
          }

          // float recovery = 37;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recovery()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                37, this_._internal_recovery(), target);
          }

          // float stamina_capacity = 38;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                38, this_._internal_stamina_capacity(), target);
          }

          // .protos.CardType card = 39;
          if (this_._internal_card() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                39, this_._internal_card(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Self)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Self::ByteSizeLong(const MessageLite& base) {
          const Self& this_ = static_cast<const Self&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Self::ByteSizeLong() const {
          const Self& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Self)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .protos.RpcVector2D position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .protos.RpcVector2D seen_position = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_position_);
            }
            // .protos.RpcVector2D heard_position = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heard_position_);
            }
            // .protos.RpcVector2D velocity = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
            // .protos.RpcVector2D seen_velocity = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seen_velocity_);
            }
          }
           {
            // int32 pos_count = 6;
            if (this_._internal_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pos_count());
            }
            // int32 seen_pos_count = 7;
            if (this_._internal_seen_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_pos_count());
            }
            // int32 heard_pos_count = 8;
            if (this_._internal_heard_pos_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_heard_pos_count());
            }
            // int32 vel_count = 9;
            if (this_._internal_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_vel_count());
            }
            // int32 seen_vel_count = 10;
            if (this_._internal_seen_vel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_seen_vel_count());
            }
            // int32 ghost_count = 11;
            if (this_._internal_ghost_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ghost_count());
            }
            // int32 id = 12;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // .protos.Side side = 13;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // int32 uniform_number = 14;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 uniform_number_count = 15;
            if (this_._internal_uniform_number_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number_count());
            }
            // float body_direction = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 6;
            }
            // int32 body_direction_count = 18;
            if (this_._internal_body_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_body_direction_count());
            }
            // float face_direction = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_face_direction()) != 0) {
              total_size += 6;
            }
            // int32 face_direction_count = 20;
            if (this_._internal_face_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_face_direction_count());
            }
            // float point_to_direction = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_point_to_direction()) != 0) {
              total_size += 6;
            }
            // int32 point_to_direction_count = 22;
            if (this_._internal_point_to_direction_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_point_to_direction_count());
            }
            // float dist_from_ball = 24;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_from_ball()) != 0) {
              total_size += 6;
            }
            // bool is_goalie = 16;
            if (this_._internal_is_goalie() != 0) {
              total_size += 3;
            }
            // bool is_kicking = 23;
            if (this_._internal_is_kicking() != 0) {
              total_size += 3;
            }
            // bool is_tackling = 27;
            if (this_._internal_is_tackling() != 0) {
              total_size += 3;
            }
            // bool is_kickable = 30;
            if (this_._internal_is_kickable() != 0) {
              total_size += 3;
            }
            // float angle_from_ball = 25;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_from_ball()) != 0) {
              total_size += 6;
            }
            // int32 ball_reach_steps = 26;
            if (this_._internal_ball_reach_steps() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_ball_reach_steps());
            }
            // float relative_neck_direction = 28;
            if (::absl::bit_cast<::uint32_t>(this_._internal_relative_neck_direction()) != 0) {
              total_size += 6;
            }
            // float stamina = 29;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina()) != 0) {
              total_size += 6;
            }
            // float catch_probability = 31;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catch_probability()) != 0) {
              total_size += 6;
            }
            // float tackle_probability = 32;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_probability()) != 0) {
              total_size += 6;
            }
            // float foul_probability = 33;
            if (::absl::bit_cast<::uint32_t>(this_._internal_foul_probability()) != 0) {
              total_size += 6;
            }
            // .protos.ViewWidth view_width = 34;
            if (this_._internal_view_width() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_view_width());
            }
            // int32 type_id = 35;
            if (this_._internal_type_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_type_id());
            }
            // float kick_rate = 36;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rate()) != 0) {
              total_size += 6;
            }
            // float recovery = 37;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recovery()) != 0) {
              total_size += 6;
            }
            // float stamina_capacity = 38;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
              total_size += 6;
            }
            // .protos.CardType card = 39;
            if (this_._internal_card() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_card());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Self::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Self*>(&to_msg);
  auto& from = static_cast<const Self&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Self)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.seen_position_ != nullptr);
      if (_this->_impl_.seen_position_ == nullptr) {
        _this->_impl_.seen_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_position_);
      } else {
        _this->_impl_.seen_position_->MergeFrom(*from._impl_.seen_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.heard_position_ != nullptr);
      if (_this->_impl_.heard_position_ == nullptr) {
        _this->_impl_.heard_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.heard_position_);
      } else {
        _this->_impl_.heard_position_->MergeFrom(*from._impl_.heard_position_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.seen_velocity_ != nullptr);
      if (_this->_impl_.seen_velocity_ == nullptr) {
        _this->_impl_.seen_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.seen_velocity_);
      } else {
        _this->_impl_.seen_velocity_->MergeFrom(*from._impl_.seen_velocity_);
      }
    }
  }
  if (from._internal_pos_count() != 0) {
    _this->_impl_.pos_count_ = from._impl_.pos_count_;
  }
  if (from._internal_seen_pos_count() != 0) {
    _this->_impl_.seen_pos_count_ = from._impl_.seen_pos_count_;
  }
  if (from._internal_heard_pos_count() != 0) {
    _this->_impl_.heard_pos_count_ = from._impl_.heard_pos_count_;
  }
  if (from._internal_vel_count() != 0) {
    _this->_impl_.vel_count_ = from._impl_.vel_count_;
  }
  if (from._internal_seen_vel_count() != 0) {
    _this->_impl_.seen_vel_count_ = from._impl_.seen_vel_count_;
  }
  if (from._internal_ghost_count() != 0) {
    _this->_impl_.ghost_count_ = from._impl_.ghost_count_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_uniform_number_count() != 0) {
    _this->_impl_.uniform_number_count_ = from._impl_.uniform_number_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  if (from._internal_body_direction_count() != 0) {
    _this->_impl_.body_direction_count_ = from._impl_.body_direction_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_face_direction()) != 0) {
    _this->_impl_.face_direction_ = from._impl_.face_direction_;
  }
  if (from._internal_face_direction_count() != 0) {
    _this->_impl_.face_direction_count_ = from._impl_.face_direction_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_point_to_direction()) != 0) {
    _this->_impl_.point_to_direction_ = from._impl_.point_to_direction_;
  }
  if (from._internal_point_to_direction_count() != 0) {
    _this->_impl_.point_to_direction_count_ = from._impl_.point_to_direction_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_from_ball()) != 0) {
    _this->_impl_.dist_from_ball_ = from._impl_.dist_from_ball_;
  }
  if (from._internal_is_goalie() != 0) {
    _this->_impl_.is_goalie_ = from._impl_.is_goalie_;
  }
  if (from._internal_is_kicking() != 0) {
    _this->_impl_.is_kicking_ = from._impl_.is_kicking_;
  }
  if (from._internal_is_tackling() != 0) {
    _this->_impl_.is_tackling_ = from._impl_.is_tackling_;
  }
  if (from._internal_is_kickable() != 0) {
    _this->_impl_.is_kickable_ = from._impl_.is_kickable_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_from_ball()) != 0) {
    _this->_impl_.angle_from_ball_ = from._impl_.angle_from_ball_;
  }
  if (from._internal_ball_reach_steps() != 0) {
    _this->_impl_.ball_reach_steps_ = from._impl_.ball_reach_steps_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_relative_neck_direction()) != 0) {
    _this->_impl_.relative_neck_direction_ = from._impl_.relative_neck_direction_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina()) != 0) {
    _this->_impl_.stamina_ = from._impl_.stamina_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catch_probability()) != 0) {
    _this->_impl_.catch_probability_ = from._impl_.catch_probability_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_probability()) != 0) {
    _this->_impl_.tackle_probability_ = from._impl_.tackle_probability_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_foul_probability()) != 0) {
    _this->_impl_.foul_probability_ = from._impl_.foul_probability_;
  }
  if (from._internal_view_width() != 0) {
    _this->_impl_.view_width_ = from._impl_.view_width_;
  }
  if (from._internal_type_id() != 0) {
    _this->_impl_.type_id_ = from._impl_.type_id_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rate()) != 0) {
    _this->_impl_.kick_rate_ = from._impl_.kick_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_recovery()) != 0) {
    _this->_impl_.recovery_ = from._impl_.recovery_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_capacity()) != 0) {
    _this->_impl_.stamina_capacity_ = from._impl_.stamina_capacity_;
  }
  if (from._internal_card() != 0) {
    _this->_impl_.card_ = from._impl_.card_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Self::CopyFrom(const Self& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Self)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Self::InternalSwap(Self* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Self, _impl_.card_)
      + sizeof(Self::_impl_.card_)
      - PROTOBUF_FIELD_OFFSET(Self, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Self::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InterceptInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InterceptInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_._has_bits_);
};

InterceptInfo::InterceptInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.InterceptInfo)
}
inline PROTOBUF_NDEBUG_INLINE InterceptInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::InterceptInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InterceptInfo::InterceptInfo(
    ::google::protobuf::Arena* arena,
    const InterceptInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InterceptInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.final_self_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.final_self_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, action_type_),
           offsetof(Impl_, value_) -
               offsetof(Impl_, action_type_) +
               sizeof(Impl_::value_));

  // @@protoc_insertion_point(copy_constructor:protos.InterceptInfo)
}
inline PROTOBUF_NDEBUG_INLINE InterceptInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InterceptInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, final_self_position_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, final_self_position_) +
               sizeof(Impl_::value_));
}
InterceptInfo::~InterceptInfo() {
  // @@protoc_insertion_point(destructor:protos.InterceptInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InterceptInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.final_self_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InterceptInfo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InterceptInfo_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InterceptInfo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InterceptInfo>(),
            ::google::protobuf::Message::GetNewImpl<InterceptInfo>(),
            ::google::protobuf::Message::GetClearImpl<InterceptInfo>(), &InterceptInfo::ByteSizeLong,
                &InterceptInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_._cached_size_),
            false,
        },
        &InterceptInfo::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InterceptInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> InterceptInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::InterceptInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.InterceptActionType action_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptInfo, _impl_.action_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.action_type_)}},
    // int32 turn_steps = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptInfo, _impl_.turn_steps_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.turn_steps_)}},
    // float turn_angle = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.turn_angle_)}},
    // int32 dash_steps = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptInfo, _impl_.dash_steps_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_steps_)}},
    // float dash_power = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_power_)}},
    // float dash_dir = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_dir_)}},
    // .protos.RpcVector2D final_self_position = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_self_position_)}},
    // float final_ball_dist = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_ball_dist_)}},
    // float final_stamina = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_stamina_)}},
    // float value = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.InterceptActionType action_type = 1;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.action_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn_steps = 2;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.turn_steps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float turn_angle = 3;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.turn_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 dash_steps = 4;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_steps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float dash_power = 5;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_dir = 6;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.dash_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .protos.RpcVector2D final_self_position = 7;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_self_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float final_ball_dist = 8;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_ball_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float final_stamina = 9;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_stamina_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float value = 10;
    {PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InterceptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.InterceptInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.final_self_position_ != nullptr);
    _impl_.final_self_position_->Clear();
  }
  ::memset(&_impl_.action_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.action_type_)) + sizeof(_impl_.value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InterceptInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InterceptInfo& this_ = static_cast<const InterceptInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InterceptInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InterceptInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.InterceptInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.InterceptActionType action_type = 1;
          if (this_._internal_action_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_action_type(), target);
          }

          // int32 turn_steps = 2;
          if (this_._internal_turn_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_turn_steps(), target);
          }

          // float turn_angle = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_turn_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_turn_angle(), target);
          }

          // int32 dash_steps = 4;
          if (this_._internal_dash_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_dash_steps(), target);
          }

          // float dash_power = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_dash_power(), target);
          }

          // float dash_dir = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_dir()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_dash_dir(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D final_self_position = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.final_self_position_, this_._impl_.final_self_position_->GetCachedSize(), target,
                stream);
          }

          // float final_ball_dist = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_final_ball_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_final_ball_dist(), target);
          }

          // float final_stamina = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_final_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_final_stamina(), target);
          }

          // float value = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.InterceptInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InterceptInfo::ByteSizeLong(const MessageLite& base) {
          const InterceptInfo& this_ = static_cast<const InterceptInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InterceptInfo::ByteSizeLong() const {
          const InterceptInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.InterceptInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D final_self_position = 7;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.final_self_position_);
            }
          }
           {
            // .protos.InterceptActionType action_type = 1;
            if (this_._internal_action_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_action_type());
            }
            // int32 turn_steps = 2;
            if (this_._internal_turn_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_steps());
            }
            // float turn_angle = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_turn_angle()) != 0) {
              total_size += 5;
            }
            // int32 dash_steps = 4;
            if (this_._internal_dash_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_dash_steps());
            }
            // float dash_power = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
              total_size += 5;
            }
            // float dash_dir = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_dir()) != 0) {
              total_size += 5;
            }
            // float final_ball_dist = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_final_ball_dist()) != 0) {
              total_size += 5;
            }
            // float final_stamina = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_final_stamina()) != 0) {
              total_size += 5;
            }
            // float value = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_value()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InterceptInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InterceptInfo*>(&to_msg);
  auto& from = static_cast<const InterceptInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.InterceptInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.final_self_position_ != nullptr);
    if (_this->_impl_.final_self_position_ == nullptr) {
      _this->_impl_.final_self_position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.final_self_position_);
    } else {
      _this->_impl_.final_self_position_->MergeFrom(*from._impl_.final_self_position_);
    }
  }
  if (from._internal_action_type() != 0) {
    _this->_impl_.action_type_ = from._impl_.action_type_;
  }
  if (from._internal_turn_steps() != 0) {
    _this->_impl_.turn_steps_ = from._impl_.turn_steps_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_turn_angle()) != 0) {
    _this->_impl_.turn_angle_ = from._impl_.turn_angle_;
  }
  if (from._internal_dash_steps() != 0) {
    _this->_impl_.dash_steps_ = from._impl_.dash_steps_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power()) != 0) {
    _this->_impl_.dash_power_ = from._impl_.dash_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_dir()) != 0) {
    _this->_impl_.dash_dir_ = from._impl_.dash_dir_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_final_ball_dist()) != 0) {
    _this->_impl_.final_ball_dist_ = from._impl_.final_ball_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_final_stamina()) != 0) {
    _this->_impl_.final_stamina_ = from._impl_.final_stamina_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_value()) != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InterceptInfo::CopyFrom(const InterceptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.InterceptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InterceptInfo::InternalSwap(InterceptInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.value_)
      + sizeof(InterceptInfo::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(InterceptInfo, _impl_.final_self_position_)>(
          reinterpret_cast<char*>(&_impl_.final_self_position_),
          reinterpret_cast<char*>(&other->_impl_.final_self_position_));
}

::google::protobuf::Metadata InterceptInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InterceptTable::_Internal {
 public:
};

InterceptTable::InterceptTable(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.InterceptTable)
}
inline PROTOBUF_NDEBUG_INLINE InterceptTable::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::InterceptTable& from_msg)
      : self_intercept_info_{visibility, arena, from.self_intercept_info_},
        _cached_size_{0} {}

InterceptTable::InterceptTable(
    ::google::protobuf::Arena* arena,
    const InterceptTable& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InterceptTable* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, self_reach_steps_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, self_reach_steps_),
           offsetof(Impl_, second_opponent_id_) -
               offsetof(Impl_, self_reach_steps_) +
               sizeof(Impl_::second_opponent_id_));

  // @@protoc_insertion_point(copy_constructor:protos.InterceptTable)
}
inline PROTOBUF_NDEBUG_INLINE InterceptTable::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : self_intercept_info_{visibility, arena},
        _cached_size_{0} {}

inline void InterceptTable::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, self_reach_steps_),
           0,
           offsetof(Impl_, second_opponent_id_) -
               offsetof(Impl_, self_reach_steps_) +
               sizeof(Impl_::second_opponent_id_));
}
InterceptTable::~InterceptTable() {
  // @@protoc_insertion_point(destructor:protos.InterceptTable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InterceptTable::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InterceptTable::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InterceptTable_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InterceptTable::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InterceptTable>(),
            ::google::protobuf::Message::GetNewImpl<InterceptTable>(),
            ::google::protobuf::Message::GetClearImpl<InterceptTable>(), &InterceptTable::ByteSizeLong,
                &InterceptTable::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_._cached_size_),
            false,
        },
        &InterceptTable::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InterceptTable::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> InterceptTable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::InterceptTable>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 self_reach_steps = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.self_reach_steps_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.self_reach_steps_)}},
    // int32 first_teammate_reach_steps = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.first_teammate_reach_steps_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_teammate_reach_steps_)}},
    // int32 second_teammate_reach_steps = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.second_teammate_reach_steps_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_teammate_reach_steps_)}},
    // int32 first_opponent_reach_steps = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.first_opponent_reach_steps_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_opponent_reach_steps_)}},
    // int32 second_opponent_reach_steps = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.second_opponent_reach_steps_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_opponent_reach_steps_)}},
    // int32 first_teammate_id = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.first_teammate_id_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_teammate_id_)}},
    // int32 second_teammate_id = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.second_teammate_id_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_teammate_id_)}},
    // int32 first_opponent_id = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.first_opponent_id_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_opponent_id_)}},
    // int32 second_opponent_id = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptTable, _impl_.second_opponent_id_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_opponent_id_)}},
    // repeated .protos.InterceptInfo self_intercept_info = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.self_intercept_info_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 self_reach_steps = 1;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.self_reach_steps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 first_teammate_reach_steps = 2;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_teammate_reach_steps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 second_teammate_reach_steps = 3;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_teammate_reach_steps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 first_opponent_reach_steps = 4;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_opponent_reach_steps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 second_opponent_reach_steps = 5;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_opponent_reach_steps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 first_teammate_id = 6;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_teammate_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 second_teammate_id = 7;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_teammate_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 first_opponent_id = 8;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.first_opponent_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 second_opponent_id = 9;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_opponent_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .protos.InterceptInfo self_intercept_info = 10;
    {PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.self_intercept_info_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::InterceptInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InterceptTable::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.InterceptTable)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.self_intercept_info_.Clear();
  ::memset(&_impl_.self_reach_steps_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.second_opponent_id_) -
      reinterpret_cast<char*>(&_impl_.self_reach_steps_)) + sizeof(_impl_.second_opponent_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InterceptTable::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InterceptTable& this_ = static_cast<const InterceptTable&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InterceptTable::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InterceptTable& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.InterceptTable)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 self_reach_steps = 1;
          if (this_._internal_self_reach_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_self_reach_steps(), target);
          }

          // int32 first_teammate_reach_steps = 2;
          if (this_._internal_first_teammate_reach_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_first_teammate_reach_steps(), target);
          }

          // int32 second_teammate_reach_steps = 3;
          if (this_._internal_second_teammate_reach_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_second_teammate_reach_steps(), target);
          }

          // int32 first_opponent_reach_steps = 4;
          if (this_._internal_first_opponent_reach_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_first_opponent_reach_steps(), target);
          }

          // int32 second_opponent_reach_steps = 5;
          if (this_._internal_second_opponent_reach_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_second_opponent_reach_steps(), target);
          }

          // int32 first_teammate_id = 6;
          if (this_._internal_first_teammate_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_first_teammate_id(), target);
          }

          // int32 second_teammate_id = 7;
          if (this_._internal_second_teammate_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_second_teammate_id(), target);
          }

          // int32 first_opponent_id = 8;
          if (this_._internal_first_opponent_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_first_opponent_id(), target);
          }

          // int32 second_opponent_id = 9;
          if (this_._internal_second_opponent_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_second_opponent_id(), target);
          }

          // repeated .protos.InterceptInfo self_intercept_info = 10;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_self_intercept_info_size());
               i < n; i++) {
            const auto& repfield = this_._internal_self_intercept_info().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    10, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.InterceptTable)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InterceptTable::ByteSizeLong(const MessageLite& base) {
          const InterceptTable& this_ = static_cast<const InterceptTable&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InterceptTable::ByteSizeLong() const {
          const InterceptTable& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.InterceptTable)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protos.InterceptInfo self_intercept_info = 10;
             {
              total_size += 1UL * this_._internal_self_intercept_info_size();
              for (const auto& msg : this_._internal_self_intercept_info()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // int32 self_reach_steps = 1;
            if (this_._internal_self_reach_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_self_reach_steps());
            }
            // int32 first_teammate_reach_steps = 2;
            if (this_._internal_first_teammate_reach_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_teammate_reach_steps());
            }
            // int32 second_teammate_reach_steps = 3;
            if (this_._internal_second_teammate_reach_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_teammate_reach_steps());
            }
            // int32 first_opponent_reach_steps = 4;
            if (this_._internal_first_opponent_reach_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_opponent_reach_steps());
            }
            // int32 second_opponent_reach_steps = 5;
            if (this_._internal_second_opponent_reach_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_opponent_reach_steps());
            }
            // int32 first_teammate_id = 6;
            if (this_._internal_first_teammate_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_teammate_id());
            }
            // int32 second_teammate_id = 7;
            if (this_._internal_second_teammate_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_teammate_id());
            }
            // int32 first_opponent_id = 8;
            if (this_._internal_first_opponent_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_opponent_id());
            }
            // int32 second_opponent_id = 9;
            if (this_._internal_second_opponent_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_opponent_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InterceptTable::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InterceptTable*>(&to_msg);
  auto& from = static_cast<const InterceptTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.InterceptTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_self_intercept_info()->MergeFrom(
      from._internal_self_intercept_info());
  if (from._internal_self_reach_steps() != 0) {
    _this->_impl_.self_reach_steps_ = from._impl_.self_reach_steps_;
  }
  if (from._internal_first_teammate_reach_steps() != 0) {
    _this->_impl_.first_teammate_reach_steps_ = from._impl_.first_teammate_reach_steps_;
  }
  if (from._internal_second_teammate_reach_steps() != 0) {
    _this->_impl_.second_teammate_reach_steps_ = from._impl_.second_teammate_reach_steps_;
  }
  if (from._internal_first_opponent_reach_steps() != 0) {
    _this->_impl_.first_opponent_reach_steps_ = from._impl_.first_opponent_reach_steps_;
  }
  if (from._internal_second_opponent_reach_steps() != 0) {
    _this->_impl_.second_opponent_reach_steps_ = from._impl_.second_opponent_reach_steps_;
  }
  if (from._internal_first_teammate_id() != 0) {
    _this->_impl_.first_teammate_id_ = from._impl_.first_teammate_id_;
  }
  if (from._internal_second_teammate_id() != 0) {
    _this->_impl_.second_teammate_id_ = from._impl_.second_teammate_id_;
  }
  if (from._internal_first_opponent_id() != 0) {
    _this->_impl_.first_opponent_id_ = from._impl_.first_opponent_id_;
  }
  if (from._internal_second_opponent_id() != 0) {
    _this->_impl_.second_opponent_id_ = from._impl_.second_opponent_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InterceptTable::CopyFrom(const InterceptTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.InterceptTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InterceptTable::InternalSwap(InterceptTable* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.self_intercept_info_.InternalSwap(&other->_impl_.self_intercept_info_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.second_opponent_id_)
      + sizeof(InterceptTable::_impl_.second_opponent_id_)
      - PROTOBUF_FIELD_OFFSET(InterceptTable, _impl_.self_reach_steps_)>(
          reinterpret_cast<char*>(&_impl_.self_reach_steps_),
          reinterpret_cast<char*>(&other->_impl_.self_reach_steps_));
}

::google::protobuf::Metadata InterceptTable::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              WorldModel_OurPlayersDictEntry_DoNotUse::WorldModel_OurPlayersDictEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              WorldModel_OurPlayersDictEntry_DoNotUse::WorldModel_OurPlayersDictEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              WorldModel_OurPlayersDictEntry_DoNotUse::WorldModel_OurPlayersDictEntry_DoNotUse() : SuperType() {}
              WorldModel_OurPlayersDictEntry_DoNotUse::WorldModel_OurPlayersDictEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::MessageLite::ClassDataFull
                  WorldModel_OurPlayersDictEntry_DoNotUse::_class_data_ = {
                      ::google::protobuf::Message::ClassData{
                          &_WorldModel_OurPlayersDictEntry_DoNotUse_default_instance_._instance,
                          &_table_.header,
                          nullptr,  // OnDemandRegisterArenaDtor
                          nullptr,  // IsInitialized
                          &WorldModel_OurPlayersDictEntry_DoNotUse::MergeImpl,
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                          ::google::protobuf::Message::GetDeleteImpl<WorldModel_OurPlayersDictEntry_DoNotUse>(),
                          ::google::protobuf::Message::GetNewImpl<WorldModel_OurPlayersDictEntry_DoNotUse>(),
                          ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                              ::google::protobuf::Message::_InternalSerializeImpl,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                          PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_._cached_size_),
                          false,
                      },
                      &WorldModel_OurPlayersDictEntry_DoNotUse::kDescriptorMethods,
                      &descriptor_table_service_2eproto,
                      nullptr,  // tracker
              };
              const ::google::protobuf::MessageLite::ClassData* WorldModel_OurPlayersDictEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WorldModel_OurPlayersDictEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::WorldModel_OurPlayersDictEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.Player value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Player value = 2;
    {PROTOBUF_FIELD_OFFSET(WorldModel_OurPlayersDictEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::Player>()},
  }}, {{
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              WorldModel_TheirPlayersDictEntry_DoNotUse::WorldModel_TheirPlayersDictEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              WorldModel_TheirPlayersDictEntry_DoNotUse::WorldModel_TheirPlayersDictEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              WorldModel_TheirPlayersDictEntry_DoNotUse::WorldModel_TheirPlayersDictEntry_DoNotUse() : SuperType() {}
              WorldModel_TheirPlayersDictEntry_DoNotUse::WorldModel_TheirPlayersDictEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::MessageLite::ClassDataFull
                  WorldModel_TheirPlayersDictEntry_DoNotUse::_class_data_ = {
                      ::google::protobuf::Message::ClassData{
                          &_WorldModel_TheirPlayersDictEntry_DoNotUse_default_instance_._instance,
                          &_table_.header,
                          nullptr,  // OnDemandRegisterArenaDtor
                          nullptr,  // IsInitialized
                          &WorldModel_TheirPlayersDictEntry_DoNotUse::MergeImpl,
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                          ::google::protobuf::Message::GetDeleteImpl<WorldModel_TheirPlayersDictEntry_DoNotUse>(),
                          ::google::protobuf::Message::GetNewImpl<WorldModel_TheirPlayersDictEntry_DoNotUse>(),
                          ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                              ::google::protobuf::Message::_InternalSerializeImpl,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                          PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_._cached_size_),
                          false,
                      },
                      &WorldModel_TheirPlayersDictEntry_DoNotUse::kDescriptorMethods,
                      &descriptor_table_service_2eproto,
                      nullptr,  // tracker
              };
              const ::google::protobuf::MessageLite::ClassData* WorldModel_TheirPlayersDictEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WorldModel_TheirPlayersDictEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::WorldModel_TheirPlayersDictEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.Player value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Player value = 2;
    {PROTOBUF_FIELD_OFFSET(WorldModel_TheirPlayersDictEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::Player>()},
  }}, {{
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              WorldModel_HeliosHomePositionsEntry_DoNotUse::WorldModel_HeliosHomePositionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              WorldModel_HeliosHomePositionsEntry_DoNotUse::WorldModel_HeliosHomePositionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              WorldModel_HeliosHomePositionsEntry_DoNotUse::WorldModel_HeliosHomePositionsEntry_DoNotUse() : SuperType() {}
              WorldModel_HeliosHomePositionsEntry_DoNotUse::WorldModel_HeliosHomePositionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::MessageLite::ClassDataFull
                  WorldModel_HeliosHomePositionsEntry_DoNotUse::_class_data_ = {
                      ::google::protobuf::Message::ClassData{
                          &_WorldModel_HeliosHomePositionsEntry_DoNotUse_default_instance_._instance,
                          &_table_.header,
                          nullptr,  // OnDemandRegisterArenaDtor
                          nullptr,  // IsInitialized
                          &WorldModel_HeliosHomePositionsEntry_DoNotUse::MergeImpl,
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                          ::google::protobuf::Message::GetDeleteImpl<WorldModel_HeliosHomePositionsEntry_DoNotUse>(),
                          ::google::protobuf::Message::GetNewImpl<WorldModel_HeliosHomePositionsEntry_DoNotUse>(),
                          ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                              ::google::protobuf::Message::_InternalSerializeImpl,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                          PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_._cached_size_),
                          false,
                      },
                      &WorldModel_HeliosHomePositionsEntry_DoNotUse::kDescriptorMethods,
                      &descriptor_table_service_2eproto,
                      nullptr,  // tracker
              };
              const ::google::protobuf::MessageLite::ClassData* WorldModel_HeliosHomePositionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WorldModel_HeliosHomePositionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::WorldModel_HeliosHomePositionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D value = 2;
    {PROTOBUF_FIELD_OFFSET(WorldModel_HeliosHomePositionsEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

// ===================================================================

class WorldModel::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WorldModel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WorldModel, _impl_._has_bits_);
};

WorldModel::WorldModel(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.WorldModel)
}
inline PROTOBUF_NDEBUG_INLINE WorldModel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::WorldModel& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        teammates_{visibility, arena, from.teammates_},
        opponents_{visibility, arena, from.opponents_},
        unknowns_{visibility, arena, from.unknowns_},
        our_players_dict_{visibility, arena, from.our_players_dict_},
        their_players_dict_{visibility, arena, from.their_players_dict_},
        helios_home_positions_{visibility, arena, from.helios_home_positions_},
        our_team_name_(arena, from.our_team_name_),
        their_team_name_(arena, from.their_team_name_) {}

WorldModel::WorldModel(
    ::google::protobuf::Arena* arena,
    const WorldModel& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorldModel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.intercept_table_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::InterceptTable>(
                              arena, *from._impl_.intercept_table_)
                        : nullptr;
  _impl_.self_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::Self>(
                              arena, *from._impl_.self_)
                        : nullptr;
  _impl_.ball_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::Ball>(
                              arena, *from._impl_.ball_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, our_side_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, our_side_),
           offsetof(Impl_, their_defense_player_line_x_) -
               offsetof(Impl_, our_side_) +
               sizeof(Impl_::their_defense_player_line_x_));

  // @@protoc_insertion_point(copy_constructor:protos.WorldModel)
}
inline PROTOBUF_NDEBUG_INLINE WorldModel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        teammates_{visibility, arena},
        opponents_{visibility, arena},
        unknowns_{visibility, arena},
        our_players_dict_{visibility, arena},
        their_players_dict_{visibility, arena},
        helios_home_positions_{visibility, arena},
        our_team_name_(arena),
        their_team_name_(arena) {}

inline void WorldModel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, intercept_table_),
           0,
           offsetof(Impl_, their_defense_player_line_x_) -
               offsetof(Impl_, intercept_table_) +
               sizeof(Impl_::their_defense_player_line_x_));
}
WorldModel::~WorldModel() {
  // @@protoc_insertion_point(destructor:protos.WorldModel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldModel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.our_team_name_.Destroy();
  _impl_.their_team_name_.Destroy();
  delete _impl_.intercept_table_;
  delete _impl_.self_;
  delete _impl_.ball_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    WorldModel::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_WorldModel_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &WorldModel::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<WorldModel>(),
            ::google::protobuf::Message::GetNewImpl<WorldModel>(),
            ::google::protobuf::Message::GetClearImpl<WorldModel>(), &WorldModel::ByteSizeLong,
                &WorldModel::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(WorldModel, _impl_._cached_size_),
            false,
        },
        &WorldModel::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* WorldModel::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 35, 12, 86, 7> WorldModel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldModel, _impl_._has_bits_),
    0, // no _extensions_
    35, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    35,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::WorldModel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.InterceptTable intercept_table = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.intercept_table_)}},
    // string our_team_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_team_name_)}},
    // string their_team_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_team_name_)}},
    // .protos.Side our_side = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel, _impl_.our_side_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_side_)}},
    // int32 last_set_play_start_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel, _impl_.last_set_play_start_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_set_play_start_time_)}},
    // .protos.Self self = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.self_)}},
    // .protos.Ball ball = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.ball_)}},
    // repeated .protos.Player teammates = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.teammates_)}},
    // repeated .protos.Player opponents = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.opponents_)}},
    // repeated .protos.Player unknowns = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 5, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.unknowns_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 our_goalie_uniform_number = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel, _impl_.our_goalie_uniform_number_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_goalie_uniform_number_)}},
    // int32 their_goalie_uniform_number = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldModel, _impl_.their_goalie_uniform_number_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_goalie_uniform_number_)}},
    // float offside_line_x = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.offside_line_x_)}},
    // int32 ofside_line_x_count = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.ofside_line_x_count_)}},
    // int32 kickable_teammate_id = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.kickable_teammate_id_)}},
    // int32 kickable_opponent_id = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.kickable_opponent_id_)}},
    // .protos.Side last_kick_side = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_kick_side_)}},
    // int32 last_kicker_uniform_number = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_kicker_uniform_number_)}},
    // int32 cycle = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.cycle_)}},
    // .protos.GameModeType game_mode_type = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.game_mode_type_)}},
    // int32 left_team_score = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.left_team_score_)}},
    // int32 right_team_score = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.right_team_score_)}},
    // bool is_our_set_play = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_our_set_play_)}},
    // bool is_their_set_play = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_their_set_play_)}},
    // int32 stoped_cycle = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.stoped_cycle_)}},
    // int32 our_team_score = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_team_score_)}},
    // int32 their_team_score = 29;
    {::_pbi::TcParser::FastV32S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_team_score_)}},
    // bool is_penalty_kick_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_penalty_kick_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    65528, 32,
    65535, 65535
  }}, {{
    // .protos.InterceptTable intercept_table = 1;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.intercept_table_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string our_team_name = 2;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_team_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string their_team_name = 3;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_team_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .protos.Side our_side = 4;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 last_set_play_start_time = 5;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_set_play_start_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Self self = 6;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.self_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Ball ball = 7;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.ball_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protos.Player teammates = 8;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.teammates_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protos.Player opponents = 9;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.opponents_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protos.Player unknowns = 10;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.unknowns_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, .protos.Player> our_players_dict = 11;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_players_dict_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .protos.Player> their_players_dict = 12;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_players_dict_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // int32 our_goalie_uniform_number = 13;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_goalie_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 their_goalie_uniform_number = 14;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_goalie_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float offside_line_x = 15;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.offside_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 ofside_line_x_count = 16;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.ofside_line_x_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 kickable_teammate_id = 17;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.kickable_teammate_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 kickable_opponent_id = 18;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.kickable_opponent_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.Side last_kick_side = 19;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_kick_side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 last_kicker_uniform_number = 20;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.last_kicker_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cycle = 21;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.cycle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.GameModeType game_mode_type = 22;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.game_mode_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 left_team_score = 23;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.left_team_score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 right_team_score = 24;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.right_team_score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_our_set_play = 25;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_our_set_play_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_their_set_play = 26;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_their_set_play_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 stoped_cycle = 27;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.stoped_cycle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 our_team_score = 28;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_team_score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 their_team_score = 29;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_team_score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_penalty_kick_mode = 30;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.is_penalty_kick_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<int32, .protos.RpcVector2D> helios_home_positions = 31;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.helios_home_positions_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // double our_defense_line_x = 32;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_defense_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double their_defense_line_x = 33;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_defense_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double our_defense_player_line_x = 34;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.our_defense_player_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double their_defense_player_line_x = 35;
    {PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_defense_player_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::InterceptTable>()},
    {::_pbi::TcParser::GetTable<::protos::Self>()},
    {::_pbi::TcParser::GetTable<::protos::Ball>()},
    {::_pbi::TcParser::GetTable<::protos::Player>()},
    {::_pbi::TcParser::GetTable<::protos::Player>()},
    {::_pbi::TcParser::GetTable<::protos::Player>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(WorldModel()._impl_.our_players_dict_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protos::Player>},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(WorldModel()._impl_.their_players_dict_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protos::Player>},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(WorldModel()._impl_.helios_home_positions_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protos::RpcVector2D>},
  }}, {{
    "\21\0\15\17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "protos.WorldModel"
    "our_team_name"
    "their_team_name"
  }},
};

PROTOBUF_NOINLINE void WorldModel::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.WorldModel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teammates_.Clear();
  _impl_.opponents_.Clear();
  _impl_.unknowns_.Clear();
  _impl_.our_players_dict_.Clear();
  _impl_.their_players_dict_.Clear();
  _impl_.helios_home_positions_.Clear();
  _impl_.our_team_name_.ClearToEmpty();
  _impl_.their_team_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.intercept_table_ != nullptr);
      _impl_.intercept_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.self_ != nullptr);
      _impl_.self_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ball_ != nullptr);
      _impl_.ball_->Clear();
    }
  }
  ::memset(&_impl_.our_side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.their_defense_player_line_x_) -
      reinterpret_cast<char*>(&_impl_.our_side_)) + sizeof(_impl_.their_defense_player_line_x_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorldModel::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorldModel& this_ = static_cast<const WorldModel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorldModel::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorldModel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.WorldModel)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.InterceptTable intercept_table = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.intercept_table_, this_._impl_.intercept_table_->GetCachedSize(), target,
                stream);
          }

          // string our_team_name = 2;
          if (!this_._internal_our_team_name().empty()) {
            const std::string& _s = this_._internal_our_team_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.WorldModel.our_team_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string their_team_name = 3;
          if (!this_._internal_their_team_name().empty()) {
            const std::string& _s = this_._internal_their_team_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.WorldModel.their_team_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .protos.Side our_side = 4;
          if (this_._internal_our_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_our_side(), target);
          }

          // int32 last_set_play_start_time = 5;
          if (this_._internal_last_set_play_start_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_last_set_play_start_time(), target);
          }

          // .protos.Self self = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.self_, this_._impl_.self_->GetCachedSize(), target,
                stream);
          }

          // .protos.Ball ball = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.ball_, this_._impl_.ball_->GetCachedSize(), target,
                stream);
          }

          // repeated .protos.Player teammates = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_teammates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_teammates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .protos.Player opponents = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_opponents_size());
               i < n; i++) {
            const auto& repfield = this_._internal_opponents().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .protos.Player unknowns = 10;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_unknowns_size());
               i < n; i++) {
            const auto& repfield = this_._internal_unknowns().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    10, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<int32, .protos.Player> our_players_dict = 11;
          if (!this_._internal_our_players_dict().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protos::Player>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protos::Player,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_our_players_dict();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
              }
            }
          }

          // map<int32, .protos.Player> their_players_dict = 12;
          if (!this_._internal_their_players_dict().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protos::Player>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protos::Player,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_their_players_dict();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    12, entry.first, entry.second, target, stream);
              }
            }
          }

          // int32 our_goalie_uniform_number = 13;
          if (this_._internal_our_goalie_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_our_goalie_uniform_number(), target);
          }

          // int32 their_goalie_uniform_number = 14;
          if (this_._internal_their_goalie_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_their_goalie_uniform_number(), target);
          }

          // float offside_line_x = 15;
          if (::absl::bit_cast<::uint32_t>(this_._internal_offside_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_offside_line_x(), target);
          }

          // int32 ofside_line_x_count = 16;
          if (this_._internal_ofside_line_x_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_ofside_line_x_count(), target);
          }

          // int32 kickable_teammate_id = 17;
          if (this_._internal_kickable_teammate_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                17, this_._internal_kickable_teammate_id(), target);
          }

          // int32 kickable_opponent_id = 18;
          if (this_._internal_kickable_opponent_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                18, this_._internal_kickable_opponent_id(), target);
          }

          // .protos.Side last_kick_side = 19;
          if (this_._internal_last_kick_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                19, this_._internal_last_kick_side(), target);
          }

          // int32 last_kicker_uniform_number = 20;
          if (this_._internal_last_kicker_uniform_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                20, this_._internal_last_kicker_uniform_number(), target);
          }

          // int32 cycle = 21;
          if (this_._internal_cycle() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                21, this_._internal_cycle(), target);
          }

          // .protos.GameModeType game_mode_type = 22;
          if (this_._internal_game_mode_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                22, this_._internal_game_mode_type(), target);
          }

          // int32 left_team_score = 23;
          if (this_._internal_left_team_score() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                23, this_._internal_left_team_score(), target);
          }

          // int32 right_team_score = 24;
          if (this_._internal_right_team_score() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                24, this_._internal_right_team_score(), target);
          }

          // bool is_our_set_play = 25;
          if (this_._internal_is_our_set_play() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                25, this_._internal_is_our_set_play(), target);
          }

          // bool is_their_set_play = 26;
          if (this_._internal_is_their_set_play() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                26, this_._internal_is_their_set_play(), target);
          }

          // int32 stoped_cycle = 27;
          if (this_._internal_stoped_cycle() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                27, this_._internal_stoped_cycle(), target);
          }

          // int32 our_team_score = 28;
          if (this_._internal_our_team_score() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                28, this_._internal_our_team_score(), target);
          }

          // int32 their_team_score = 29;
          if (this_._internal_their_team_score() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                29, this_._internal_their_team_score(), target);
          }

          // bool is_penalty_kick_mode = 30;
          if (this_._internal_is_penalty_kick_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_is_penalty_kick_mode(), target);
          }

          // map<int32, .protos.RpcVector2D> helios_home_positions = 31;
          if (!this_._internal_helios_home_positions().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protos::RpcVector2D>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protos::RpcVector2D,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_helios_home_positions();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    31, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    31, entry.first, entry.second, target, stream);
              }
            }
          }

          // double our_defense_line_x = 32;
          if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                32, this_._internal_our_defense_line_x(), target);
          }

          // double their_defense_line_x = 33;
          if (::absl::bit_cast<::uint64_t>(this_._internal_their_defense_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                33, this_._internal_their_defense_line_x(), target);
          }

          // double our_defense_player_line_x = 34;
          if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_player_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                34, this_._internal_our_defense_player_line_x(), target);
          }

          // double their_defense_player_line_x = 35;
          if (::absl::bit_cast<::uint64_t>(this_._internal_their_defense_player_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                35, this_._internal_their_defense_player_line_x(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.WorldModel)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorldModel::ByteSizeLong(const MessageLite& base) {
          const WorldModel& this_ = static_cast<const WorldModel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorldModel::ByteSizeLong() const {
          const WorldModel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.WorldModel)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protos.Player teammates = 8;
             {
              total_size += 1UL * this_._internal_teammates_size();
              for (const auto& msg : this_._internal_teammates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .protos.Player opponents = 9;
             {
              total_size += 1UL * this_._internal_opponents_size();
              for (const auto& msg : this_._internal_opponents()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .protos.Player unknowns = 10;
             {
              total_size += 1UL * this_._internal_unknowns_size();
              for (const auto& msg : this_._internal_unknowns()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<int32, .protos.Player> our_players_dict = 11;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_our_players_dict_size());
              for (const auto& entry : this_._internal_our_players_dict()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protos::Player,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protos.Player> their_players_dict = 12;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_their_players_dict_size());
              for (const auto& entry : this_._internal_their_players_dict()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protos::Player,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<int32, .protos.RpcVector2D> helios_home_positions = 31;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_helios_home_positions_size());
              for (const auto& entry : this_._internal_helios_home_positions()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protos::RpcVector2D,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string our_team_name = 2;
            if (!this_._internal_our_team_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_our_team_name());
            }
            // string their_team_name = 3;
            if (!this_._internal_their_team_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_their_team_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.InterceptTable intercept_table = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.intercept_table_);
            }
            // .protos.Self self = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.self_);
            }
            // .protos.Ball ball = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_);
            }
          }
           {
            // .protos.Side our_side = 4;
            if (this_._internal_our_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_our_side());
            }
            // int32 last_set_play_start_time = 5;
            if (this_._internal_last_set_play_start_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_set_play_start_time());
            }
            // int32 our_goalie_uniform_number = 13;
            if (this_._internal_our_goalie_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_our_goalie_uniform_number());
            }
            // int32 their_goalie_uniform_number = 14;
            if (this_._internal_their_goalie_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_their_goalie_uniform_number());
            }
            // float offside_line_x = 15;
            if (::absl::bit_cast<::uint32_t>(this_._internal_offside_line_x()) != 0) {
              total_size += 5;
            }
            // int32 ofside_line_x_count = 16;
            if (this_._internal_ofside_line_x_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_ofside_line_x_count());
            }
            // int32 kickable_teammate_id = 17;
            if (this_._internal_kickable_teammate_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_kickable_teammate_id());
            }
            // int32 kickable_opponent_id = 18;
            if (this_._internal_kickable_opponent_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_kickable_opponent_id());
            }
            // .protos.Side last_kick_side = 19;
            if (this_._internal_last_kick_side() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_last_kick_side());
            }
            // int32 last_kicker_uniform_number = 20;
            if (this_._internal_last_kicker_uniform_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_last_kicker_uniform_number());
            }
            // int32 cycle = 21;
            if (this_._internal_cycle() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_cycle());
            }
            // .protos.GameModeType game_mode_type = 22;
            if (this_._internal_game_mode_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_mode_type());
            }
            // int32 left_team_score = 23;
            if (this_._internal_left_team_score() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_left_team_score());
            }
            // int32 right_team_score = 24;
            if (this_._internal_right_team_score() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_right_team_score());
            }
            // int32 stoped_cycle = 27;
            if (this_._internal_stoped_cycle() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_stoped_cycle());
            }
            // bool is_our_set_play = 25;
            if (this_._internal_is_our_set_play() != 0) {
              total_size += 3;
            }
            // bool is_their_set_play = 26;
            if (this_._internal_is_their_set_play() != 0) {
              total_size += 3;
            }
            // bool is_penalty_kick_mode = 30;
            if (this_._internal_is_penalty_kick_mode() != 0) {
              total_size += 3;
            }
            // int32 our_team_score = 28;
            if (this_._internal_our_team_score() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_our_team_score());
            }
            // int32 their_team_score = 29;
            if (this_._internal_their_team_score() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_their_team_score());
            }
            // double our_defense_line_x = 32;
            if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_line_x()) != 0) {
              total_size += 10;
            }
            // double their_defense_line_x = 33;
            if (::absl::bit_cast<::uint64_t>(this_._internal_their_defense_line_x()) != 0) {
              total_size += 10;
            }
            // double our_defense_player_line_x = 34;
            if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_player_line_x()) != 0) {
              total_size += 10;
            }
            // double their_defense_player_line_x = 35;
            if (::absl::bit_cast<::uint64_t>(this_._internal_their_defense_player_line_x()) != 0) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorldModel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorldModel*>(&to_msg);
  auto& from = static_cast<const WorldModel&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.WorldModel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_teammates()->MergeFrom(
      from._internal_teammates());
  _this->_internal_mutable_opponents()->MergeFrom(
      from._internal_opponents());
  _this->_internal_mutable_unknowns()->MergeFrom(
      from._internal_unknowns());
  _this->_impl_.our_players_dict_.MergeFrom(from._impl_.our_players_dict_);
  _this->_impl_.their_players_dict_.MergeFrom(from._impl_.their_players_dict_);
  _this->_impl_.helios_home_positions_.MergeFrom(from._impl_.helios_home_positions_);
  if (!from._internal_our_team_name().empty()) {
    _this->_internal_set_our_team_name(from._internal_our_team_name());
  }
  if (!from._internal_their_team_name().empty()) {
    _this->_internal_set_their_team_name(from._internal_their_team_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.intercept_table_ != nullptr);
      if (_this->_impl_.intercept_table_ == nullptr) {
        _this->_impl_.intercept_table_ =
            ::google::protobuf::Message::CopyConstruct<::protos::InterceptTable>(arena, *from._impl_.intercept_table_);
      } else {
        _this->_impl_.intercept_table_->MergeFrom(*from._impl_.intercept_table_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.self_ != nullptr);
      if (_this->_impl_.self_ == nullptr) {
        _this->_impl_.self_ =
            ::google::protobuf::Message::CopyConstruct<::protos::Self>(arena, *from._impl_.self_);
      } else {
        _this->_impl_.self_->MergeFrom(*from._impl_.self_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.ball_ != nullptr);
      if (_this->_impl_.ball_ == nullptr) {
        _this->_impl_.ball_ =
            ::google::protobuf::Message::CopyConstruct<::protos::Ball>(arena, *from._impl_.ball_);
      } else {
        _this->_impl_.ball_->MergeFrom(*from._impl_.ball_);
      }
    }
  }
  if (from._internal_our_side() != 0) {
    _this->_impl_.our_side_ = from._impl_.our_side_;
  }
  if (from._internal_last_set_play_start_time() != 0) {
    _this->_impl_.last_set_play_start_time_ = from._impl_.last_set_play_start_time_;
  }
  if (from._internal_our_goalie_uniform_number() != 0) {
    _this->_impl_.our_goalie_uniform_number_ = from._impl_.our_goalie_uniform_number_;
  }
  if (from._internal_their_goalie_uniform_number() != 0) {
    _this->_impl_.their_goalie_uniform_number_ = from._impl_.their_goalie_uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_offside_line_x()) != 0) {
    _this->_impl_.offside_line_x_ = from._impl_.offside_line_x_;
  }
  if (from._internal_ofside_line_x_count() != 0) {
    _this->_impl_.ofside_line_x_count_ = from._impl_.ofside_line_x_count_;
  }
  if (from._internal_kickable_teammate_id() != 0) {
    _this->_impl_.kickable_teammate_id_ = from._impl_.kickable_teammate_id_;
  }
  if (from._internal_kickable_opponent_id() != 0) {
    _this->_impl_.kickable_opponent_id_ = from._impl_.kickable_opponent_id_;
  }
  if (from._internal_last_kick_side() != 0) {
    _this->_impl_.last_kick_side_ = from._impl_.last_kick_side_;
  }
  if (from._internal_last_kicker_uniform_number() != 0) {
    _this->_impl_.last_kicker_uniform_number_ = from._impl_.last_kicker_uniform_number_;
  }
  if (from._internal_cycle() != 0) {
    _this->_impl_.cycle_ = from._impl_.cycle_;
  }
  if (from._internal_game_mode_type() != 0) {
    _this->_impl_.game_mode_type_ = from._impl_.game_mode_type_;
  }
  if (from._internal_left_team_score() != 0) {
    _this->_impl_.left_team_score_ = from._impl_.left_team_score_;
  }
  if (from._internal_right_team_score() != 0) {
    _this->_impl_.right_team_score_ = from._impl_.right_team_score_;
  }
  if (from._internal_stoped_cycle() != 0) {
    _this->_impl_.stoped_cycle_ = from._impl_.stoped_cycle_;
  }
  if (from._internal_is_our_set_play() != 0) {
    _this->_impl_.is_our_set_play_ = from._impl_.is_our_set_play_;
  }
  if (from._internal_is_their_set_play() != 0) {
    _this->_impl_.is_their_set_play_ = from._impl_.is_their_set_play_;
  }
  if (from._internal_is_penalty_kick_mode() != 0) {
    _this->_impl_.is_penalty_kick_mode_ = from._impl_.is_penalty_kick_mode_;
  }
  if (from._internal_our_team_score() != 0) {
    _this->_impl_.our_team_score_ = from._impl_.our_team_score_;
  }
  if (from._internal_their_team_score() != 0) {
    _this->_impl_.their_team_score_ = from._impl_.their_team_score_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_our_defense_line_x()) != 0) {
    _this->_impl_.our_defense_line_x_ = from._impl_.our_defense_line_x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_their_defense_line_x()) != 0) {
    _this->_impl_.their_defense_line_x_ = from._impl_.their_defense_line_x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_our_defense_player_line_x()) != 0) {
    _this->_impl_.our_defense_player_line_x_ = from._impl_.our_defense_player_line_x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_their_defense_player_line_x()) != 0) {
    _this->_impl_.their_defense_player_line_x_ = from._impl_.their_defense_player_line_x_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldModel::CopyFrom(const WorldModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.WorldModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorldModel::InternalSwap(WorldModel* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teammates_.InternalSwap(&other->_impl_.teammates_);
  _impl_.opponents_.InternalSwap(&other->_impl_.opponents_);
  _impl_.unknowns_.InternalSwap(&other->_impl_.unknowns_);
  _impl_.our_players_dict_.InternalSwap(&other->_impl_.our_players_dict_);
  _impl_.their_players_dict_.InternalSwap(&other->_impl_.their_players_dict_);
  _impl_.helios_home_positions_.InternalSwap(&other->_impl_.helios_home_positions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.our_team_name_, &other->_impl_.our_team_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.their_team_name_, &other->_impl_.their_team_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.their_defense_player_line_x_)
      + sizeof(WorldModel::_impl_.their_defense_player_line_x_)
      - PROTOBUF_FIELD_OFFSET(WorldModel, _impl_.intercept_table_)>(
          reinterpret_cast<char*>(&_impl_.intercept_table_),
          reinterpret_cast<char*>(&other->_impl_.intercept_table_));
}

::google::protobuf::Metadata WorldModel::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class State::_Internal {
 public:
  using HasBits =
      decltype(std::declval<State>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(State, _impl_._has_bits_);
};

State::State(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.State)
}
inline PROTOBUF_NDEBUG_INLINE State::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::State& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

State::State(
    ::google::protobuf::Arena* arena,
    const State& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  State* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  _impl_.world_model_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::WorldModel>(
                              arena, *from._impl_.world_model_)
                        : nullptr;
  _impl_.full_world_model_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::WorldModel>(
                              arena, *from._impl_.full_world_model_)
                        : nullptr;
  _impl_.need_preprocess_ = from._impl_.need_preprocess_;

  // @@protoc_insertion_point(copy_constructor:protos.State)
}
inline PROTOBUF_NDEBUG_INLINE State::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void State::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, need_preprocess_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::need_preprocess_));
}
State::~State() {
  // @@protoc_insertion_point(destructor:protos.State)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void State::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.register_response_;
  delete _impl_.world_model_;
  delete _impl_.full_world_model_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    State::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_State_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &State::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<State>(),
            ::google::protobuf::Message::GetNewImpl<State>(),
            ::google::protobuf::Message::GetClearImpl<State>(), &State::ByteSizeLong,
                &State::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(State, _impl_._cached_size_),
            false,
        },
        &State::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* State::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> State::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(State, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::State>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool need_preprocess = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(State, _impl_.need_preprocess_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(State, _impl_.need_preprocess_)}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(State, _impl_.register_response_)}},
    // .protos.WorldModel world_model = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(State, _impl_.world_model_)}},
    // .protos.WorldModel full_world_model = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(State, _impl_.full_world_model_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.WorldModel world_model = 2;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.world_model_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.WorldModel full_world_model = 3;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.full_world_model_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool need_preprocess = 4;
    {PROTOBUF_FIELD_OFFSET(State, _impl_.need_preprocess_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
    {::_pbi::TcParser::GetTable<::protos::WorldModel>()},
    {::_pbi::TcParser::GetTable<::protos::WorldModel>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void State::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.State)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.register_response_ != nullptr);
      _impl_.register_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.world_model_ != nullptr);
      _impl_.world_model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.full_world_model_ != nullptr);
      _impl_.full_world_model_->Clear();
    }
  }
  _impl_.need_preprocess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* State::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const State& this_ = static_cast<const State&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* State::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const State& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.State)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // .protos.WorldModel world_model = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.world_model_, this_._impl_.world_model_->GetCachedSize(), target,
                stream);
          }

          // .protos.WorldModel full_world_model = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.full_world_model_, this_._impl_.full_world_model_->GetCachedSize(), target,
                stream);
          }

          // bool need_preprocess = 4;
          if (this_._internal_need_preprocess() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_need_preprocess(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.State)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t State::ByteSizeLong(const MessageLite& base) {
          const State& this_ = static_cast<const State&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t State::ByteSizeLong() const {
          const State& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.State)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RegisterResponse register_response = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
            // .protos.WorldModel world_model = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.world_model_);
            }
            // .protos.WorldModel full_world_model = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.full_world_model_);
            }
          }
           {
            // bool need_preprocess = 4;
            if (this_._internal_need_preprocess() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void State::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<State*>(&to_msg);
  auto& from = static_cast<const State&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.State)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.register_response_ != nullptr);
      if (_this->_impl_.register_response_ == nullptr) {
        _this->_impl_.register_response_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
      } else {
        _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.world_model_ != nullptr);
      if (_this->_impl_.world_model_ == nullptr) {
        _this->_impl_.world_model_ =
            ::google::protobuf::Message::CopyConstruct<::protos::WorldModel>(arena, *from._impl_.world_model_);
      } else {
        _this->_impl_.world_model_->MergeFrom(*from._impl_.world_model_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.full_world_model_ != nullptr);
      if (_this->_impl_.full_world_model_ == nullptr) {
        _this->_impl_.full_world_model_ =
            ::google::protobuf::Message::CopyConstruct<::protos::WorldModel>(arena, *from._impl_.full_world_model_);
      } else {
        _this->_impl_.full_world_model_->MergeFrom(*from._impl_.full_world_model_);
      }
    }
  }
  if (from._internal_need_preprocess() != 0) {
    _this->_impl_.need_preprocess_ = from._impl_.need_preprocess_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void State::InternalSwap(State* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, _impl_.need_preprocess_)
      + sizeof(State::_impl_.need_preprocess_)
      - PROTOBUF_FIELD_OFFSET(State, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata State::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InitMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InitMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InitMessage, _impl_._has_bits_);
};

InitMessage::InitMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.InitMessage)
}
inline PROTOBUF_NDEBUG_INLINE InitMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::InitMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InitMessage::InitMessage(
    ::google::protobuf::Arena* arena,
    const InitMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InitMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  _impl_.debug_mode_ = from._impl_.debug_mode_;

  // @@protoc_insertion_point(copy_constructor:protos.InitMessage)
}
inline PROTOBUF_NDEBUG_INLINE InitMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InitMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, debug_mode_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::debug_mode_));
}
InitMessage::~InitMessage() {
  // @@protoc_insertion_point(destructor:protos.InitMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InitMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.register_response_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InitMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InitMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InitMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InitMessage>(),
            ::google::protobuf::Message::GetNewImpl<InitMessage>(),
            ::google::protobuf::Message::GetClearImpl<InitMessage>(), &InitMessage::ByteSizeLong,
                &InitMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InitMessage, _impl_._cached_size_),
            false,
        },
        &InitMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InitMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> InitMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InitMessage, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::InitMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool debug_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InitMessage, _impl_.debug_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.debug_mode_)}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.register_response_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool debug_mode = 2;
    {PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.debug_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.InitMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.register_response_ != nullptr);
    _impl_.register_response_->Clear();
  }
  _impl_.debug_mode_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InitMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InitMessage& this_ = static_cast<const InitMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InitMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InitMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.InitMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // bool debug_mode = 2;
          if (this_._internal_debug_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_debug_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.InitMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InitMessage::ByteSizeLong(const MessageLite& base) {
          const InitMessage& this_ = static_cast<const InitMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InitMessage::ByteSizeLong() const {
          const InitMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.InitMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RegisterResponse register_response = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
          }
           {
            // bool debug_mode = 2;
            if (this_._internal_debug_mode() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InitMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InitMessage*>(&to_msg);
  auto& from = static_cast<const InitMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.InitMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.register_response_ != nullptr);
    if (_this->_impl_.register_response_ == nullptr) {
      _this->_impl_.register_response_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
    } else {
      _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
    }
  }
  if (from._internal_debug_mode() != 0) {
    _this->_impl_.debug_mode_ = from._impl_.debug_mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InitMessage::CopyFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.InitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InitMessage::InternalSwap(InitMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.debug_mode_)
      + sizeof(InitMessage::_impl_.debug_mode_)
      - PROTOBUF_FIELD_OFFSET(InitMessage, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata InitMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Dash::_Internal {
 public:
};

Dash::Dash(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Dash)
}
Dash::Dash(
    ::google::protobuf::Arena* arena, const Dash& from)
    : Dash(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Dash::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Dash::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_),
           0,
           offsetof(Impl_, relative_direction_) -
               offsetof(Impl_, power_) +
               sizeof(Impl_::relative_direction_));
}
Dash::~Dash() {
  // @@protoc_insertion_point(destructor:protos.Dash)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Dash::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Dash::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Dash_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Dash::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Dash>(),
            ::google::protobuf::Message::GetNewImpl<Dash>(),
            ::google::protobuf::Message::GetClearImpl<Dash>(), &Dash::ByteSizeLong,
                &Dash::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Dash, _impl_._cached_size_),
            false,
        },
        &Dash::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Dash::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Dash::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Dash>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float relative_direction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Dash, _impl_.relative_direction_)}},
    // float power = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Dash, _impl_.power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float power = 1;
    {PROTOBUF_FIELD_OFFSET(Dash, _impl_.power_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float relative_direction = 2;
    {PROTOBUF_FIELD_OFFSET(Dash, _impl_.relative_direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Dash::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Dash)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.power_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.relative_direction_) -
      reinterpret_cast<char*>(&_impl_.power_)) + sizeof(_impl_.relative_direction_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Dash::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Dash& this_ = static_cast<const Dash&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Dash::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Dash& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Dash)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float power = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_power(), target);
          }

          // float relative_direction = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_relative_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Dash)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Dash::ByteSizeLong(const MessageLite& base) {
          const Dash& this_ = static_cast<const Dash&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Dash::ByteSizeLong() const {
          const Dash& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Dash)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float power = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_power()) != 0) {
              total_size += 5;
            }
            // float relative_direction = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Dash::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Dash*>(&to_msg);
  auto& from = static_cast<const Dash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Dash)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_power()) != 0) {
    _this->_impl_.power_ = from._impl_.power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_relative_direction()) != 0) {
    _this->_impl_.relative_direction_ = from._impl_.relative_direction_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Dash::CopyFrom(const Dash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Dash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Dash::InternalSwap(Dash* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dash, _impl_.relative_direction_)
      + sizeof(Dash::_impl_.relative_direction_)
      - PROTOBUF_FIELD_OFFSET(Dash, _impl_.power_)>(
          reinterpret_cast<char*>(&_impl_.power_),
          reinterpret_cast<char*>(&other->_impl_.power_));
}

::google::protobuf::Metadata Dash::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Turn::_Internal {
 public:
};

Turn::Turn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Turn)
}
Turn::Turn(
    ::google::protobuf::Arena* arena, const Turn& from)
    : Turn(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Turn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Turn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.relative_direction_ = {};
}
Turn::~Turn() {
  // @@protoc_insertion_point(destructor:protos.Turn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Turn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Turn::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Turn_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Turn::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Turn>(),
            ::google::protobuf::Message::GetNewImpl<Turn>(),
            ::google::protobuf::Message::GetClearImpl<Turn>(), &Turn::ByteSizeLong,
                &Turn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Turn, _impl_._cached_size_),
            false,
        },
        &Turn::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Turn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Turn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Turn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float relative_direction = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Turn, _impl_.relative_direction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float relative_direction = 1;
    {PROTOBUF_FIELD_OFFSET(Turn, _impl_.relative_direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Turn::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Turn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relative_direction_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Turn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Turn& this_ = static_cast<const Turn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Turn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Turn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Turn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float relative_direction = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_relative_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Turn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Turn::ByteSizeLong(const MessageLite& base) {
          const Turn& this_ = static_cast<const Turn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Turn::ByteSizeLong() const {
          const Turn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Turn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float relative_direction = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Turn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Turn*>(&to_msg);
  auto& from = static_cast<const Turn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Turn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_relative_direction()) != 0) {
    _this->_impl_.relative_direction_ = from._impl_.relative_direction_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Turn::CopyFrom(const Turn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Turn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Turn::InternalSwap(Turn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.relative_direction_, other->_impl_.relative_direction_);
}

::google::protobuf::Metadata Turn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Kick::_Internal {
 public:
};

Kick::Kick(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Kick)
}
Kick::Kick(
    ::google::protobuf::Arena* arena, const Kick& from)
    : Kick(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Kick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Kick::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_),
           0,
           offsetof(Impl_, relative_direction_) -
               offsetof(Impl_, power_) +
               sizeof(Impl_::relative_direction_));
}
Kick::~Kick() {
  // @@protoc_insertion_point(destructor:protos.Kick)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Kick::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Kick::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Kick_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Kick::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Kick>(),
            ::google::protobuf::Message::GetNewImpl<Kick>(),
            ::google::protobuf::Message::GetClearImpl<Kick>(), &Kick::ByteSizeLong,
                &Kick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Kick, _impl_._cached_size_),
            false,
        },
        &Kick::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Kick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Kick::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Kick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float relative_direction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Kick, _impl_.relative_direction_)}},
    // float power = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Kick, _impl_.power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float power = 1;
    {PROTOBUF_FIELD_OFFSET(Kick, _impl_.power_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float relative_direction = 2;
    {PROTOBUF_FIELD_OFFSET(Kick, _impl_.relative_direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Kick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.power_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.relative_direction_) -
      reinterpret_cast<char*>(&_impl_.power_)) + sizeof(_impl_.relative_direction_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Kick::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Kick& this_ = static_cast<const Kick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Kick::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Kick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Kick)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float power = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_power(), target);
          }

          // float relative_direction = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_relative_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Kick)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Kick::ByteSizeLong(const MessageLite& base) {
          const Kick& this_ = static_cast<const Kick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Kick::ByteSizeLong() const {
          const Kick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Kick)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float power = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_power()) != 0) {
              total_size += 5;
            }
            // float relative_direction = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_relative_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Kick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Kick*>(&to_msg);
  auto& from = static_cast<const Kick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Kick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_power()) != 0) {
    _this->_impl_.power_ = from._impl_.power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_relative_direction()) != 0) {
    _this->_impl_.relative_direction_ = from._impl_.relative_direction_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Kick::CopyFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Kick::InternalSwap(Kick* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Kick, _impl_.relative_direction_)
      + sizeof(Kick::_impl_.relative_direction_)
      - PROTOBUF_FIELD_OFFSET(Kick, _impl_.power_)>(
          reinterpret_cast<char*>(&_impl_.power_),
          reinterpret_cast<char*>(&other->_impl_.power_));
}

::google::protobuf::Metadata Kick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Tackle::_Internal {
 public:
};

Tackle::Tackle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Tackle)
}
Tackle::Tackle(
    ::google::protobuf::Arena* arena, const Tackle& from)
    : Tackle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Tackle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Tackle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_or_dir_),
           0,
           offsetof(Impl_, foul_) -
               offsetof(Impl_, power_or_dir_) +
               sizeof(Impl_::foul_));
}
Tackle::~Tackle() {
  // @@protoc_insertion_point(destructor:protos.Tackle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Tackle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Tackle::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Tackle_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Tackle::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Tackle>(),
            ::google::protobuf::Message::GetNewImpl<Tackle>(),
            ::google::protobuf::Message::GetClearImpl<Tackle>(), &Tackle::ByteSizeLong,
                &Tackle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Tackle, _impl_._cached_size_),
            false,
        },
        &Tackle::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Tackle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Tackle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Tackle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool foul = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Tackle, _impl_.foul_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Tackle, _impl_.foul_)}},
    // float power_or_dir = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Tackle, _impl_.power_or_dir_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float power_or_dir = 1;
    {PROTOBUF_FIELD_OFFSET(Tackle, _impl_.power_or_dir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool foul = 2;
    {PROTOBUF_FIELD_OFFSET(Tackle, _impl_.foul_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Tackle::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Tackle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.power_or_dir_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.foul_) -
      reinterpret_cast<char*>(&_impl_.power_or_dir_)) + sizeof(_impl_.foul_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Tackle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Tackle& this_ = static_cast<const Tackle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Tackle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Tackle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Tackle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float power_or_dir = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_power_or_dir()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_power_or_dir(), target);
          }

          // bool foul = 2;
          if (this_._internal_foul() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_foul(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Tackle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Tackle::ByteSizeLong(const MessageLite& base) {
          const Tackle& this_ = static_cast<const Tackle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Tackle::ByteSizeLong() const {
          const Tackle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Tackle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float power_or_dir = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_power_or_dir()) != 0) {
              total_size += 5;
            }
            // bool foul = 2;
            if (this_._internal_foul() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Tackle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Tackle*>(&to_msg);
  auto& from = static_cast<const Tackle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Tackle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_power_or_dir()) != 0) {
    _this->_impl_.power_or_dir_ = from._impl_.power_or_dir_;
  }
  if (from._internal_foul() != 0) {
    _this->_impl_.foul_ = from._impl_.foul_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Tackle::CopyFrom(const Tackle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Tackle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Tackle::InternalSwap(Tackle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tackle, _impl_.foul_)
      + sizeof(Tackle::_impl_.foul_)
      - PROTOBUF_FIELD_OFFSET(Tackle, _impl_.power_or_dir_)>(
          reinterpret_cast<char*>(&_impl_.power_or_dir_),
          reinterpret_cast<char*>(&other->_impl_.power_or_dir_));
}

::google::protobuf::Metadata Tackle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Catch::_Internal {
 public:
};

Catch::Catch(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Catch)
}
Catch::Catch(
    ::google::protobuf::Arena* arena,
    const Catch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Catch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Catch)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Catch::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Catch_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Catch::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Catch>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Catch>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Catch>(), &Catch::ByteSizeLong,
                &Catch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Catch, _impl_._cached_size_),
            false,
        },
        &Catch::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Catch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Catch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Catch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Catch::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Move::_Internal {
 public:
};

Move::Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Move)
}
Move::Move(
    ::google::protobuf::Arena* arena, const Move& from)
    : Move(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Move::~Move() {
  // @@protoc_insertion_point(destructor:protos.Move)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Move::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Move::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Move_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Move::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Move>(),
            ::google::protobuf::Message::GetNewImpl<Move>(),
            ::google::protobuf::Message::GetClearImpl<Move>(), &Move::ByteSizeLong,
                &Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Move, _impl_._cached_size_),
            false,
        },
        &Move::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Move::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Move::ByteSizeLong(const MessageLite& base) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Move::ByteSizeLong() const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Move*>(&to_msg);
  auto& from = static_cast<const Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Move::InternalSwap(Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, _impl_.y_)
      + sizeof(Move::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Move, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TurnNeck::_Internal {
 public:
};

TurnNeck::TurnNeck(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.TurnNeck)
}
TurnNeck::TurnNeck(
    ::google::protobuf::Arena* arena, const TurnNeck& from)
    : TurnNeck(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TurnNeck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TurnNeck::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.moment_ = {};
}
TurnNeck::~TurnNeck() {
  // @@protoc_insertion_point(destructor:protos.TurnNeck)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TurnNeck::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TurnNeck::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TurnNeck_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TurnNeck::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TurnNeck>(),
            ::google::protobuf::Message::GetNewImpl<TurnNeck>(),
            ::google::protobuf::Message::GetClearImpl<TurnNeck>(), &TurnNeck::ByteSizeLong,
                &TurnNeck::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TurnNeck, _impl_._cached_size_),
            false,
        },
        &TurnNeck::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TurnNeck::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TurnNeck::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::TurnNeck>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float moment = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TurnNeck, _impl_.moment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float moment = 1;
    {PROTOBUF_FIELD_OFFSET(TurnNeck, _impl_.moment_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TurnNeck::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TurnNeck)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.moment_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TurnNeck::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TurnNeck& this_ = static_cast<const TurnNeck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TurnNeck::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TurnNeck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.TurnNeck)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float moment = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_moment(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.TurnNeck)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TurnNeck::ByteSizeLong(const MessageLite& base) {
          const TurnNeck& this_ = static_cast<const TurnNeck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TurnNeck::ByteSizeLong() const {
          const TurnNeck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.TurnNeck)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float moment = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_moment()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TurnNeck::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TurnNeck*>(&to_msg);
  auto& from = static_cast<const TurnNeck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.TurnNeck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_moment()) != 0) {
    _this->_impl_.moment_ = from._impl_.moment_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TurnNeck::CopyFrom(const TurnNeck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TurnNeck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TurnNeck::InternalSwap(TurnNeck* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.moment_, other->_impl_.moment_);
}

::google::protobuf::Metadata TurnNeck::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChangeView::_Internal {
 public:
};

ChangeView::ChangeView(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.ChangeView)
}
ChangeView::ChangeView(
    ::google::protobuf::Arena* arena, const ChangeView& from)
    : ChangeView(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ChangeView::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ChangeView::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.view_width_ = {};
}
ChangeView::~ChangeView() {
  // @@protoc_insertion_point(destructor:protos.ChangeView)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangeView::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ChangeView::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ChangeView_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ChangeView::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ChangeView>(),
            ::google::protobuf::Message::GetNewImpl<ChangeView>(),
            ::google::protobuf::Message::GetClearImpl<ChangeView>(), &ChangeView::ByteSizeLong,
                &ChangeView::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ChangeView, _impl_._cached_size_),
            false,
        },
        &ChangeView::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ChangeView::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ChangeView::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::ChangeView>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.ViewWidth view_width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeView, _impl_.view_width_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChangeView, _impl_.view_width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.ViewWidth view_width = 1;
    {PROTOBUF_FIELD_OFFSET(ChangeView, _impl_.view_width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ChangeView::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.ChangeView)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_width_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChangeView::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChangeView& this_ = static_cast<const ChangeView&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChangeView::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChangeView& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.ChangeView)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.ViewWidth view_width = 1;
          if (this_._internal_view_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_view_width(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.ChangeView)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChangeView::ByteSizeLong(const MessageLite& base) {
          const ChangeView& this_ = static_cast<const ChangeView&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChangeView::ByteSizeLong() const {
          const ChangeView& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.ChangeView)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.ViewWidth view_width = 1;
            if (this_._internal_view_width() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_view_width());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChangeView::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChangeView*>(&to_msg);
  auto& from = static_cast<const ChangeView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.ChangeView)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_view_width() != 0) {
    _this->_impl_.view_width_ = from._impl_.view_width_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeView::CopyFrom(const ChangeView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.ChangeView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChangeView::InternalSwap(ChangeView* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.view_width_, other->_impl_.view_width_);
}

::google::protobuf::Metadata ChangeView::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BallMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BallMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BallMessage, _impl_._has_bits_);
};

BallMessage::BallMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.BallMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::BallMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BallMessage::BallMessage(
    ::google::protobuf::Arena* arena,
    const BallMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BallMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ball_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_position_)
                        : nullptr;
  _impl_.ball_velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_velocity_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.BallMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BallMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ball_position_),
           0,
           offsetof(Impl_, ball_velocity_) -
               offsetof(Impl_, ball_position_) +
               sizeof(Impl_::ball_velocity_));
}
BallMessage::~BallMessage() {
  // @@protoc_insertion_point(destructor:protos.BallMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BallMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ball_position_;
  delete _impl_.ball_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BallMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BallMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BallMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BallMessage>(),
            ::google::protobuf::Message::GetNewImpl<BallMessage>(),
            ::google::protobuf::Message::GetClearImpl<BallMessage>(), &BallMessage::ByteSizeLong,
                &BallMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BallMessage, _impl_._cached_size_),
            false,
        },
        &BallMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BallMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> BallMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BallMessage, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BallMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D ball_velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_velocity_)}},
    // .protos.RpcVector2D ball_position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D ball_position = 1;
    {PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_velocity = 2;
    {PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BallMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BallMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ball_position_ != nullptr);
      _impl_.ball_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_velocity_ != nullptr);
      _impl_.ball_velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BallMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BallMessage& this_ = static_cast<const BallMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BallMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BallMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.BallMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D ball_position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.ball_position_, this_._impl_.ball_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.ball_velocity_, this_._impl_.ball_velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.BallMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BallMessage::ByteSizeLong(const MessageLite& base) {
          const BallMessage& this_ = static_cast<const BallMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BallMessage::ByteSizeLong() const {
          const BallMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.BallMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D ball_position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_position_);
            }
            // .protos.RpcVector2D ball_velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_velocity_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BallMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BallMessage*>(&to_msg);
  auto& from = static_cast<const BallMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.BallMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ball_position_ != nullptr);
      if (_this->_impl_.ball_position_ == nullptr) {
        _this->_impl_.ball_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_position_);
      } else {
        _this->_impl_.ball_position_->MergeFrom(*from._impl_.ball_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_velocity_ != nullptr);
      if (_this->_impl_.ball_velocity_ == nullptr) {
        _this->_impl_.ball_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_velocity_);
      } else {
        _this->_impl_.ball_velocity_->MergeFrom(*from._impl_.ball_velocity_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BallMessage::CopyFrom(const BallMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BallMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BallMessage::InternalSwap(BallMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_velocity_)
      + sizeof(BallMessage::_impl_.ball_velocity_)
      - PROTOBUF_FIELD_OFFSET(BallMessage, _impl_.ball_position_)>(
          reinterpret_cast<char*>(&_impl_.ball_position_),
          reinterpret_cast<char*>(&other->_impl_.ball_position_));
}

::google::protobuf::Metadata BallMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PassMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PassMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PassMessage, _impl_._has_bits_);
};

PassMessage::PassMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PassMessage)
}
inline PROTOBUF_NDEBUG_INLINE PassMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PassMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PassMessage::PassMessage(
    ::google::protobuf::Arena* arena,
    const PassMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PassMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.receiver_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.receiver_point_)
                        : nullptr;
  _impl_.ball_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_position_)
                        : nullptr;
  _impl_.ball_velocity_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_velocity_)
                        : nullptr;
  _impl_.receiver_uniform_number_ = from._impl_.receiver_uniform_number_;

  // @@protoc_insertion_point(copy_constructor:protos.PassMessage)
}
inline PROTOBUF_NDEBUG_INLINE PassMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PassMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, receiver_point_),
           0,
           offsetof(Impl_, receiver_uniform_number_) -
               offsetof(Impl_, receiver_point_) +
               sizeof(Impl_::receiver_uniform_number_));
}
PassMessage::~PassMessage() {
  // @@protoc_insertion_point(destructor:protos.PassMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PassMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.receiver_point_;
  delete _impl_.ball_position_;
  delete _impl_.ball_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PassMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PassMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PassMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PassMessage>(),
            ::google::protobuf::Message::GetNewImpl<PassMessage>(),
            ::google::protobuf::Message::GetClearImpl<PassMessage>(), &PassMessage::ByteSizeLong,
                &PassMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PassMessage, _impl_._cached_size_),
            false,
        },
        &PassMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PassMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> PassMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PassMessage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PassMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D ball_velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.ball_velocity_)}},
    // int32 receiver_uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PassMessage, _impl_.receiver_uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_uniform_number_)}},
    // .protos.RpcVector2D receiver_point = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_point_)}},
    // .protos.RpcVector2D ball_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.ball_position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 receiver_uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D receiver_point = 2;
    {PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_position = 3;
    {PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.ball_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_velocity = 4;
    {PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.ball_velocity_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PassMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PassMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.receiver_point_ != nullptr);
      _impl_.receiver_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_position_ != nullptr);
      _impl_.ball_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ball_velocity_ != nullptr);
      _impl_.ball_velocity_->Clear();
    }
  }
  _impl_.receiver_uniform_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PassMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PassMessage& this_ = static_cast<const PassMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PassMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PassMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PassMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 receiver_uniform_number = 1;
          if (this_._internal_receiver_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_receiver_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D receiver_point = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.receiver_point_, this_._impl_.receiver_point_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_position = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.ball_position_, this_._impl_.ball_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_velocity = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ball_velocity_, this_._impl_.ball_velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PassMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PassMessage::ByteSizeLong(const MessageLite& base) {
          const PassMessage& this_ = static_cast<const PassMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PassMessage::ByteSizeLong() const {
          const PassMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PassMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RpcVector2D receiver_point = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.receiver_point_);
            }
            // .protos.RpcVector2D ball_position = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_position_);
            }
            // .protos.RpcVector2D ball_velocity = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_velocity_);
            }
          }
           {
            // int32 receiver_uniform_number = 1;
            if (this_._internal_receiver_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_receiver_uniform_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PassMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PassMessage*>(&to_msg);
  auto& from = static_cast<const PassMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PassMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.receiver_point_ != nullptr);
      if (_this->_impl_.receiver_point_ == nullptr) {
        _this->_impl_.receiver_point_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.receiver_point_);
      } else {
        _this->_impl_.receiver_point_->MergeFrom(*from._impl_.receiver_point_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_position_ != nullptr);
      if (_this->_impl_.ball_position_ == nullptr) {
        _this->_impl_.ball_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_position_);
      } else {
        _this->_impl_.ball_position_->MergeFrom(*from._impl_.ball_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.ball_velocity_ != nullptr);
      if (_this->_impl_.ball_velocity_ == nullptr) {
        _this->_impl_.ball_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_velocity_);
      } else {
        _this->_impl_.ball_velocity_->MergeFrom(*from._impl_.ball_velocity_);
      }
    }
  }
  if (from._internal_receiver_uniform_number() != 0) {
    _this->_impl_.receiver_uniform_number_ = from._impl_.receiver_uniform_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PassMessage::CopyFrom(const PassMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PassMessage::InternalSwap(PassMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_uniform_number_)
      + sizeof(PassMessage::_impl_.receiver_uniform_number_)
      - PROTOBUF_FIELD_OFFSET(PassMessage, _impl_.receiver_point_)>(
          reinterpret_cast<char*>(&_impl_.receiver_point_),
          reinterpret_cast<char*>(&other->_impl_.receiver_point_));
}

::google::protobuf::Metadata PassMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InterceptMessage::_Internal {
 public:
};

InterceptMessage::InterceptMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.InterceptMessage)
}
InterceptMessage::InterceptMessage(
    ::google::protobuf::Arena* arena, const InterceptMessage& from)
    : InterceptMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE InterceptMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InterceptMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, our_),
           0,
           offsetof(Impl_, cycle_) -
               offsetof(Impl_, our_) +
               sizeof(Impl_::cycle_));
}
InterceptMessage::~InterceptMessage() {
  // @@protoc_insertion_point(destructor:protos.InterceptMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InterceptMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InterceptMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InterceptMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InterceptMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InterceptMessage>(),
            ::google::protobuf::Message::GetNewImpl<InterceptMessage>(),
            ::google::protobuf::Message::GetClearImpl<InterceptMessage>(), &InterceptMessage::ByteSizeLong,
                &InterceptMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_._cached_size_),
            false,
        },
        &InterceptMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InterceptMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> InterceptMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::InterceptMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool our = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InterceptMessage, _impl_.our_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.our_)}},
    // int32 uniform_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptMessage, _impl_.uniform_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.uniform_number_)}},
    // int32 cycle = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InterceptMessage, _impl_.cycle_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.cycle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool our = 1;
    {PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.our_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 uniform_number = 2;
    {PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cycle = 3;
    {PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.cycle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void InterceptMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.InterceptMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.our_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cycle_) -
      reinterpret_cast<char*>(&_impl_.our_)) + sizeof(_impl_.cycle_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InterceptMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InterceptMessage& this_ = static_cast<const InterceptMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InterceptMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InterceptMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.InterceptMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool our = 1;
          if (this_._internal_our() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_our(), target);
          }

          // int32 uniform_number = 2;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 cycle = 3;
          if (this_._internal_cycle() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_cycle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.InterceptMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InterceptMessage::ByteSizeLong(const MessageLite& base) {
          const InterceptMessage& this_ = static_cast<const InterceptMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InterceptMessage::ByteSizeLong() const {
          const InterceptMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.InterceptMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool our = 1;
            if (this_._internal_our() != 0) {
              total_size += 2;
            }
            // int32 uniform_number = 2;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 cycle = 3;
            if (this_._internal_cycle() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cycle());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InterceptMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InterceptMessage*>(&to_msg);
  auto& from = static_cast<const InterceptMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.InterceptMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_our() != 0) {
    _this->_impl_.our_ = from._impl_.our_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_cycle() != 0) {
    _this->_impl_.cycle_ = from._impl_.cycle_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InterceptMessage::CopyFrom(const InterceptMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.InterceptMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InterceptMessage::InternalSwap(InterceptMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.cycle_)
      + sizeof(InterceptMessage::_impl_.cycle_)
      - PROTOBUF_FIELD_OFFSET(InterceptMessage, _impl_.our_)>(
          reinterpret_cast<char*>(&_impl_.our_),
          reinterpret_cast<char*>(&other->_impl_.our_));
}

::google::protobuf::Metadata InterceptMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GoalieMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GoalieMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_._has_bits_);
};

GoalieMessage::GoalieMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.GoalieMessage)
}
inline PROTOBUF_NDEBUG_INLINE GoalieMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::GoalieMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GoalieMessage::GoalieMessage(
    ::google::protobuf::Arena* arena,
    const GoalieMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GoalieMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.goalie_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.goalie_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, goalie_uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, goalie_uniform_number_),
           offsetof(Impl_, goalie_body_direction_) -
               offsetof(Impl_, goalie_uniform_number_) +
               sizeof(Impl_::goalie_body_direction_));

  // @@protoc_insertion_point(copy_constructor:protos.GoalieMessage)
}
inline PROTOBUF_NDEBUG_INLINE GoalieMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GoalieMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, goalie_position_),
           0,
           offsetof(Impl_, goalie_body_direction_) -
               offsetof(Impl_, goalie_position_) +
               sizeof(Impl_::goalie_body_direction_));
}
GoalieMessage::~GoalieMessage() {
  // @@protoc_insertion_point(destructor:protos.GoalieMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GoalieMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.goalie_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GoalieMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GoalieMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GoalieMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GoalieMessage>(),
            ::google::protobuf::Message::GetNewImpl<GoalieMessage>(),
            ::google::protobuf::Message::GetClearImpl<GoalieMessage>(), &GoalieMessage::ByteSizeLong,
                &GoalieMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_._cached_size_),
            false,
        },
        &GoalieMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GoalieMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> GoalieMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::GoalieMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 goalie_uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GoalieMessage, _impl_.goalie_uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_uniform_number_)}},
    // .protos.RpcVector2D goalie_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_position_)}},
    // float goalie_body_direction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_body_direction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 goalie_uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D goalie_position = 2;
    {PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float goalie_body_direction = 3;
    {PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GoalieMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.GoalieMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.goalie_position_ != nullptr);
    _impl_.goalie_position_->Clear();
  }
  ::memset(&_impl_.goalie_uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.goalie_body_direction_) -
      reinterpret_cast<char*>(&_impl_.goalie_uniform_number_)) + sizeof(_impl_.goalie_body_direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GoalieMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GoalieMessage& this_ = static_cast<const GoalieMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GoalieMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GoalieMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.GoalieMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 goalie_uniform_number = 1;
          if (this_._internal_goalie_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_goalie_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D goalie_position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.goalie_position_, this_._impl_.goalie_position_->GetCachedSize(), target,
                stream);
          }

          // float goalie_body_direction = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_goalie_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.GoalieMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GoalieMessage::ByteSizeLong(const MessageLite& base) {
          const GoalieMessage& this_ = static_cast<const GoalieMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GoalieMessage::ByteSizeLong() const {
          const GoalieMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.GoalieMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D goalie_position = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.goalie_position_);
            }
          }
           {
            // int32 goalie_uniform_number = 1;
            if (this_._internal_goalie_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_goalie_uniform_number());
            }
            // float goalie_body_direction = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GoalieMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GoalieMessage*>(&to_msg);
  auto& from = static_cast<const GoalieMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.GoalieMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.goalie_position_ != nullptr);
    if (_this->_impl_.goalie_position_ == nullptr) {
      _this->_impl_.goalie_position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.goalie_position_);
    } else {
      _this->_impl_.goalie_position_->MergeFrom(*from._impl_.goalie_position_);
    }
  }
  if (from._internal_goalie_uniform_number() != 0) {
    _this->_impl_.goalie_uniform_number_ = from._impl_.goalie_uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_goalie_body_direction()) != 0) {
    _this->_impl_.goalie_body_direction_ = from._impl_.goalie_body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GoalieMessage::CopyFrom(const GoalieMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.GoalieMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GoalieMessage::InternalSwap(GoalieMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_body_direction_)
      + sizeof(GoalieMessage::_impl_.goalie_body_direction_)
      - PROTOBUF_FIELD_OFFSET(GoalieMessage, _impl_.goalie_position_)>(
          reinterpret_cast<char*>(&_impl_.goalie_position_),
          reinterpret_cast<char*>(&other->_impl_.goalie_position_));
}

::google::protobuf::Metadata GoalieMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GoalieAndPlayerMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GoalieAndPlayerMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_._has_bits_);
};

GoalieAndPlayerMessage::GoalieAndPlayerMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.GoalieAndPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE GoalieAndPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::GoalieAndPlayerMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GoalieAndPlayerMessage::GoalieAndPlayerMessage(
    ::google::protobuf::Arena* arena,
    const GoalieAndPlayerMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GoalieAndPlayerMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.goalie_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.goalie_position_)
                        : nullptr;
  _impl_.player_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.player_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, goalie_uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, goalie_uniform_number_),
           offsetof(Impl_, player_uniform_number_) -
               offsetof(Impl_, goalie_uniform_number_) +
               sizeof(Impl_::player_uniform_number_));

  // @@protoc_insertion_point(copy_constructor:protos.GoalieAndPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE GoalieAndPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GoalieAndPlayerMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, goalie_position_),
           0,
           offsetof(Impl_, player_uniform_number_) -
               offsetof(Impl_, goalie_position_) +
               sizeof(Impl_::player_uniform_number_));
}
GoalieAndPlayerMessage::~GoalieAndPlayerMessage() {
  // @@protoc_insertion_point(destructor:protos.GoalieAndPlayerMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GoalieAndPlayerMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.goalie_position_;
  delete _impl_.player_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GoalieAndPlayerMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GoalieAndPlayerMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GoalieAndPlayerMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GoalieAndPlayerMessage>(),
            ::google::protobuf::Message::GetNewImpl<GoalieAndPlayerMessage>(),
            ::google::protobuf::Message::GetClearImpl<GoalieAndPlayerMessage>(), &GoalieAndPlayerMessage::ByteSizeLong,
                &GoalieAndPlayerMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_._cached_size_),
            false,
        },
        &GoalieAndPlayerMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GoalieAndPlayerMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> GoalieAndPlayerMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::GoalieAndPlayerMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 goalie_uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GoalieAndPlayerMessage, _impl_.goalie_uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_uniform_number_)}},
    // .protos.RpcVector2D goalie_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_position_)}},
    // float goalie_body_direction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_body_direction_)}},
    // int32 player_uniform_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GoalieAndPlayerMessage, _impl_.player_uniform_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.player_uniform_number_)}},
    // .protos.RpcVector2D player_position = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.player_position_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 goalie_uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D goalie_position = 2;
    {PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float goalie_body_direction = 3;
    {PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 player_uniform_number = 4;
    {PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.player_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D player_position = 5;
    {PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.player_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GoalieAndPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.GoalieAndPlayerMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.goalie_position_ != nullptr);
      _impl_.goalie_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.player_position_ != nullptr);
      _impl_.player_position_->Clear();
    }
  }
  ::memset(&_impl_.goalie_uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.player_uniform_number_) -
      reinterpret_cast<char*>(&_impl_.goalie_uniform_number_)) + sizeof(_impl_.player_uniform_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GoalieAndPlayerMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GoalieAndPlayerMessage& this_ = static_cast<const GoalieAndPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GoalieAndPlayerMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GoalieAndPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.GoalieAndPlayerMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 goalie_uniform_number = 1;
          if (this_._internal_goalie_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_goalie_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D goalie_position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.goalie_position_, this_._impl_.goalie_position_->GetCachedSize(), target,
                stream);
          }

          // float goalie_body_direction = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_goalie_body_direction(), target);
          }

          // int32 player_uniform_number = 4;
          if (this_._internal_player_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_player_uniform_number(), target);
          }

          // .protos.RpcVector2D player_position = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.player_position_, this_._impl_.player_position_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.GoalieAndPlayerMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GoalieAndPlayerMessage::ByteSizeLong(const MessageLite& base) {
          const GoalieAndPlayerMessage& this_ = static_cast<const GoalieAndPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GoalieAndPlayerMessage::ByteSizeLong() const {
          const GoalieAndPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.GoalieAndPlayerMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D goalie_position = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.goalie_position_);
            }
            // .protos.RpcVector2D player_position = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.player_position_);
            }
          }
           {
            // int32 goalie_uniform_number = 1;
            if (this_._internal_goalie_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_goalie_uniform_number());
            }
            // float goalie_body_direction = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
              total_size += 5;
            }
            // int32 player_uniform_number = 4;
            if (this_._internal_player_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_player_uniform_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GoalieAndPlayerMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GoalieAndPlayerMessage*>(&to_msg);
  auto& from = static_cast<const GoalieAndPlayerMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.GoalieAndPlayerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.goalie_position_ != nullptr);
      if (_this->_impl_.goalie_position_ == nullptr) {
        _this->_impl_.goalie_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.goalie_position_);
      } else {
        _this->_impl_.goalie_position_->MergeFrom(*from._impl_.goalie_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.player_position_ != nullptr);
      if (_this->_impl_.player_position_ == nullptr) {
        _this->_impl_.player_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.player_position_);
      } else {
        _this->_impl_.player_position_->MergeFrom(*from._impl_.player_position_);
      }
    }
  }
  if (from._internal_goalie_uniform_number() != 0) {
    _this->_impl_.goalie_uniform_number_ = from._impl_.goalie_uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_goalie_body_direction()) != 0) {
    _this->_impl_.goalie_body_direction_ = from._impl_.goalie_body_direction_;
  }
  if (from._internal_player_uniform_number() != 0) {
    _this->_impl_.player_uniform_number_ = from._impl_.player_uniform_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GoalieAndPlayerMessage::CopyFrom(const GoalieAndPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.GoalieAndPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GoalieAndPlayerMessage::InternalSwap(GoalieAndPlayerMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.player_uniform_number_)
      + sizeof(GoalieAndPlayerMessage::_impl_.player_uniform_number_)
      - PROTOBUF_FIELD_OFFSET(GoalieAndPlayerMessage, _impl_.goalie_position_)>(
          reinterpret_cast<char*>(&_impl_.goalie_position_),
          reinterpret_cast<char*>(&other->_impl_.goalie_position_));
}

::google::protobuf::Metadata GoalieAndPlayerMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OffsideLineMessage::_Internal {
 public:
};

OffsideLineMessage::OffsideLineMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.OffsideLineMessage)
}
OffsideLineMessage::OffsideLineMessage(
    ::google::protobuf::Arena* arena, const OffsideLineMessage& from)
    : OffsideLineMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE OffsideLineMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OffsideLineMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offside_line_x_ = {};
}
OffsideLineMessage::~OffsideLineMessage() {
  // @@protoc_insertion_point(destructor:protos.OffsideLineMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OffsideLineMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    OffsideLineMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_OffsideLineMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &OffsideLineMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<OffsideLineMessage>(),
            ::google::protobuf::Message::GetNewImpl<OffsideLineMessage>(),
            ::google::protobuf::Message::GetClearImpl<OffsideLineMessage>(), &OffsideLineMessage::ByteSizeLong,
                &OffsideLineMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(OffsideLineMessage, _impl_._cached_size_),
            false,
        },
        &OffsideLineMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* OffsideLineMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> OffsideLineMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::OffsideLineMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float offside_line_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(OffsideLineMessage, _impl_.offside_line_x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float offside_line_x = 1;
    {PROTOBUF_FIELD_OFFSET(OffsideLineMessage, _impl_.offside_line_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void OffsideLineMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.OffsideLineMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offside_line_x_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OffsideLineMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OffsideLineMessage& this_ = static_cast<const OffsideLineMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OffsideLineMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OffsideLineMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.OffsideLineMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float offside_line_x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_offside_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_offside_line_x(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.OffsideLineMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OffsideLineMessage::ByteSizeLong(const MessageLite& base) {
          const OffsideLineMessage& this_ = static_cast<const OffsideLineMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OffsideLineMessage::ByteSizeLong() const {
          const OffsideLineMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.OffsideLineMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float offside_line_x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_offside_line_x()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OffsideLineMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OffsideLineMessage*>(&to_msg);
  auto& from = static_cast<const OffsideLineMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.OffsideLineMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_offside_line_x()) != 0) {
    _this->_impl_.offside_line_x_ = from._impl_.offside_line_x_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OffsideLineMessage::CopyFrom(const OffsideLineMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.OffsideLineMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OffsideLineMessage::InternalSwap(OffsideLineMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.offside_line_x_, other->_impl_.offside_line_x_);
}

::google::protobuf::Metadata OffsideLineMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DefenseLineMessage::_Internal {
 public:
};

DefenseLineMessage::DefenseLineMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DefenseLineMessage)
}
DefenseLineMessage::DefenseLineMessage(
    ::google::protobuf::Arena* arena, const DefenseLineMessage& from)
    : DefenseLineMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DefenseLineMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DefenseLineMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.defense_line_x_ = {};
}
DefenseLineMessage::~DefenseLineMessage() {
  // @@protoc_insertion_point(destructor:protos.DefenseLineMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DefenseLineMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DefenseLineMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DefenseLineMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DefenseLineMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DefenseLineMessage>(),
            ::google::protobuf::Message::GetNewImpl<DefenseLineMessage>(),
            ::google::protobuf::Message::GetClearImpl<DefenseLineMessage>(), &DefenseLineMessage::ByteSizeLong,
                &DefenseLineMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DefenseLineMessage, _impl_._cached_size_),
            false,
        },
        &DefenseLineMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DefenseLineMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DefenseLineMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DefenseLineMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float defense_line_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(DefenseLineMessage, _impl_.defense_line_x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float defense_line_x = 1;
    {PROTOBUF_FIELD_OFFSET(DefenseLineMessage, _impl_.defense_line_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DefenseLineMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DefenseLineMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.defense_line_x_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DefenseLineMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DefenseLineMessage& this_ = static_cast<const DefenseLineMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DefenseLineMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DefenseLineMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DefenseLineMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float defense_line_x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_defense_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_defense_line_x(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DefenseLineMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DefenseLineMessage::ByteSizeLong(const MessageLite& base) {
          const DefenseLineMessage& this_ = static_cast<const DefenseLineMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DefenseLineMessage::ByteSizeLong() const {
          const DefenseLineMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DefenseLineMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float defense_line_x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_defense_line_x()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DefenseLineMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DefenseLineMessage*>(&to_msg);
  auto& from = static_cast<const DefenseLineMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DefenseLineMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_defense_line_x()) != 0) {
    _this->_impl_.defense_line_x_ = from._impl_.defense_line_x_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DefenseLineMessage::CopyFrom(const DefenseLineMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DefenseLineMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DefenseLineMessage::InternalSwap(DefenseLineMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.defense_line_x_, other->_impl_.defense_line_x_);
}

::google::protobuf::Metadata DefenseLineMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WaitRequestMessage::_Internal {
 public:
};

WaitRequestMessage::WaitRequestMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.WaitRequestMessage)
}
WaitRequestMessage::WaitRequestMessage(
    ::google::protobuf::Arena* arena,
    const WaitRequestMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WaitRequestMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.WaitRequestMessage)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    WaitRequestMessage::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_WaitRequestMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &WaitRequestMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<WaitRequestMessage>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<WaitRequestMessage>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<WaitRequestMessage>(), &WaitRequestMessage::ByteSizeLong,
                &WaitRequestMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(WaitRequestMessage, _impl_._cached_size_),
            false,
        },
        &WaitRequestMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* WaitRequestMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> WaitRequestMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::WaitRequestMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata WaitRequestMessage::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetplayMessage::_Internal {
 public:
};

SetplayMessage::SetplayMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.SetplayMessage)
}
SetplayMessage::SetplayMessage(
    ::google::protobuf::Arena* arena, const SetplayMessage& from)
    : SetplayMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SetplayMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetplayMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.wait_step_ = {};
}
SetplayMessage::~SetplayMessage() {
  // @@protoc_insertion_point(destructor:protos.SetplayMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetplayMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SetplayMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SetplayMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SetplayMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SetplayMessage>(),
            ::google::protobuf::Message::GetNewImpl<SetplayMessage>(),
            ::google::protobuf::Message::GetClearImpl<SetplayMessage>(), &SetplayMessage::ByteSizeLong,
                &SetplayMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SetplayMessage, _impl_._cached_size_),
            false,
        },
        &SetplayMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SetplayMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetplayMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::SetplayMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 wait_step = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SetplayMessage, _impl_.wait_step_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SetplayMessage, _impl_.wait_step_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 wait_step = 1;
    {PROTOBUF_FIELD_OFFSET(SetplayMessage, _impl_.wait_step_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SetplayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.SetplayMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wait_step_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetplayMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetplayMessage& this_ = static_cast<const SetplayMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetplayMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetplayMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.SetplayMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 wait_step = 1;
          if (this_._internal_wait_step() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_wait_step(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.SetplayMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetplayMessage::ByteSizeLong(const MessageLite& base) {
          const SetplayMessage& this_ = static_cast<const SetplayMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetplayMessage::ByteSizeLong() const {
          const SetplayMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.SetplayMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 wait_step = 1;
            if (this_._internal_wait_step() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_wait_step());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetplayMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetplayMessage*>(&to_msg);
  auto& from = static_cast<const SetplayMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.SetplayMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_wait_step() != 0) {
    _this->_impl_.wait_step_ = from._impl_.wait_step_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetplayMessage::CopyFrom(const SetplayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.SetplayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetplayMessage::InternalSwap(SetplayMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.wait_step_, other->_impl_.wait_step_);
}

::google::protobuf::Metadata SetplayMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PassRequestMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PassRequestMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PassRequestMessage, _impl_._has_bits_);
};

PassRequestMessage::PassRequestMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PassRequestMessage)
}
inline PROTOBUF_NDEBUG_INLINE PassRequestMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PassRequestMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PassRequestMessage::PassRequestMessage(
    ::google::protobuf::Arena* arena,
    const PassRequestMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PassRequestMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.PassRequestMessage)
}
inline PROTOBUF_NDEBUG_INLINE PassRequestMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PassRequestMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_point_ = {};
}
PassRequestMessage::~PassRequestMessage() {
  // @@protoc_insertion_point(destructor:protos.PassRequestMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PassRequestMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PassRequestMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PassRequestMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PassRequestMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PassRequestMessage>(),
            ::google::protobuf::Message::GetNewImpl<PassRequestMessage>(),
            ::google::protobuf::Message::GetClearImpl<PassRequestMessage>(), &PassRequestMessage::ByteSizeLong,
                &PassRequestMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PassRequestMessage, _impl_._cached_size_),
            false,
        },
        &PassRequestMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PassRequestMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PassRequestMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PassRequestMessage, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PassRequestMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PassRequestMessage, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(PassRequestMessage, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PassRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PassRequestMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PassRequestMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PassRequestMessage& this_ = static_cast<const PassRequestMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PassRequestMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PassRequestMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PassRequestMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PassRequestMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PassRequestMessage::ByteSizeLong(const MessageLite& base) {
          const PassRequestMessage& this_ = static_cast<const PassRequestMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PassRequestMessage::ByteSizeLong() const {
          const PassRequestMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PassRequestMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PassRequestMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PassRequestMessage*>(&to_msg);
  auto& from = static_cast<const PassRequestMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PassRequestMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PassRequestMessage::CopyFrom(const PassRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PassRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PassRequestMessage::InternalSwap(PassRequestMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_point_, other->_impl_.target_point_);
}

::google::protobuf::Metadata PassRequestMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StaminaMessage::_Internal {
 public:
};

StaminaMessage::StaminaMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.StaminaMessage)
}
StaminaMessage::StaminaMessage(
    ::google::protobuf::Arena* arena, const StaminaMessage& from)
    : StaminaMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StaminaMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StaminaMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stamina_ = {};
}
StaminaMessage::~StaminaMessage() {
  // @@protoc_insertion_point(destructor:protos.StaminaMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StaminaMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    StaminaMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_StaminaMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &StaminaMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<StaminaMessage>(),
            ::google::protobuf::Message::GetNewImpl<StaminaMessage>(),
            ::google::protobuf::Message::GetClearImpl<StaminaMessage>(), &StaminaMessage::ByteSizeLong,
                &StaminaMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(StaminaMessage, _impl_._cached_size_),
            false,
        },
        &StaminaMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* StaminaMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> StaminaMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::StaminaMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float stamina = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(StaminaMessage, _impl_.stamina_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float stamina = 1;
    {PROTOBUF_FIELD_OFFSET(StaminaMessage, _impl_.stamina_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StaminaMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.StaminaMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stamina_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StaminaMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StaminaMessage& this_ = static_cast<const StaminaMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StaminaMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StaminaMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.StaminaMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float stamina = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_stamina(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.StaminaMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StaminaMessage::ByteSizeLong(const MessageLite& base) {
          const StaminaMessage& this_ = static_cast<const StaminaMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StaminaMessage::ByteSizeLong() const {
          const StaminaMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.StaminaMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float stamina = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StaminaMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StaminaMessage*>(&to_msg);
  auto& from = static_cast<const StaminaMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.StaminaMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_stamina()) != 0) {
    _this->_impl_.stamina_ = from._impl_.stamina_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StaminaMessage::CopyFrom(const StaminaMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.StaminaMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StaminaMessage::InternalSwap(StaminaMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.stamina_, other->_impl_.stamina_);
}

::google::protobuf::Metadata StaminaMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RecoveryMessage::_Internal {
 public:
};

RecoveryMessage::RecoveryMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RecoveryMessage)
}
RecoveryMessage::RecoveryMessage(
    ::google::protobuf::Arena* arena, const RecoveryMessage& from)
    : RecoveryMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RecoveryMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RecoveryMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.recovery_ = {};
}
RecoveryMessage::~RecoveryMessage() {
  // @@protoc_insertion_point(destructor:protos.RecoveryMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RecoveryMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RecoveryMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RecoveryMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RecoveryMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RecoveryMessage>(),
            ::google::protobuf::Message::GetNewImpl<RecoveryMessage>(),
            ::google::protobuf::Message::GetClearImpl<RecoveryMessage>(), &RecoveryMessage::ByteSizeLong,
                &RecoveryMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RecoveryMessage, _impl_._cached_size_),
            false,
        },
        &RecoveryMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RecoveryMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> RecoveryMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RecoveryMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float recovery = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(RecoveryMessage, _impl_.recovery_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float recovery = 1;
    {PROTOBUF_FIELD_OFFSET(RecoveryMessage, _impl_.recovery_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RecoveryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RecoveryMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recovery_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RecoveryMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RecoveryMessage& this_ = static_cast<const RecoveryMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RecoveryMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RecoveryMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RecoveryMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float recovery = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recovery()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_recovery(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RecoveryMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RecoveryMessage::ByteSizeLong(const MessageLite& base) {
          const RecoveryMessage& this_ = static_cast<const RecoveryMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RecoveryMessage::ByteSizeLong() const {
          const RecoveryMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RecoveryMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float recovery = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recovery()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RecoveryMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RecoveryMessage*>(&to_msg);
  auto& from = static_cast<const RecoveryMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RecoveryMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_recovery()) != 0) {
    _this->_impl_.recovery_ = from._impl_.recovery_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RecoveryMessage::CopyFrom(const RecoveryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RecoveryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RecoveryMessage::InternalSwap(RecoveryMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.recovery_, other->_impl_.recovery_);
}

::google::protobuf::Metadata RecoveryMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StaminaCapacityMessage::_Internal {
 public:
};

StaminaCapacityMessage::StaminaCapacityMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.StaminaCapacityMessage)
}
StaminaCapacityMessage::StaminaCapacityMessage(
    ::google::protobuf::Arena* arena, const StaminaCapacityMessage& from)
    : StaminaCapacityMessage(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StaminaCapacityMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StaminaCapacityMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stamina_capacity_ = {};
}
StaminaCapacityMessage::~StaminaCapacityMessage() {
  // @@protoc_insertion_point(destructor:protos.StaminaCapacityMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StaminaCapacityMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    StaminaCapacityMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_StaminaCapacityMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &StaminaCapacityMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<StaminaCapacityMessage>(),
            ::google::protobuf::Message::GetNewImpl<StaminaCapacityMessage>(),
            ::google::protobuf::Message::GetClearImpl<StaminaCapacityMessage>(), &StaminaCapacityMessage::ByteSizeLong,
                &StaminaCapacityMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(StaminaCapacityMessage, _impl_._cached_size_),
            false,
        },
        &StaminaCapacityMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* StaminaCapacityMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> StaminaCapacityMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::StaminaCapacityMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float stamina_capacity = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(StaminaCapacityMessage, _impl_.stamina_capacity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float stamina_capacity = 1;
    {PROTOBUF_FIELD_OFFSET(StaminaCapacityMessage, _impl_.stamina_capacity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StaminaCapacityMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.StaminaCapacityMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stamina_capacity_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StaminaCapacityMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StaminaCapacityMessage& this_ = static_cast<const StaminaCapacityMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StaminaCapacityMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StaminaCapacityMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.StaminaCapacityMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float stamina_capacity = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_stamina_capacity(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.StaminaCapacityMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StaminaCapacityMessage::ByteSizeLong(const MessageLite& base) {
          const StaminaCapacityMessage& this_ = static_cast<const StaminaCapacityMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StaminaCapacityMessage::ByteSizeLong() const {
          const StaminaCapacityMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.StaminaCapacityMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float stamina_capacity = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StaminaCapacityMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StaminaCapacityMessage*>(&to_msg);
  auto& from = static_cast<const StaminaCapacityMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.StaminaCapacityMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_capacity()) != 0) {
    _this->_impl_.stamina_capacity_ = from._impl_.stamina_capacity_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StaminaCapacityMessage::CopyFrom(const StaminaCapacityMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.StaminaCapacityMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StaminaCapacityMessage::InternalSwap(StaminaCapacityMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.stamina_capacity_, other->_impl_.stamina_capacity_);
}

::google::protobuf::Metadata StaminaCapacityMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DribbleMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DribbleMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_._has_bits_);
};

DribbleMessage::DribbleMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DribbleMessage)
}
inline PROTOBUF_NDEBUG_INLINE DribbleMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::DribbleMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DribbleMessage::DribbleMessage(
    ::google::protobuf::Arena* arena,
    const DribbleMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DribbleMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  _impl_.queue_count_ = from._impl_.queue_count_;

  // @@protoc_insertion_point(copy_constructor:protos.DribbleMessage)
}
inline PROTOBUF_NDEBUG_INLINE DribbleMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DribbleMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, queue_count_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::queue_count_));
}
DribbleMessage::~DribbleMessage() {
  // @@protoc_insertion_point(destructor:protos.DribbleMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DribbleMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DribbleMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DribbleMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DribbleMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DribbleMessage>(),
            ::google::protobuf::Message::GetNewImpl<DribbleMessage>(),
            ::google::protobuf::Message::GetClearImpl<DribbleMessage>(), &DribbleMessage::ByteSizeLong,
                &DribbleMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_._cached_size_),
            false,
        },
        &DribbleMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DribbleMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> DribbleMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DribbleMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 queue_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DribbleMessage, _impl_.queue_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.queue_count_)}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 queue_count = 2;
    {PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.queue_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DribbleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DribbleMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_.queue_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DribbleMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DribbleMessage& this_ = static_cast<const DribbleMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DribbleMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DribbleMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DribbleMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // int32 queue_count = 2;
          if (this_._internal_queue_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_queue_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DribbleMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DribbleMessage::ByteSizeLong(const MessageLite& base) {
          const DribbleMessage& this_ = static_cast<const DribbleMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DribbleMessage::ByteSizeLong() const {
          const DribbleMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DribbleMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // int32 queue_count = 2;
            if (this_._internal_queue_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_queue_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DribbleMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DribbleMessage*>(&to_msg);
  auto& from = static_cast<const DribbleMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DribbleMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (from._internal_queue_count() != 0) {
    _this->_impl_.queue_count_ = from._impl_.queue_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DribbleMessage::CopyFrom(const DribbleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DribbleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DribbleMessage::InternalSwap(DribbleMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.queue_count_)
      + sizeof(DribbleMessage::_impl_.queue_count_)
      - PROTOBUF_FIELD_OFFSET(DribbleMessage, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata DribbleMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BallGoalieMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BallGoalieMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_._has_bits_);
};

BallGoalieMessage::BallGoalieMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.BallGoalieMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallGoalieMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::BallGoalieMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BallGoalieMessage::BallGoalieMessage(
    ::google::protobuf::Arena* arena,
    const BallGoalieMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BallGoalieMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ball_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_position_)
                        : nullptr;
  _impl_.ball_velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_velocity_)
                        : nullptr;
  _impl_.goalie_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.goalie_position_)
                        : nullptr;
  _impl_.goalie_body_direction_ = from._impl_.goalie_body_direction_;

  // @@protoc_insertion_point(copy_constructor:protos.BallGoalieMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallGoalieMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BallGoalieMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ball_position_),
           0,
           offsetof(Impl_, goalie_body_direction_) -
               offsetof(Impl_, ball_position_) +
               sizeof(Impl_::goalie_body_direction_));
}
BallGoalieMessage::~BallGoalieMessage() {
  // @@protoc_insertion_point(destructor:protos.BallGoalieMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BallGoalieMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ball_position_;
  delete _impl_.ball_velocity_;
  delete _impl_.goalie_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BallGoalieMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BallGoalieMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BallGoalieMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BallGoalieMessage>(),
            ::google::protobuf::Message::GetNewImpl<BallGoalieMessage>(),
            ::google::protobuf::Message::GetClearImpl<BallGoalieMessage>(), &BallGoalieMessage::ByteSizeLong,
                &BallGoalieMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_._cached_size_),
            false,
        },
        &BallGoalieMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BallGoalieMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> BallGoalieMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BallGoalieMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float goalie_body_direction = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.goalie_body_direction_)}},
    // .protos.RpcVector2D ball_position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.ball_position_)}},
    // .protos.RpcVector2D ball_velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.ball_velocity_)}},
    // .protos.RpcVector2D goalie_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.goalie_position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D ball_position = 1;
    {PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.ball_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_velocity = 2;
    {PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.ball_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D goalie_position = 3;
    {PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.goalie_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float goalie_body_direction = 4;
    {PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.goalie_body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BallGoalieMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BallGoalieMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ball_position_ != nullptr);
      _impl_.ball_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_velocity_ != nullptr);
      _impl_.ball_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.goalie_position_ != nullptr);
      _impl_.goalie_position_->Clear();
    }
  }
  _impl_.goalie_body_direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BallGoalieMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BallGoalieMessage& this_ = static_cast<const BallGoalieMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BallGoalieMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BallGoalieMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.BallGoalieMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D ball_position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.ball_position_, this_._impl_.ball_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.ball_velocity_, this_._impl_.ball_velocity_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D goalie_position = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.goalie_position_, this_._impl_.goalie_position_->GetCachedSize(), target,
                stream);
          }

          // float goalie_body_direction = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_goalie_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.BallGoalieMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BallGoalieMessage::ByteSizeLong(const MessageLite& base) {
          const BallGoalieMessage& this_ = static_cast<const BallGoalieMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BallGoalieMessage::ByteSizeLong() const {
          const BallGoalieMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.BallGoalieMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RpcVector2D ball_position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_position_);
            }
            // .protos.RpcVector2D ball_velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_velocity_);
            }
            // .protos.RpcVector2D goalie_position = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.goalie_position_);
            }
          }
           {
            // float goalie_body_direction = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_goalie_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BallGoalieMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BallGoalieMessage*>(&to_msg);
  auto& from = static_cast<const BallGoalieMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.BallGoalieMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ball_position_ != nullptr);
      if (_this->_impl_.ball_position_ == nullptr) {
        _this->_impl_.ball_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_position_);
      } else {
        _this->_impl_.ball_position_->MergeFrom(*from._impl_.ball_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_velocity_ != nullptr);
      if (_this->_impl_.ball_velocity_ == nullptr) {
        _this->_impl_.ball_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_velocity_);
      } else {
        _this->_impl_.ball_velocity_->MergeFrom(*from._impl_.ball_velocity_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.goalie_position_ != nullptr);
      if (_this->_impl_.goalie_position_ == nullptr) {
        _this->_impl_.goalie_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.goalie_position_);
      } else {
        _this->_impl_.goalie_position_->MergeFrom(*from._impl_.goalie_position_);
      }
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_goalie_body_direction()) != 0) {
    _this->_impl_.goalie_body_direction_ = from._impl_.goalie_body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BallGoalieMessage::CopyFrom(const BallGoalieMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BallGoalieMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BallGoalieMessage::InternalSwap(BallGoalieMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.goalie_body_direction_)
      + sizeof(BallGoalieMessage::_impl_.goalie_body_direction_)
      - PROTOBUF_FIELD_OFFSET(BallGoalieMessage, _impl_.ball_position_)>(
          reinterpret_cast<char*>(&_impl_.ball_position_),
          reinterpret_cast<char*>(&other->_impl_.ball_position_));
}

::google::protobuf::Metadata BallGoalieMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OnePlayerMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<OnePlayerMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_._has_bits_);
};

OnePlayerMessage::OnePlayerMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.OnePlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE OnePlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::OnePlayerMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OnePlayerMessage::OnePlayerMessage(
    ::google::protobuf::Arena* arena,
    const OnePlayerMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OnePlayerMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.uniform_number_ = from._impl_.uniform_number_;

  // @@protoc_insertion_point(copy_constructor:protos.OnePlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE OnePlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OnePlayerMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, uniform_number_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::uniform_number_));
}
OnePlayerMessage::~OnePlayerMessage() {
  // @@protoc_insertion_point(destructor:protos.OnePlayerMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OnePlayerMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    OnePlayerMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_OnePlayerMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &OnePlayerMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<OnePlayerMessage>(),
            ::google::protobuf::Message::GetNewImpl<OnePlayerMessage>(),
            ::google::protobuf::Message::GetClearImpl<OnePlayerMessage>(), &OnePlayerMessage::ByteSizeLong,
                &OnePlayerMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_._cached_size_),
            false,
        },
        &OnePlayerMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* OnePlayerMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> OnePlayerMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::OnePlayerMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.position_)}},
    // int32 uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OnePlayerMessage, _impl_.uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.uniform_number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D position = 2;
    {PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OnePlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.OnePlayerMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.uniform_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OnePlayerMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OnePlayerMessage& this_ = static_cast<const OnePlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OnePlayerMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OnePlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.OnePlayerMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 uniform_number = 1;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.OnePlayerMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OnePlayerMessage::ByteSizeLong(const MessageLite& base) {
          const OnePlayerMessage& this_ = static_cast<const OnePlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OnePlayerMessage::ByteSizeLong() const {
          const OnePlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.OnePlayerMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D position = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // int32 uniform_number = 1;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OnePlayerMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OnePlayerMessage*>(&to_msg);
  auto& from = static_cast<const OnePlayerMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.OnePlayerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OnePlayerMessage::CopyFrom(const OnePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.OnePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OnePlayerMessage::InternalSwap(OnePlayerMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.uniform_number_)
      + sizeof(OnePlayerMessage::_impl_.uniform_number_)
      - PROTOBUF_FIELD_OFFSET(OnePlayerMessage, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata OnePlayerMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TwoPlayerMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TwoPlayerMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_._has_bits_);
};

TwoPlayerMessage::TwoPlayerMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.TwoPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE TwoPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::TwoPlayerMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TwoPlayerMessage::TwoPlayerMessage(
    ::google::protobuf::Arena* arena,
    const TwoPlayerMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TwoPlayerMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.first_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.first_position_)
                        : nullptr;
  _impl_.second_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.second_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, first_uniform_number_),
           offsetof(Impl_, second_uniform_number_) -
               offsetof(Impl_, first_uniform_number_) +
               sizeof(Impl_::second_uniform_number_));

  // @@protoc_insertion_point(copy_constructor:protos.TwoPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE TwoPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TwoPlayerMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_position_),
           0,
           offsetof(Impl_, second_uniform_number_) -
               offsetof(Impl_, first_position_) +
               sizeof(Impl_::second_uniform_number_));
}
TwoPlayerMessage::~TwoPlayerMessage() {
  // @@protoc_insertion_point(destructor:protos.TwoPlayerMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TwoPlayerMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.first_position_;
  delete _impl_.second_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TwoPlayerMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TwoPlayerMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TwoPlayerMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TwoPlayerMessage>(),
            ::google::protobuf::Message::GetNewImpl<TwoPlayerMessage>(),
            ::google::protobuf::Message::GetClearImpl<TwoPlayerMessage>(), &TwoPlayerMessage::ByteSizeLong,
                &TwoPlayerMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_._cached_size_),
            false,
        },
        &TwoPlayerMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TwoPlayerMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> TwoPlayerMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::TwoPlayerMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D second_position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.second_position_)}},
    // int32 first_uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TwoPlayerMessage, _impl_.first_uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.first_uniform_number_)}},
    // .protos.RpcVector2D first_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.first_position_)}},
    // int32 second_uniform_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TwoPlayerMessage, _impl_.second_uniform_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.second_uniform_number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 first_uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.first_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D first_position = 2;
    {PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.first_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 second_uniform_number = 3;
    {PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.second_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D second_position = 4;
    {PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.second_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TwoPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TwoPlayerMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.first_position_ != nullptr);
      _impl_.first_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.second_position_ != nullptr);
      _impl_.second_position_->Clear();
    }
  }
  ::memset(&_impl_.first_uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.second_uniform_number_) -
      reinterpret_cast<char*>(&_impl_.first_uniform_number_)) + sizeof(_impl_.second_uniform_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TwoPlayerMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TwoPlayerMessage& this_ = static_cast<const TwoPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TwoPlayerMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TwoPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.TwoPlayerMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 first_uniform_number = 1;
          if (this_._internal_first_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_first_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D first_position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.first_position_, this_._impl_.first_position_->GetCachedSize(), target,
                stream);
          }

          // int32 second_uniform_number = 3;
          if (this_._internal_second_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_second_uniform_number(), target);
          }

          // .protos.RpcVector2D second_position = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.second_position_, this_._impl_.second_position_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.TwoPlayerMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TwoPlayerMessage::ByteSizeLong(const MessageLite& base) {
          const TwoPlayerMessage& this_ = static_cast<const TwoPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TwoPlayerMessage::ByteSizeLong() const {
          const TwoPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.TwoPlayerMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D first_position = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_position_);
            }
            // .protos.RpcVector2D second_position = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.second_position_);
            }
          }
           {
            // int32 first_uniform_number = 1;
            if (this_._internal_first_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_uniform_number());
            }
            // int32 second_uniform_number = 3;
            if (this_._internal_second_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_uniform_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TwoPlayerMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TwoPlayerMessage*>(&to_msg);
  auto& from = static_cast<const TwoPlayerMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.TwoPlayerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.first_position_ != nullptr);
      if (_this->_impl_.first_position_ == nullptr) {
        _this->_impl_.first_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.first_position_);
      } else {
        _this->_impl_.first_position_->MergeFrom(*from._impl_.first_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.second_position_ != nullptr);
      if (_this->_impl_.second_position_ == nullptr) {
        _this->_impl_.second_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.second_position_);
      } else {
        _this->_impl_.second_position_->MergeFrom(*from._impl_.second_position_);
      }
    }
  }
  if (from._internal_first_uniform_number() != 0) {
    _this->_impl_.first_uniform_number_ = from._impl_.first_uniform_number_;
  }
  if (from._internal_second_uniform_number() != 0) {
    _this->_impl_.second_uniform_number_ = from._impl_.second_uniform_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TwoPlayerMessage::CopyFrom(const TwoPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TwoPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TwoPlayerMessage::InternalSwap(TwoPlayerMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.second_uniform_number_)
      + sizeof(TwoPlayerMessage::_impl_.second_uniform_number_)
      - PROTOBUF_FIELD_OFFSET(TwoPlayerMessage, _impl_.first_position_)>(
          reinterpret_cast<char*>(&_impl_.first_position_),
          reinterpret_cast<char*>(&other->_impl_.first_position_));
}

::google::protobuf::Metadata TwoPlayerMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ThreePlayerMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ThreePlayerMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_._has_bits_);
};

ThreePlayerMessage::ThreePlayerMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.ThreePlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE ThreePlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::ThreePlayerMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ThreePlayerMessage::ThreePlayerMessage(
    ::google::protobuf::Arena* arena,
    const ThreePlayerMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ThreePlayerMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.first_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.first_position_)
                        : nullptr;
  _impl_.second_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.second_position_)
                        : nullptr;
  _impl_.third_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.third_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, first_uniform_number_),
           offsetof(Impl_, third_uniform_number_) -
               offsetof(Impl_, first_uniform_number_) +
               sizeof(Impl_::third_uniform_number_));

  // @@protoc_insertion_point(copy_constructor:protos.ThreePlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE ThreePlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ThreePlayerMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_position_),
           0,
           offsetof(Impl_, third_uniform_number_) -
               offsetof(Impl_, first_position_) +
               sizeof(Impl_::third_uniform_number_));
}
ThreePlayerMessage::~ThreePlayerMessage() {
  // @@protoc_insertion_point(destructor:protos.ThreePlayerMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ThreePlayerMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.first_position_;
  delete _impl_.second_position_;
  delete _impl_.third_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ThreePlayerMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ThreePlayerMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ThreePlayerMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ThreePlayerMessage>(),
            ::google::protobuf::Message::GetNewImpl<ThreePlayerMessage>(),
            ::google::protobuf::Message::GetClearImpl<ThreePlayerMessage>(), &ThreePlayerMessage::ByteSizeLong,
                &ThreePlayerMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_._cached_size_),
            false,
        },
        &ThreePlayerMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ThreePlayerMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 0, 2> ThreePlayerMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::ThreePlayerMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 first_uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreePlayerMessage, _impl_.first_uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.first_uniform_number_)}},
    // .protos.RpcVector2D first_position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.first_position_)}},
    // int32 second_uniform_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreePlayerMessage, _impl_.second_uniform_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.second_uniform_number_)}},
    // .protos.RpcVector2D second_position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.second_position_)}},
    // int32 third_uniform_number = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreePlayerMessage, _impl_.third_uniform_number_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.third_uniform_number_)}},
    // .protos.RpcVector2D third_position = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.third_position_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 first_uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.first_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D first_position = 2;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.first_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 second_uniform_number = 3;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.second_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D second_position = 4;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.second_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 third_uniform_number = 5;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.third_uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D third_position = 6;
    {PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.third_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ThreePlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.ThreePlayerMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.first_position_ != nullptr);
      _impl_.first_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.second_position_ != nullptr);
      _impl_.second_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.third_position_ != nullptr);
      _impl_.third_position_->Clear();
    }
  }
  ::memset(&_impl_.first_uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.third_uniform_number_) -
      reinterpret_cast<char*>(&_impl_.first_uniform_number_)) + sizeof(_impl_.third_uniform_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ThreePlayerMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ThreePlayerMessage& this_ = static_cast<const ThreePlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ThreePlayerMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ThreePlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.ThreePlayerMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 first_uniform_number = 1;
          if (this_._internal_first_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_first_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D first_position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.first_position_, this_._impl_.first_position_->GetCachedSize(), target,
                stream);
          }

          // int32 second_uniform_number = 3;
          if (this_._internal_second_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_second_uniform_number(), target);
          }

          // .protos.RpcVector2D second_position = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.second_position_, this_._impl_.second_position_->GetCachedSize(), target,
                stream);
          }

          // int32 third_uniform_number = 5;
          if (this_._internal_third_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_third_uniform_number(), target);
          }

          // .protos.RpcVector2D third_position = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.third_position_, this_._impl_.third_position_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.ThreePlayerMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ThreePlayerMessage::ByteSizeLong(const MessageLite& base) {
          const ThreePlayerMessage& this_ = static_cast<const ThreePlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ThreePlayerMessage::ByteSizeLong() const {
          const ThreePlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.ThreePlayerMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RpcVector2D first_position = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_position_);
            }
            // .protos.RpcVector2D second_position = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.second_position_);
            }
            // .protos.RpcVector2D third_position = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.third_position_);
            }
          }
           {
            // int32 first_uniform_number = 1;
            if (this_._internal_first_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_first_uniform_number());
            }
            // int32 second_uniform_number = 3;
            if (this_._internal_second_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_second_uniform_number());
            }
            // int32 third_uniform_number = 5;
            if (this_._internal_third_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_third_uniform_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ThreePlayerMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ThreePlayerMessage*>(&to_msg);
  auto& from = static_cast<const ThreePlayerMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.ThreePlayerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.first_position_ != nullptr);
      if (_this->_impl_.first_position_ == nullptr) {
        _this->_impl_.first_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.first_position_);
      } else {
        _this->_impl_.first_position_->MergeFrom(*from._impl_.first_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.second_position_ != nullptr);
      if (_this->_impl_.second_position_ == nullptr) {
        _this->_impl_.second_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.second_position_);
      } else {
        _this->_impl_.second_position_->MergeFrom(*from._impl_.second_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.third_position_ != nullptr);
      if (_this->_impl_.third_position_ == nullptr) {
        _this->_impl_.third_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.third_position_);
      } else {
        _this->_impl_.third_position_->MergeFrom(*from._impl_.third_position_);
      }
    }
  }
  if (from._internal_first_uniform_number() != 0) {
    _this->_impl_.first_uniform_number_ = from._impl_.first_uniform_number_;
  }
  if (from._internal_second_uniform_number() != 0) {
    _this->_impl_.second_uniform_number_ = from._impl_.second_uniform_number_;
  }
  if (from._internal_third_uniform_number() != 0) {
    _this->_impl_.third_uniform_number_ = from._impl_.third_uniform_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ThreePlayerMessage::CopyFrom(const ThreePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.ThreePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ThreePlayerMessage::InternalSwap(ThreePlayerMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.third_uniform_number_)
      + sizeof(ThreePlayerMessage::_impl_.third_uniform_number_)
      - PROTOBUF_FIELD_OFFSET(ThreePlayerMessage, _impl_.first_position_)>(
          reinterpret_cast<char*>(&_impl_.first_position_),
          reinterpret_cast<char*>(&other->_impl_.first_position_));
}

::google::protobuf::Metadata ThreePlayerMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SelfMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SelfMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_._has_bits_);
};

SelfMessage::SelfMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.SelfMessage)
}
inline PROTOBUF_NDEBUG_INLINE SelfMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::SelfMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SelfMessage::SelfMessage(
    ::google::protobuf::Arena* arena,
    const SelfMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SelfMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.self_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.self_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, self_body_direction_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, self_body_direction_),
           offsetof(Impl_, self_stamina_) -
               offsetof(Impl_, self_body_direction_) +
               sizeof(Impl_::self_stamina_));

  // @@protoc_insertion_point(copy_constructor:protos.SelfMessage)
}
inline PROTOBUF_NDEBUG_INLINE SelfMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SelfMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, self_position_),
           0,
           offsetof(Impl_, self_stamina_) -
               offsetof(Impl_, self_position_) +
               sizeof(Impl_::self_stamina_));
}
SelfMessage::~SelfMessage() {
  // @@protoc_insertion_point(destructor:protos.SelfMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SelfMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.self_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SelfMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SelfMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SelfMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SelfMessage>(),
            ::google::protobuf::Message::GetNewImpl<SelfMessage>(),
            ::google::protobuf::Message::GetClearImpl<SelfMessage>(), &SelfMessage::ByteSizeLong,
                &SelfMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_._cached_size_),
            false,
        },
        &SelfMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SelfMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> SelfMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::SelfMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D self_position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_position_)}},
    // float self_body_direction = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_body_direction_)}},
    // float self_stamina = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_stamina_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D self_position = 1;
    {PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float self_body_direction = 2;
    {PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float self_stamina = 3;
    {PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_stamina_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SelfMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.SelfMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.self_position_ != nullptr);
    _impl_.self_position_->Clear();
  }
  ::memset(&_impl_.self_body_direction_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.self_stamina_) -
      reinterpret_cast<char*>(&_impl_.self_body_direction_)) + sizeof(_impl_.self_stamina_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SelfMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SelfMessage& this_ = static_cast<const SelfMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SelfMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SelfMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.SelfMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D self_position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.self_position_, this_._impl_.self_position_->GetCachedSize(), target,
                stream);
          }

          // float self_body_direction = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_self_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_self_body_direction(), target);
          }

          // float self_stamina = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_self_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_self_stamina(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.SelfMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SelfMessage::ByteSizeLong(const MessageLite& base) {
          const SelfMessage& this_ = static_cast<const SelfMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SelfMessage::ByteSizeLong() const {
          const SelfMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.SelfMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D self_position = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.self_position_);
            }
          }
           {
            // float self_body_direction = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_self_body_direction()) != 0) {
              total_size += 5;
            }
            // float self_stamina = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_self_stamina()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SelfMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SelfMessage*>(&to_msg);
  auto& from = static_cast<const SelfMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.SelfMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.self_position_ != nullptr);
    if (_this->_impl_.self_position_ == nullptr) {
      _this->_impl_.self_position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.self_position_);
    } else {
      _this->_impl_.self_position_->MergeFrom(*from._impl_.self_position_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_self_body_direction()) != 0) {
    _this->_impl_.self_body_direction_ = from._impl_.self_body_direction_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_self_stamina()) != 0) {
    _this->_impl_.self_stamina_ = from._impl_.self_stamina_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SelfMessage::CopyFrom(const SelfMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.SelfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SelfMessage::InternalSwap(SelfMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_stamina_)
      + sizeof(SelfMessage::_impl_.self_stamina_)
      - PROTOBUF_FIELD_OFFSET(SelfMessage, _impl_.self_position_)>(
          reinterpret_cast<char*>(&_impl_.self_position_),
          reinterpret_cast<char*>(&other->_impl_.self_position_));
}

::google::protobuf::Metadata SelfMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TeammateMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TeammateMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_._has_bits_);
};

TeammateMessage::TeammateMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.TeammateMessage)
}
inline PROTOBUF_NDEBUG_INLINE TeammateMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::TeammateMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TeammateMessage::TeammateMessage(
    ::google::protobuf::Arena* arena,
    const TeammateMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TeammateMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, uniform_number_),
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, uniform_number_) +
               sizeof(Impl_::body_direction_));

  // @@protoc_insertion_point(copy_constructor:protos.TeammateMessage)
}
inline PROTOBUF_NDEBUG_INLINE TeammateMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TeammateMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::body_direction_));
}
TeammateMessage::~TeammateMessage() {
  // @@protoc_insertion_point(destructor:protos.TeammateMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeammateMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TeammateMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TeammateMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TeammateMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TeammateMessage>(),
            ::google::protobuf::Message::GetNewImpl<TeammateMessage>(),
            ::google::protobuf::Message::GetClearImpl<TeammateMessage>(), &TeammateMessage::ByteSizeLong,
                &TeammateMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_._cached_size_),
            false,
        },
        &TeammateMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TeammateMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> TeammateMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::TeammateMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TeammateMessage, _impl_.uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.uniform_number_)}},
    // .protos.RpcVector2D position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.position_)}},
    // float body_direction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.body_direction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D position = 2;
    {PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float body_direction = 3;
    {PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TeammateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TeammateMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.body_direction_) -
      reinterpret_cast<char*>(&_impl_.uniform_number_)) + sizeof(_impl_.body_direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TeammateMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TeammateMessage& this_ = static_cast<const TeammateMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TeammateMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TeammateMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.TeammateMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 uniform_number = 1;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // float body_direction = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.TeammateMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TeammateMessage::ByteSizeLong(const MessageLite& base) {
          const TeammateMessage& this_ = static_cast<const TeammateMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TeammateMessage::ByteSizeLong() const {
          const TeammateMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.TeammateMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D position = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // int32 uniform_number = 1;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // float body_direction = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TeammateMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TeammateMessage*>(&to_msg);
  auto& from = static_cast<const TeammateMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.TeammateMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeammateMessage::CopyFrom(const TeammateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TeammateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TeammateMessage::InternalSwap(TeammateMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.body_direction_)
      + sizeof(TeammateMessage::_impl_.body_direction_)
      - PROTOBUF_FIELD_OFFSET(TeammateMessage, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata TeammateMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OpponentMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<OpponentMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_._has_bits_);
};

OpponentMessage::OpponentMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.OpponentMessage)
}
inline PROTOBUF_NDEBUG_INLINE OpponentMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::OpponentMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OpponentMessage::OpponentMessage(
    ::google::protobuf::Arena* arena,
    const OpponentMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OpponentMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, uniform_number_),
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, uniform_number_) +
               sizeof(Impl_::body_direction_));

  // @@protoc_insertion_point(copy_constructor:protos.OpponentMessage)
}
inline PROTOBUF_NDEBUG_INLINE OpponentMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OpponentMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::body_direction_));
}
OpponentMessage::~OpponentMessage() {
  // @@protoc_insertion_point(destructor:protos.OpponentMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OpponentMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    OpponentMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_OpponentMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &OpponentMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<OpponentMessage>(),
            ::google::protobuf::Message::GetNewImpl<OpponentMessage>(),
            ::google::protobuf::Message::GetClearImpl<OpponentMessage>(), &OpponentMessage::ByteSizeLong,
                &OpponentMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_._cached_size_),
            false,
        },
        &OpponentMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* OpponentMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> OpponentMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::OpponentMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OpponentMessage, _impl_.uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.uniform_number_)}},
    // .protos.RpcVector2D position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.position_)}},
    // float body_direction = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.body_direction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D position = 2;
    {PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float body_direction = 3;
    {PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OpponentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.OpponentMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.body_direction_) -
      reinterpret_cast<char*>(&_impl_.uniform_number_)) + sizeof(_impl_.body_direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OpponentMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OpponentMessage& this_ = static_cast<const OpponentMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OpponentMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OpponentMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.OpponentMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 uniform_number = 1;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // float body_direction = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.OpponentMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OpponentMessage::ByteSizeLong(const MessageLite& base) {
          const OpponentMessage& this_ = static_cast<const OpponentMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OpponentMessage::ByteSizeLong() const {
          const OpponentMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.OpponentMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D position = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // int32 uniform_number = 1;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // float body_direction = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OpponentMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OpponentMessage*>(&to_msg);
  auto& from = static_cast<const OpponentMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.OpponentMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OpponentMessage::CopyFrom(const OpponentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.OpponentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OpponentMessage::InternalSwap(OpponentMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.body_direction_)
      + sizeof(OpponentMessage::_impl_.body_direction_)
      - PROTOBUF_FIELD_OFFSET(OpponentMessage, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata OpponentMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BallPlayerMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BallPlayerMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_._has_bits_);
};

BallPlayerMessage::BallPlayerMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.BallPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::BallPlayerMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BallPlayerMessage::BallPlayerMessage(
    ::google::protobuf::Arena* arena,
    const BallPlayerMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BallPlayerMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ball_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_position_)
                        : nullptr;
  _impl_.ball_velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_velocity_)
                        : nullptr;
  _impl_.player_position_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.player_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uniform_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, uniform_number_),
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, uniform_number_) +
               sizeof(Impl_::body_direction_));

  // @@protoc_insertion_point(copy_constructor:protos.BallPlayerMessage)
}
inline PROTOBUF_NDEBUG_INLINE BallPlayerMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BallPlayerMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ball_position_),
           0,
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, ball_position_) +
               sizeof(Impl_::body_direction_));
}
BallPlayerMessage::~BallPlayerMessage() {
  // @@protoc_insertion_point(destructor:protos.BallPlayerMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BallPlayerMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ball_position_;
  delete _impl_.ball_velocity_;
  delete _impl_.player_position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BallPlayerMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BallPlayerMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BallPlayerMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BallPlayerMessage>(),
            ::google::protobuf::Message::GetNewImpl<BallPlayerMessage>(),
            ::google::protobuf::Message::GetClearImpl<BallPlayerMessage>(), &BallPlayerMessage::ByteSizeLong,
                &BallPlayerMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_._cached_size_),
            false,
        },
        &BallPlayerMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BallPlayerMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> BallPlayerMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BallPlayerMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D ball_position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.ball_position_)}},
    // .protos.RpcVector2D ball_velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.ball_velocity_)}},
    // int32 uniform_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallPlayerMessage, _impl_.uniform_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.uniform_number_)}},
    // .protos.RpcVector2D player_position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.player_position_)}},
    // float body_direction = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.body_direction_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D ball_position = 1;
    {PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.ball_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_velocity = 2;
    {PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.ball_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 uniform_number = 3;
    {PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D player_position = 4;
    {PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.player_position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float body_direction = 5;
    {PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BallPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BallPlayerMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ball_position_ != nullptr);
      _impl_.ball_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_velocity_ != nullptr);
      _impl_.ball_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.player_position_ != nullptr);
      _impl_.player_position_->Clear();
    }
  }
  ::memset(&_impl_.uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.body_direction_) -
      reinterpret_cast<char*>(&_impl_.uniform_number_)) + sizeof(_impl_.body_direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BallPlayerMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BallPlayerMessage& this_ = static_cast<const BallPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BallPlayerMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BallPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.BallPlayerMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D ball_position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.ball_position_, this_._impl_.ball_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.ball_velocity_, this_._impl_.ball_velocity_->GetCachedSize(), target,
                stream);
          }

          // int32 uniform_number = 3;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_uniform_number(), target);
          }

          // .protos.RpcVector2D player_position = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.player_position_, this_._impl_.player_position_->GetCachedSize(), target,
                stream);
          }

          // float body_direction = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.BallPlayerMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BallPlayerMessage::ByteSizeLong(const MessageLite& base) {
          const BallPlayerMessage& this_ = static_cast<const BallPlayerMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BallPlayerMessage::ByteSizeLong() const {
          const BallPlayerMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.BallPlayerMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RpcVector2D ball_position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_position_);
            }
            // .protos.RpcVector2D ball_velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_velocity_);
            }
            // .protos.RpcVector2D player_position = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.player_position_);
            }
          }
           {
            // int32 uniform_number = 3;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // float body_direction = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BallPlayerMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BallPlayerMessage*>(&to_msg);
  auto& from = static_cast<const BallPlayerMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.BallPlayerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ball_position_ != nullptr);
      if (_this->_impl_.ball_position_ == nullptr) {
        _this->_impl_.ball_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_position_);
      } else {
        _this->_impl_.ball_position_->MergeFrom(*from._impl_.ball_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_velocity_ != nullptr);
      if (_this->_impl_.ball_velocity_ == nullptr) {
        _this->_impl_.ball_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_velocity_);
      } else {
        _this->_impl_.ball_velocity_->MergeFrom(*from._impl_.ball_velocity_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.player_position_ != nullptr);
      if (_this->_impl_.player_position_ == nullptr) {
        _this->_impl_.player_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.player_position_);
      } else {
        _this->_impl_.player_position_->MergeFrom(*from._impl_.player_position_);
      }
    }
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BallPlayerMessage::CopyFrom(const BallPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BallPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BallPlayerMessage::InternalSwap(BallPlayerMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.body_direction_)
      + sizeof(BallPlayerMessage::_impl_.body_direction_)
      - PROTOBUF_FIELD_OFFSET(BallPlayerMessage, _impl_.ball_position_)>(
          reinterpret_cast<char*>(&_impl_.ball_position_),
          reinterpret_cast<char*>(&other->_impl_.ball_position_));
}

::google::protobuf::Metadata BallPlayerMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Say::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::protos::Say, _impl_._oneof_case_);
};

void Say::set_allocated_ball_message(::protos::BallMessage* ball_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (ball_message) {
    ::google::protobuf::Arena* submessage_arena = ball_message->GetArena();
    if (message_arena != submessage_arena) {
      ball_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, ball_message, submessage_arena);
    }
    set_has_ball_message();
    _impl_.message_.ball_message_ = ball_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.ball_message)
}
void Say::set_allocated_pass_message(::protos::PassMessage* pass_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (pass_message) {
    ::google::protobuf::Arena* submessage_arena = pass_message->GetArena();
    if (message_arena != submessage_arena) {
      pass_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, pass_message, submessage_arena);
    }
    set_has_pass_message();
    _impl_.message_.pass_message_ = pass_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.pass_message)
}
void Say::set_allocated_intercept_message(::protos::InterceptMessage* intercept_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (intercept_message) {
    ::google::protobuf::Arena* submessage_arena = intercept_message->GetArena();
    if (message_arena != submessage_arena) {
      intercept_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, intercept_message, submessage_arena);
    }
    set_has_intercept_message();
    _impl_.message_.intercept_message_ = intercept_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.intercept_message)
}
void Say::set_allocated_goalie_message(::protos::GoalieMessage* goalie_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (goalie_message) {
    ::google::protobuf::Arena* submessage_arena = goalie_message->GetArena();
    if (message_arena != submessage_arena) {
      goalie_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, goalie_message, submessage_arena);
    }
    set_has_goalie_message();
    _impl_.message_.goalie_message_ = goalie_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.goalie_message)
}
void Say::set_allocated_goalie_and_player_message(::protos::GoalieAndPlayerMessage* goalie_and_player_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (goalie_and_player_message) {
    ::google::protobuf::Arena* submessage_arena = goalie_and_player_message->GetArena();
    if (message_arena != submessage_arena) {
      goalie_and_player_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, goalie_and_player_message, submessage_arena);
    }
    set_has_goalie_and_player_message();
    _impl_.message_.goalie_and_player_message_ = goalie_and_player_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.goalie_and_player_message)
}
void Say::set_allocated_offside_line_message(::protos::OffsideLineMessage* offside_line_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (offside_line_message) {
    ::google::protobuf::Arena* submessage_arena = offside_line_message->GetArena();
    if (message_arena != submessage_arena) {
      offside_line_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, offside_line_message, submessage_arena);
    }
    set_has_offside_line_message();
    _impl_.message_.offside_line_message_ = offside_line_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.offside_line_message)
}
void Say::set_allocated_defense_line_message(::protos::DefenseLineMessage* defense_line_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (defense_line_message) {
    ::google::protobuf::Arena* submessage_arena = defense_line_message->GetArena();
    if (message_arena != submessage_arena) {
      defense_line_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, defense_line_message, submessage_arena);
    }
    set_has_defense_line_message();
    _impl_.message_.defense_line_message_ = defense_line_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.defense_line_message)
}
void Say::set_allocated_wait_request_message(::protos::WaitRequestMessage* wait_request_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (wait_request_message) {
    ::google::protobuf::Arena* submessage_arena = wait_request_message->GetArena();
    if (message_arena != submessage_arena) {
      wait_request_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, wait_request_message, submessage_arena);
    }
    set_has_wait_request_message();
    _impl_.message_.wait_request_message_ = wait_request_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.wait_request_message)
}
void Say::set_allocated_setplay_message(::protos::SetplayMessage* setplay_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (setplay_message) {
    ::google::protobuf::Arena* submessage_arena = setplay_message->GetArena();
    if (message_arena != submessage_arena) {
      setplay_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, setplay_message, submessage_arena);
    }
    set_has_setplay_message();
    _impl_.message_.setplay_message_ = setplay_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.setplay_message)
}
void Say::set_allocated_pass_request_message(::protos::PassRequestMessage* pass_request_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (pass_request_message) {
    ::google::protobuf::Arena* submessage_arena = pass_request_message->GetArena();
    if (message_arena != submessage_arena) {
      pass_request_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, pass_request_message, submessage_arena);
    }
    set_has_pass_request_message();
    _impl_.message_.pass_request_message_ = pass_request_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.pass_request_message)
}
void Say::set_allocated_stamina_message(::protos::StaminaMessage* stamina_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (stamina_message) {
    ::google::protobuf::Arena* submessage_arena = stamina_message->GetArena();
    if (message_arena != submessage_arena) {
      stamina_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, stamina_message, submessage_arena);
    }
    set_has_stamina_message();
    _impl_.message_.stamina_message_ = stamina_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.stamina_message)
}
void Say::set_allocated_recovery_message(::protos::RecoveryMessage* recovery_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (recovery_message) {
    ::google::protobuf::Arena* submessage_arena = recovery_message->GetArena();
    if (message_arena != submessage_arena) {
      recovery_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, recovery_message, submessage_arena);
    }
    set_has_recovery_message();
    _impl_.message_.recovery_message_ = recovery_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.recovery_message)
}
void Say::set_allocated_stamina_capacity_message(::protos::StaminaCapacityMessage* stamina_capacity_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (stamina_capacity_message) {
    ::google::protobuf::Arena* submessage_arena = stamina_capacity_message->GetArena();
    if (message_arena != submessage_arena) {
      stamina_capacity_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, stamina_capacity_message, submessage_arena);
    }
    set_has_stamina_capacity_message();
    _impl_.message_.stamina_capacity_message_ = stamina_capacity_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.stamina_capacity_message)
}
void Say::set_allocated_dribble_message(::protos::DribbleMessage* dribble_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (dribble_message) {
    ::google::protobuf::Arena* submessage_arena = dribble_message->GetArena();
    if (message_arena != submessage_arena) {
      dribble_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, dribble_message, submessage_arena);
    }
    set_has_dribble_message();
    _impl_.message_.dribble_message_ = dribble_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.dribble_message)
}
void Say::set_allocated_ball_goalie_message(::protos::BallGoalieMessage* ball_goalie_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (ball_goalie_message) {
    ::google::protobuf::Arena* submessage_arena = ball_goalie_message->GetArena();
    if (message_arena != submessage_arena) {
      ball_goalie_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, ball_goalie_message, submessage_arena);
    }
    set_has_ball_goalie_message();
    _impl_.message_.ball_goalie_message_ = ball_goalie_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.ball_goalie_message)
}
void Say::set_allocated_one_player_message(::protos::OnePlayerMessage* one_player_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (one_player_message) {
    ::google::protobuf::Arena* submessage_arena = one_player_message->GetArena();
    if (message_arena != submessage_arena) {
      one_player_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, one_player_message, submessage_arena);
    }
    set_has_one_player_message();
    _impl_.message_.one_player_message_ = one_player_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.one_player_message)
}
void Say::set_allocated_two_player_message(::protos::TwoPlayerMessage* two_player_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (two_player_message) {
    ::google::protobuf::Arena* submessage_arena = two_player_message->GetArena();
    if (message_arena != submessage_arena) {
      two_player_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, two_player_message, submessage_arena);
    }
    set_has_two_player_message();
    _impl_.message_.two_player_message_ = two_player_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.two_player_message)
}
void Say::set_allocated_three_player_message(::protos::ThreePlayerMessage* three_player_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (three_player_message) {
    ::google::protobuf::Arena* submessage_arena = three_player_message->GetArena();
    if (message_arena != submessage_arena) {
      three_player_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, three_player_message, submessage_arena);
    }
    set_has_three_player_message();
    _impl_.message_.three_player_message_ = three_player_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.three_player_message)
}
void Say::set_allocated_self_message(::protos::SelfMessage* self_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (self_message) {
    ::google::protobuf::Arena* submessage_arena = self_message->GetArena();
    if (message_arena != submessage_arena) {
      self_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, self_message, submessage_arena);
    }
    set_has_self_message();
    _impl_.message_.self_message_ = self_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.self_message)
}
void Say::set_allocated_teammate_message(::protos::TeammateMessage* teammate_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (teammate_message) {
    ::google::protobuf::Arena* submessage_arena = teammate_message->GetArena();
    if (message_arena != submessage_arena) {
      teammate_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, teammate_message, submessage_arena);
    }
    set_has_teammate_message();
    _impl_.message_.teammate_message_ = teammate_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.teammate_message)
}
void Say::set_allocated_opponent_message(::protos::OpponentMessage* opponent_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (opponent_message) {
    ::google::protobuf::Arena* submessage_arena = opponent_message->GetArena();
    if (message_arena != submessage_arena) {
      opponent_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, opponent_message, submessage_arena);
    }
    set_has_opponent_message();
    _impl_.message_.opponent_message_ = opponent_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.opponent_message)
}
void Say::set_allocated_ball_player_message(::protos::BallPlayerMessage* ball_player_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (ball_player_message) {
    ::google::protobuf::Arena* submessage_arena = ball_player_message->GetArena();
    if (message_arena != submessage_arena) {
      ball_player_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, ball_player_message, submessage_arena);
    }
    set_has_ball_player_message();
    _impl_.message_.ball_player_message_ = ball_player_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Say.ball_player_message)
}
Say::Say(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Say)
}
inline PROTOBUF_NDEBUG_INLINE Say::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Say& from_msg)
      : message_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Say::Say(
    ::google::protobuf::Arena* arena,
    const Say& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Say* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (message_case()) {
    case MESSAGE_NOT_SET:
      break;
      case kBallMessage:
        _impl_.message_.ball_message_ = ::google::protobuf::Message::CopyConstruct<::protos::BallMessage>(arena, *from._impl_.message_.ball_message_);
        break;
      case kPassMessage:
        _impl_.message_.pass_message_ = ::google::protobuf::Message::CopyConstruct<::protos::PassMessage>(arena, *from._impl_.message_.pass_message_);
        break;
      case kInterceptMessage:
        _impl_.message_.intercept_message_ = ::google::protobuf::Message::CopyConstruct<::protos::InterceptMessage>(arena, *from._impl_.message_.intercept_message_);
        break;
      case kGoalieMessage:
        _impl_.message_.goalie_message_ = ::google::protobuf::Message::CopyConstruct<::protos::GoalieMessage>(arena, *from._impl_.message_.goalie_message_);
        break;
      case kGoalieAndPlayerMessage:
        _impl_.message_.goalie_and_player_message_ = ::google::protobuf::Message::CopyConstruct<::protos::GoalieAndPlayerMessage>(arena, *from._impl_.message_.goalie_and_player_message_);
        break;
      case kOffsideLineMessage:
        _impl_.message_.offside_line_message_ = ::google::protobuf::Message::CopyConstruct<::protos::OffsideLineMessage>(arena, *from._impl_.message_.offside_line_message_);
        break;
      case kDefenseLineMessage:
        _impl_.message_.defense_line_message_ = ::google::protobuf::Message::CopyConstruct<::protos::DefenseLineMessage>(arena, *from._impl_.message_.defense_line_message_);
        break;
      case kWaitRequestMessage:
        _impl_.message_.wait_request_message_ = ::google::protobuf::Message::CopyConstruct<::protos::WaitRequestMessage>(arena, *from._impl_.message_.wait_request_message_);
        break;
      case kSetplayMessage:
        _impl_.message_.setplay_message_ = ::google::protobuf::Message::CopyConstruct<::protos::SetplayMessage>(arena, *from._impl_.message_.setplay_message_);
        break;
      case kPassRequestMessage:
        _impl_.message_.pass_request_message_ = ::google::protobuf::Message::CopyConstruct<::protos::PassRequestMessage>(arena, *from._impl_.message_.pass_request_message_);
        break;
      case kStaminaMessage:
        _impl_.message_.stamina_message_ = ::google::protobuf::Message::CopyConstruct<::protos::StaminaMessage>(arena, *from._impl_.message_.stamina_message_);
        break;
      case kRecoveryMessage:
        _impl_.message_.recovery_message_ = ::google::protobuf::Message::CopyConstruct<::protos::RecoveryMessage>(arena, *from._impl_.message_.recovery_message_);
        break;
      case kStaminaCapacityMessage:
        _impl_.message_.stamina_capacity_message_ = ::google::protobuf::Message::CopyConstruct<::protos::StaminaCapacityMessage>(arena, *from._impl_.message_.stamina_capacity_message_);
        break;
      case kDribbleMessage:
        _impl_.message_.dribble_message_ = ::google::protobuf::Message::CopyConstruct<::protos::DribbleMessage>(arena, *from._impl_.message_.dribble_message_);
        break;
      case kBallGoalieMessage:
        _impl_.message_.ball_goalie_message_ = ::google::protobuf::Message::CopyConstruct<::protos::BallGoalieMessage>(arena, *from._impl_.message_.ball_goalie_message_);
        break;
      case kOnePlayerMessage:
        _impl_.message_.one_player_message_ = ::google::protobuf::Message::CopyConstruct<::protos::OnePlayerMessage>(arena, *from._impl_.message_.one_player_message_);
        break;
      case kTwoPlayerMessage:
        _impl_.message_.two_player_message_ = ::google::protobuf::Message::CopyConstruct<::protos::TwoPlayerMessage>(arena, *from._impl_.message_.two_player_message_);
        break;
      case kThreePlayerMessage:
        _impl_.message_.three_player_message_ = ::google::protobuf::Message::CopyConstruct<::protos::ThreePlayerMessage>(arena, *from._impl_.message_.three_player_message_);
        break;
      case kSelfMessage:
        _impl_.message_.self_message_ = ::google::protobuf::Message::CopyConstruct<::protos::SelfMessage>(arena, *from._impl_.message_.self_message_);
        break;
      case kTeammateMessage:
        _impl_.message_.teammate_message_ = ::google::protobuf::Message::CopyConstruct<::protos::TeammateMessage>(arena, *from._impl_.message_.teammate_message_);
        break;
      case kOpponentMessage:
        _impl_.message_.opponent_message_ = ::google::protobuf::Message::CopyConstruct<::protos::OpponentMessage>(arena, *from._impl_.message_.opponent_message_);
        break;
      case kBallPlayerMessage:
        _impl_.message_.ball_player_message_ = ::google::protobuf::Message::CopyConstruct<::protos::BallPlayerMessage>(arena, *from._impl_.message_.ball_player_message_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protos.Say)
}
inline PROTOBUF_NDEBUG_INLINE Say::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Say::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Say::~Say() {
  // @@protoc_insertion_point(destructor:protos.Say)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Say::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
  _impl_.~Impl_();
}

void Say::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:protos.Say)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (message_case()) {
    case kBallMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.ball_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.ball_message_);
      }
      break;
    }
    case kPassMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.pass_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.pass_message_);
      }
      break;
    }
    case kInterceptMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.intercept_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.intercept_message_);
      }
      break;
    }
    case kGoalieMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.goalie_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.goalie_message_);
      }
      break;
    }
    case kGoalieAndPlayerMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.goalie_and_player_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.goalie_and_player_message_);
      }
      break;
    }
    case kOffsideLineMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.offside_line_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.offside_line_message_);
      }
      break;
    }
    case kDefenseLineMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.defense_line_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.defense_line_message_);
      }
      break;
    }
    case kWaitRequestMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.wait_request_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.wait_request_message_);
      }
      break;
    }
    case kSetplayMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.setplay_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.setplay_message_);
      }
      break;
    }
    case kPassRequestMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.pass_request_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.pass_request_message_);
      }
      break;
    }
    case kStaminaMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.stamina_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.stamina_message_);
      }
      break;
    }
    case kRecoveryMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.recovery_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.recovery_message_);
      }
      break;
    }
    case kStaminaCapacityMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.stamina_capacity_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.stamina_capacity_message_);
      }
      break;
    }
    case kDribbleMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.dribble_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.dribble_message_);
      }
      break;
    }
    case kBallGoalieMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.ball_goalie_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.ball_goalie_message_);
      }
      break;
    }
    case kOnePlayerMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.one_player_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.one_player_message_);
      }
      break;
    }
    case kTwoPlayerMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.two_player_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.two_player_message_);
      }
      break;
    }
    case kThreePlayerMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.three_player_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.three_player_message_);
      }
      break;
    }
    case kSelfMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.self_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.self_message_);
      }
      break;
    }
    case kTeammateMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.teammate_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.teammate_message_);
      }
      break;
    }
    case kOpponentMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.opponent_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.opponent_message_);
      }
      break;
    }
    case kBallPlayerMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.ball_player_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.ball_player_message_);
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Say::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Say_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Say::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Say>(),
            ::google::protobuf::Message::GetNewImpl<Say>(),
            ::google::protobuf::Message::GetClearImpl<Say>(), &Say::ByteSizeLong,
                &Say::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Say, _impl_._cached_size_),
            false,
        },
        &Say::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Say::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 22, 22, 0, 2> Say::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    22, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    22,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Say>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.BallMessage ball_message = 1;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.ball_message_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.PassMessage pass_message = 2;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.pass_message_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.InterceptMessage intercept_message = 3;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.intercept_message_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.GoalieMessage goalie_message = 4;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.goalie_message_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.GoalieAndPlayerMessage goalie_and_player_message = 5;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.goalie_and_player_message_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.OffsideLineMessage offside_line_message = 6;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.offside_line_message_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DefenseLineMessage defense_line_message = 7;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.defense_line_message_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.WaitRequestMessage wait_request_message = 8;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.wait_request_message_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.SetplayMessage setplay_message = 9;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.setplay_message_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.PassRequestMessage pass_request_message = 10;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.pass_request_message_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.StaminaMessage stamina_message = 11;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.stamina_message_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RecoveryMessage recovery_message = 12;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.recovery_message_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.StaminaCapacityMessage stamina_capacity_message = 13;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.stamina_capacity_message_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DribbleMessage dribble_message = 14;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.dribble_message_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.BallGoalieMessage ball_goalie_message = 15;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.ball_goalie_message_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.OnePlayerMessage one_player_message = 16;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.one_player_message_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.TwoPlayerMessage two_player_message = 17;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.two_player_message_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.ThreePlayerMessage three_player_message = 18;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.three_player_message_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.SelfMessage self_message = 19;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.self_message_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.TeammateMessage teammate_message = 20;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.teammate_message_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.OpponentMessage opponent_message = 21;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.opponent_message_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.BallPlayerMessage ball_player_message = 22;
    {PROTOBUF_FIELD_OFFSET(Say, _impl_.message_.ball_player_message_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::BallMessage>()},
    {::_pbi::TcParser::GetTable<::protos::PassMessage>()},
    {::_pbi::TcParser::GetTable<::protos::InterceptMessage>()},
    {::_pbi::TcParser::GetTable<::protos::GoalieMessage>()},
    {::_pbi::TcParser::GetTable<::protos::GoalieAndPlayerMessage>()},
    {::_pbi::TcParser::GetTable<::protos::OffsideLineMessage>()},
    {::_pbi::TcParser::GetTable<::protos::DefenseLineMessage>()},
    {::_pbi::TcParser::GetTable<::protos::WaitRequestMessage>()},
    {::_pbi::TcParser::GetTable<::protos::SetplayMessage>()},
    {::_pbi::TcParser::GetTable<::protos::PassRequestMessage>()},
    {::_pbi::TcParser::GetTable<::protos::StaminaMessage>()},
    {::_pbi::TcParser::GetTable<::protos::RecoveryMessage>()},
    {::_pbi::TcParser::GetTable<::protos::StaminaCapacityMessage>()},
    {::_pbi::TcParser::GetTable<::protos::DribbleMessage>()},
    {::_pbi::TcParser::GetTable<::protos::BallGoalieMessage>()},
    {::_pbi::TcParser::GetTable<::protos::OnePlayerMessage>()},
    {::_pbi::TcParser::GetTable<::protos::TwoPlayerMessage>()},
    {::_pbi::TcParser::GetTable<::protos::ThreePlayerMessage>()},
    {::_pbi::TcParser::GetTable<::protos::SelfMessage>()},
    {::_pbi::TcParser::GetTable<::protos::TeammateMessage>()},
    {::_pbi::TcParser::GetTable<::protos::OpponentMessage>()},
    {::_pbi::TcParser::GetTable<::protos::BallPlayerMessage>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Say::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Say)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Say::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Say& this_ = static_cast<const Say&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Say::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Say& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Say)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.message_case()) {
            case kBallMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.message_.ball_message_, this_._impl_.message_.ball_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPassMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.message_.pass_message_, this_._impl_.message_.pass_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kInterceptMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.message_.intercept_message_, this_._impl_.message_.intercept_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kGoalieMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.message_.goalie_message_, this_._impl_.message_.goalie_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kGoalieAndPlayerMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.message_.goalie_and_player_message_, this_._impl_.message_.goalie_and_player_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOffsideLineMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.message_.offside_line_message_, this_._impl_.message_.offside_line_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDefenseLineMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.message_.defense_line_message_, this_._impl_.message_.defense_line_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kWaitRequestMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.message_.wait_request_message_, this_._impl_.message_.wait_request_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSetplayMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.message_.setplay_message_, this_._impl_.message_.setplay_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPassRequestMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.message_.pass_request_message_, this_._impl_.message_.pass_request_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kStaminaMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.message_.stamina_message_, this_._impl_.message_.stamina_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRecoveryMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.message_.recovery_message_, this_._impl_.message_.recovery_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kStaminaCapacityMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.message_.stamina_capacity_message_, this_._impl_.message_.stamina_capacity_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDribbleMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.message_.dribble_message_, this_._impl_.message_.dribble_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBallGoalieMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.message_.ball_goalie_message_, this_._impl_.message_.ball_goalie_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOnePlayerMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.message_.one_player_message_, this_._impl_.message_.one_player_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTwoPlayerMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.message_.two_player_message_, this_._impl_.message_.two_player_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kThreePlayerMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.message_.three_player_message_, this_._impl_.message_.three_player_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSelfMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.message_.self_message_, this_._impl_.message_.self_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTeammateMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.message_.teammate_message_, this_._impl_.message_.teammate_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOpponentMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.message_.opponent_message_, this_._impl_.message_.opponent_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBallPlayerMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.message_.ball_player_message_, this_._impl_.message_.ball_player_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Say)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Say::ByteSizeLong(const MessageLite& base) {
          const Say& this_ = static_cast<const Say&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Say::ByteSizeLong() const {
          const Say& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Say)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.message_case()) {
            // .protos.BallMessage ball_message = 1;
            case kBallMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.ball_message_);
              break;
            }
            // .protos.PassMessage pass_message = 2;
            case kPassMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.pass_message_);
              break;
            }
            // .protos.InterceptMessage intercept_message = 3;
            case kInterceptMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.intercept_message_);
              break;
            }
            // .protos.GoalieMessage goalie_message = 4;
            case kGoalieMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.goalie_message_);
              break;
            }
            // .protos.GoalieAndPlayerMessage goalie_and_player_message = 5;
            case kGoalieAndPlayerMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.goalie_and_player_message_);
              break;
            }
            // .protos.OffsideLineMessage offside_line_message = 6;
            case kOffsideLineMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.offside_line_message_);
              break;
            }
            // .protos.DefenseLineMessage defense_line_message = 7;
            case kDefenseLineMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.defense_line_message_);
              break;
            }
            // .protos.WaitRequestMessage wait_request_message = 8;
            case kWaitRequestMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.wait_request_message_);
              break;
            }
            // .protos.SetplayMessage setplay_message = 9;
            case kSetplayMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.setplay_message_);
              break;
            }
            // .protos.PassRequestMessage pass_request_message = 10;
            case kPassRequestMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.pass_request_message_);
              break;
            }
            // .protos.StaminaMessage stamina_message = 11;
            case kStaminaMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.stamina_message_);
              break;
            }
            // .protos.RecoveryMessage recovery_message = 12;
            case kRecoveryMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.recovery_message_);
              break;
            }
            // .protos.StaminaCapacityMessage stamina_capacity_message = 13;
            case kStaminaCapacityMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.stamina_capacity_message_);
              break;
            }
            // .protos.DribbleMessage dribble_message = 14;
            case kDribbleMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.dribble_message_);
              break;
            }
            // .protos.BallGoalieMessage ball_goalie_message = 15;
            case kBallGoalieMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.ball_goalie_message_);
              break;
            }
            // .protos.OnePlayerMessage one_player_message = 16;
            case kOnePlayerMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.one_player_message_);
              break;
            }
            // .protos.TwoPlayerMessage two_player_message = 17;
            case kTwoPlayerMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.two_player_message_);
              break;
            }
            // .protos.ThreePlayerMessage three_player_message = 18;
            case kThreePlayerMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.three_player_message_);
              break;
            }
            // .protos.SelfMessage self_message = 19;
            case kSelfMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.self_message_);
              break;
            }
            // .protos.TeammateMessage teammate_message = 20;
            case kTeammateMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.teammate_message_);
              break;
            }
            // .protos.OpponentMessage opponent_message = 21;
            case kOpponentMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.opponent_message_);
              break;
            }
            // .protos.BallPlayerMessage ball_player_message = 22;
            case kBallPlayerMessage: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.ball_player_message_);
              break;
            }
            case MESSAGE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Say::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Say*>(&to_msg);
  auto& from = static_cast<const Say&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Say)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_message();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kBallMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.ball_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::BallMessage>(arena, *from._impl_.message_.ball_message_);
        } else {
          _this->_impl_.message_.ball_message_->MergeFrom(from._internal_ball_message());
        }
        break;
      }
      case kPassMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.pass_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::PassMessage>(arena, *from._impl_.message_.pass_message_);
        } else {
          _this->_impl_.message_.pass_message_->MergeFrom(from._internal_pass_message());
        }
        break;
      }
      case kInterceptMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.intercept_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::InterceptMessage>(arena, *from._impl_.message_.intercept_message_);
        } else {
          _this->_impl_.message_.intercept_message_->MergeFrom(from._internal_intercept_message());
        }
        break;
      }
      case kGoalieMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.goalie_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::GoalieMessage>(arena, *from._impl_.message_.goalie_message_);
        } else {
          _this->_impl_.message_.goalie_message_->MergeFrom(from._internal_goalie_message());
        }
        break;
      }
      case kGoalieAndPlayerMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.goalie_and_player_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::GoalieAndPlayerMessage>(arena, *from._impl_.message_.goalie_and_player_message_);
        } else {
          _this->_impl_.message_.goalie_and_player_message_->MergeFrom(from._internal_goalie_and_player_message());
        }
        break;
      }
      case kOffsideLineMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.offside_line_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::OffsideLineMessage>(arena, *from._impl_.message_.offside_line_message_);
        } else {
          _this->_impl_.message_.offside_line_message_->MergeFrom(from._internal_offside_line_message());
        }
        break;
      }
      case kDefenseLineMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.defense_line_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DefenseLineMessage>(arena, *from._impl_.message_.defense_line_message_);
        } else {
          _this->_impl_.message_.defense_line_message_->MergeFrom(from._internal_defense_line_message());
        }
        break;
      }
      case kWaitRequestMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.wait_request_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::WaitRequestMessage>(arena, *from._impl_.message_.wait_request_message_);
        } else {
          _this->_impl_.message_.wait_request_message_->MergeFrom(from._internal_wait_request_message());
        }
        break;
      }
      case kSetplayMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.setplay_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::SetplayMessage>(arena, *from._impl_.message_.setplay_message_);
        } else {
          _this->_impl_.message_.setplay_message_->MergeFrom(from._internal_setplay_message());
        }
        break;
      }
      case kPassRequestMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.pass_request_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::PassRequestMessage>(arena, *from._impl_.message_.pass_request_message_);
        } else {
          _this->_impl_.message_.pass_request_message_->MergeFrom(from._internal_pass_request_message());
        }
        break;
      }
      case kStaminaMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.stamina_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::StaminaMessage>(arena, *from._impl_.message_.stamina_message_);
        } else {
          _this->_impl_.message_.stamina_message_->MergeFrom(from._internal_stamina_message());
        }
        break;
      }
      case kRecoveryMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.recovery_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::RecoveryMessage>(arena, *from._impl_.message_.recovery_message_);
        } else {
          _this->_impl_.message_.recovery_message_->MergeFrom(from._internal_recovery_message());
        }
        break;
      }
      case kStaminaCapacityMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.stamina_capacity_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::StaminaCapacityMessage>(arena, *from._impl_.message_.stamina_capacity_message_);
        } else {
          _this->_impl_.message_.stamina_capacity_message_->MergeFrom(from._internal_stamina_capacity_message());
        }
        break;
      }
      case kDribbleMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.dribble_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DribbleMessage>(arena, *from._impl_.message_.dribble_message_);
        } else {
          _this->_impl_.message_.dribble_message_->MergeFrom(from._internal_dribble_message());
        }
        break;
      }
      case kBallGoalieMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.ball_goalie_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::BallGoalieMessage>(arena, *from._impl_.message_.ball_goalie_message_);
        } else {
          _this->_impl_.message_.ball_goalie_message_->MergeFrom(from._internal_ball_goalie_message());
        }
        break;
      }
      case kOnePlayerMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.one_player_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::OnePlayerMessage>(arena, *from._impl_.message_.one_player_message_);
        } else {
          _this->_impl_.message_.one_player_message_->MergeFrom(from._internal_one_player_message());
        }
        break;
      }
      case kTwoPlayerMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.two_player_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::TwoPlayerMessage>(arena, *from._impl_.message_.two_player_message_);
        } else {
          _this->_impl_.message_.two_player_message_->MergeFrom(from._internal_two_player_message());
        }
        break;
      }
      case kThreePlayerMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.three_player_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::ThreePlayerMessage>(arena, *from._impl_.message_.three_player_message_);
        } else {
          _this->_impl_.message_.three_player_message_->MergeFrom(from._internal_three_player_message());
        }
        break;
      }
      case kSelfMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.self_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::SelfMessage>(arena, *from._impl_.message_.self_message_);
        } else {
          _this->_impl_.message_.self_message_->MergeFrom(from._internal_self_message());
        }
        break;
      }
      case kTeammateMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.teammate_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::TeammateMessage>(arena, *from._impl_.message_.teammate_message_);
        } else {
          _this->_impl_.message_.teammate_message_->MergeFrom(from._internal_teammate_message());
        }
        break;
      }
      case kOpponentMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.opponent_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::OpponentMessage>(arena, *from._impl_.message_.opponent_message_);
        } else {
          _this->_impl_.message_.opponent_message_->MergeFrom(from._internal_opponent_message());
        }
        break;
      }
      case kBallPlayerMessage: {
        if (oneof_needs_init) {
          _this->_impl_.message_.ball_player_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::BallPlayerMessage>(arena, *from._impl_.message_.ball_player_message_);
        } else {
          _this->_impl_.message_.ball_player_message_->MergeFrom(from._internal_ball_player_message());
        }
        break;
      }
      case MESSAGE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Say::CopyFrom(const Say& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Say)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Say::InternalSwap(Say* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Say::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointTo::_Internal {
 public:
};

PointTo::PointTo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PointTo)
}
PointTo::PointTo(
    ::google::protobuf::Arena* arena, const PointTo& from)
    : PointTo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PointTo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PointTo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
PointTo::~PointTo() {
  // @@protoc_insertion_point(destructor:protos.PointTo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PointTo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PointTo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PointTo_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PointTo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PointTo>(),
            ::google::protobuf::Message::GetNewImpl<PointTo>(),
            ::google::protobuf::Message::GetClearImpl<PointTo>(), &PointTo::ByteSizeLong,
                &PointTo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PointTo, _impl_._cached_size_),
            false,
        },
        &PointTo::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PointTo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PointTo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PointTo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PointTo, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PointTo, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(PointTo, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(PointTo, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PointTo::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PointTo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PointTo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PointTo& this_ = static_cast<const PointTo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PointTo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PointTo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PointTo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PointTo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PointTo::ByteSizeLong(const MessageLite& base) {
          const PointTo& this_ = static_cast<const PointTo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PointTo::ByteSizeLong() const {
          const PointTo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PointTo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PointTo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PointTo*>(&to_msg);
  auto& from = static_cast<const PointTo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PointTo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointTo::CopyFrom(const PointTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PointTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PointTo::InternalSwap(PointTo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointTo, _impl_.y_)
      + sizeof(PointTo::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PointTo, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata PointTo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointToOf::_Internal {
 public:
};

PointToOf::PointToOf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.PointToOf)
}
PointToOf::PointToOf(
    ::google::protobuf::Arena* arena,
    const PointToOf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PointToOf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.PointToOf)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PointToOf::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_PointToOf_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PointToOf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<PointToOf>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<PointToOf>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<PointToOf>(), &PointToOf::ByteSizeLong,
                &PointToOf::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PointToOf, _impl_._cached_size_),
            false,
        },
        &PointToOf::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PointToOf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> PointToOf::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PointToOf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata PointToOf::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttentionTo::_Internal {
 public:
};

AttentionTo::AttentionTo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AttentionTo)
}
AttentionTo::AttentionTo(
    ::google::protobuf::Arena* arena, const AttentionTo& from)
    : AttentionTo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AttentionTo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AttentionTo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           0,
           offsetof(Impl_, unum_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::unum_));
}
AttentionTo::~AttentionTo() {
  // @@protoc_insertion_point(destructor:protos.AttentionTo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AttentionTo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AttentionTo::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AttentionTo_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AttentionTo::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AttentionTo>(),
            ::google::protobuf::Message::GetNewImpl<AttentionTo>(),
            ::google::protobuf::Message::GetClearImpl<AttentionTo>(), &AttentionTo::ByteSizeLong,
                &AttentionTo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_._cached_size_),
            false,
        },
        &AttentionTo::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AttentionTo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AttentionTo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AttentionTo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 unum = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttentionTo, _impl_.unum_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.unum_)}},
    // .protos.Side side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AttentionTo, _impl_.side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.side_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.Side side = 1;
    {PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 unum = 2;
    {PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.unum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AttentionTo::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AttentionTo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unum_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.unum_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AttentionTo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AttentionTo& this_ = static_cast<const AttentionTo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AttentionTo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AttentionTo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AttentionTo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.Side side = 1;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_side(), target);
          }

          // int32 unum = 2;
          if (this_._internal_unum() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_unum(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AttentionTo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AttentionTo::ByteSizeLong(const MessageLite& base) {
          const AttentionTo& this_ = static_cast<const AttentionTo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AttentionTo::ByteSizeLong() const {
          const AttentionTo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AttentionTo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.Side side = 1;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // int32 unum = 2;
            if (this_._internal_unum() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_unum());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AttentionTo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AttentionTo*>(&to_msg);
  auto& from = static_cast<const AttentionTo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AttentionTo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_unum() != 0) {
    _this->_impl_.unum_ = from._impl_.unum_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AttentionTo::CopyFrom(const AttentionTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AttentionTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AttentionTo::InternalSwap(AttentionTo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.unum_)
      + sizeof(AttentionTo::_impl_.unum_)
      - PROTOBUF_FIELD_OFFSET(AttentionTo, _impl_.side_)>(
          reinterpret_cast<char*>(&_impl_.side_),
          reinterpret_cast<char*>(&other->_impl_.side_));
}

::google::protobuf::Metadata AttentionTo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AttentionToOf::_Internal {
 public:
};

AttentionToOf::AttentionToOf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.AttentionToOf)
}
AttentionToOf::AttentionToOf(
    ::google::protobuf::Arena* arena,
    const AttentionToOf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AttentionToOf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.AttentionToOf)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AttentionToOf::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AttentionToOf_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AttentionToOf::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AttentionToOf>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AttentionToOf>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AttentionToOf>(), &AttentionToOf::ByteSizeLong,
                &AttentionToOf::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AttentionToOf, _impl_._cached_size_),
            false,
        },
        &AttentionToOf::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AttentionToOf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AttentionToOf::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AttentionToOf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AttentionToOf::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddText::_Internal {
 public:
};

AddText::AddText(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddText)
}
inline PROTOBUF_NDEBUG_INLINE AddText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddText& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

AddText::AddText(
    ::google::protobuf::Arena* arena,
    const AddText& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddText* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:protos.AddText)
}
inline PROTOBUF_NDEBUG_INLINE AddText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void AddText::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.level_ = {};
}
AddText::~AddText() {
  // @@protoc_insertion_point(destructor:protos.AddText)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddText::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddText::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddText_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddText::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddText>(),
            ::google::protobuf::Message::GetNewImpl<AddText>(),
            ::google::protobuf::Message::GetClearImpl<AddText>(), &AddText::ByteSizeLong,
                &AddText::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddText, _impl_._cached_size_),
            false,
        },
        &AddText::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddText::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 30, 2> AddText::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddText>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AddText, _impl_.message_)}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddText, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddText, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddText, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(AddText, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\7\0\0\0\0\0"
    "protos.AddText"
    "message"
  }},
};

PROTOBUF_NOINLINE void AddText::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddText)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddText::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddText& this_ = static_cast<const AddText&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddText::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddText& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddText)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddText.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddText)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddText::ByteSizeLong(const MessageLite& base) {
          const AddText& this_ = static_cast<const AddText&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddText::ByteSizeLong() const {
          const AddText& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddText)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddText::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddText*>(&to_msg);
  auto& from = static_cast<const AddText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddText)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddText::CopyFrom(const AddText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddText::InternalSwap(AddText* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata AddText::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddPoint, _impl_._has_bits_);
};

AddPoint::AddPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddPoint)
}
inline PROTOBUF_NDEBUG_INLINE AddPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddPoint::AddPoint(
    ::google::protobuf::Arena* arena,
    const AddPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point_)
                        : nullptr;
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:protos.AddPoint)
}
inline PROTOBUF_NDEBUG_INLINE AddPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, point_) +
               sizeof(Impl_::level_));
}
AddPoint::~AddPoint() {
  // @@protoc_insertion_point(destructor:protos.AddPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddPoint>(),
            ::google::protobuf::Message::GetNewImpl<AddPoint>(),
            ::google::protobuf::Message::GetClearImpl<AddPoint>(), &AddPoint::ByteSizeLong,
                &AddPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddPoint, _impl_._cached_size_),
            false,
        },
        &AddPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 29, 2> AddPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddPoint, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddPoint, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.level_)}},
    // .protos.RpcVector2D point = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.point_)}},
    // string color = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D point = 2;
    {PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string color = 3;
    {PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\17\0\0\5\0\0\0\0"
    "protos.AddPoint"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddPoint& this_ = static_cast<const AddPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D point = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          // string color = 3;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddPoint.color");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddPoint::ByteSizeLong(const MessageLite& base) {
          const AddPoint& this_ = static_cast<const AddPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddPoint::ByteSizeLong() const {
          const AddPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 3;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
           {
            // .protos.RpcVector2D point = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddPoint*>(&to_msg);
  auto& from = static_cast<const AddPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddPoint::CopyFrom(const AddPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddPoint::InternalSwap(AddPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.level_)
      + sizeof(AddPoint::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(AddPoint, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::google::protobuf::Metadata AddPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddLine::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddLine>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddLine, _impl_._has_bits_);
};

AddLine::AddLine(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddLine)
}
inline PROTOBUF_NDEBUG_INLINE AddLine::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddLine& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddLine::AddLine(
    ::google::protobuf::Arena* arena,
    const AddLine& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddLine* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.start_)
                        : nullptr;
  _impl_.end_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.end_)
                        : nullptr;
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:protos.AddLine)
}
inline PROTOBUF_NDEBUG_INLINE AddLine::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddLine::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, start_) +
               sizeof(Impl_::level_));
}
AddLine::~AddLine() {
  // @@protoc_insertion_point(destructor:protos.AddLine)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddLine::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.start_;
  delete _impl_.end_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddLine::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddLine_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddLine::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddLine>(),
            ::google::protobuf::Message::GetNewImpl<AddLine>(),
            ::google::protobuf::Message::GetClearImpl<AddLine>(), &AddLine::ByteSizeLong,
                &AddLine::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddLine, _impl_._cached_size_),
            false,
        },
        &AddLine::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddLine::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 28, 2> AddLine::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddLine, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddLine>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string color = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AddLine, _impl_.color_)}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddLine, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddLine, _impl_.level_)}},
    // .protos.RpcVector2D start = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddLine, _impl_.start_)}},
    // .protos.RpcVector2D end = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AddLine, _impl_.end_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddLine, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D start = 2;
    {PROTOBUF_FIELD_OFFSET(AddLine, _impl_.start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D end = 3;
    {PROTOBUF_FIELD_OFFSET(AddLine, _impl_.end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string color = 4;
    {PROTOBUF_FIELD_OFFSET(AddLine, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\16\0\0\0\5\0\0\0"
    "protos.AddLine"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddLine::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddLine)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddLine::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddLine& this_ = static_cast<const AddLine&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddLine::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddLine& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddLine)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D start = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.start_, this_._impl_.start_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D end = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.end_, this_._impl_.end_->GetCachedSize(), target,
                stream);
          }

          // string color = 4;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddLine.color");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddLine)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddLine::ByteSizeLong(const MessageLite& base) {
          const AddLine& this_ = static_cast<const AddLine&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddLine::ByteSizeLong() const {
          const AddLine& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddLine)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 4;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D start = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_);
            }
            // .protos.RpcVector2D end = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddLine::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddLine*>(&to_msg);
  auto& from = static_cast<const AddLine&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddLine)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_ != nullptr);
      if (_this->_impl_.start_ == nullptr) {
        _this->_impl_.start_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.start_);
      } else {
        _this->_impl_.start_->MergeFrom(*from._impl_.start_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.end_ != nullptr);
      if (_this->_impl_.end_ == nullptr) {
        _this->_impl_.end_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.end_);
      } else {
        _this->_impl_.end_->MergeFrom(*from._impl_.end_);
      }
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddLine::CopyFrom(const AddLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddLine::InternalSwap(AddLine* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLine, _impl_.level_)
      + sizeof(AddLine::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(AddLine, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::google::protobuf::Metadata AddLine::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddArc::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddArc>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddArc, _impl_._has_bits_);
};

AddArc::AddArc(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddArc)
}
inline PROTOBUF_NDEBUG_INLINE AddArc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddArc& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddArc::AddArc(
    ::google::protobuf::Arena* arena,
    const AddArc& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddArc* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.center_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.center_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, span_angel_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::span_angel_));

  // @@protoc_insertion_point(copy_constructor:protos.AddArc)
}
inline PROTOBUF_NDEBUG_INLINE AddArc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddArc::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, center_),
           0,
           offsetof(Impl_, span_angel_) -
               offsetof(Impl_, center_) +
               sizeof(Impl_::span_angel_));
}
AddArc::~AddArc() {
  // @@protoc_insertion_point(destructor:protos.AddArc)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddArc::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddArc::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddArc_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddArc::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddArc>(),
            ::google::protobuf::Message::GetNewImpl<AddArc>(),
            ::google::protobuf::Message::GetClearImpl<AddArc>(), &AddArc::ByteSizeLong,
                &AddArc::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddArc, _impl_._cached_size_),
            false,
        },
        &AddArc::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddArc::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 27, 2> AddArc::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddArc, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddArc>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddArc, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.level_)}},
    // .protos.RpcVector2D center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.center_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.radius_)}},
    // float start_angle = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.start_angle_)}},
    // float span_angel = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.span_angel_)}},
    // string color = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AddArc, _impl_.color_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D center = 2;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.center_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float start_angle = 4;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.start_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float span_angel = 5;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.span_angel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string color = 6;
    {PROTOBUF_FIELD_OFFSET(AddArc, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\15\0\0\0\0\0\5\0"
    "protos.AddArc"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddArc::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddArc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.center_ != nullptr);
    _impl_.center_->Clear();
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.span_angel_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.span_angel_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddArc::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddArc& this_ = static_cast<const AddArc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddArc::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddArc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddArc)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D center = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.center_, this_._impl_.center_->GetCachedSize(), target,
                stream);
          }

          // float radius = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_radius(), target);
          }

          // float start_angle = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_start_angle(), target);
          }

          // float span_angel = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_span_angel()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_span_angel(), target);
          }

          // string color = 6;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddArc.color");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddArc)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddArc::ByteSizeLong(const MessageLite& base) {
          const AddArc& this_ = static_cast<const AddArc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddArc::ByteSizeLong() const {
          const AddArc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddArc)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 6;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
           {
            // .protos.RpcVector2D center = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.center_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
            // float radius = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_radius()) != 0) {
              total_size += 5;
            }
            // float start_angle = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_angle()) != 0) {
              total_size += 5;
            }
            // float span_angel = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_span_angel()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddArc::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddArc*>(&to_msg);
  auto& from = static_cast<const AddArc&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddArc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.center_ != nullptr);
    if (_this->_impl_.center_ == nullptr) {
      _this->_impl_.center_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.center_);
    } else {
      _this->_impl_.center_->MergeFrom(*from._impl_.center_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_radius()) != 0) {
    _this->_impl_.radius_ = from._impl_.radius_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_angle()) != 0) {
    _this->_impl_.start_angle_ = from._impl_.start_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_span_angel()) != 0) {
    _this->_impl_.span_angel_ = from._impl_.span_angel_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddArc::CopyFrom(const AddArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddArc::InternalSwap(AddArc* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddArc, _impl_.span_angel_)
      + sizeof(AddArc::_impl_.span_angel_)
      - PROTOBUF_FIELD_OFFSET(AddArc, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::google::protobuf::Metadata AddArc::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddCircle::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddCircle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddCircle, _impl_._has_bits_);
};

AddCircle::AddCircle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddCircle)
}
inline PROTOBUF_NDEBUG_INLINE AddCircle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddCircle& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddCircle::AddCircle(
    ::google::protobuf::Arena* arena,
    const AddCircle& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddCircle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.center_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.center_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, fill_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::fill_));

  // @@protoc_insertion_point(copy_constructor:protos.AddCircle)
}
inline PROTOBUF_NDEBUG_INLINE AddCircle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddCircle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, center_),
           0,
           offsetof(Impl_, fill_) -
               offsetof(Impl_, center_) +
               sizeof(Impl_::fill_));
}
AddCircle::~AddCircle() {
  // @@protoc_insertion_point(destructor:protos.AddCircle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddCircle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddCircle::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddCircle_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddCircle::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddCircle>(),
            ::google::protobuf::Message::GetNewImpl<AddCircle>(),
            ::google::protobuf::Message::GetClearImpl<AddCircle>(), &AddCircle::ByteSizeLong,
                &AddCircle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddCircle, _impl_._cached_size_),
            false,
        },
        &AddCircle::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddCircle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 30, 2> AddCircle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddCircle, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddCircle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddCircle, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.level_)}},
    // .protos.RpcVector2D center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.center_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.radius_)}},
    // string color = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.color_)}},
    // bool fill = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddCircle, _impl_.fill_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.fill_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D center = 2;
    {PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.center_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string color = 4;
    {PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool fill = 5;
    {PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.fill_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\20\0\0\0\5\0\0\0"
    "protos.AddCircle"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddCircle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.center_ != nullptr);
    _impl_.center_->Clear();
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.fill_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddCircle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddCircle& this_ = static_cast<const AddCircle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddCircle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddCircle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddCircle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D center = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.center_, this_._impl_.center_->GetCachedSize(), target,
                stream);
          }

          // float radius = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_radius(), target);
          }

          // string color = 4;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddCircle.color");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool fill = 5;
          if (this_._internal_fill() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_fill(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddCircle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddCircle::ByteSizeLong(const MessageLite& base) {
          const AddCircle& this_ = static_cast<const AddCircle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddCircle::ByteSizeLong() const {
          const AddCircle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddCircle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 4;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
           {
            // .protos.RpcVector2D center = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.center_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
            // float radius = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_radius()) != 0) {
              total_size += 5;
            }
            // bool fill = 5;
            if (this_._internal_fill() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddCircle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddCircle*>(&to_msg);
  auto& from = static_cast<const AddCircle&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddCircle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.center_ != nullptr);
    if (_this->_impl_.center_ == nullptr) {
      _this->_impl_.center_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.center_);
    } else {
      _this->_impl_.center_->MergeFrom(*from._impl_.center_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_radius()) != 0) {
    _this->_impl_.radius_ = from._impl_.radius_;
  }
  if (from._internal_fill() != 0) {
    _this->_impl_.fill_ = from._impl_.fill_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddCircle::CopyFrom(const AddCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddCircle::InternalSwap(AddCircle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.fill_)
      + sizeof(AddCircle::_impl_.fill_)
      - PROTOBUF_FIELD_OFFSET(AddCircle, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::google::protobuf::Metadata AddCircle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddTriangle::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddTriangle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_._has_bits_);
};

AddTriangle::AddTriangle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddTriangle)
}
inline PROTOBUF_NDEBUG_INLINE AddTriangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddTriangle& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddTriangle::AddTriangle(
    ::google::protobuf::Arena* arena,
    const AddTriangle& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddTriangle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point1_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point1_)
                        : nullptr;
  _impl_.point2_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point2_)
                        : nullptr;
  _impl_.point3_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point3_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, fill_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::fill_));

  // @@protoc_insertion_point(copy_constructor:protos.AddTriangle)
}
inline PROTOBUF_NDEBUG_INLINE AddTriangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddTriangle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point1_),
           0,
           offsetof(Impl_, fill_) -
               offsetof(Impl_, point1_) +
               sizeof(Impl_::fill_));
}
AddTriangle::~AddTriangle() {
  // @@protoc_insertion_point(destructor:protos.AddTriangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddTriangle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.point1_;
  delete _impl_.point2_;
  delete _impl_.point3_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddTriangle::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddTriangle_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddTriangle::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddTriangle>(),
            ::google::protobuf::Message::GetNewImpl<AddTriangle>(),
            ::google::protobuf::Message::GetClearImpl<AddTriangle>(), &AddTriangle::ByteSizeLong,
                &AddTriangle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_._cached_size_),
            false,
        },
        &AddTriangle::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddTriangle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 32, 2> AddTriangle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddTriangle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTriangle, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.level_)}},
    // .protos.RpcVector2D point1 = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point1_)}},
    // .protos.RpcVector2D point2 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point2_)}},
    // .protos.RpcVector2D point3 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point3_)}},
    // string color = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.color_)}},
    // bool fill = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddTriangle, _impl_.fill_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.fill_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D point1 = 2;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D point2 = 3;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point2_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D point3 = 4;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point3_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string color = 5;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool fill = 6;
    {PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.fill_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\22\0\0\0\0\5\0\0"
    "protos.AddTriangle"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddTriangle::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddTriangle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.point1_ != nullptr);
      _impl_.point1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.point2_ != nullptr);
      _impl_.point2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.point3_ != nullptr);
      _impl_.point3_->Clear();
    }
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.fill_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddTriangle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddTriangle& this_ = static_cast<const AddTriangle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddTriangle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddTriangle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddTriangle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D point1 = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.point1_, this_._impl_.point1_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D point2 = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.point2_, this_._impl_.point2_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D point3 = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.point3_, this_._impl_.point3_->GetCachedSize(), target,
                stream);
          }

          // string color = 5;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddTriangle.color");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // bool fill = 6;
          if (this_._internal_fill() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_fill(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddTriangle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddTriangle::ByteSizeLong(const MessageLite& base) {
          const AddTriangle& this_ = static_cast<const AddTriangle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddTriangle::ByteSizeLong() const {
          const AddTriangle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddTriangle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 5;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .protos.RpcVector2D point1 = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point1_);
            }
            // .protos.RpcVector2D point2 = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point2_);
            }
            // .protos.RpcVector2D point3 = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point3_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
            // bool fill = 6;
            if (this_._internal_fill() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddTriangle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddTriangle*>(&to_msg);
  auto& from = static_cast<const AddTriangle&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddTriangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.point1_ != nullptr);
      if (_this->_impl_.point1_ == nullptr) {
        _this->_impl_.point1_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point1_);
      } else {
        _this->_impl_.point1_->MergeFrom(*from._impl_.point1_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.point2_ != nullptr);
      if (_this->_impl_.point2_ == nullptr) {
        _this->_impl_.point2_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point2_);
      } else {
        _this->_impl_.point2_->MergeFrom(*from._impl_.point2_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.point3_ != nullptr);
      if (_this->_impl_.point3_ == nullptr) {
        _this->_impl_.point3_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point3_);
      } else {
        _this->_impl_.point3_->MergeFrom(*from._impl_.point3_);
      }
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (from._internal_fill() != 0) {
    _this->_impl_.fill_ = from._impl_.fill_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTriangle::CopyFrom(const AddTriangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddTriangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddTriangle::InternalSwap(AddTriangle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.fill_)
      + sizeof(AddTriangle::_impl_.fill_)
      - PROTOBUF_FIELD_OFFSET(AddTriangle, _impl_.point1_)>(
          reinterpret_cast<char*>(&_impl_.point1_),
          reinterpret_cast<char*>(&other->_impl_.point1_));
}

::google::protobuf::Metadata AddTriangle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddRectangle::_Internal {
 public:
};

AddRectangle::AddRectangle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddRectangle)
}
inline PROTOBUF_NDEBUG_INLINE AddRectangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddRectangle& from_msg)
      : color_(arena, from.color_),
        _cached_size_{0} {}

AddRectangle::AddRectangle(
    ::google::protobuf::Arena* arena,
    const AddRectangle& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddRectangle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, fill_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::fill_));

  // @@protoc_insertion_point(copy_constructor:protos.AddRectangle)
}
inline PROTOBUF_NDEBUG_INLINE AddRectangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : color_(arena),
        _cached_size_{0} {}

inline void AddRectangle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           0,
           offsetof(Impl_, fill_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::fill_));
}
AddRectangle::~AddRectangle() {
  // @@protoc_insertion_point(destructor:protos.AddRectangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddRectangle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddRectangle::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddRectangle_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddRectangle::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddRectangle>(),
            ::google::protobuf::Message::GetNewImpl<AddRectangle>(),
            ::google::protobuf::Message::GetClearImpl<AddRectangle>(), &AddRectangle::ByteSizeLong,
                &AddRectangle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_._cached_size_),
            false,
        },
        &AddRectangle::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddRectangle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 33, 2> AddRectangle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddRectangle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddRectangle, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.level_)}},
    // float left = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.left_)}},
    // float top = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.top_)}},
    // float length = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.length_)}},
    // float width = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.width_)}},
    // string color = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.color_)}},
    // bool fill = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddRectangle, _impl_.fill_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.fill_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float left = 2;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.left_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float top = 3;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.top_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float length = 4;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float width = 5;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string color = 6;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool fill = 7;
    {PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.fill_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\0\0\0\0\0\5\0"
    "protos.AddRectangle"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddRectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddRectangle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.fill_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddRectangle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddRectangle& this_ = static_cast<const AddRectangle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddRectangle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddRectangle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddRectangle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          // float left = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_left()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_left(), target);
          }

          // float top = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_top()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_top(), target);
          }

          // float length = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_length(), target);
          }

          // float width = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_width(), target);
          }

          // string color = 6;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddRectangle.color");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // bool fill = 7;
          if (this_._internal_fill() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_fill(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddRectangle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddRectangle::ByteSizeLong(const MessageLite& base) {
          const AddRectangle& this_ = static_cast<const AddRectangle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddRectangle::ByteSizeLong() const {
          const AddRectangle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddRectangle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 6;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
            // float left = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_left()) != 0) {
              total_size += 5;
            }
            // float top = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_top()) != 0) {
              total_size += 5;
            }
            // float length = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_length()) != 0) {
              total_size += 5;
            }
            // float width = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_width()) != 0) {
              total_size += 5;
            }
            // bool fill = 7;
            if (this_._internal_fill() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddRectangle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddRectangle*>(&to_msg);
  auto& from = static_cast<const AddRectangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddRectangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_left()) != 0) {
    _this->_impl_.left_ = from._impl_.left_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_top()) != 0) {
    _this->_impl_.top_ = from._impl_.top_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_length()) != 0) {
    _this->_impl_.length_ = from._impl_.length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_width()) != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_fill() != 0) {
    _this->_impl_.fill_ = from._impl_.fill_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddRectangle::CopyFrom(const AddRectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddRectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddRectangle::InternalSwap(AddRectangle* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.fill_)
      + sizeof(AddRectangle::_impl_.fill_)
      - PROTOBUF_FIELD_OFFSET(AddRectangle, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::google::protobuf::Metadata AddRectangle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddSector::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddSector>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddSector, _impl_._has_bits_);
};

AddSector::AddSector(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddSector)
}
inline PROTOBUF_NDEBUG_INLINE AddSector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddSector& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        color_(arena, from.color_) {}

AddSector::AddSector(
    ::google::protobuf::Arena* arena,
    const AddSector& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddSector* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.center_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.center_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, fill_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::fill_));

  // @@protoc_insertion_point(copy_constructor:protos.AddSector)
}
inline PROTOBUF_NDEBUG_INLINE AddSector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        color_(arena) {}

inline void AddSector::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, center_),
           0,
           offsetof(Impl_, fill_) -
               offsetof(Impl_, center_) +
               sizeof(Impl_::fill_));
}
AddSector::~AddSector() {
  // @@protoc_insertion_point(destructor:protos.AddSector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddSector::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.color_.Destroy();
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddSector::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddSector_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddSector::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddSector>(),
            ::google::protobuf::Message::GetNewImpl<AddSector>(),
            ::google::protobuf::Message::GetClearImpl<AddSector>(), &AddSector::ByteSizeLong,
                &AddSector::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddSector, _impl_._cached_size_),
            false,
        },
        &AddSector::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddSector::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 38, 2> AddSector::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddSector, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddSector>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool fill = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddSector, _impl_.fill_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.fill_)}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddSector, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.level_)}},
    // .protos.RpcVector2D center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.center_)}},
    // float min_radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.min_radius_)}},
    // float max_radius = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.max_radius_)}},
    // float start_angle = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.start_angle_)}},
    // float span_angel = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.span_angel_)}},
    // string color = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AddSector, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D center = 2;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.center_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float min_radius = 3;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.min_radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_radius = 4;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.max_radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float start_angle = 5;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.start_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float span_angel = 6;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.span_angel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string color = 7;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool fill = 8;
    {PROTOBUF_FIELD_OFFSET(AddSector, _impl_.fill_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\20\0\0\0\0\0\0\5\0\0\0\0\0\0\0\0"
    "protos.AddSector"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddSector::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddSector)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.center_ != nullptr);
    _impl_.center_->Clear();
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.fill_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddSector::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddSector& this_ = static_cast<const AddSector&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddSector::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddSector& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddSector)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D center = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.center_, this_._impl_.center_->GetCachedSize(), target,
                stream);
          }

          // float min_radius = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_min_radius(), target);
          }

          // float max_radius = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_max_radius(), target);
          }

          // float start_angle = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_start_angle(), target);
          }

          // float span_angel = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_span_angel()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_span_angel(), target);
          }

          // string color = 7;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddSector.color");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // bool fill = 8;
          if (this_._internal_fill() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_fill(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddSector)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddSector::ByteSizeLong(const MessageLite& base) {
          const AddSector& this_ = static_cast<const AddSector&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddSector::ByteSizeLong() const {
          const AddSector& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddSector)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string color = 7;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
           {
            // .protos.RpcVector2D center = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.center_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
            // float min_radius = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_radius()) != 0) {
              total_size += 5;
            }
            // float max_radius = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_radius()) != 0) {
              total_size += 5;
            }
            // float start_angle = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_angle()) != 0) {
              total_size += 5;
            }
            // float span_angel = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_span_angel()) != 0) {
              total_size += 5;
            }
            // bool fill = 8;
            if (this_._internal_fill() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddSector::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddSector*>(&to_msg);
  auto& from = static_cast<const AddSector&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddSector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.center_ != nullptr);
    if (_this->_impl_.center_ == nullptr) {
      _this->_impl_.center_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.center_);
    } else {
      _this->_impl_.center_->MergeFrom(*from._impl_.center_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_radius()) != 0) {
    _this->_impl_.min_radius_ = from._impl_.min_radius_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_radius()) != 0) {
    _this->_impl_.max_radius_ = from._impl_.max_radius_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_angle()) != 0) {
    _this->_impl_.start_angle_ = from._impl_.start_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_span_angel()) != 0) {
    _this->_impl_.span_angel_ = from._impl_.span_angel_;
  }
  if (from._internal_fill() != 0) {
    _this->_impl_.fill_ = from._impl_.fill_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddSector::CopyFrom(const AddSector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddSector::InternalSwap(AddSector* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddSector, _impl_.fill_)
      + sizeof(AddSector::_impl_.fill_)
      - PROTOBUF_FIELD_OFFSET(AddSector, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::google::protobuf::Metadata AddSector::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddMessage, _impl_._has_bits_);
};

AddMessage::AddMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.AddMessage)
}
inline PROTOBUF_NDEBUG_INLINE AddMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::AddMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_),
        color_(arena, from.color_) {}

AddMessage::AddMessage(
    ::google::protobuf::Arena* arena,
    const AddMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.level_ = from._impl_.level_;

  // @@protoc_insertion_point(copy_constructor:protos.AddMessage)
}
inline PROTOBUF_NDEBUG_INLINE AddMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena),
        color_(arena) {}

inline void AddMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, level_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::level_));
}
AddMessage::~AddMessage() {
  // @@protoc_insertion_point(destructor:protos.AddMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.color_.Destroy();
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddMessage>(),
            ::google::protobuf::Message::GetNewImpl<AddMessage>(),
            ::google::protobuf::Message::GetClearImpl<AddMessage>(), &AddMessage::ByteSizeLong,
                &AddMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddMessage, _impl_._cached_size_),
            false,
        },
        &AddMessage::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 38, 2> AddMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddMessage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::AddMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string color = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.color_)}},
    // .protos.LoggerLevel level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddMessage, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.level_)}},
    // .protos.RpcVector2D position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.position_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.LoggerLevel level = 1;
    {PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.RpcVector2D position = 2;
    {PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string color = 4;
    {PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\21\0\0\7\5\0\0\0"
    "protos.AddMessage"
    "message"
    "color"
  }},
};

PROTOBUF_NOINLINE void AddMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.AddMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddMessage& this_ = static_cast<const AddMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.AddMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.LoggerLevel level = 1;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_level(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // string message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddMessage.message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string color = 4;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.AddMessage.color");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.AddMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddMessage::ByteSizeLong(const MessageLite& base) {
          const AddMessage& this_ = static_cast<const AddMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddMessage::ByteSizeLong() const {
          const AddMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.AddMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string color = 4;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
          }
           {
            // .protos.RpcVector2D position = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // .protos.LoggerLevel level = 1;
            if (this_._internal_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddMessage*>(&to_msg);
  auto& from = static_cast<const AddMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.AddMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddMessage::CopyFrom(const AddMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.AddMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddMessage::InternalSwap(AddMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.level_)
      + sizeof(AddMessage::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(AddMessage, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata AddMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Log::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::protos::Log, _impl_._oneof_case_);
};

void Log::set_allocated_add_text(::protos::AddText* add_text) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_text) {
    ::google::protobuf::Arena* submessage_arena = add_text->GetArena();
    if (message_arena != submessage_arena) {
      add_text = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_text, submessage_arena);
    }
    set_has_add_text();
    _impl_.log_.add_text_ = add_text;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_text)
}
void Log::set_allocated_add_point(::protos::AddPoint* add_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_point) {
    ::google::protobuf::Arena* submessage_arena = add_point->GetArena();
    if (message_arena != submessage_arena) {
      add_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_point, submessage_arena);
    }
    set_has_add_point();
    _impl_.log_.add_point_ = add_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_point)
}
void Log::set_allocated_add_line(::protos::AddLine* add_line) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_line) {
    ::google::protobuf::Arena* submessage_arena = add_line->GetArena();
    if (message_arena != submessage_arena) {
      add_line = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_line, submessage_arena);
    }
    set_has_add_line();
    _impl_.log_.add_line_ = add_line;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_line)
}
void Log::set_allocated_add_arc(::protos::AddArc* add_arc) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_arc) {
    ::google::protobuf::Arena* submessage_arena = add_arc->GetArena();
    if (message_arena != submessage_arena) {
      add_arc = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_arc, submessage_arena);
    }
    set_has_add_arc();
    _impl_.log_.add_arc_ = add_arc;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_arc)
}
void Log::set_allocated_add_circle(::protos::AddCircle* add_circle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_circle) {
    ::google::protobuf::Arena* submessage_arena = add_circle->GetArena();
    if (message_arena != submessage_arena) {
      add_circle = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_circle, submessage_arena);
    }
    set_has_add_circle();
    _impl_.log_.add_circle_ = add_circle;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_circle)
}
void Log::set_allocated_add_triangle(::protos::AddTriangle* add_triangle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_triangle) {
    ::google::protobuf::Arena* submessage_arena = add_triangle->GetArena();
    if (message_arena != submessage_arena) {
      add_triangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_triangle, submessage_arena);
    }
    set_has_add_triangle();
    _impl_.log_.add_triangle_ = add_triangle;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_triangle)
}
void Log::set_allocated_add_rectangle(::protos::AddRectangle* add_rectangle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_rectangle) {
    ::google::protobuf::Arena* submessage_arena = add_rectangle->GetArena();
    if (message_arena != submessage_arena) {
      add_rectangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_rectangle, submessage_arena);
    }
    set_has_add_rectangle();
    _impl_.log_.add_rectangle_ = add_rectangle;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_rectangle)
}
void Log::set_allocated_add_sector(::protos::AddSector* add_sector) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_sector) {
    ::google::protobuf::Arena* submessage_arena = add_sector->GetArena();
    if (message_arena != submessage_arena) {
      add_sector = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_sector, submessage_arena);
    }
    set_has_add_sector();
    _impl_.log_.add_sector_ = add_sector;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_sector)
}
void Log::set_allocated_add_message(::protos::AddMessage* add_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_log();
  if (add_message) {
    ::google::protobuf::Arena* submessage_arena = add_message->GetArena();
    if (message_arena != submessage_arena) {
      add_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_message, submessage_arena);
    }
    set_has_add_message();
    _impl_.log_.add_message_ = add_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.Log.add_message)
}
Log::Log(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Log)
}
inline PROTOBUF_NDEBUG_INLINE Log::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Log& from_msg)
      : log_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Log::Log(
    ::google::protobuf::Arena* arena,
    const Log& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Log* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (log_case()) {
    case LOG_NOT_SET:
      break;
      case kAddText:
        _impl_.log_.add_text_ = ::google::protobuf::Message::CopyConstruct<::protos::AddText>(arena, *from._impl_.log_.add_text_);
        break;
      case kAddPoint:
        _impl_.log_.add_point_ = ::google::protobuf::Message::CopyConstruct<::protos::AddPoint>(arena, *from._impl_.log_.add_point_);
        break;
      case kAddLine:
        _impl_.log_.add_line_ = ::google::protobuf::Message::CopyConstruct<::protos::AddLine>(arena, *from._impl_.log_.add_line_);
        break;
      case kAddArc:
        _impl_.log_.add_arc_ = ::google::protobuf::Message::CopyConstruct<::protos::AddArc>(arena, *from._impl_.log_.add_arc_);
        break;
      case kAddCircle:
        _impl_.log_.add_circle_ = ::google::protobuf::Message::CopyConstruct<::protos::AddCircle>(arena, *from._impl_.log_.add_circle_);
        break;
      case kAddTriangle:
        _impl_.log_.add_triangle_ = ::google::protobuf::Message::CopyConstruct<::protos::AddTriangle>(arena, *from._impl_.log_.add_triangle_);
        break;
      case kAddRectangle:
        _impl_.log_.add_rectangle_ = ::google::protobuf::Message::CopyConstruct<::protos::AddRectangle>(arena, *from._impl_.log_.add_rectangle_);
        break;
      case kAddSector:
        _impl_.log_.add_sector_ = ::google::protobuf::Message::CopyConstruct<::protos::AddSector>(arena, *from._impl_.log_.add_sector_);
        break;
      case kAddMessage:
        _impl_.log_.add_message_ = ::google::protobuf::Message::CopyConstruct<::protos::AddMessage>(arena, *from._impl_.log_.add_message_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protos.Log)
}
inline PROTOBUF_NDEBUG_INLINE Log::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : log_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Log::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Log::~Log() {
  // @@protoc_insertion_point(destructor:protos.Log)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Log::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_log()) {
    clear_log();
  }
  _impl_.~Impl_();
}

void Log::clear_log() {
// @@protoc_insertion_point(one_of_clear_start:protos.Log)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (log_case()) {
    case kAddText: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_text_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_text_);
      }
      break;
    }
    case kAddPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_point_);
      }
      break;
    }
    case kAddLine: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_line_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_line_);
      }
      break;
    }
    case kAddArc: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_arc_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_arc_);
      }
      break;
    }
    case kAddCircle: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_circle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_circle_);
      }
      break;
    }
    case kAddTriangle: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_triangle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_triangle_);
      }
      break;
    }
    case kAddRectangle: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_rectangle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_rectangle_);
      }
      break;
    }
    case kAddSector: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_sector_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_sector_);
      }
      break;
    }
    case kAddMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.log_.add_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.log_.add_message_);
      }
      break;
    }
    case LOG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LOG_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Log::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Log_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Log::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Log>(),
            ::google::protobuf::Message::GetNewImpl<Log>(),
            ::google::protobuf::Message::GetClearImpl<Log>(), &Log::ByteSizeLong,
                &Log::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Log, _impl_._cached_size_),
            false,
        },
        &Log::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Log::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 9, 9, 0, 2> Log::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Log>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.AddText add_text = 1;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_text_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddPoint add_point = 2;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_point_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddLine add_line = 3;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_line_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddArc add_arc = 4;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_arc_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddCircle add_circle = 5;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_circle_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddTriangle add_triangle = 6;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_triangle_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddRectangle add_rectangle = 7;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_rectangle_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddSector add_sector = 8;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_sector_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AddMessage add_message = 9;
    {PROTOBUF_FIELD_OFFSET(Log, _impl_.log_.add_message_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::AddText>()},
    {::_pbi::TcParser::GetTable<::protos::AddPoint>()},
    {::_pbi::TcParser::GetTable<::protos::AddLine>()},
    {::_pbi::TcParser::GetTable<::protos::AddArc>()},
    {::_pbi::TcParser::GetTable<::protos::AddCircle>()},
    {::_pbi::TcParser::GetTable<::protos::AddTriangle>()},
    {::_pbi::TcParser::GetTable<::protos::AddRectangle>()},
    {::_pbi::TcParser::GetTable<::protos::AddSector>()},
    {::_pbi::TcParser::GetTable<::protos::AddMessage>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Log)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_log();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Log::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Log& this_ = static_cast<const Log&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Log::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Log& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Log)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.log_case()) {
            case kAddText: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.log_.add_text_, this_._impl_.log_.add_text_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.log_.add_point_, this_._impl_.log_.add_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddLine: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.log_.add_line_, this_._impl_.log_.add_line_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddArc: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.log_.add_arc_, this_._impl_.log_.add_arc_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddCircle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.log_.add_circle_, this_._impl_.log_.add_circle_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddTriangle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.log_.add_triangle_, this_._impl_.log_.add_triangle_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddRectangle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.log_.add_rectangle_, this_._impl_.log_.add_rectangle_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddSector: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.log_.add_sector_, this_._impl_.log_.add_sector_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddMessage: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.log_.add_message_, this_._impl_.log_.add_message_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Log)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Log::ByteSizeLong(const MessageLite& base) {
          const Log& this_ = static_cast<const Log&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Log::ByteSizeLong() const {
          const Log& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Log)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.log_case()) {
            // .protos.AddText add_text = 1;
            case kAddText: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_text_);
              break;
            }
            // .protos.AddPoint add_point = 2;
            case kAddPoint: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_point_);
              break;
            }
            // .protos.AddLine add_line = 3;
            case kAddLine: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_line_);
              break;
            }
            // .protos.AddArc add_arc = 4;
            case kAddArc: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_arc_);
              break;
            }
            // .protos.AddCircle add_circle = 5;
            case kAddCircle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_circle_);
              break;
            }
            // .protos.AddTriangle add_triangle = 6;
            case kAddTriangle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_triangle_);
              break;
            }
            // .protos.AddRectangle add_rectangle = 7;
            case kAddRectangle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_rectangle_);
              break;
            }
            // .protos.AddSector add_sector = 8;
            case kAddSector: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_sector_);
              break;
            }
            // .protos.AddMessage add_message = 9;
            case kAddMessage: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.log_.add_message_);
              break;
            }
            case LOG_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Log::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Log)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_log();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAddText: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_text_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddText>(arena, *from._impl_.log_.add_text_);
        } else {
          _this->_impl_.log_.add_text_->MergeFrom(from._internal_add_text());
        }
        break;
      }
      case kAddPoint: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddPoint>(arena, *from._impl_.log_.add_point_);
        } else {
          _this->_impl_.log_.add_point_->MergeFrom(from._internal_add_point());
        }
        break;
      }
      case kAddLine: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_line_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddLine>(arena, *from._impl_.log_.add_line_);
        } else {
          _this->_impl_.log_.add_line_->MergeFrom(from._internal_add_line());
        }
        break;
      }
      case kAddArc: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_arc_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddArc>(arena, *from._impl_.log_.add_arc_);
        } else {
          _this->_impl_.log_.add_arc_->MergeFrom(from._internal_add_arc());
        }
        break;
      }
      case kAddCircle: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_circle_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddCircle>(arena, *from._impl_.log_.add_circle_);
        } else {
          _this->_impl_.log_.add_circle_->MergeFrom(from._internal_add_circle());
        }
        break;
      }
      case kAddTriangle: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_triangle_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddTriangle>(arena, *from._impl_.log_.add_triangle_);
        } else {
          _this->_impl_.log_.add_triangle_->MergeFrom(from._internal_add_triangle());
        }
        break;
      }
      case kAddRectangle: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_rectangle_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddRectangle>(arena, *from._impl_.log_.add_rectangle_);
        } else {
          _this->_impl_.log_.add_rectangle_->MergeFrom(from._internal_add_rectangle());
        }
        break;
      }
      case kAddSector: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_sector_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddSector>(arena, *from._impl_.log_.add_sector_);
        } else {
          _this->_impl_.log_.add_sector_->MergeFrom(from._internal_add_sector());
        }
        break;
      }
      case kAddMessage: {
        if (oneof_needs_init) {
          _this->_impl_.log_.add_message_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AddMessage>(arena, *from._impl_.log_.add_message_);
        } else {
          _this->_impl_.log_.add_message_->MergeFrom(from._internal_add_message());
        }
        break;
      }
      case LOG_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Log::InternalSwap(Log* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.log_, other->_impl_.log_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DebugClient::_Internal {
 public:
};

DebugClient::DebugClient(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DebugClient)
}
inline PROTOBUF_NDEBUG_INLINE DebugClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::DebugClient& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

DebugClient::DebugClient(
    ::google::protobuf::Arena* arena,
    const DebugClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DebugClient* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protos.DebugClient)
}
inline PROTOBUF_NDEBUG_INLINE DebugClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void DebugClient::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DebugClient::~DebugClient() {
  // @@protoc_insertion_point(destructor:protos.DebugClient)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DebugClient::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DebugClient::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DebugClient_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DebugClient::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DebugClient>(),
            ::google::protobuf::Message::GetNewImpl<DebugClient>(),
            ::google::protobuf::Message::GetClearImpl<DebugClient>(), &DebugClient::ByteSizeLong,
                &DebugClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DebugClient, _impl_._cached_size_),
            false,
        },
        &DebugClient::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DebugClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 34, 2> DebugClient::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DebugClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DebugClient, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1;
    {PROTOBUF_FIELD_OFFSET(DebugClient, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\7\0\0\0\0\0\0"
    "protos.DebugClient"
    "message"
  }},
};

PROTOBUF_NOINLINE void DebugClient::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DebugClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DebugClient::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DebugClient& this_ = static_cast<const DebugClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DebugClient::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DebugClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DebugClient)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.DebugClient.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DebugClient)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DebugClient::ByteSizeLong(const MessageLite& base) {
          const DebugClient& this_ = static_cast<const DebugClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DebugClient::ByteSizeLong() const {
          const DebugClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DebugClient)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string message = 1;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DebugClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DebugClient*>(&to_msg);
  auto& from = static_cast<const DebugClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DebugClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DebugClient::CopyFrom(const DebugClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DebugClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DebugClient::InternalSwap(DebugClient* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
}

::google::protobuf::Metadata DebugClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_GoToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_GoToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_._has_bits_);
};

Body_GoToPoint::Body_GoToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_GoToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_GoToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_GoToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_GoToPoint::Body_GoToPoint(
    ::google::protobuf::Arena* arena,
    const Body_GoToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_GoToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distance_threshold_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, distance_threshold_),
           offsetof(Impl_, max_dash_power_) -
               offsetof(Impl_, distance_threshold_) +
               sizeof(Impl_::max_dash_power_));

  // @@protoc_insertion_point(copy_constructor:protos.Body_GoToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_GoToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_GoToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, max_dash_power_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::max_dash_power_));
}
Body_GoToPoint::~Body_GoToPoint() {
  // @@protoc_insertion_point(destructor:protos.Body_GoToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_GoToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_GoToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_GoToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_GoToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_GoToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Body_GoToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Body_GoToPoint>(), &Body_GoToPoint::ByteSizeLong,
                &Body_GoToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_._cached_size_),
            false,
        },
        &Body_GoToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_GoToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Body_GoToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_GoToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.target_point_)}},
    // float distance_threshold = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.distance_threshold_)}},
    // float max_dash_power = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.max_dash_power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float distance_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.distance_threshold_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_dash_power = 3;
    {PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.max_dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_GoToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_GoToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.distance_threshold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_dash_power_) -
      reinterpret_cast<char*>(&_impl_.distance_threshold_)) + sizeof(_impl_.max_dash_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_GoToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_GoToPoint& this_ = static_cast<const Body_GoToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_GoToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_GoToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_GoToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float distance_threshold = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_distance_threshold(), target);
          }

          // float max_dash_power = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_max_dash_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_GoToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_GoToPoint::ByteSizeLong(const MessageLite& base) {
          const Body_GoToPoint& this_ = static_cast<const Body_GoToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_GoToPoint::ByteSizeLong() const {
          const Body_GoToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_GoToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float distance_threshold = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
              total_size += 5;
            }
            // float max_dash_power = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_GoToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_GoToPoint*>(&to_msg);
  auto& from = static_cast<const Body_GoToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_GoToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_distance_threshold()) != 0) {
    _this->_impl_.distance_threshold_ = from._impl_.distance_threshold_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_dash_power()) != 0) {
    _this->_impl_.max_dash_power_ = from._impl_.max_dash_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_GoToPoint::CopyFrom(const Body_GoToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_GoToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_GoToPoint::InternalSwap(Body_GoToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.max_dash_power_)
      + sizeof(Body_GoToPoint::_impl_.max_dash_power_)
      - PROTOBUF_FIELD_OFFSET(Body_GoToPoint, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_GoToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_SmartKick::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_SmartKick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_._has_bits_);
};

Body_SmartKick::Body_SmartKick(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_SmartKick)
}
inline PROTOBUF_NDEBUG_INLINE Body_SmartKick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_SmartKick& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_SmartKick::Body_SmartKick(
    ::google::protobuf::Arena* arena,
    const Body_SmartKick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_SmartKick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_speed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, first_speed_),
           offsetof(Impl_, max_steps_) -
               offsetof(Impl_, first_speed_) +
               sizeof(Impl_::max_steps_));

  // @@protoc_insertion_point(copy_constructor:protos.Body_SmartKick)
}
inline PROTOBUF_NDEBUG_INLINE Body_SmartKick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_SmartKick::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, max_steps_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::max_steps_));
}
Body_SmartKick::~Body_SmartKick() {
  // @@protoc_insertion_point(destructor:protos.Body_SmartKick)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_SmartKick::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_SmartKick::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_SmartKick_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_SmartKick::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_SmartKick>(),
            ::google::protobuf::Message::GetNewImpl<Body_SmartKick>(),
            ::google::protobuf::Message::GetClearImpl<Body_SmartKick>(), &Body_SmartKick::ByteSizeLong,
                &Body_SmartKick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_._cached_size_),
            false,
        },
        &Body_SmartKick::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_SmartKick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Body_SmartKick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_SmartKick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 max_steps = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Body_SmartKick, _impl_.max_steps_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.max_steps_)}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.target_point_)}},
    // float first_speed = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.first_speed_)}},
    // float first_speed_threshold = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.first_speed_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float first_speed = 2;
    {PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.first_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float first_speed_threshold = 3;
    {PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.first_speed_threshold_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 max_steps = 4;
    {PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.max_steps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_SmartKick::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_SmartKick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.first_speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_steps_) -
      reinterpret_cast<char*>(&_impl_.first_speed_)) + sizeof(_impl_.max_steps_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_SmartKick::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_SmartKick& this_ = static_cast<const Body_SmartKick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_SmartKick::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_SmartKick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_SmartKick)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float first_speed = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_first_speed(), target);
          }

          // float first_speed_threshold = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_first_speed_threshold(), target);
          }

          // int32 max_steps = 4;
          if (this_._internal_max_steps() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_max_steps(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_SmartKick)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_SmartKick::ByteSizeLong(const MessageLite& base) {
          const Body_SmartKick& this_ = static_cast<const Body_SmartKick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_SmartKick::ByteSizeLong() const {
          const Body_SmartKick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_SmartKick)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float first_speed = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed()) != 0) {
              total_size += 5;
            }
            // float first_speed_threshold = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed_threshold()) != 0) {
              total_size += 5;
            }
            // int32 max_steps = 4;
            if (this_._internal_max_steps() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_steps());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_SmartKick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_SmartKick*>(&to_msg);
  auto& from = static_cast<const Body_SmartKick&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_SmartKick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_first_speed()) != 0) {
    _this->_impl_.first_speed_ = from._impl_.first_speed_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_first_speed_threshold()) != 0) {
    _this->_impl_.first_speed_threshold_ = from._impl_.first_speed_threshold_;
  }
  if (from._internal_max_steps() != 0) {
    _this->_impl_.max_steps_ = from._impl_.max_steps_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_SmartKick::CopyFrom(const Body_SmartKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_SmartKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_SmartKick::InternalSwap(Body_SmartKick* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.max_steps_)
      + sizeof(Body_SmartKick::_impl_.max_steps_)
      - PROTOBUF_FIELD_OFFSET(Body_SmartKick, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_SmartKick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_BeforeKickOff::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Bhv_BeforeKickOff>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bhv_BeforeKickOff, _impl_._has_bits_);
};

Bhv_BeforeKickOff::Bhv_BeforeKickOff(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_BeforeKickOff)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_BeforeKickOff::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Bhv_BeforeKickOff& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Bhv_BeforeKickOff::Bhv_BeforeKickOff(
    ::google::protobuf::Arena* arena,
    const Bhv_BeforeKickOff& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_BeforeKickOff* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_BeforeKickOff)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_BeforeKickOff::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bhv_BeforeKickOff::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.point_ = {};
}
Bhv_BeforeKickOff::~Bhv_BeforeKickOff() {
  // @@protoc_insertion_point(destructor:protos.Bhv_BeforeKickOff)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bhv_BeforeKickOff::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_BeforeKickOff::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Bhv_BeforeKickOff_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_BeforeKickOff::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Bhv_BeforeKickOff>(),
            ::google::protobuf::Message::GetNewImpl<Bhv_BeforeKickOff>(),
            ::google::protobuf::Message::GetClearImpl<Bhv_BeforeKickOff>(), &Bhv_BeforeKickOff::ByteSizeLong,
                &Bhv_BeforeKickOff::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_BeforeKickOff, _impl_._cached_size_),
            false,
        },
        &Bhv_BeforeKickOff::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_BeforeKickOff::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Bhv_BeforeKickOff::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bhv_BeforeKickOff, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_BeforeKickOff>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Bhv_BeforeKickOff, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D point = 1;
    {PROTOBUF_FIELD_OFFSET(Bhv_BeforeKickOff, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Bhv_BeforeKickOff::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Bhv_BeforeKickOff)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bhv_BeforeKickOff::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bhv_BeforeKickOff& this_ = static_cast<const Bhv_BeforeKickOff&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bhv_BeforeKickOff::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bhv_BeforeKickOff& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Bhv_BeforeKickOff)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Bhv_BeforeKickOff)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bhv_BeforeKickOff::ByteSizeLong(const MessageLite& base) {
          const Bhv_BeforeKickOff& this_ = static_cast<const Bhv_BeforeKickOff&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bhv_BeforeKickOff::ByteSizeLong() const {
          const Bhv_BeforeKickOff& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Bhv_BeforeKickOff)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.RpcVector2D point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bhv_BeforeKickOff::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bhv_BeforeKickOff*>(&to_msg);
  auto& from = static_cast<const Bhv_BeforeKickOff&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Bhv_BeforeKickOff)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bhv_BeforeKickOff::CopyFrom(const Bhv_BeforeKickOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Bhv_BeforeKickOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bhv_BeforeKickOff::InternalSwap(Bhv_BeforeKickOff* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.point_, other->_impl_.point_);
}

::google::protobuf::Metadata Bhv_BeforeKickOff::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_BodyNeckToBall::_Internal {
 public:
};

Bhv_BodyNeckToBall::Bhv_BodyNeckToBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_BodyNeckToBall)
}
Bhv_BodyNeckToBall::Bhv_BodyNeckToBall(
    ::google::protobuf::Arena* arena,
    const Bhv_BodyNeckToBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_BodyNeckToBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_BodyNeckToBall)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_BodyNeckToBall::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Bhv_BodyNeckToBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_BodyNeckToBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Bhv_BodyNeckToBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Bhv_BodyNeckToBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Bhv_BodyNeckToBall>(), &Bhv_BodyNeckToBall::ByteSizeLong,
                &Bhv_BodyNeckToBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToBall, _impl_._cached_size_),
            false,
        },
        &Bhv_BodyNeckToBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_BodyNeckToBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Bhv_BodyNeckToBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_BodyNeckToBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Bhv_BodyNeckToBall::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_BodyNeckToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Bhv_BodyNeckToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToPoint, _impl_._has_bits_);
};

Bhv_BodyNeckToPoint::Bhv_BodyNeckToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_BodyNeckToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_BodyNeckToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Bhv_BodyNeckToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Bhv_BodyNeckToPoint::Bhv_BodyNeckToPoint(
    ::google::protobuf::Arena* arena,
    const Bhv_BodyNeckToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_BodyNeckToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_BodyNeckToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_BodyNeckToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bhv_BodyNeckToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.point_ = {};
}
Bhv_BodyNeckToPoint::~Bhv_BodyNeckToPoint() {
  // @@protoc_insertion_point(destructor:protos.Bhv_BodyNeckToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bhv_BodyNeckToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_BodyNeckToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Bhv_BodyNeckToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_BodyNeckToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Bhv_BodyNeckToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Bhv_BodyNeckToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Bhv_BodyNeckToPoint>(), &Bhv_BodyNeckToPoint::ByteSizeLong,
                &Bhv_BodyNeckToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToPoint, _impl_._cached_size_),
            false,
        },
        &Bhv_BodyNeckToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_BodyNeckToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Bhv_BodyNeckToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToPoint, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_BodyNeckToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToPoint, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D point = 1;
    {PROTOBUF_FIELD_OFFSET(Bhv_BodyNeckToPoint, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Bhv_BodyNeckToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Bhv_BodyNeckToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bhv_BodyNeckToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bhv_BodyNeckToPoint& this_ = static_cast<const Bhv_BodyNeckToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bhv_BodyNeckToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bhv_BodyNeckToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Bhv_BodyNeckToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Bhv_BodyNeckToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bhv_BodyNeckToPoint::ByteSizeLong(const MessageLite& base) {
          const Bhv_BodyNeckToPoint& this_ = static_cast<const Bhv_BodyNeckToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bhv_BodyNeckToPoint::ByteSizeLong() const {
          const Bhv_BodyNeckToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Bhv_BodyNeckToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.RpcVector2D point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bhv_BodyNeckToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bhv_BodyNeckToPoint*>(&to_msg);
  auto& from = static_cast<const Bhv_BodyNeckToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Bhv_BodyNeckToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bhv_BodyNeckToPoint::CopyFrom(const Bhv_BodyNeckToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Bhv_BodyNeckToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bhv_BodyNeckToPoint::InternalSwap(Bhv_BodyNeckToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.point_, other->_impl_.point_);
}

::google::protobuf::Metadata Bhv_BodyNeckToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_Emergency::_Internal {
 public:
};

Bhv_Emergency::Bhv_Emergency(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_Emergency)
}
Bhv_Emergency::Bhv_Emergency(
    ::google::protobuf::Arena* arena,
    const Bhv_Emergency& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_Emergency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_Emergency)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_Emergency::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Bhv_Emergency_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_Emergency::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Bhv_Emergency>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Bhv_Emergency>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Bhv_Emergency>(), &Bhv_Emergency::ByteSizeLong,
                &Bhv_Emergency::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_Emergency, _impl_._cached_size_),
            false,
        },
        &Bhv_Emergency::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_Emergency::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Bhv_Emergency::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_Emergency>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Bhv_Emergency::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_GoToPointLookBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Bhv_GoToPointLookBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_._has_bits_);
};

Bhv_GoToPointLookBall::Bhv_GoToPointLookBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_GoToPointLookBall)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_GoToPointLookBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Bhv_GoToPointLookBall& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Bhv_GoToPointLookBall::Bhv_GoToPointLookBall(
    ::google::protobuf::Arena* arena,
    const Bhv_GoToPointLookBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_GoToPointLookBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distance_threshold_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, distance_threshold_),
           offsetof(Impl_, max_dash_power_) -
               offsetof(Impl_, distance_threshold_) +
               sizeof(Impl_::max_dash_power_));

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_GoToPointLookBall)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_GoToPointLookBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bhv_GoToPointLookBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, max_dash_power_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::max_dash_power_));
}
Bhv_GoToPointLookBall::~Bhv_GoToPointLookBall() {
  // @@protoc_insertion_point(destructor:protos.Bhv_GoToPointLookBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bhv_GoToPointLookBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_GoToPointLookBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Bhv_GoToPointLookBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_GoToPointLookBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Bhv_GoToPointLookBall>(),
            ::google::protobuf::Message::GetNewImpl<Bhv_GoToPointLookBall>(),
            ::google::protobuf::Message::GetClearImpl<Bhv_GoToPointLookBall>(), &Bhv_GoToPointLookBall::ByteSizeLong,
                &Bhv_GoToPointLookBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_._cached_size_),
            false,
        },
        &Bhv_GoToPointLookBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_GoToPointLookBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Bhv_GoToPointLookBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_GoToPointLookBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.target_point_)}},
    // float distance_threshold = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.distance_threshold_)}},
    // float max_dash_power = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.max_dash_power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float distance_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.distance_threshold_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_dash_power = 3;
    {PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.max_dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Bhv_GoToPointLookBall::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Bhv_GoToPointLookBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.distance_threshold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_dash_power_) -
      reinterpret_cast<char*>(&_impl_.distance_threshold_)) + sizeof(_impl_.max_dash_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bhv_GoToPointLookBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bhv_GoToPointLookBall& this_ = static_cast<const Bhv_GoToPointLookBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bhv_GoToPointLookBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bhv_GoToPointLookBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Bhv_GoToPointLookBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float distance_threshold = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_distance_threshold(), target);
          }

          // float max_dash_power = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_max_dash_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Bhv_GoToPointLookBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bhv_GoToPointLookBall::ByteSizeLong(const MessageLite& base) {
          const Bhv_GoToPointLookBall& this_ = static_cast<const Bhv_GoToPointLookBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bhv_GoToPointLookBall::ByteSizeLong() const {
          const Bhv_GoToPointLookBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Bhv_GoToPointLookBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float distance_threshold = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
              total_size += 5;
            }
            // float max_dash_power = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bhv_GoToPointLookBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bhv_GoToPointLookBall*>(&to_msg);
  auto& from = static_cast<const Bhv_GoToPointLookBall&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Bhv_GoToPointLookBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_distance_threshold()) != 0) {
    _this->_impl_.distance_threshold_ = from._impl_.distance_threshold_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_dash_power()) != 0) {
    _this->_impl_.max_dash_power_ = from._impl_.max_dash_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bhv_GoToPointLookBall::CopyFrom(const Bhv_GoToPointLookBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Bhv_GoToPointLookBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bhv_GoToPointLookBall::InternalSwap(Bhv_GoToPointLookBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.max_dash_power_)
      + sizeof(Bhv_GoToPointLookBall::_impl_.max_dash_power_)
      - PROTOBUF_FIELD_OFFSET(Bhv_GoToPointLookBall, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Bhv_GoToPointLookBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_NeckBodyToBall::_Internal {
 public:
};

Bhv_NeckBodyToBall::Bhv_NeckBodyToBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_NeckBodyToBall)
}
Bhv_NeckBodyToBall::Bhv_NeckBodyToBall(
    ::google::protobuf::Arena* arena, const Bhv_NeckBodyToBall& from)
    : Bhv_NeckBodyToBall(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Bhv_NeckBodyToBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bhv_NeckBodyToBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.angle_buf_ = {};
}
Bhv_NeckBodyToBall::~Bhv_NeckBodyToBall() {
  // @@protoc_insertion_point(destructor:protos.Bhv_NeckBodyToBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bhv_NeckBodyToBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_NeckBodyToBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Bhv_NeckBodyToBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_NeckBodyToBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Bhv_NeckBodyToBall>(),
            ::google::protobuf::Message::GetNewImpl<Bhv_NeckBodyToBall>(),
            ::google::protobuf::Message::GetClearImpl<Bhv_NeckBodyToBall>(), &Bhv_NeckBodyToBall::ByteSizeLong,
                &Bhv_NeckBodyToBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToBall, _impl_._cached_size_),
            false,
        },
        &Bhv_NeckBodyToBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_NeckBodyToBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Bhv_NeckBodyToBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_NeckBodyToBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float angle_buf = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToBall, _impl_.angle_buf_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float angle_buf = 1;
    {PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToBall, _impl_.angle_buf_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Bhv_NeckBodyToBall::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Bhv_NeckBodyToBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angle_buf_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bhv_NeckBodyToBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bhv_NeckBodyToBall& this_ = static_cast<const Bhv_NeckBodyToBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bhv_NeckBodyToBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bhv_NeckBodyToBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Bhv_NeckBodyToBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float angle_buf = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_buf()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_angle_buf(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Bhv_NeckBodyToBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bhv_NeckBodyToBall::ByteSizeLong(const MessageLite& base) {
          const Bhv_NeckBodyToBall& this_ = static_cast<const Bhv_NeckBodyToBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bhv_NeckBodyToBall::ByteSizeLong() const {
          const Bhv_NeckBodyToBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Bhv_NeckBodyToBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float angle_buf = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_buf()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bhv_NeckBodyToBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bhv_NeckBodyToBall*>(&to_msg);
  auto& from = static_cast<const Bhv_NeckBodyToBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Bhv_NeckBodyToBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_angle_buf()) != 0) {
    _this->_impl_.angle_buf_ = from._impl_.angle_buf_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bhv_NeckBodyToBall::CopyFrom(const Bhv_NeckBodyToBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Bhv_NeckBodyToBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bhv_NeckBodyToBall::InternalSwap(Bhv_NeckBodyToBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.angle_buf_, other->_impl_.angle_buf_);
}

::google::protobuf::Metadata Bhv_NeckBodyToBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_NeckBodyToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Bhv_NeckBodyToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_._has_bits_);
};

Bhv_NeckBodyToPoint::Bhv_NeckBodyToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_NeckBodyToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_NeckBodyToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Bhv_NeckBodyToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Bhv_NeckBodyToPoint::Bhv_NeckBodyToPoint(
    ::google::protobuf::Arena* arena,
    const Bhv_NeckBodyToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_NeckBodyToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.point_)
                        : nullptr;
  _impl_.angle_buf_ = from._impl_.angle_buf_;

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_NeckBodyToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Bhv_NeckBodyToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bhv_NeckBodyToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point_),
           0,
           offsetof(Impl_, angle_buf_) -
               offsetof(Impl_, point_) +
               sizeof(Impl_::angle_buf_));
}
Bhv_NeckBodyToPoint::~Bhv_NeckBodyToPoint() {
  // @@protoc_insertion_point(destructor:protos.Bhv_NeckBodyToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bhv_NeckBodyToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_NeckBodyToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Bhv_NeckBodyToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_NeckBodyToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Bhv_NeckBodyToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Bhv_NeckBodyToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Bhv_NeckBodyToPoint>(), &Bhv_NeckBodyToPoint::ByteSizeLong,
                &Bhv_NeckBodyToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_._cached_size_),
            false,
        },
        &Bhv_NeckBodyToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_NeckBodyToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Bhv_NeckBodyToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_NeckBodyToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float angle_buf = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.angle_buf_)}},
    // .protos.RpcVector2D point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D point = 1;
    {PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float angle_buf = 2;
    {PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.angle_buf_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Bhv_NeckBodyToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Bhv_NeckBodyToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_.angle_buf_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bhv_NeckBodyToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bhv_NeckBodyToPoint& this_ = static_cast<const Bhv_NeckBodyToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bhv_NeckBodyToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bhv_NeckBodyToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Bhv_NeckBodyToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          // float angle_buf = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle_buf()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_angle_buf(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Bhv_NeckBodyToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bhv_NeckBodyToPoint::ByteSizeLong(const MessageLite& base) {
          const Bhv_NeckBodyToPoint& this_ = static_cast<const Bhv_NeckBodyToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bhv_NeckBodyToPoint::ByteSizeLong() const {
          const Bhv_NeckBodyToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Bhv_NeckBodyToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
           {
            // float angle_buf = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle_buf()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bhv_NeckBodyToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bhv_NeckBodyToPoint*>(&to_msg);
  auto& from = static_cast<const Bhv_NeckBodyToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Bhv_NeckBodyToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angle_buf()) != 0) {
    _this->_impl_.angle_buf_ = from._impl_.angle_buf_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bhv_NeckBodyToPoint::CopyFrom(const Bhv_NeckBodyToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Bhv_NeckBodyToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bhv_NeckBodyToPoint::InternalSwap(Bhv_NeckBodyToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.angle_buf_)
      + sizeof(Bhv_NeckBodyToPoint::_impl_.angle_buf_)
      - PROTOBUF_FIELD_OFFSET(Bhv_NeckBodyToPoint, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::google::protobuf::Metadata Bhv_NeckBodyToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bhv_ScanField::_Internal {
 public:
};

Bhv_ScanField::Bhv_ScanField(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Bhv_ScanField)
}
Bhv_ScanField::Bhv_ScanField(
    ::google::protobuf::Arena* arena,
    const Bhv_ScanField& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bhv_ScanField* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Bhv_ScanField)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Bhv_ScanField::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Bhv_ScanField_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Bhv_ScanField::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Bhv_ScanField>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Bhv_ScanField>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Bhv_ScanField>(), &Bhv_ScanField::ByteSizeLong,
                &Bhv_ScanField::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Bhv_ScanField, _impl_._cached_size_),
            false,
        },
        &Bhv_ScanField::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Bhv_ScanField::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Bhv_ScanField::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Bhv_ScanField>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Bhv_ScanField::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_AdvanceBall::_Internal {
 public:
};

Body_AdvanceBall::Body_AdvanceBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Body_AdvanceBall)
}
Body_AdvanceBall::Body_AdvanceBall(
    ::google::protobuf::Arena* arena,
    const Body_AdvanceBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_AdvanceBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Body_AdvanceBall)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_AdvanceBall::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Body_AdvanceBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_AdvanceBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Body_AdvanceBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Body_AdvanceBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Body_AdvanceBall>(), &Body_AdvanceBall::ByteSizeLong,
                &Body_AdvanceBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_AdvanceBall, _impl_._cached_size_),
            false,
        },
        &Body_AdvanceBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_AdvanceBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Body_AdvanceBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_AdvanceBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Body_AdvanceBall::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_ClearBall::_Internal {
 public:
};

Body_ClearBall::Body_ClearBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Body_ClearBall)
}
Body_ClearBall::Body_ClearBall(
    ::google::protobuf::Arena* arena,
    const Body_ClearBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_ClearBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Body_ClearBall)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_ClearBall::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Body_ClearBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_ClearBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Body_ClearBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Body_ClearBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Body_ClearBall>(), &Body_ClearBall::ByteSizeLong,
                &Body_ClearBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_ClearBall, _impl_._cached_size_),
            false,
        },
        &Body_ClearBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_ClearBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Body_ClearBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_ClearBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Body_ClearBall::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_Dribble::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_Dribble>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_._has_bits_);
};

Body_Dribble::Body_Dribble(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_Dribble)
}
inline PROTOBUF_NDEBUG_INLINE Body_Dribble::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_Dribble& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_Dribble::Body_Dribble(
    ::google::protobuf::Arena* arena,
    const Body_Dribble& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_Dribble* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distance_threshold_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, distance_threshold_),
           offsetof(Impl_, dodge_) -
               offsetof(Impl_, distance_threshold_) +
               sizeof(Impl_::dodge_));

  // @@protoc_insertion_point(copy_constructor:protos.Body_Dribble)
}
inline PROTOBUF_NDEBUG_INLINE Body_Dribble::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_Dribble::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, dodge_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::dodge_));
}
Body_Dribble::~Body_Dribble() {
  // @@protoc_insertion_point(destructor:protos.Body_Dribble)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_Dribble::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_Dribble::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_Dribble_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_Dribble::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_Dribble>(),
            ::google::protobuf::Message::GetNewImpl<Body_Dribble>(),
            ::google::protobuf::Message::GetClearImpl<Body_Dribble>(), &Body_Dribble::ByteSizeLong,
                &Body_Dribble::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_._cached_size_),
            false,
        },
        &Body_Dribble::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_Dribble::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> Body_Dribble::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_Dribble>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.target_point_)}},
    // float distance_threshold = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.distance_threshold_)}},
    // float dash_power = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dash_power_)}},
    // int32 dash_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Body_Dribble, _impl_.dash_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dash_count_)}},
    // bool dodge = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Body_Dribble, _impl_.dodge_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dodge_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float distance_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.distance_threshold_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_power = 3;
    {PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 dash_count = 4;
    {PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dash_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool dodge = 5;
    {PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dodge_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_Dribble::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_Dribble)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.distance_threshold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dodge_) -
      reinterpret_cast<char*>(&_impl_.distance_threshold_)) + sizeof(_impl_.dodge_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_Dribble::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_Dribble& this_ = static_cast<const Body_Dribble&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_Dribble::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_Dribble& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_Dribble)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float distance_threshold = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_distance_threshold(), target);
          }

          // float dash_power = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_dash_power(), target);
          }

          // int32 dash_count = 4;
          if (this_._internal_dash_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_dash_count(), target);
          }

          // bool dodge = 5;
          if (this_._internal_dodge() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_dodge(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_Dribble)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_Dribble::ByteSizeLong(const MessageLite& base) {
          const Body_Dribble& this_ = static_cast<const Body_Dribble&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_Dribble::ByteSizeLong() const {
          const Body_Dribble& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_Dribble)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float distance_threshold = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_distance_threshold()) != 0) {
              total_size += 5;
            }
            // float dash_power = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
              total_size += 5;
            }
            // int32 dash_count = 4;
            if (this_._internal_dash_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_dash_count());
            }
            // bool dodge = 5;
            if (this_._internal_dodge() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_Dribble::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_Dribble*>(&to_msg);
  auto& from = static_cast<const Body_Dribble&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_Dribble)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_distance_threshold()) != 0) {
    _this->_impl_.distance_threshold_ = from._impl_.distance_threshold_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power()) != 0) {
    _this->_impl_.dash_power_ = from._impl_.dash_power_;
  }
  if (from._internal_dash_count() != 0) {
    _this->_impl_.dash_count_ = from._impl_.dash_count_;
  }
  if (from._internal_dodge() != 0) {
    _this->_impl_.dodge_ = from._impl_.dodge_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_Dribble::CopyFrom(const Body_Dribble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_Dribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_Dribble::InternalSwap(Body_Dribble* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.dodge_)
      + sizeof(Body_Dribble::_impl_.dodge_)
      - PROTOBUF_FIELD_OFFSET(Body_Dribble, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_Dribble::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_GoToPointDodge::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_GoToPointDodge>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_._has_bits_);
};

Body_GoToPointDodge::Body_GoToPointDodge(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_GoToPointDodge)
}
inline PROTOBUF_NDEBUG_INLINE Body_GoToPointDodge::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_GoToPointDodge& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_GoToPointDodge::Body_GoToPointDodge(
    ::google::protobuf::Arena* arena,
    const Body_GoToPointDodge& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_GoToPointDodge* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  _impl_.dash_power_ = from._impl_.dash_power_;

  // @@protoc_insertion_point(copy_constructor:protos.Body_GoToPointDodge)
}
inline PROTOBUF_NDEBUG_INLINE Body_GoToPointDodge::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_GoToPointDodge::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, dash_power_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::dash_power_));
}
Body_GoToPointDodge::~Body_GoToPointDodge() {
  // @@protoc_insertion_point(destructor:protos.Body_GoToPointDodge)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_GoToPointDodge::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_GoToPointDodge::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_GoToPointDodge_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_GoToPointDodge::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_GoToPointDodge>(),
            ::google::protobuf::Message::GetNewImpl<Body_GoToPointDodge>(),
            ::google::protobuf::Message::GetClearImpl<Body_GoToPointDodge>(), &Body_GoToPointDodge::ByteSizeLong,
                &Body_GoToPointDodge::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_._cached_size_),
            false,
        },
        &Body_GoToPointDodge::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_GoToPointDodge::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Body_GoToPointDodge::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_GoToPointDodge>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float dash_power = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.dash_power_)}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float dash_power = 2;
    {PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_GoToPointDodge::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_GoToPointDodge)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_.dash_power_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_GoToPointDodge::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_GoToPointDodge& this_ = static_cast<const Body_GoToPointDodge&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_GoToPointDodge::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_GoToPointDodge& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_GoToPointDodge)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float dash_power = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_dash_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_GoToPointDodge)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_GoToPointDodge::ByteSizeLong(const MessageLite& base) {
          const Body_GoToPointDodge& this_ = static_cast<const Body_GoToPointDodge&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_GoToPointDodge::ByteSizeLong() const {
          const Body_GoToPointDodge& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_GoToPointDodge)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float dash_power = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_GoToPointDodge::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_GoToPointDodge*>(&to_msg);
  auto& from = static_cast<const Body_GoToPointDodge&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_GoToPointDodge)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power()) != 0) {
    _this->_impl_.dash_power_ = from._impl_.dash_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_GoToPointDodge::CopyFrom(const Body_GoToPointDodge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_GoToPointDodge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_GoToPointDodge::InternalSwap(Body_GoToPointDodge* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.dash_power_)
      + sizeof(Body_GoToPointDodge::_impl_.dash_power_)
      - PROTOBUF_FIELD_OFFSET(Body_GoToPointDodge, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_GoToPointDodge::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_HoldBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_HoldBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_._has_bits_);
};

Body_HoldBall::Body_HoldBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_HoldBall)
}
inline PROTOBUF_NDEBUG_INLINE Body_HoldBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_HoldBall& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_HoldBall::Body_HoldBall(
    ::google::protobuf::Arena* arena,
    const Body_HoldBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_HoldBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.turn_target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.turn_target_point_)
                        : nullptr;
  _impl_.kick_target_point_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.kick_target_point_)
                        : nullptr;
  _impl_.do_turn_ = from._impl_.do_turn_;

  // @@protoc_insertion_point(copy_constructor:protos.Body_HoldBall)
}
inline PROTOBUF_NDEBUG_INLINE Body_HoldBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_HoldBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, turn_target_point_),
           0,
           offsetof(Impl_, do_turn_) -
               offsetof(Impl_, turn_target_point_) +
               sizeof(Impl_::do_turn_));
}
Body_HoldBall::~Body_HoldBall() {
  // @@protoc_insertion_point(destructor:protos.Body_HoldBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_HoldBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.turn_target_point_;
  delete _impl_.kick_target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_HoldBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_HoldBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_HoldBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_HoldBall>(),
            ::google::protobuf::Message::GetNewImpl<Body_HoldBall>(),
            ::google::protobuf::Message::GetClearImpl<Body_HoldBall>(), &Body_HoldBall::ByteSizeLong,
                &Body_HoldBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_._cached_size_),
            false,
        },
        &Body_HoldBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_HoldBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Body_HoldBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_HoldBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool do_turn = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Body_HoldBall, _impl_.do_turn_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.do_turn_)}},
    // .protos.RpcVector2D turn_target_point = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.turn_target_point_)}},
    // .protos.RpcVector2D kick_target_point = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.kick_target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool do_turn = 1;
    {PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.do_turn_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .protos.RpcVector2D turn_target_point = 2;
    {PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.turn_target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D kick_target_point = 3;
    {PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.kick_target_point_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_HoldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_HoldBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.turn_target_point_ != nullptr);
      _impl_.turn_target_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kick_target_point_ != nullptr);
      _impl_.kick_target_point_->Clear();
    }
  }
  _impl_.do_turn_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_HoldBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_HoldBall& this_ = static_cast<const Body_HoldBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_HoldBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_HoldBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_HoldBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool do_turn = 1;
          if (this_._internal_do_turn() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_do_turn(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D turn_target_point = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.turn_target_point_, this_._impl_.turn_target_point_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D kick_target_point = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.kick_target_point_, this_._impl_.kick_target_point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_HoldBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_HoldBall::ByteSizeLong(const MessageLite& base) {
          const Body_HoldBall& this_ = static_cast<const Body_HoldBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_HoldBall::ByteSizeLong() const {
          const Body_HoldBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_HoldBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D turn_target_point = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.turn_target_point_);
            }
            // .protos.RpcVector2D kick_target_point = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kick_target_point_);
            }
          }
           {
            // bool do_turn = 1;
            if (this_._internal_do_turn() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_HoldBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_HoldBall*>(&to_msg);
  auto& from = static_cast<const Body_HoldBall&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_HoldBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.turn_target_point_ != nullptr);
      if (_this->_impl_.turn_target_point_ == nullptr) {
        _this->_impl_.turn_target_point_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.turn_target_point_);
      } else {
        _this->_impl_.turn_target_point_->MergeFrom(*from._impl_.turn_target_point_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kick_target_point_ != nullptr);
      if (_this->_impl_.kick_target_point_ == nullptr) {
        _this->_impl_.kick_target_point_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.kick_target_point_);
      } else {
        _this->_impl_.kick_target_point_->MergeFrom(*from._impl_.kick_target_point_);
      }
    }
  }
  if (from._internal_do_turn() != 0) {
    _this->_impl_.do_turn_ = from._impl_.do_turn_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_HoldBall::CopyFrom(const Body_HoldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_HoldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_HoldBall::InternalSwap(Body_HoldBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.do_turn_)
      + sizeof(Body_HoldBall::_impl_.do_turn_)
      - PROTOBUF_FIELD_OFFSET(Body_HoldBall, _impl_.turn_target_point_)>(
          reinterpret_cast<char*>(&_impl_.turn_target_point_),
          reinterpret_cast<char*>(&other->_impl_.turn_target_point_));
}

::google::protobuf::Metadata Body_HoldBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_Intercept::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_Intercept>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_._has_bits_);
};

Body_Intercept::Body_Intercept(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_Intercept)
}
inline PROTOBUF_NDEBUG_INLINE Body_Intercept::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_Intercept& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_Intercept::Body_Intercept(
    ::google::protobuf::Arena* arena,
    const Body_Intercept& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_Intercept* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.face_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.face_point_)
                        : nullptr;
  _impl_.save_recovery_ = from._impl_.save_recovery_;

  // @@protoc_insertion_point(copy_constructor:protos.Body_Intercept)
}
inline PROTOBUF_NDEBUG_INLINE Body_Intercept::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_Intercept::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, face_point_),
           0,
           offsetof(Impl_, save_recovery_) -
               offsetof(Impl_, face_point_) +
               sizeof(Impl_::save_recovery_));
}
Body_Intercept::~Body_Intercept() {
  // @@protoc_insertion_point(destructor:protos.Body_Intercept)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_Intercept::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.face_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_Intercept::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_Intercept_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_Intercept::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_Intercept>(),
            ::google::protobuf::Message::GetNewImpl<Body_Intercept>(),
            ::google::protobuf::Message::GetClearImpl<Body_Intercept>(), &Body_Intercept::ByteSizeLong,
                &Body_Intercept::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_._cached_size_),
            false,
        },
        &Body_Intercept::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_Intercept::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Body_Intercept::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_Intercept>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D face_point = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.face_point_)}},
    // bool save_recovery = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Body_Intercept, _impl_.save_recovery_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.save_recovery_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool save_recovery = 1;
    {PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.save_recovery_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .protos.RpcVector2D face_point = 2;
    {PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.face_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_Intercept::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_Intercept)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.face_point_ != nullptr);
    _impl_.face_point_->Clear();
  }
  _impl_.save_recovery_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_Intercept::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_Intercept& this_ = static_cast<const Body_Intercept&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_Intercept::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_Intercept& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_Intercept)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool save_recovery = 1;
          if (this_._internal_save_recovery() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_save_recovery(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D face_point = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.face_point_, this_._impl_.face_point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_Intercept)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_Intercept::ByteSizeLong(const MessageLite& base) {
          const Body_Intercept& this_ = static_cast<const Body_Intercept&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_Intercept::ByteSizeLong() const {
          const Body_Intercept& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_Intercept)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D face_point = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.face_point_);
            }
          }
           {
            // bool save_recovery = 1;
            if (this_._internal_save_recovery() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_Intercept::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_Intercept*>(&to_msg);
  auto& from = static_cast<const Body_Intercept&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_Intercept)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.face_point_ != nullptr);
    if (_this->_impl_.face_point_ == nullptr) {
      _this->_impl_.face_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.face_point_);
    } else {
      _this->_impl_.face_point_->MergeFrom(*from._impl_.face_point_);
    }
  }
  if (from._internal_save_recovery() != 0) {
    _this->_impl_.save_recovery_ = from._impl_.save_recovery_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_Intercept::CopyFrom(const Body_Intercept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_Intercept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_Intercept::InternalSwap(Body_Intercept* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.save_recovery_)
      + sizeof(Body_Intercept::_impl_.save_recovery_)
      - PROTOBUF_FIELD_OFFSET(Body_Intercept, _impl_.face_point_)>(
          reinterpret_cast<char*>(&_impl_.face_point_),
          reinterpret_cast<char*>(&other->_impl_.face_point_));
}

::google::protobuf::Metadata Body_Intercept::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_KickOneStep::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_KickOneStep>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_._has_bits_);
};

Body_KickOneStep::Body_KickOneStep(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_KickOneStep)
}
inline PROTOBUF_NDEBUG_INLINE Body_KickOneStep::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_KickOneStep& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_KickOneStep::Body_KickOneStep(
    ::google::protobuf::Arena* arena,
    const Body_KickOneStep& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_KickOneStep* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_speed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, first_speed_),
           offsetof(Impl_, force_mode_) -
               offsetof(Impl_, first_speed_) +
               sizeof(Impl_::force_mode_));

  // @@protoc_insertion_point(copy_constructor:protos.Body_KickOneStep)
}
inline PROTOBUF_NDEBUG_INLINE Body_KickOneStep::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_KickOneStep::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, force_mode_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::force_mode_));
}
Body_KickOneStep::~Body_KickOneStep() {
  // @@protoc_insertion_point(destructor:protos.Body_KickOneStep)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_KickOneStep::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_KickOneStep::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_KickOneStep_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_KickOneStep::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_KickOneStep>(),
            ::google::protobuf::Message::GetNewImpl<Body_KickOneStep>(),
            ::google::protobuf::Message::GetClearImpl<Body_KickOneStep>(), &Body_KickOneStep::ByteSizeLong,
                &Body_KickOneStep::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_._cached_size_),
            false,
        },
        &Body_KickOneStep::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_KickOneStep::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Body_KickOneStep::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_KickOneStep>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.target_point_)}},
    // float first_speed = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.first_speed_)}},
    // bool force_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Body_KickOneStep, _impl_.force_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.force_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float first_speed = 2;
    {PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.first_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool force_mode = 3;
    {PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.force_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_KickOneStep::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_KickOneStep)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.first_speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.force_mode_) -
      reinterpret_cast<char*>(&_impl_.first_speed_)) + sizeof(_impl_.force_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_KickOneStep::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_KickOneStep& this_ = static_cast<const Body_KickOneStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_KickOneStep::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_KickOneStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_KickOneStep)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float first_speed = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_first_speed(), target);
          }

          // bool force_mode = 3;
          if (this_._internal_force_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_force_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_KickOneStep)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_KickOneStep::ByteSizeLong(const MessageLite& base) {
          const Body_KickOneStep& this_ = static_cast<const Body_KickOneStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_KickOneStep::ByteSizeLong() const {
          const Body_KickOneStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_KickOneStep)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float first_speed = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_first_speed()) != 0) {
              total_size += 5;
            }
            // bool force_mode = 3;
            if (this_._internal_force_mode() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_KickOneStep::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_KickOneStep*>(&to_msg);
  auto& from = static_cast<const Body_KickOneStep&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_KickOneStep)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_first_speed()) != 0) {
    _this->_impl_.first_speed_ = from._impl_.first_speed_;
  }
  if (from._internal_force_mode() != 0) {
    _this->_impl_.force_mode_ = from._impl_.force_mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_KickOneStep::CopyFrom(const Body_KickOneStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_KickOneStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_KickOneStep::InternalSwap(Body_KickOneStep* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.force_mode_)
      + sizeof(Body_KickOneStep::_impl_.force_mode_)
      - PROTOBUF_FIELD_OFFSET(Body_KickOneStep, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_KickOneStep::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_StopBall::_Internal {
 public:
};

Body_StopBall::Body_StopBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Body_StopBall)
}
Body_StopBall::Body_StopBall(
    ::google::protobuf::Arena* arena,
    const Body_StopBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_StopBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Body_StopBall)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_StopBall::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Body_StopBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_StopBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Body_StopBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Body_StopBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Body_StopBall>(), &Body_StopBall::ByteSizeLong,
                &Body_StopBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_StopBall, _impl_._cached_size_),
            false,
        },
        &Body_StopBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_StopBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Body_StopBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_StopBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Body_StopBall::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_StopDash::_Internal {
 public:
};

Body_StopDash::Body_StopDash(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_StopDash)
}
Body_StopDash::Body_StopDash(
    ::google::protobuf::Arena* arena, const Body_StopDash& from)
    : Body_StopDash(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Body_StopDash::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_StopDash::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.save_recovery_ = {};
}
Body_StopDash::~Body_StopDash() {
  // @@protoc_insertion_point(destructor:protos.Body_StopDash)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_StopDash::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_StopDash::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_StopDash_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_StopDash::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_StopDash>(),
            ::google::protobuf::Message::GetNewImpl<Body_StopDash>(),
            ::google::protobuf::Message::GetClearImpl<Body_StopDash>(), &Body_StopDash::ByteSizeLong,
                &Body_StopDash::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_StopDash, _impl_._cached_size_),
            false,
        },
        &Body_StopDash::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_StopDash::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Body_StopDash::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_StopDash>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool save_recovery = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Body_StopDash, _impl_.save_recovery_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Body_StopDash, _impl_.save_recovery_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool save_recovery = 1;
    {PROTOBUF_FIELD_OFFSET(Body_StopDash, _impl_.save_recovery_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Body_StopDash::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_StopDash)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.save_recovery_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_StopDash::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_StopDash& this_ = static_cast<const Body_StopDash&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_StopDash::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_StopDash& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_StopDash)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool save_recovery = 1;
          if (this_._internal_save_recovery() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_save_recovery(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_StopDash)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_StopDash::ByteSizeLong(const MessageLite& base) {
          const Body_StopDash& this_ = static_cast<const Body_StopDash&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_StopDash::ByteSizeLong() const {
          const Body_StopDash& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_StopDash)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool save_recovery = 1;
            if (this_._internal_save_recovery() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_StopDash::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_StopDash*>(&to_msg);
  auto& from = static_cast<const Body_StopDash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_StopDash)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_save_recovery() != 0) {
    _this->_impl_.save_recovery_ = from._impl_.save_recovery_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_StopDash::CopyFrom(const Body_StopDash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_StopDash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_StopDash::InternalSwap(Body_StopDash* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.save_recovery_, other->_impl_.save_recovery_);
}

::google::protobuf::Metadata Body_StopDash::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_TackleToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_TackleToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_._has_bits_);
};

Body_TackleToPoint::Body_TackleToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_TackleToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_TackleToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_TackleToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_TackleToPoint::Body_TackleToPoint(
    ::google::protobuf::Arena* arena,
    const Body_TackleToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_TackleToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_probability_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, min_probability_),
           offsetof(Impl_, min_speed_) -
               offsetof(Impl_, min_probability_) +
               sizeof(Impl_::min_speed_));

  // @@protoc_insertion_point(copy_constructor:protos.Body_TackleToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_TackleToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_TackleToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, min_speed_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::min_speed_));
}
Body_TackleToPoint::~Body_TackleToPoint() {
  // @@protoc_insertion_point(destructor:protos.Body_TackleToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_TackleToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_TackleToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_TackleToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_TackleToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_TackleToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Body_TackleToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Body_TackleToPoint>(), &Body_TackleToPoint::ByteSizeLong,
                &Body_TackleToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_._cached_size_),
            false,
        },
        &Body_TackleToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_TackleToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Body_TackleToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_TackleToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.target_point_)}},
    // float min_probability = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.min_probability_)}},
    // float min_speed = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.min_speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float min_probability = 2;
    {PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.min_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_speed = 3;
    {PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.min_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_TackleToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_TackleToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.min_probability_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_speed_) -
      reinterpret_cast<char*>(&_impl_.min_probability_)) + sizeof(_impl_.min_speed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_TackleToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_TackleToPoint& this_ = static_cast<const Body_TackleToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_TackleToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_TackleToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_TackleToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // float min_probability = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_min_probability(), target);
          }

          // float min_speed = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_min_speed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_TackleToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_TackleToPoint::ByteSizeLong(const MessageLite& base) {
          const Body_TackleToPoint& this_ = static_cast<const Body_TackleToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_TackleToPoint::ByteSizeLong() const {
          const Body_TackleToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_TackleToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // float min_probability = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_probability()) != 0) {
              total_size += 5;
            }
            // float min_speed = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_speed()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_TackleToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_TackleToPoint*>(&to_msg);
  auto& from = static_cast<const Body_TackleToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_TackleToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_probability()) != 0) {
    _this->_impl_.min_probability_ = from._impl_.min_probability_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_speed()) != 0) {
    _this->_impl_.min_speed_ = from._impl_.min_speed_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_TackleToPoint::CopyFrom(const Body_TackleToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_TackleToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_TackleToPoint::InternalSwap(Body_TackleToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.min_speed_)
      + sizeof(Body_TackleToPoint::_impl_.min_speed_)
      - PROTOBUF_FIELD_OFFSET(Body_TackleToPoint, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_TackleToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_TurnToAngle::_Internal {
 public:
};

Body_TurnToAngle::Body_TurnToAngle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_TurnToAngle)
}
Body_TurnToAngle::Body_TurnToAngle(
    ::google::protobuf::Arena* arena, const Body_TurnToAngle& from)
    : Body_TurnToAngle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Body_TurnToAngle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_TurnToAngle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.angle_ = {};
}
Body_TurnToAngle::~Body_TurnToAngle() {
  // @@protoc_insertion_point(destructor:protos.Body_TurnToAngle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_TurnToAngle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_TurnToAngle::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_TurnToAngle_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_TurnToAngle::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_TurnToAngle>(),
            ::google::protobuf::Message::GetNewImpl<Body_TurnToAngle>(),
            ::google::protobuf::Message::GetClearImpl<Body_TurnToAngle>(), &Body_TurnToAngle::ByteSizeLong,
                &Body_TurnToAngle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_TurnToAngle, _impl_._cached_size_),
            false,
        },
        &Body_TurnToAngle::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_TurnToAngle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Body_TurnToAngle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_TurnToAngle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float angle = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Body_TurnToAngle, _impl_.angle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float angle = 1;
    {PROTOBUF_FIELD_OFFSET(Body_TurnToAngle, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Body_TurnToAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_TurnToAngle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angle_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_TurnToAngle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_TurnToAngle& this_ = static_cast<const Body_TurnToAngle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_TurnToAngle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_TurnToAngle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_TurnToAngle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float angle = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_angle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_TurnToAngle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_TurnToAngle::ByteSizeLong(const MessageLite& base) {
          const Body_TurnToAngle& this_ = static_cast<const Body_TurnToAngle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_TurnToAngle::ByteSizeLong() const {
          const Body_TurnToAngle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_TurnToAngle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float angle = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_TurnToAngle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_TurnToAngle*>(&to_msg);
  auto& from = static_cast<const Body_TurnToAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_TurnToAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_angle()) != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_TurnToAngle::CopyFrom(const Body_TurnToAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_TurnToAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_TurnToAngle::InternalSwap(Body_TurnToAngle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.angle_, other->_impl_.angle_);
}

::google::protobuf::Metadata Body_TurnToAngle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_TurnToBall::_Internal {
 public:
};

Body_TurnToBall::Body_TurnToBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_TurnToBall)
}
Body_TurnToBall::Body_TurnToBall(
    ::google::protobuf::Arena* arena, const Body_TurnToBall& from)
    : Body_TurnToBall(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Body_TurnToBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_TurnToBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cycle_ = {};
}
Body_TurnToBall::~Body_TurnToBall() {
  // @@protoc_insertion_point(destructor:protos.Body_TurnToBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_TurnToBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_TurnToBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_TurnToBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_TurnToBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_TurnToBall>(),
            ::google::protobuf::Message::GetNewImpl<Body_TurnToBall>(),
            ::google::protobuf::Message::GetClearImpl<Body_TurnToBall>(), &Body_TurnToBall::ByteSizeLong,
                &Body_TurnToBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_TurnToBall, _impl_._cached_size_),
            false,
        },
        &Body_TurnToBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_TurnToBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Body_TurnToBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_TurnToBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 cycle = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Body_TurnToBall, _impl_.cycle_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Body_TurnToBall, _impl_.cycle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 cycle = 1;
    {PROTOBUF_FIELD_OFFSET(Body_TurnToBall, _impl_.cycle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Body_TurnToBall::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_TurnToBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cycle_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_TurnToBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_TurnToBall& this_ = static_cast<const Body_TurnToBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_TurnToBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_TurnToBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_TurnToBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 cycle = 1;
          if (this_._internal_cycle() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_cycle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_TurnToBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_TurnToBall::ByteSizeLong(const MessageLite& base) {
          const Body_TurnToBall& this_ = static_cast<const Body_TurnToBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_TurnToBall::ByteSizeLong() const {
          const Body_TurnToBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_TurnToBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 cycle = 1;
            if (this_._internal_cycle() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cycle());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_TurnToBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_TurnToBall*>(&to_msg);
  auto& from = static_cast<const Body_TurnToBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_TurnToBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cycle() != 0) {
    _this->_impl_.cycle_ = from._impl_.cycle_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_TurnToBall::CopyFrom(const Body_TurnToBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_TurnToBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_TurnToBall::InternalSwap(Body_TurnToBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.cycle_, other->_impl_.cycle_);
}

::google::protobuf::Metadata Body_TurnToBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Body_TurnToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Body_TurnToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_._has_bits_);
};

Body_TurnToPoint::Body_TurnToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Body_TurnToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_TurnToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Body_TurnToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Body_TurnToPoint::Body_TurnToPoint(
    ::google::protobuf::Arena* arena,
    const Body_TurnToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Body_TurnToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  _impl_.cycle_ = from._impl_.cycle_;

  // @@protoc_insertion_point(copy_constructor:protos.Body_TurnToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Body_TurnToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Body_TurnToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, cycle_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::cycle_));
}
Body_TurnToPoint::~Body_TurnToPoint() {
  // @@protoc_insertion_point(destructor:protos.Body_TurnToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Body_TurnToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Body_TurnToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Body_TurnToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Body_TurnToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Body_TurnToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Body_TurnToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Body_TurnToPoint>(), &Body_TurnToPoint::ByteSizeLong,
                &Body_TurnToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_._cached_size_),
            false,
        },
        &Body_TurnToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Body_TurnToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Body_TurnToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Body_TurnToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 cycle = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Body_TurnToPoint, _impl_.cycle_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.cycle_)}},
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 cycle = 2;
    {PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.cycle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Body_TurnToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Body_TurnToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_.cycle_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Body_TurnToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Body_TurnToPoint& this_ = static_cast<const Body_TurnToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Body_TurnToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Body_TurnToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Body_TurnToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // int32 cycle = 2;
          if (this_._internal_cycle() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_cycle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Body_TurnToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Body_TurnToPoint::ByteSizeLong(const MessageLite& base) {
          const Body_TurnToPoint& this_ = static_cast<const Body_TurnToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Body_TurnToPoint::ByteSizeLong() const {
          const Body_TurnToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Body_TurnToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // int32 cycle = 2;
            if (this_._internal_cycle() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cycle());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Body_TurnToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Body_TurnToPoint*>(&to_msg);
  auto& from = static_cast<const Body_TurnToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Body_TurnToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (from._internal_cycle() != 0) {
    _this->_impl_.cycle_ = from._impl_.cycle_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Body_TurnToPoint::CopyFrom(const Body_TurnToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Body_TurnToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Body_TurnToPoint::InternalSwap(Body_TurnToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.cycle_)
      + sizeof(Body_TurnToPoint::_impl_.cycle_)
      - PROTOBUF_FIELD_OFFSET(Body_TurnToPoint, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata Body_TurnToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Focus_MoveToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Focus_MoveToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Focus_MoveToPoint, _impl_._has_bits_);
};

Focus_MoveToPoint::Focus_MoveToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Focus_MoveToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Focus_MoveToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Focus_MoveToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Focus_MoveToPoint::Focus_MoveToPoint(
    ::google::protobuf::Arena* arena,
    const Focus_MoveToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Focus_MoveToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.Focus_MoveToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Focus_MoveToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Focus_MoveToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_point_ = {};
}
Focus_MoveToPoint::~Focus_MoveToPoint() {
  // @@protoc_insertion_point(destructor:protos.Focus_MoveToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Focus_MoveToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Focus_MoveToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Focus_MoveToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Focus_MoveToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Focus_MoveToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Focus_MoveToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Focus_MoveToPoint>(), &Focus_MoveToPoint::ByteSizeLong,
                &Focus_MoveToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Focus_MoveToPoint, _impl_._cached_size_),
            false,
        },
        &Focus_MoveToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Focus_MoveToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Focus_MoveToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Focus_MoveToPoint, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Focus_MoveToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Focus_MoveToPoint, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Focus_MoveToPoint, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Focus_MoveToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Focus_MoveToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Focus_MoveToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Focus_MoveToPoint& this_ = static_cast<const Focus_MoveToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Focus_MoveToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Focus_MoveToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Focus_MoveToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Focus_MoveToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Focus_MoveToPoint::ByteSizeLong(const MessageLite& base) {
          const Focus_MoveToPoint& this_ = static_cast<const Focus_MoveToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Focus_MoveToPoint::ByteSizeLong() const {
          const Focus_MoveToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Focus_MoveToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Focus_MoveToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Focus_MoveToPoint*>(&to_msg);
  auto& from = static_cast<const Focus_MoveToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Focus_MoveToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Focus_MoveToPoint::CopyFrom(const Focus_MoveToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Focus_MoveToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Focus_MoveToPoint::InternalSwap(Focus_MoveToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_point_, other->_impl_.target_point_);
}

::google::protobuf::Metadata Focus_MoveToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Focus_Reset::_Internal {
 public:
};

Focus_Reset::Focus_Reset(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Focus_Reset)
}
Focus_Reset::Focus_Reset(
    ::google::protobuf::Arena* arena,
    const Focus_Reset& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Focus_Reset* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Focus_Reset)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Focus_Reset::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Focus_Reset_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Focus_Reset::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Focus_Reset>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Focus_Reset>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Focus_Reset>(), &Focus_Reset::ByteSizeLong,
                &Focus_Reset::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Focus_Reset, _impl_._cached_size_),
            false,
        },
        &Focus_Reset::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Focus_Reset::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Focus_Reset::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Focus_Reset>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Focus_Reset::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_ScanField::_Internal {
 public:
};

Neck_ScanField::Neck_ScanField(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Neck_ScanField)
}
Neck_ScanField::Neck_ScanField(
    ::google::protobuf::Arena* arena,
    const Neck_ScanField& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Neck_ScanField* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Neck_ScanField)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_ScanField::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Neck_ScanField_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_ScanField::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Neck_ScanField>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Neck_ScanField>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Neck_ScanField>(), &Neck_ScanField::ByteSizeLong,
                &Neck_ScanField::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_ScanField, _impl_._cached_size_),
            false,
        },
        &Neck_ScanField::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_ScanField::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Neck_ScanField::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_ScanField>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Neck_ScanField::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_ScanPlayers::_Internal {
 public:
};

Neck_ScanPlayers::Neck_ScanPlayers(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Neck_ScanPlayers)
}
Neck_ScanPlayers::Neck_ScanPlayers(
    ::google::protobuf::Arena* arena,
    const Neck_ScanPlayers& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Neck_ScanPlayers* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Neck_ScanPlayers)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_ScanPlayers::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Neck_ScanPlayers_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_ScanPlayers::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Neck_ScanPlayers>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Neck_ScanPlayers>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Neck_ScanPlayers>(), &Neck_ScanPlayers::ByteSizeLong,
                &Neck_ScanPlayers::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_ScanPlayers, _impl_._cached_size_),
            false,
        },
        &Neck_ScanPlayers::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_ScanPlayers::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Neck_ScanPlayers::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_ScanPlayers>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Neck_ScanPlayers::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToBallAndPlayer::_Internal {
 public:
};

Neck_TurnToBallAndPlayer::Neck_TurnToBallAndPlayer(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToBallAndPlayer)
}
Neck_TurnToBallAndPlayer::Neck_TurnToBallAndPlayer(
    ::google::protobuf::Arena* arena, const Neck_TurnToBallAndPlayer& from)
    : Neck_TurnToBallAndPlayer(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToBallAndPlayer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToBallAndPlayer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           0,
           offsetof(Impl_, count_threshold_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::count_threshold_));
}
Neck_TurnToBallAndPlayer::~Neck_TurnToBallAndPlayer() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToBallAndPlayer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToBallAndPlayer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToBallAndPlayer::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToBallAndPlayer_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToBallAndPlayer::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToBallAndPlayer>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToBallAndPlayer>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToBallAndPlayer>(), &Neck_TurnToBallAndPlayer::ByteSizeLong,
                &Neck_TurnToBallAndPlayer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToBallAndPlayer::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToBallAndPlayer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Neck_TurnToBallAndPlayer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToBallAndPlayer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.Side side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToBallAndPlayer, _impl_.side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.side_)}},
    // int32 uniform_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToBallAndPlayer, _impl_.uniform_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.uniform_number_)}},
    // int32 count_threshold = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToBallAndPlayer, _impl_.count_threshold_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.count_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.Side side = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 uniform_number = 2;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 count_threshold = 3;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.count_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToBallAndPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToBallAndPlayer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_threshold_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.count_threshold_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToBallAndPlayer::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToBallAndPlayer& this_ = static_cast<const Neck_TurnToBallAndPlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToBallAndPlayer::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToBallAndPlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToBallAndPlayer)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.Side side = 1;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_side(), target);
          }

          // int32 uniform_number = 2;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 count_threshold = 3;
          if (this_._internal_count_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_count_threshold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToBallAndPlayer)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToBallAndPlayer::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToBallAndPlayer& this_ = static_cast<const Neck_TurnToBallAndPlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToBallAndPlayer::ByteSizeLong() const {
          const Neck_TurnToBallAndPlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToBallAndPlayer)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.Side side = 1;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // int32 uniform_number = 2;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 count_threshold = 3;
            if (this_._internal_count_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_count_threshold());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToBallAndPlayer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToBallAndPlayer*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToBallAndPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToBallAndPlayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_count_threshold() != 0) {
    _this->_impl_.count_threshold_ = from._impl_.count_threshold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToBallAndPlayer::CopyFrom(const Neck_TurnToBallAndPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToBallAndPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToBallAndPlayer::InternalSwap(Neck_TurnToBallAndPlayer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.count_threshold_)
      + sizeof(Neck_TurnToBallAndPlayer::_impl_.count_threshold_)
      - PROTOBUF_FIELD_OFFSET(Neck_TurnToBallAndPlayer, _impl_.side_)>(
          reinterpret_cast<char*>(&_impl_.side_),
          reinterpret_cast<char*>(&other->_impl_.side_));
}

::google::protobuf::Metadata Neck_TurnToBallAndPlayer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToBallOrScan::_Internal {
 public:
};

Neck_TurnToBallOrScan::Neck_TurnToBallOrScan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToBallOrScan)
}
Neck_TurnToBallOrScan::Neck_TurnToBallOrScan(
    ::google::protobuf::Arena* arena, const Neck_TurnToBallOrScan& from)
    : Neck_TurnToBallOrScan(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToBallOrScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToBallOrScan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_threshold_ = {};
}
Neck_TurnToBallOrScan::~Neck_TurnToBallOrScan() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToBallOrScan)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToBallOrScan::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToBallOrScan::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToBallOrScan_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToBallOrScan::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToBallOrScan>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToBallOrScan>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToBallOrScan>(), &Neck_TurnToBallOrScan::ByteSizeLong,
                &Neck_TurnToBallOrScan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToBallOrScan, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToBallOrScan::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToBallOrScan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Neck_TurnToBallOrScan::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToBallOrScan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 count_threshold = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToBallOrScan, _impl_.count_threshold_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToBallOrScan, _impl_.count_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 count_threshold = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToBallOrScan, _impl_.count_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToBallOrScan::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToBallOrScan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_threshold_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToBallOrScan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToBallOrScan& this_ = static_cast<const Neck_TurnToBallOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToBallOrScan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToBallOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToBallOrScan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 count_threshold = 1;
          if (this_._internal_count_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_count_threshold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToBallOrScan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToBallOrScan::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToBallOrScan& this_ = static_cast<const Neck_TurnToBallOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToBallOrScan::ByteSizeLong() const {
          const Neck_TurnToBallOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToBallOrScan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 count_threshold = 1;
            if (this_._internal_count_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_count_threshold());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToBallOrScan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToBallOrScan*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToBallOrScan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToBallOrScan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count_threshold() != 0) {
    _this->_impl_.count_threshold_ = from._impl_.count_threshold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToBallOrScan::CopyFrom(const Neck_TurnToBallOrScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToBallOrScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToBallOrScan::InternalSwap(Neck_TurnToBallOrScan* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.count_threshold_, other->_impl_.count_threshold_);
}

::google::protobuf::Metadata Neck_TurnToBallOrScan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToBall::_Internal {
 public:
};

Neck_TurnToBall::Neck_TurnToBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToBall)
}
Neck_TurnToBall::Neck_TurnToBall(
    ::google::protobuf::Arena* arena,
    const Neck_TurnToBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Neck_TurnToBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Neck_TurnToBall)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToBall::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Neck_TurnToBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Neck_TurnToBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Neck_TurnToBall>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Neck_TurnToBall>(), &Neck_TurnToBall::ByteSizeLong,
                &Neck_TurnToBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToBall, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Neck_TurnToBall::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Neck_TurnToBall::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToGoalieOrScan::_Internal {
 public:
};

Neck_TurnToGoalieOrScan::Neck_TurnToGoalieOrScan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToGoalieOrScan)
}
Neck_TurnToGoalieOrScan::Neck_TurnToGoalieOrScan(
    ::google::protobuf::Arena* arena, const Neck_TurnToGoalieOrScan& from)
    : Neck_TurnToGoalieOrScan(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToGoalieOrScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToGoalieOrScan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_threshold_ = {};
}
Neck_TurnToGoalieOrScan::~Neck_TurnToGoalieOrScan() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToGoalieOrScan)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToGoalieOrScan::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToGoalieOrScan::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToGoalieOrScan_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToGoalieOrScan::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToGoalieOrScan>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToGoalieOrScan>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToGoalieOrScan>(), &Neck_TurnToGoalieOrScan::ByteSizeLong,
                &Neck_TurnToGoalieOrScan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToGoalieOrScan, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToGoalieOrScan::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToGoalieOrScan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Neck_TurnToGoalieOrScan::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToGoalieOrScan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 count_threshold = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToGoalieOrScan, _impl_.count_threshold_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToGoalieOrScan, _impl_.count_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 count_threshold = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToGoalieOrScan, _impl_.count_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToGoalieOrScan::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToGoalieOrScan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_threshold_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToGoalieOrScan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToGoalieOrScan& this_ = static_cast<const Neck_TurnToGoalieOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToGoalieOrScan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToGoalieOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToGoalieOrScan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 count_threshold = 1;
          if (this_._internal_count_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_count_threshold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToGoalieOrScan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToGoalieOrScan::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToGoalieOrScan& this_ = static_cast<const Neck_TurnToGoalieOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToGoalieOrScan::ByteSizeLong() const {
          const Neck_TurnToGoalieOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToGoalieOrScan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 count_threshold = 1;
            if (this_._internal_count_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_count_threshold());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToGoalieOrScan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToGoalieOrScan*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToGoalieOrScan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToGoalieOrScan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count_threshold() != 0) {
    _this->_impl_.count_threshold_ = from._impl_.count_threshold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToGoalieOrScan::CopyFrom(const Neck_TurnToGoalieOrScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToGoalieOrScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToGoalieOrScan::InternalSwap(Neck_TurnToGoalieOrScan* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.count_threshold_, other->_impl_.count_threshold_);
}

::google::protobuf::Metadata Neck_TurnToGoalieOrScan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToLowConfTeammate::_Internal {
 public:
};

Neck_TurnToLowConfTeammate::Neck_TurnToLowConfTeammate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToLowConfTeammate)
}
Neck_TurnToLowConfTeammate::Neck_TurnToLowConfTeammate(
    ::google::protobuf::Arena* arena,
    const Neck_TurnToLowConfTeammate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Neck_TurnToLowConfTeammate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Neck_TurnToLowConfTeammate)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToLowConfTeammate::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Neck_TurnToLowConfTeammate_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToLowConfTeammate::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Neck_TurnToLowConfTeammate>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Neck_TurnToLowConfTeammate>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Neck_TurnToLowConfTeammate>(), &Neck_TurnToLowConfTeammate::ByteSizeLong,
                &Neck_TurnToLowConfTeammate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToLowConfTeammate, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToLowConfTeammate::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToLowConfTeammate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Neck_TurnToLowConfTeammate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToLowConfTeammate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Neck_TurnToLowConfTeammate::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToPlayerOrScan::_Internal {
 public:
};

Neck_TurnToPlayerOrScan::Neck_TurnToPlayerOrScan(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToPlayerOrScan)
}
Neck_TurnToPlayerOrScan::Neck_TurnToPlayerOrScan(
    ::google::protobuf::Arena* arena, const Neck_TurnToPlayerOrScan& from)
    : Neck_TurnToPlayerOrScan(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToPlayerOrScan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToPlayerOrScan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           0,
           offsetof(Impl_, count_threshold_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::count_threshold_));
}
Neck_TurnToPlayerOrScan::~Neck_TurnToPlayerOrScan() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToPlayerOrScan)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToPlayerOrScan::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToPlayerOrScan::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToPlayerOrScan_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToPlayerOrScan::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToPlayerOrScan>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToPlayerOrScan>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToPlayerOrScan>(), &Neck_TurnToPlayerOrScan::ByteSizeLong,
                &Neck_TurnToPlayerOrScan::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToPlayerOrScan::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToPlayerOrScan::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Neck_TurnToPlayerOrScan::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToPlayerOrScan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.Side side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToPlayerOrScan, _impl_.side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.side_)}},
    // int32 uniform_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToPlayerOrScan, _impl_.uniform_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.uniform_number_)}},
    // int32 count_threshold = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Neck_TurnToPlayerOrScan, _impl_.count_threshold_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.count_threshold_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.Side side = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 uniform_number = 2;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 count_threshold = 3;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.count_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToPlayerOrScan::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToPlayerOrScan)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_threshold_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.count_threshold_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToPlayerOrScan::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToPlayerOrScan& this_ = static_cast<const Neck_TurnToPlayerOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToPlayerOrScan::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToPlayerOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToPlayerOrScan)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.Side side = 1;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_side(), target);
          }

          // int32 uniform_number = 2;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 count_threshold = 3;
          if (this_._internal_count_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_count_threshold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToPlayerOrScan)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToPlayerOrScan::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToPlayerOrScan& this_ = static_cast<const Neck_TurnToPlayerOrScan&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToPlayerOrScan::ByteSizeLong() const {
          const Neck_TurnToPlayerOrScan& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToPlayerOrScan)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.Side side = 1;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // int32 uniform_number = 2;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 count_threshold = 3;
            if (this_._internal_count_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_count_threshold());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToPlayerOrScan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToPlayerOrScan*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToPlayerOrScan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToPlayerOrScan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_count_threshold() != 0) {
    _this->_impl_.count_threshold_ = from._impl_.count_threshold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToPlayerOrScan::CopyFrom(const Neck_TurnToPlayerOrScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToPlayerOrScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToPlayerOrScan::InternalSwap(Neck_TurnToPlayerOrScan* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.count_threshold_)
      + sizeof(Neck_TurnToPlayerOrScan::_impl_.count_threshold_)
      - PROTOBUF_FIELD_OFFSET(Neck_TurnToPlayerOrScan, _impl_.side_)>(
          reinterpret_cast<char*>(&_impl_.side_),
          reinterpret_cast<char*>(&other->_impl_.side_));
}

::google::protobuf::Metadata Neck_TurnToPlayerOrScan::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Neck_TurnToPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Neck_TurnToPoint, _impl_._has_bits_);
};

Neck_TurnToPoint::Neck_TurnToPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::Neck_TurnToPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Neck_TurnToPoint::Neck_TurnToPoint(
    ::google::protobuf::Arena* arena,
    const Neck_TurnToPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Neck_TurnToPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.Neck_TurnToPoint)
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_point_ = {};
}
Neck_TurnToPoint::~Neck_TurnToPoint() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToPoint>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToPoint>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToPoint>(), &Neck_TurnToPoint::ByteSizeLong,
                &Neck_TurnToPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToPoint, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToPoint::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Neck_TurnToPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Neck_TurnToPoint, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D target_point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToPoint, _impl_.target_point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D target_point = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToPoint, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToPoint& this_ = static_cast<const Neck_TurnToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToPoint::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToPoint& this_ = static_cast<const Neck_TurnToPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToPoint::ByteSizeLong() const {
          const Neck_TurnToPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.RpcVector2D target_point = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToPoint*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToPoint::CopyFrom(const Neck_TurnToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToPoint::InternalSwap(Neck_TurnToPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_point_, other->_impl_.target_point_);
}

::google::protobuf::Metadata Neck_TurnToPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Neck_TurnToRelative::_Internal {
 public:
};

Neck_TurnToRelative::Neck_TurnToRelative(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Neck_TurnToRelative)
}
Neck_TurnToRelative::Neck_TurnToRelative(
    ::google::protobuf::Arena* arena, const Neck_TurnToRelative& from)
    : Neck_TurnToRelative(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Neck_TurnToRelative::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Neck_TurnToRelative::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.angle_ = {};
}
Neck_TurnToRelative::~Neck_TurnToRelative() {
  // @@protoc_insertion_point(destructor:protos.Neck_TurnToRelative)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Neck_TurnToRelative::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Neck_TurnToRelative::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Neck_TurnToRelative_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Neck_TurnToRelative::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Neck_TurnToRelative>(),
            ::google::protobuf::Message::GetNewImpl<Neck_TurnToRelative>(),
            ::google::protobuf::Message::GetClearImpl<Neck_TurnToRelative>(), &Neck_TurnToRelative::ByteSizeLong,
                &Neck_TurnToRelative::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Neck_TurnToRelative, _impl_._cached_size_),
            false,
        },
        &Neck_TurnToRelative::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Neck_TurnToRelative::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Neck_TurnToRelative::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Neck_TurnToRelative>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float angle = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Neck_TurnToRelative, _impl_.angle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float angle = 1;
    {PROTOBUF_FIELD_OFFSET(Neck_TurnToRelative, _impl_.angle_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Neck_TurnToRelative::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Neck_TurnToRelative)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.angle_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Neck_TurnToRelative::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Neck_TurnToRelative& this_ = static_cast<const Neck_TurnToRelative&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Neck_TurnToRelative::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Neck_TurnToRelative& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.Neck_TurnToRelative)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float angle = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_angle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.Neck_TurnToRelative)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Neck_TurnToRelative::ByteSizeLong(const MessageLite& base) {
          const Neck_TurnToRelative& this_ = static_cast<const Neck_TurnToRelative&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Neck_TurnToRelative::ByteSizeLong() const {
          const Neck_TurnToRelative& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.Neck_TurnToRelative)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float angle = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angle()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Neck_TurnToRelative::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Neck_TurnToRelative*>(&to_msg);
  auto& from = static_cast<const Neck_TurnToRelative&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Neck_TurnToRelative)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_angle()) != 0) {
    _this->_impl_.angle_ = from._impl_.angle_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Neck_TurnToRelative::CopyFrom(const Neck_TurnToRelative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Neck_TurnToRelative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Neck_TurnToRelative::InternalSwap(Neck_TurnToRelative* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.angle_, other->_impl_.angle_);
}

::google::protobuf::Metadata Neck_TurnToRelative::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class View_ChangeWidth::_Internal {
 public:
};

View_ChangeWidth::View_ChangeWidth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.View_ChangeWidth)
}
View_ChangeWidth::View_ChangeWidth(
    ::google::protobuf::Arena* arena, const View_ChangeWidth& from)
    : View_ChangeWidth(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE View_ChangeWidth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void View_ChangeWidth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.view_width_ = {};
}
View_ChangeWidth::~View_ChangeWidth() {
  // @@protoc_insertion_point(destructor:protos.View_ChangeWidth)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void View_ChangeWidth::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    View_ChangeWidth::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_View_ChangeWidth_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &View_ChangeWidth::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<View_ChangeWidth>(),
            ::google::protobuf::Message::GetNewImpl<View_ChangeWidth>(),
            ::google::protobuf::Message::GetClearImpl<View_ChangeWidth>(), &View_ChangeWidth::ByteSizeLong,
                &View_ChangeWidth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(View_ChangeWidth, _impl_._cached_size_),
            false,
        },
        &View_ChangeWidth::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* View_ChangeWidth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> View_ChangeWidth::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::View_ChangeWidth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.ViewWidth view_width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(View_ChangeWidth, _impl_.view_width_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(View_ChangeWidth, _impl_.view_width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.ViewWidth view_width = 1;
    {PROTOBUF_FIELD_OFFSET(View_ChangeWidth, _impl_.view_width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void View_ChangeWidth::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.View_ChangeWidth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_width_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* View_ChangeWidth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const View_ChangeWidth& this_ = static_cast<const View_ChangeWidth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* View_ChangeWidth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const View_ChangeWidth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.View_ChangeWidth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.ViewWidth view_width = 1;
          if (this_._internal_view_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_view_width(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.View_ChangeWidth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t View_ChangeWidth::ByteSizeLong(const MessageLite& base) {
          const View_ChangeWidth& this_ = static_cast<const View_ChangeWidth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t View_ChangeWidth::ByteSizeLong() const {
          const View_ChangeWidth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.View_ChangeWidth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .protos.ViewWidth view_width = 1;
            if (this_._internal_view_width() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_view_width());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void View_ChangeWidth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<View_ChangeWidth*>(&to_msg);
  auto& from = static_cast<const View_ChangeWidth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.View_ChangeWidth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_view_width() != 0) {
    _this->_impl_.view_width_ = from._impl_.view_width_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void View_ChangeWidth::CopyFrom(const View_ChangeWidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.View_ChangeWidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void View_ChangeWidth::InternalSwap(View_ChangeWidth* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.view_width_, other->_impl_.view_width_);
}

::google::protobuf::Metadata View_ChangeWidth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class View_Normal::_Internal {
 public:
};

View_Normal::View_Normal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.View_Normal)
}
View_Normal::View_Normal(
    ::google::protobuf::Arena* arena,
    const View_Normal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  View_Normal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.View_Normal)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    View_Normal::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_View_Normal_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &View_Normal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<View_Normal>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<View_Normal>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<View_Normal>(), &View_Normal::ByteSizeLong,
                &View_Normal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(View_Normal, _impl_._cached_size_),
            false,
        },
        &View_Normal::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* View_Normal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> View_Normal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::View_Normal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata View_Normal::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class View_Synch::_Internal {
 public:
};

View_Synch::View_Synch(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.View_Synch)
}
View_Synch::View_Synch(
    ::google::protobuf::Arena* arena,
    const View_Synch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  View_Synch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.View_Synch)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    View_Synch::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_View_Synch_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &View_Synch::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<View_Synch>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<View_Synch>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<View_Synch>(), &View_Synch::ByteSizeLong,
                &View_Synch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(View_Synch, _impl_._cached_size_),
            false,
        },
        &View_Synch::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* View_Synch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> View_Synch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::View_Synch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata View_Synch::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class View_Wide::_Internal {
 public:
};

View_Wide::View_Wide(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.View_Wide)
}
View_Wide::View_Wide(
    ::google::protobuf::Arena* arena,
    const View_Wide& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  View_Wide* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.View_Wide)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    View_Wide::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_View_Wide_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &View_Wide::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<View_Wide>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<View_Wide>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<View_Wide>(), &View_Wide::ByteSizeLong,
                &View_Wide::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(View_Wide, _impl_._cached_size_),
            false,
        },
        &View_Wide::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* View_Wide::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> View_Wide::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::View_Wide>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata View_Wide::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosGoalie::_Internal {
 public:
};

HeliosGoalie::HeliosGoalie(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosGoalie)
}
HeliosGoalie::HeliosGoalie(
    ::google::protobuf::Arena* arena,
    const HeliosGoalie& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosGoalie* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosGoalie)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosGoalie::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosGoalie_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosGoalie::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosGoalie>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosGoalie>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosGoalie>(), &HeliosGoalie::ByteSizeLong,
                &HeliosGoalie::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosGoalie, _impl_._cached_size_),
            false,
        },
        &HeliosGoalie::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosGoalie::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosGoalie::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosGoalie>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosGoalie::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosGoalieMove::_Internal {
 public:
};

HeliosGoalieMove::HeliosGoalieMove(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosGoalieMove)
}
HeliosGoalieMove::HeliosGoalieMove(
    ::google::protobuf::Arena* arena,
    const HeliosGoalieMove& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosGoalieMove* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosGoalieMove)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosGoalieMove::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosGoalieMove_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosGoalieMove::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosGoalieMove>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosGoalieMove>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosGoalieMove>(), &HeliosGoalieMove::ByteSizeLong,
                &HeliosGoalieMove::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosGoalieMove, _impl_._cached_size_),
            false,
        },
        &HeliosGoalieMove::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosGoalieMove::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosGoalieMove::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosGoalieMove>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosGoalieMove::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosGoalieKick::_Internal {
 public:
};

HeliosGoalieKick::HeliosGoalieKick(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosGoalieKick)
}
HeliosGoalieKick::HeliosGoalieKick(
    ::google::protobuf::Arena* arena,
    const HeliosGoalieKick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosGoalieKick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosGoalieKick)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosGoalieKick::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosGoalieKick_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosGoalieKick::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosGoalieKick>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosGoalieKick>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosGoalieKick>(), &HeliosGoalieKick::ByteSizeLong,
                &HeliosGoalieKick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosGoalieKick, _impl_._cached_size_),
            false,
        },
        &HeliosGoalieKick::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosGoalieKick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosGoalieKick::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosGoalieKick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosGoalieKick::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosShoot::_Internal {
 public:
};

HeliosShoot::HeliosShoot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosShoot)
}
HeliosShoot::HeliosShoot(
    ::google::protobuf::Arena* arena,
    const HeliosShoot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosShoot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosShoot)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosShoot::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosShoot_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosShoot::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosShoot>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosShoot>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosShoot>(), &HeliosShoot::ByteSizeLong,
                &HeliosShoot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosShoot, _impl_._cached_size_),
            false,
        },
        &HeliosShoot::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosShoot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosShoot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosShoot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosShoot::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosOffensivePlanner::_Internal {
 public:
};

HeliosOffensivePlanner::HeliosOffensivePlanner(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.HeliosOffensivePlanner)
}
HeliosOffensivePlanner::HeliosOffensivePlanner(
    ::google::protobuf::Arena* arena, const HeliosOffensivePlanner& from)
    : HeliosOffensivePlanner(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE HeliosOffensivePlanner::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HeliosOffensivePlanner::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, direct_pass_),
           0,
           offsetof(Impl_, server_side_decision_) -
               offsetof(Impl_, direct_pass_) +
               sizeof(Impl_::server_side_decision_));
}
HeliosOffensivePlanner::~HeliosOffensivePlanner() {
  // @@protoc_insertion_point(destructor:protos.HeliosOffensivePlanner)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HeliosOffensivePlanner::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosOffensivePlanner::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_HeliosOffensivePlanner_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosOffensivePlanner::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<HeliosOffensivePlanner>(),
            ::google::protobuf::Message::GetNewImpl<HeliosOffensivePlanner>(),
            ::google::protobuf::Message::GetClearImpl<HeliosOffensivePlanner>(), &HeliosOffensivePlanner::ByteSizeLong,
                &HeliosOffensivePlanner::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_._cached_size_),
            false,
        },
        &HeliosOffensivePlanner::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosOffensivePlanner::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> HeliosOffensivePlanner::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosOffensivePlanner>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool direct_pass = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.direct_pass_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.direct_pass_)}},
    // bool lead_pass = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.lead_pass_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.lead_pass_)}},
    // bool through_pass = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.through_pass_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.through_pass_)}},
    // bool short_dribble = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.short_dribble_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.short_dribble_)}},
    // bool long_dribble = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.long_dribble_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.long_dribble_)}},
    // bool cross = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.cross_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.cross_)}},
    // bool simple_pass = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.simple_pass_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_pass_)}},
    // bool simple_dribble = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.simple_dribble_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_dribble_)}},
    // bool simple_shoot = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.simple_shoot_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_shoot_)}},
    // bool server_side_decision = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HeliosOffensivePlanner, _impl_.server_side_decision_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.server_side_decision_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool direct_pass = 1;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.direct_pass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool lead_pass = 2;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.lead_pass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool through_pass = 3;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.through_pass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool short_dribble = 4;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.short_dribble_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool long_dribble = 5;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.long_dribble_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool cross = 6;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.cross_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool simple_pass = 7;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_pass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool simple_dribble = 8;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_dribble_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool simple_shoot = 9;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.simple_shoot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool server_side_decision = 10;
    {PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.server_side_decision_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void HeliosOffensivePlanner::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.HeliosOffensivePlanner)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.direct_pass_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.server_side_decision_) -
      reinterpret_cast<char*>(&_impl_.direct_pass_)) + sizeof(_impl_.server_side_decision_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HeliosOffensivePlanner::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HeliosOffensivePlanner& this_ = static_cast<const HeliosOffensivePlanner&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HeliosOffensivePlanner::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HeliosOffensivePlanner& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.HeliosOffensivePlanner)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool direct_pass = 1;
          if (this_._internal_direct_pass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_direct_pass(), target);
          }

          // bool lead_pass = 2;
          if (this_._internal_lead_pass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_lead_pass(), target);
          }

          // bool through_pass = 3;
          if (this_._internal_through_pass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_through_pass(), target);
          }

          // bool short_dribble = 4;
          if (this_._internal_short_dribble() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_short_dribble(), target);
          }

          // bool long_dribble = 5;
          if (this_._internal_long_dribble() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_long_dribble(), target);
          }

          // bool cross = 6;
          if (this_._internal_cross() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_cross(), target);
          }

          // bool simple_pass = 7;
          if (this_._internal_simple_pass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_simple_pass(), target);
          }

          // bool simple_dribble = 8;
          if (this_._internal_simple_dribble() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_simple_dribble(), target);
          }

          // bool simple_shoot = 9;
          if (this_._internal_simple_shoot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_simple_shoot(), target);
          }

          // bool server_side_decision = 10;
          if (this_._internal_server_side_decision() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_server_side_decision(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.HeliosOffensivePlanner)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HeliosOffensivePlanner::ByteSizeLong(const MessageLite& base) {
          const HeliosOffensivePlanner& this_ = static_cast<const HeliosOffensivePlanner&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HeliosOffensivePlanner::ByteSizeLong() const {
          const HeliosOffensivePlanner& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.HeliosOffensivePlanner)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool direct_pass = 1;
            if (this_._internal_direct_pass() != 0) {
              total_size += 2;
            }
            // bool lead_pass = 2;
            if (this_._internal_lead_pass() != 0) {
              total_size += 2;
            }
            // bool through_pass = 3;
            if (this_._internal_through_pass() != 0) {
              total_size += 2;
            }
            // bool short_dribble = 4;
            if (this_._internal_short_dribble() != 0) {
              total_size += 2;
            }
            // bool long_dribble = 5;
            if (this_._internal_long_dribble() != 0) {
              total_size += 2;
            }
            // bool cross = 6;
            if (this_._internal_cross() != 0) {
              total_size += 2;
            }
            // bool simple_pass = 7;
            if (this_._internal_simple_pass() != 0) {
              total_size += 2;
            }
            // bool simple_dribble = 8;
            if (this_._internal_simple_dribble() != 0) {
              total_size += 2;
            }
            // bool simple_shoot = 9;
            if (this_._internal_simple_shoot() != 0) {
              total_size += 2;
            }
            // bool server_side_decision = 10;
            if (this_._internal_server_side_decision() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HeliosOffensivePlanner::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HeliosOffensivePlanner*>(&to_msg);
  auto& from = static_cast<const HeliosOffensivePlanner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.HeliosOffensivePlanner)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_direct_pass() != 0) {
    _this->_impl_.direct_pass_ = from._impl_.direct_pass_;
  }
  if (from._internal_lead_pass() != 0) {
    _this->_impl_.lead_pass_ = from._impl_.lead_pass_;
  }
  if (from._internal_through_pass() != 0) {
    _this->_impl_.through_pass_ = from._impl_.through_pass_;
  }
  if (from._internal_short_dribble() != 0) {
    _this->_impl_.short_dribble_ = from._impl_.short_dribble_;
  }
  if (from._internal_long_dribble() != 0) {
    _this->_impl_.long_dribble_ = from._impl_.long_dribble_;
  }
  if (from._internal_cross() != 0) {
    _this->_impl_.cross_ = from._impl_.cross_;
  }
  if (from._internal_simple_pass() != 0) {
    _this->_impl_.simple_pass_ = from._impl_.simple_pass_;
  }
  if (from._internal_simple_dribble() != 0) {
    _this->_impl_.simple_dribble_ = from._impl_.simple_dribble_;
  }
  if (from._internal_simple_shoot() != 0) {
    _this->_impl_.simple_shoot_ = from._impl_.simple_shoot_;
  }
  if (from._internal_server_side_decision() != 0) {
    _this->_impl_.server_side_decision_ = from._impl_.server_side_decision_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HeliosOffensivePlanner::CopyFrom(const HeliosOffensivePlanner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.HeliosOffensivePlanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HeliosOffensivePlanner::InternalSwap(HeliosOffensivePlanner* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.server_side_decision_)
      + sizeof(HeliosOffensivePlanner::_impl_.server_side_decision_)
      - PROTOBUF_FIELD_OFFSET(HeliosOffensivePlanner, _impl_.direct_pass_)>(
          reinterpret_cast<char*>(&_impl_.direct_pass_),
          reinterpret_cast<char*>(&other->_impl_.direct_pass_));
}

::google::protobuf::Metadata HeliosOffensivePlanner::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosBasicOffensive::_Internal {
 public:
};

HeliosBasicOffensive::HeliosBasicOffensive(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosBasicOffensive)
}
HeliosBasicOffensive::HeliosBasicOffensive(
    ::google::protobuf::Arena* arena,
    const HeliosBasicOffensive& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosBasicOffensive* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosBasicOffensive)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosBasicOffensive::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosBasicOffensive_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosBasicOffensive::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosBasicOffensive>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosBasicOffensive>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosBasicOffensive>(), &HeliosBasicOffensive::ByteSizeLong,
                &HeliosBasicOffensive::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosBasicOffensive, _impl_._cached_size_),
            false,
        },
        &HeliosBasicOffensive::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosBasicOffensive::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosBasicOffensive::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosBasicOffensive>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosBasicOffensive::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosBasicMove::_Internal {
 public:
};

HeliosBasicMove::HeliosBasicMove(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosBasicMove)
}
HeliosBasicMove::HeliosBasicMove(
    ::google::protobuf::Arena* arena,
    const HeliosBasicMove& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosBasicMove* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosBasicMove)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosBasicMove::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosBasicMove_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosBasicMove::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosBasicMove>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosBasicMove>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosBasicMove>(), &HeliosBasicMove::ByteSizeLong,
                &HeliosBasicMove::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosBasicMove, _impl_._cached_size_),
            false,
        },
        &HeliosBasicMove::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosBasicMove::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosBasicMove::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosBasicMove>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosBasicMove::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosSetPlay::_Internal {
 public:
};

HeliosSetPlay::HeliosSetPlay(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosSetPlay)
}
HeliosSetPlay::HeliosSetPlay(
    ::google::protobuf::Arena* arena,
    const HeliosSetPlay& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosSetPlay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosSetPlay)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosSetPlay::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosSetPlay_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosSetPlay::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosSetPlay>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosSetPlay>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosSetPlay>(), &HeliosSetPlay::ByteSizeLong,
                &HeliosSetPlay::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosSetPlay, _impl_._cached_size_),
            false,
        },
        &HeliosSetPlay::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosSetPlay::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosSetPlay::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosSetPlay>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosSetPlay::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosPenalty::_Internal {
 public:
};

HeliosPenalty::HeliosPenalty(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosPenalty)
}
HeliosPenalty::HeliosPenalty(
    ::google::protobuf::Arena* arena,
    const HeliosPenalty& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosPenalty* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosPenalty)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosPenalty::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosPenalty_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosPenalty::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosPenalty>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosPenalty>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosPenalty>(), &HeliosPenalty::ByteSizeLong,
                &HeliosPenalty::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosPenalty, _impl_._cached_size_),
            false,
        },
        &HeliosPenalty::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosPenalty::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosPenalty::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosPenalty>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosPenalty::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeliosCommunicaion::_Internal {
 public:
};

HeliosCommunicaion::HeliosCommunicaion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.HeliosCommunicaion)
}
HeliosCommunicaion::HeliosCommunicaion(
    ::google::protobuf::Arena* arena,
    const HeliosCommunicaion& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeliosCommunicaion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.HeliosCommunicaion)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeliosCommunicaion::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_HeliosCommunicaion_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeliosCommunicaion::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<HeliosCommunicaion>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<HeliosCommunicaion>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<HeliosCommunicaion>(), &HeliosCommunicaion::ByteSizeLong,
                &HeliosCommunicaion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeliosCommunicaion, _impl_._cached_size_),
            false,
        },
        &HeliosCommunicaion::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeliosCommunicaion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> HeliosCommunicaion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::HeliosCommunicaion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata HeliosCommunicaion::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerAction::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::protos::PlayerAction, _impl_._oneof_case_);
};

void PlayerAction::set_allocated_dash(::protos::Dash* dash) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (dash) {
    ::google::protobuf::Arena* submessage_arena = dash->GetArena();
    if (message_arena != submessage_arena) {
      dash = ::google::protobuf::internal::GetOwnedMessage(message_arena, dash, submessage_arena);
    }
    set_has_dash();
    _impl_.action_.dash_ = dash;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.dash)
}
void PlayerAction::set_allocated_turn(::protos::Turn* turn) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (turn) {
    ::google::protobuf::Arena* submessage_arena = turn->GetArena();
    if (message_arena != submessage_arena) {
      turn = ::google::protobuf::internal::GetOwnedMessage(message_arena, turn, submessage_arena);
    }
    set_has_turn();
    _impl_.action_.turn_ = turn;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.turn)
}
void PlayerAction::set_allocated_kick(::protos::Kick* kick) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (kick) {
    ::google::protobuf::Arena* submessage_arena = kick->GetArena();
    if (message_arena != submessage_arena) {
      kick = ::google::protobuf::internal::GetOwnedMessage(message_arena, kick, submessage_arena);
    }
    set_has_kick();
    _impl_.action_.kick_ = kick;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.kick)
}
void PlayerAction::set_allocated_tackle(::protos::Tackle* tackle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (tackle) {
    ::google::protobuf::Arena* submessage_arena = tackle->GetArena();
    if (message_arena != submessage_arena) {
      tackle = ::google::protobuf::internal::GetOwnedMessage(message_arena, tackle, submessage_arena);
    }
    set_has_tackle();
    _impl_.action_.tackle_ = tackle;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.tackle)
}
void PlayerAction::set_allocated_catch_(::protos::Catch* catch_) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (catch_) {
    ::google::protobuf::Arena* submessage_arena = catch_->GetArena();
    if (message_arena != submessage_arena) {
      catch_ = ::google::protobuf::internal::GetOwnedMessage(message_arena, catch_, submessage_arena);
    }
    set_has_catch_();
    _impl_.action_.catch__ = catch_;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.catch)
}
void PlayerAction::set_allocated_move(::protos::Move* move) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (move) {
    ::google::protobuf::Arena* submessage_arena = move->GetArena();
    if (message_arena != submessage_arena) {
      move = ::google::protobuf::internal::GetOwnedMessage(message_arena, move, submessage_arena);
    }
    set_has_move();
    _impl_.action_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.move)
}
void PlayerAction::set_allocated_turn_neck(::protos::TurnNeck* turn_neck) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (turn_neck) {
    ::google::protobuf::Arena* submessage_arena = turn_neck->GetArena();
    if (message_arena != submessage_arena) {
      turn_neck = ::google::protobuf::internal::GetOwnedMessage(message_arena, turn_neck, submessage_arena);
    }
    set_has_turn_neck();
    _impl_.action_.turn_neck_ = turn_neck;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.turn_neck)
}
void PlayerAction::set_allocated_change_view(::protos::ChangeView* change_view) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (change_view) {
    ::google::protobuf::Arena* submessage_arena = change_view->GetArena();
    if (message_arena != submessage_arena) {
      change_view = ::google::protobuf::internal::GetOwnedMessage(message_arena, change_view, submessage_arena);
    }
    set_has_change_view();
    _impl_.action_.change_view_ = change_view;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.change_view)
}
void PlayerAction::set_allocated_say(::protos::Say* say) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (say) {
    ::google::protobuf::Arena* submessage_arena = say->GetArena();
    if (message_arena != submessage_arena) {
      say = ::google::protobuf::internal::GetOwnedMessage(message_arena, say, submessage_arena);
    }
    set_has_say();
    _impl_.action_.say_ = say;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.say)
}
void PlayerAction::set_allocated_point_to(::protos::PointTo* point_to) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (point_to) {
    ::google::protobuf::Arena* submessage_arena = point_to->GetArena();
    if (message_arena != submessage_arena) {
      point_to = ::google::protobuf::internal::GetOwnedMessage(message_arena, point_to, submessage_arena);
    }
    set_has_point_to();
    _impl_.action_.point_to_ = point_to;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.point_to)
}
void PlayerAction::set_allocated_point_to_of(::protos::PointToOf* point_to_of) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (point_to_of) {
    ::google::protobuf::Arena* submessage_arena = point_to_of->GetArena();
    if (message_arena != submessage_arena) {
      point_to_of = ::google::protobuf::internal::GetOwnedMessage(message_arena, point_to_of, submessage_arena);
    }
    set_has_point_to_of();
    _impl_.action_.point_to_of_ = point_to_of;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.point_to_of)
}
void PlayerAction::set_allocated_attention_to(::protos::AttentionTo* attention_to) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (attention_to) {
    ::google::protobuf::Arena* submessage_arena = attention_to->GetArena();
    if (message_arena != submessage_arena) {
      attention_to = ::google::protobuf::internal::GetOwnedMessage(message_arena, attention_to, submessage_arena);
    }
    set_has_attention_to();
    _impl_.action_.attention_to_ = attention_to;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.attention_to)
}
void PlayerAction::set_allocated_attention_to_of(::protos::AttentionToOf* attention_to_of) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (attention_to_of) {
    ::google::protobuf::Arena* submessage_arena = attention_to_of->GetArena();
    if (message_arena != submessage_arena) {
      attention_to_of = ::google::protobuf::internal::GetOwnedMessage(message_arena, attention_to_of, submessage_arena);
    }
    set_has_attention_to_of();
    _impl_.action_.attention_to_of_ = attention_to_of;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.attention_to_of)
}
void PlayerAction::set_allocated_log(::protos::Log* log) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (log) {
    ::google::protobuf::Arena* submessage_arena = log->GetArena();
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(message_arena, log, submessage_arena);
    }
    set_has_log();
    _impl_.action_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.log)
}
void PlayerAction::set_allocated_debug_client(::protos::DebugClient* debug_client) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (debug_client) {
    ::google::protobuf::Arena* submessage_arena = debug_client->GetArena();
    if (message_arena != submessage_arena) {
      debug_client = ::google::protobuf::internal::GetOwnedMessage(message_arena, debug_client, submessage_arena);
    }
    set_has_debug_client();
    _impl_.action_.debug_client_ = debug_client;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.debug_client)
}
void PlayerAction::set_allocated_body_go_to_point(::protos::Body_GoToPoint* body_go_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_go_to_point) {
    ::google::protobuf::Arena* submessage_arena = body_go_to_point->GetArena();
    if (message_arena != submessage_arena) {
      body_go_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_go_to_point, submessage_arena);
    }
    set_has_body_go_to_point();
    _impl_.action_.body_go_to_point_ = body_go_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_go_to_point)
}
void PlayerAction::set_allocated_body_smart_kick(::protos::Body_SmartKick* body_smart_kick) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_smart_kick) {
    ::google::protobuf::Arena* submessage_arena = body_smart_kick->GetArena();
    if (message_arena != submessage_arena) {
      body_smart_kick = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_smart_kick, submessage_arena);
    }
    set_has_body_smart_kick();
    _impl_.action_.body_smart_kick_ = body_smart_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_smart_kick)
}
void PlayerAction::set_allocated_bhv_before_kick_off(::protos::Bhv_BeforeKickOff* bhv_before_kick_off) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_before_kick_off) {
    ::google::protobuf::Arena* submessage_arena = bhv_before_kick_off->GetArena();
    if (message_arena != submessage_arena) {
      bhv_before_kick_off = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_before_kick_off, submessage_arena);
    }
    set_has_bhv_before_kick_off();
    _impl_.action_.bhv_before_kick_off_ = bhv_before_kick_off;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_before_kick_off)
}
void PlayerAction::set_allocated_bhv_body_neck_to_ball(::protos::Bhv_BodyNeckToBall* bhv_body_neck_to_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_body_neck_to_ball) {
    ::google::protobuf::Arena* submessage_arena = bhv_body_neck_to_ball->GetArena();
    if (message_arena != submessage_arena) {
      bhv_body_neck_to_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_body_neck_to_ball, submessage_arena);
    }
    set_has_bhv_body_neck_to_ball();
    _impl_.action_.bhv_body_neck_to_ball_ = bhv_body_neck_to_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_body_neck_to_ball)
}
void PlayerAction::set_allocated_bhv_body_neck_to_point(::protos::Bhv_BodyNeckToPoint* bhv_body_neck_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_body_neck_to_point) {
    ::google::protobuf::Arena* submessage_arena = bhv_body_neck_to_point->GetArena();
    if (message_arena != submessage_arena) {
      bhv_body_neck_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_body_neck_to_point, submessage_arena);
    }
    set_has_bhv_body_neck_to_point();
    _impl_.action_.bhv_body_neck_to_point_ = bhv_body_neck_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_body_neck_to_point)
}
void PlayerAction::set_allocated_bhv_emergency(::protos::Bhv_Emergency* bhv_emergency) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_emergency) {
    ::google::protobuf::Arena* submessage_arena = bhv_emergency->GetArena();
    if (message_arena != submessage_arena) {
      bhv_emergency = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_emergency, submessage_arena);
    }
    set_has_bhv_emergency();
    _impl_.action_.bhv_emergency_ = bhv_emergency;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_emergency)
}
void PlayerAction::set_allocated_bhv_go_to_point_look_ball(::protos::Bhv_GoToPointLookBall* bhv_go_to_point_look_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_go_to_point_look_ball) {
    ::google::protobuf::Arena* submessage_arena = bhv_go_to_point_look_ball->GetArena();
    if (message_arena != submessage_arena) {
      bhv_go_to_point_look_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_go_to_point_look_ball, submessage_arena);
    }
    set_has_bhv_go_to_point_look_ball();
    _impl_.action_.bhv_go_to_point_look_ball_ = bhv_go_to_point_look_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_go_to_point_look_ball)
}
void PlayerAction::set_allocated_bhv_neck_body_to_ball(::protos::Bhv_NeckBodyToBall* bhv_neck_body_to_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_neck_body_to_ball) {
    ::google::protobuf::Arena* submessage_arena = bhv_neck_body_to_ball->GetArena();
    if (message_arena != submessage_arena) {
      bhv_neck_body_to_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_neck_body_to_ball, submessage_arena);
    }
    set_has_bhv_neck_body_to_ball();
    _impl_.action_.bhv_neck_body_to_ball_ = bhv_neck_body_to_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_neck_body_to_ball)
}
void PlayerAction::set_allocated_bhv_neck_body_to_point(::protos::Bhv_NeckBodyToPoint* bhv_neck_body_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_neck_body_to_point) {
    ::google::protobuf::Arena* submessage_arena = bhv_neck_body_to_point->GetArena();
    if (message_arena != submessage_arena) {
      bhv_neck_body_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_neck_body_to_point, submessage_arena);
    }
    set_has_bhv_neck_body_to_point();
    _impl_.action_.bhv_neck_body_to_point_ = bhv_neck_body_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_neck_body_to_point)
}
void PlayerAction::set_allocated_bhv_scan_field(::protos::Bhv_ScanField* bhv_scan_field) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (bhv_scan_field) {
    ::google::protobuf::Arena* submessage_arena = bhv_scan_field->GetArena();
    if (message_arena != submessage_arena) {
      bhv_scan_field = ::google::protobuf::internal::GetOwnedMessage(message_arena, bhv_scan_field, submessage_arena);
    }
    set_has_bhv_scan_field();
    _impl_.action_.bhv_scan_field_ = bhv_scan_field;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.bhv_scan_field)
}
void PlayerAction::set_allocated_body_advance_ball(::protos::Body_AdvanceBall* body_advance_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_advance_ball) {
    ::google::protobuf::Arena* submessage_arena = body_advance_ball->GetArena();
    if (message_arena != submessage_arena) {
      body_advance_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_advance_ball, submessage_arena);
    }
    set_has_body_advance_ball();
    _impl_.action_.body_advance_ball_ = body_advance_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_advance_ball)
}
void PlayerAction::set_allocated_body_clear_ball(::protos::Body_ClearBall* body_clear_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_clear_ball) {
    ::google::protobuf::Arena* submessage_arena = body_clear_ball->GetArena();
    if (message_arena != submessage_arena) {
      body_clear_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_clear_ball, submessage_arena);
    }
    set_has_body_clear_ball();
    _impl_.action_.body_clear_ball_ = body_clear_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_clear_ball)
}
void PlayerAction::set_allocated_body_dribble(::protos::Body_Dribble* body_dribble) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_dribble) {
    ::google::protobuf::Arena* submessage_arena = body_dribble->GetArena();
    if (message_arena != submessage_arena) {
      body_dribble = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_dribble, submessage_arena);
    }
    set_has_body_dribble();
    _impl_.action_.body_dribble_ = body_dribble;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_dribble)
}
void PlayerAction::set_allocated_body_go_to_point_dodge(::protos::Body_GoToPointDodge* body_go_to_point_dodge) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_go_to_point_dodge) {
    ::google::protobuf::Arena* submessage_arena = body_go_to_point_dodge->GetArena();
    if (message_arena != submessage_arena) {
      body_go_to_point_dodge = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_go_to_point_dodge, submessage_arena);
    }
    set_has_body_go_to_point_dodge();
    _impl_.action_.body_go_to_point_dodge_ = body_go_to_point_dodge;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_go_to_point_dodge)
}
void PlayerAction::set_allocated_body_hold_ball(::protos::Body_HoldBall* body_hold_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_hold_ball) {
    ::google::protobuf::Arena* submessage_arena = body_hold_ball->GetArena();
    if (message_arena != submessage_arena) {
      body_hold_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_hold_ball, submessage_arena);
    }
    set_has_body_hold_ball();
    _impl_.action_.body_hold_ball_ = body_hold_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_hold_ball)
}
void PlayerAction::set_allocated_body_intercept(::protos::Body_Intercept* body_intercept) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_intercept) {
    ::google::protobuf::Arena* submessage_arena = body_intercept->GetArena();
    if (message_arena != submessage_arena) {
      body_intercept = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_intercept, submessage_arena);
    }
    set_has_body_intercept();
    _impl_.action_.body_intercept_ = body_intercept;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_intercept)
}
void PlayerAction::set_allocated_body_kick_one_step(::protos::Body_KickOneStep* body_kick_one_step) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_kick_one_step) {
    ::google::protobuf::Arena* submessage_arena = body_kick_one_step->GetArena();
    if (message_arena != submessage_arena) {
      body_kick_one_step = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_kick_one_step, submessage_arena);
    }
    set_has_body_kick_one_step();
    _impl_.action_.body_kick_one_step_ = body_kick_one_step;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_kick_one_step)
}
void PlayerAction::set_allocated_body_stop_ball(::protos::Body_StopBall* body_stop_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_stop_ball) {
    ::google::protobuf::Arena* submessage_arena = body_stop_ball->GetArena();
    if (message_arena != submessage_arena) {
      body_stop_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_stop_ball, submessage_arena);
    }
    set_has_body_stop_ball();
    _impl_.action_.body_stop_ball_ = body_stop_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_stop_ball)
}
void PlayerAction::set_allocated_body_stop_dash(::protos::Body_StopDash* body_stop_dash) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_stop_dash) {
    ::google::protobuf::Arena* submessage_arena = body_stop_dash->GetArena();
    if (message_arena != submessage_arena) {
      body_stop_dash = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_stop_dash, submessage_arena);
    }
    set_has_body_stop_dash();
    _impl_.action_.body_stop_dash_ = body_stop_dash;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_stop_dash)
}
void PlayerAction::set_allocated_body_tackle_to_point(::protos::Body_TackleToPoint* body_tackle_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_tackle_to_point) {
    ::google::protobuf::Arena* submessage_arena = body_tackle_to_point->GetArena();
    if (message_arena != submessage_arena) {
      body_tackle_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_tackle_to_point, submessage_arena);
    }
    set_has_body_tackle_to_point();
    _impl_.action_.body_tackle_to_point_ = body_tackle_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_tackle_to_point)
}
void PlayerAction::set_allocated_body_turn_to_angle(::protos::Body_TurnToAngle* body_turn_to_angle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_turn_to_angle) {
    ::google::protobuf::Arena* submessage_arena = body_turn_to_angle->GetArena();
    if (message_arena != submessage_arena) {
      body_turn_to_angle = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_turn_to_angle, submessage_arena);
    }
    set_has_body_turn_to_angle();
    _impl_.action_.body_turn_to_angle_ = body_turn_to_angle;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_turn_to_angle)
}
void PlayerAction::set_allocated_body_turn_to_ball(::protos::Body_TurnToBall* body_turn_to_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_turn_to_ball) {
    ::google::protobuf::Arena* submessage_arena = body_turn_to_ball->GetArena();
    if (message_arena != submessage_arena) {
      body_turn_to_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_turn_to_ball, submessage_arena);
    }
    set_has_body_turn_to_ball();
    _impl_.action_.body_turn_to_ball_ = body_turn_to_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_turn_to_ball)
}
void PlayerAction::set_allocated_body_turn_to_point(::protos::Body_TurnToPoint* body_turn_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (body_turn_to_point) {
    ::google::protobuf::Arena* submessage_arena = body_turn_to_point->GetArena();
    if (message_arena != submessage_arena) {
      body_turn_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, body_turn_to_point, submessage_arena);
    }
    set_has_body_turn_to_point();
    _impl_.action_.body_turn_to_point_ = body_turn_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.body_turn_to_point)
}
void PlayerAction::set_allocated_focus_move_to_point(::protos::Focus_MoveToPoint* focus_move_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (focus_move_to_point) {
    ::google::protobuf::Arena* submessage_arena = focus_move_to_point->GetArena();
    if (message_arena != submessage_arena) {
      focus_move_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, focus_move_to_point, submessage_arena);
    }
    set_has_focus_move_to_point();
    _impl_.action_.focus_move_to_point_ = focus_move_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.focus_move_to_point)
}
void PlayerAction::set_allocated_focus_reset(::protos::Focus_Reset* focus_reset) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (focus_reset) {
    ::google::protobuf::Arena* submessage_arena = focus_reset->GetArena();
    if (message_arena != submessage_arena) {
      focus_reset = ::google::protobuf::internal::GetOwnedMessage(message_arena, focus_reset, submessage_arena);
    }
    set_has_focus_reset();
    _impl_.action_.focus_reset_ = focus_reset;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.focus_reset)
}
void PlayerAction::set_allocated_neck_scan_field(::protos::Neck_ScanField* neck_scan_field) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_scan_field) {
    ::google::protobuf::Arena* submessage_arena = neck_scan_field->GetArena();
    if (message_arena != submessage_arena) {
      neck_scan_field = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_scan_field, submessage_arena);
    }
    set_has_neck_scan_field();
    _impl_.action_.neck_scan_field_ = neck_scan_field;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_scan_field)
}
void PlayerAction::set_allocated_neck_scan_players(::protos::Neck_ScanPlayers* neck_scan_players) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_scan_players) {
    ::google::protobuf::Arena* submessage_arena = neck_scan_players->GetArena();
    if (message_arena != submessage_arena) {
      neck_scan_players = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_scan_players, submessage_arena);
    }
    set_has_neck_scan_players();
    _impl_.action_.neck_scan_players_ = neck_scan_players;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_scan_players)
}
void PlayerAction::set_allocated_neck_turn_to_ball_and_player(::protos::Neck_TurnToBallAndPlayer* neck_turn_to_ball_and_player) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_ball_and_player) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_ball_and_player->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_ball_and_player = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_ball_and_player, submessage_arena);
    }
    set_has_neck_turn_to_ball_and_player();
    _impl_.action_.neck_turn_to_ball_and_player_ = neck_turn_to_ball_and_player;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_ball_and_player)
}
void PlayerAction::set_allocated_neck_turn_to_ball_or_scan(::protos::Neck_TurnToBallOrScan* neck_turn_to_ball_or_scan) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_ball_or_scan) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_ball_or_scan->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_ball_or_scan = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_ball_or_scan, submessage_arena);
    }
    set_has_neck_turn_to_ball_or_scan();
    _impl_.action_.neck_turn_to_ball_or_scan_ = neck_turn_to_ball_or_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_ball_or_scan)
}
void PlayerAction::set_allocated_neck_turn_to_ball(::protos::Neck_TurnToBall* neck_turn_to_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_ball) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_ball->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_ball, submessage_arena);
    }
    set_has_neck_turn_to_ball();
    _impl_.action_.neck_turn_to_ball_ = neck_turn_to_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_ball)
}
void PlayerAction::set_allocated_neck_turn_to_goalie_or_scan(::protos::Neck_TurnToGoalieOrScan* neck_turn_to_goalie_or_scan) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_goalie_or_scan) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_goalie_or_scan->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_goalie_or_scan = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_goalie_or_scan, submessage_arena);
    }
    set_has_neck_turn_to_goalie_or_scan();
    _impl_.action_.neck_turn_to_goalie_or_scan_ = neck_turn_to_goalie_or_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_goalie_or_scan)
}
void PlayerAction::set_allocated_neck_turn_to_low_conf_teammate(::protos::Neck_TurnToLowConfTeammate* neck_turn_to_low_conf_teammate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_low_conf_teammate) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_low_conf_teammate->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_low_conf_teammate = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_low_conf_teammate, submessage_arena);
    }
    set_has_neck_turn_to_low_conf_teammate();
    _impl_.action_.neck_turn_to_low_conf_teammate_ = neck_turn_to_low_conf_teammate;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_low_conf_teammate)
}
void PlayerAction::set_allocated_neck_turn_to_player_or_scan(::protos::Neck_TurnToPlayerOrScan* neck_turn_to_player_or_scan) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_player_or_scan) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_player_or_scan->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_player_or_scan = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_player_or_scan, submessage_arena);
    }
    set_has_neck_turn_to_player_or_scan();
    _impl_.action_.neck_turn_to_player_or_scan_ = neck_turn_to_player_or_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_player_or_scan)
}
void PlayerAction::set_allocated_neck_turn_to_point(::protos::Neck_TurnToPoint* neck_turn_to_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_point) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_point->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_point, submessage_arena);
    }
    set_has_neck_turn_to_point();
    _impl_.action_.neck_turn_to_point_ = neck_turn_to_point;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_point)
}
void PlayerAction::set_allocated_neck_turn_to_relative(::protos::Neck_TurnToRelative* neck_turn_to_relative) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (neck_turn_to_relative) {
    ::google::protobuf::Arena* submessage_arena = neck_turn_to_relative->GetArena();
    if (message_arena != submessage_arena) {
      neck_turn_to_relative = ::google::protobuf::internal::GetOwnedMessage(message_arena, neck_turn_to_relative, submessage_arena);
    }
    set_has_neck_turn_to_relative();
    _impl_.action_.neck_turn_to_relative_ = neck_turn_to_relative;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.neck_turn_to_relative)
}
void PlayerAction::set_allocated_view_change_width(::protos::View_ChangeWidth* view_change_width) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (view_change_width) {
    ::google::protobuf::Arena* submessage_arena = view_change_width->GetArena();
    if (message_arena != submessage_arena) {
      view_change_width = ::google::protobuf::internal::GetOwnedMessage(message_arena, view_change_width, submessage_arena);
    }
    set_has_view_change_width();
    _impl_.action_.view_change_width_ = view_change_width;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.view_change_width)
}
void PlayerAction::set_allocated_view_normal(::protos::View_Normal* view_normal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (view_normal) {
    ::google::protobuf::Arena* submessage_arena = view_normal->GetArena();
    if (message_arena != submessage_arena) {
      view_normal = ::google::protobuf::internal::GetOwnedMessage(message_arena, view_normal, submessage_arena);
    }
    set_has_view_normal();
    _impl_.action_.view_normal_ = view_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.view_normal)
}
void PlayerAction::set_allocated_view_synch(::protos::View_Synch* view_synch) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (view_synch) {
    ::google::protobuf::Arena* submessage_arena = view_synch->GetArena();
    if (message_arena != submessage_arena) {
      view_synch = ::google::protobuf::internal::GetOwnedMessage(message_arena, view_synch, submessage_arena);
    }
    set_has_view_synch();
    _impl_.action_.view_synch_ = view_synch;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.view_synch)
}
void PlayerAction::set_allocated_view_wide(::protos::View_Wide* view_wide) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (view_wide) {
    ::google::protobuf::Arena* submessage_arena = view_wide->GetArena();
    if (message_arena != submessage_arena) {
      view_wide = ::google::protobuf::internal::GetOwnedMessage(message_arena, view_wide, submessage_arena);
    }
    set_has_view_wide();
    _impl_.action_.view_wide_ = view_wide;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.view_wide)
}
void PlayerAction::set_allocated_helios_goalie(::protos::HeliosGoalie* helios_goalie) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_goalie) {
    ::google::protobuf::Arena* submessage_arena = helios_goalie->GetArena();
    if (message_arena != submessage_arena) {
      helios_goalie = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_goalie, submessage_arena);
    }
    set_has_helios_goalie();
    _impl_.action_.helios_goalie_ = helios_goalie;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_goalie)
}
void PlayerAction::set_allocated_helios_goalie_move(::protos::HeliosGoalieMove* helios_goalie_move) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_goalie_move) {
    ::google::protobuf::Arena* submessage_arena = helios_goalie_move->GetArena();
    if (message_arena != submessage_arena) {
      helios_goalie_move = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_goalie_move, submessage_arena);
    }
    set_has_helios_goalie_move();
    _impl_.action_.helios_goalie_move_ = helios_goalie_move;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_goalie_move)
}
void PlayerAction::set_allocated_helios_goalie_kick(::protos::HeliosGoalieKick* helios_goalie_kick) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_goalie_kick) {
    ::google::protobuf::Arena* submessage_arena = helios_goalie_kick->GetArena();
    if (message_arena != submessage_arena) {
      helios_goalie_kick = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_goalie_kick, submessage_arena);
    }
    set_has_helios_goalie_kick();
    _impl_.action_.helios_goalie_kick_ = helios_goalie_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_goalie_kick)
}
void PlayerAction::set_allocated_helios_shoot(::protos::HeliosShoot* helios_shoot) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_shoot) {
    ::google::protobuf::Arena* submessage_arena = helios_shoot->GetArena();
    if (message_arena != submessage_arena) {
      helios_shoot = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_shoot, submessage_arena);
    }
    set_has_helios_shoot();
    _impl_.action_.helios_shoot_ = helios_shoot;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_shoot)
}
void PlayerAction::set_allocated_helios_offensive_planner(::protos::HeliosOffensivePlanner* helios_offensive_planner) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_offensive_planner) {
    ::google::protobuf::Arena* submessage_arena = helios_offensive_planner->GetArena();
    if (message_arena != submessage_arena) {
      helios_offensive_planner = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_offensive_planner, submessage_arena);
    }
    set_has_helios_offensive_planner();
    _impl_.action_.helios_offensive_planner_ = helios_offensive_planner;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_offensive_planner)
}
void PlayerAction::set_allocated_helios_basic_offensive(::protos::HeliosBasicOffensive* helios_basic_offensive) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_basic_offensive) {
    ::google::protobuf::Arena* submessage_arena = helios_basic_offensive->GetArena();
    if (message_arena != submessage_arena) {
      helios_basic_offensive = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_basic_offensive, submessage_arena);
    }
    set_has_helios_basic_offensive();
    _impl_.action_.helios_basic_offensive_ = helios_basic_offensive;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_basic_offensive)
}
void PlayerAction::set_allocated_helios_basic_move(::protos::HeliosBasicMove* helios_basic_move) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_basic_move) {
    ::google::protobuf::Arena* submessage_arena = helios_basic_move->GetArena();
    if (message_arena != submessage_arena) {
      helios_basic_move = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_basic_move, submessage_arena);
    }
    set_has_helios_basic_move();
    _impl_.action_.helios_basic_move_ = helios_basic_move;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_basic_move)
}
void PlayerAction::set_allocated_helios_set_play(::protos::HeliosSetPlay* helios_set_play) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_set_play) {
    ::google::protobuf::Arena* submessage_arena = helios_set_play->GetArena();
    if (message_arena != submessage_arena) {
      helios_set_play = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_set_play, submessage_arena);
    }
    set_has_helios_set_play();
    _impl_.action_.helios_set_play_ = helios_set_play;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_set_play)
}
void PlayerAction::set_allocated_helios_penalty(::protos::HeliosPenalty* helios_penalty) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_penalty) {
    ::google::protobuf::Arena* submessage_arena = helios_penalty->GetArena();
    if (message_arena != submessage_arena) {
      helios_penalty = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_penalty, submessage_arena);
    }
    set_has_helios_penalty();
    _impl_.action_.helios_penalty_ = helios_penalty;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_penalty)
}
void PlayerAction::set_allocated_helios_communication(::protos::HeliosCommunicaion* helios_communication) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (helios_communication) {
    ::google::protobuf::Arena* submessage_arena = helios_communication->GetArena();
    if (message_arena != submessage_arena) {
      helios_communication = ::google::protobuf::internal::GetOwnedMessage(message_arena, helios_communication, submessage_arena);
    }
    set_has_helios_communication();
    _impl_.action_.helios_communication_ = helios_communication;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PlayerAction.helios_communication)
}
PlayerAction::PlayerAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PlayerAction)
}
inline PROTOBUF_NDEBUG_INLINE PlayerAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PlayerAction& from_msg)
      : action_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PlayerAction::PlayerAction(
    ::google::protobuf::Arena* arena,
    const PlayerAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (action_case()) {
    case ACTION_NOT_SET:
      break;
      case kDash:
        _impl_.action_.dash_ = ::google::protobuf::Message::CopyConstruct<::protos::Dash>(arena, *from._impl_.action_.dash_);
        break;
      case kTurn:
        _impl_.action_.turn_ = ::google::protobuf::Message::CopyConstruct<::protos::Turn>(arena, *from._impl_.action_.turn_);
        break;
      case kKick:
        _impl_.action_.kick_ = ::google::protobuf::Message::CopyConstruct<::protos::Kick>(arena, *from._impl_.action_.kick_);
        break;
      case kTackle:
        _impl_.action_.tackle_ = ::google::protobuf::Message::CopyConstruct<::protos::Tackle>(arena, *from._impl_.action_.tackle_);
        break;
      case kCatch:
        _impl_.action_.catch__ = ::google::protobuf::Message::CopyConstruct<::protos::Catch>(arena, *from._impl_.action_.catch__);
        break;
      case kMove:
        _impl_.action_.move_ = ::google::protobuf::Message::CopyConstruct<::protos::Move>(arena, *from._impl_.action_.move_);
        break;
      case kTurnNeck:
        _impl_.action_.turn_neck_ = ::google::protobuf::Message::CopyConstruct<::protos::TurnNeck>(arena, *from._impl_.action_.turn_neck_);
        break;
      case kChangeView:
        _impl_.action_.change_view_ = ::google::protobuf::Message::CopyConstruct<::protos::ChangeView>(arena, *from._impl_.action_.change_view_);
        break;
      case kSay:
        _impl_.action_.say_ = ::google::protobuf::Message::CopyConstruct<::protos::Say>(arena, *from._impl_.action_.say_);
        break;
      case kPointTo:
        _impl_.action_.point_to_ = ::google::protobuf::Message::CopyConstruct<::protos::PointTo>(arena, *from._impl_.action_.point_to_);
        break;
      case kPointToOf:
        _impl_.action_.point_to_of_ = ::google::protobuf::Message::CopyConstruct<::protos::PointToOf>(arena, *from._impl_.action_.point_to_of_);
        break;
      case kAttentionTo:
        _impl_.action_.attention_to_ = ::google::protobuf::Message::CopyConstruct<::protos::AttentionTo>(arena, *from._impl_.action_.attention_to_);
        break;
      case kAttentionToOf:
        _impl_.action_.attention_to_of_ = ::google::protobuf::Message::CopyConstruct<::protos::AttentionToOf>(arena, *from._impl_.action_.attention_to_of_);
        break;
      case kLog:
        _impl_.action_.log_ = ::google::protobuf::Message::CopyConstruct<::protos::Log>(arena, *from._impl_.action_.log_);
        break;
      case kDebugClient:
        _impl_.action_.debug_client_ = ::google::protobuf::Message::CopyConstruct<::protos::DebugClient>(arena, *from._impl_.action_.debug_client_);
        break;
      case kBodyGoToPoint:
        _impl_.action_.body_go_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_GoToPoint>(arena, *from._impl_.action_.body_go_to_point_);
        break;
      case kBodySmartKick:
        _impl_.action_.body_smart_kick_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_SmartKick>(arena, *from._impl_.action_.body_smart_kick_);
        break;
      case kBhvBeforeKickOff:
        _impl_.action_.bhv_before_kick_off_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BeforeKickOff>(arena, *from._impl_.action_.bhv_before_kick_off_);
        break;
      case kBhvBodyNeckToBall:
        _impl_.action_.bhv_body_neck_to_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BodyNeckToBall>(arena, *from._impl_.action_.bhv_body_neck_to_ball_);
        break;
      case kBhvBodyNeckToPoint:
        _impl_.action_.bhv_body_neck_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BodyNeckToPoint>(arena, *from._impl_.action_.bhv_body_neck_to_point_);
        break;
      case kBhvEmergency:
        _impl_.action_.bhv_emergency_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_Emergency>(arena, *from._impl_.action_.bhv_emergency_);
        break;
      case kBhvGoToPointLookBall:
        _impl_.action_.bhv_go_to_point_look_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_GoToPointLookBall>(arena, *from._impl_.action_.bhv_go_to_point_look_ball_);
        break;
      case kBhvNeckBodyToBall:
        _impl_.action_.bhv_neck_body_to_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_NeckBodyToBall>(arena, *from._impl_.action_.bhv_neck_body_to_ball_);
        break;
      case kBhvNeckBodyToPoint:
        _impl_.action_.bhv_neck_body_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_NeckBodyToPoint>(arena, *from._impl_.action_.bhv_neck_body_to_point_);
        break;
      case kBhvScanField:
        _impl_.action_.bhv_scan_field_ = ::google::protobuf::Message::CopyConstruct<::protos::Bhv_ScanField>(arena, *from._impl_.action_.bhv_scan_field_);
        break;
      case kBodyAdvanceBall:
        _impl_.action_.body_advance_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_AdvanceBall>(arena, *from._impl_.action_.body_advance_ball_);
        break;
      case kBodyClearBall:
        _impl_.action_.body_clear_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_ClearBall>(arena, *from._impl_.action_.body_clear_ball_);
        break;
      case kBodyDribble:
        _impl_.action_.body_dribble_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_Dribble>(arena, *from._impl_.action_.body_dribble_);
        break;
      case kBodyGoToPointDodge:
        _impl_.action_.body_go_to_point_dodge_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_GoToPointDodge>(arena, *from._impl_.action_.body_go_to_point_dodge_);
        break;
      case kBodyHoldBall:
        _impl_.action_.body_hold_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_HoldBall>(arena, *from._impl_.action_.body_hold_ball_);
        break;
      case kBodyIntercept:
        _impl_.action_.body_intercept_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_Intercept>(arena, *from._impl_.action_.body_intercept_);
        break;
      case kBodyKickOneStep:
        _impl_.action_.body_kick_one_step_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_KickOneStep>(arena, *from._impl_.action_.body_kick_one_step_);
        break;
      case kBodyStopBall:
        _impl_.action_.body_stop_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_StopBall>(arena, *from._impl_.action_.body_stop_ball_);
        break;
      case kBodyStopDash:
        _impl_.action_.body_stop_dash_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_StopDash>(arena, *from._impl_.action_.body_stop_dash_);
        break;
      case kBodyTackleToPoint:
        _impl_.action_.body_tackle_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_TackleToPoint>(arena, *from._impl_.action_.body_tackle_to_point_);
        break;
      case kBodyTurnToAngle:
        _impl_.action_.body_turn_to_angle_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToAngle>(arena, *from._impl_.action_.body_turn_to_angle_);
        break;
      case kBodyTurnToBall:
        _impl_.action_.body_turn_to_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToBall>(arena, *from._impl_.action_.body_turn_to_ball_);
        break;
      case kBodyTurnToPoint:
        _impl_.action_.body_turn_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToPoint>(arena, *from._impl_.action_.body_turn_to_point_);
        break;
      case kFocusMoveToPoint:
        _impl_.action_.focus_move_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Focus_MoveToPoint>(arena, *from._impl_.action_.focus_move_to_point_);
        break;
      case kFocusReset:
        _impl_.action_.focus_reset_ = ::google::protobuf::Message::CopyConstruct<::protos::Focus_Reset>(arena, *from._impl_.action_.focus_reset_);
        break;
      case kNeckScanField:
        _impl_.action_.neck_scan_field_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_ScanField>(arena, *from._impl_.action_.neck_scan_field_);
        break;
      case kNeckScanPlayers:
        _impl_.action_.neck_scan_players_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_ScanPlayers>(arena, *from._impl_.action_.neck_scan_players_);
        break;
      case kNeckTurnToBallAndPlayer:
        _impl_.action_.neck_turn_to_ball_and_player_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBallAndPlayer>(arena, *from._impl_.action_.neck_turn_to_ball_and_player_);
        break;
      case kNeckTurnToBallOrScan:
        _impl_.action_.neck_turn_to_ball_or_scan_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBallOrScan>(arena, *from._impl_.action_.neck_turn_to_ball_or_scan_);
        break;
      case kNeckTurnToBall:
        _impl_.action_.neck_turn_to_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBall>(arena, *from._impl_.action_.neck_turn_to_ball_);
        break;
      case kNeckTurnToGoalieOrScan:
        _impl_.action_.neck_turn_to_goalie_or_scan_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToGoalieOrScan>(arena, *from._impl_.action_.neck_turn_to_goalie_or_scan_);
        break;
      case kNeckTurnToLowConfTeammate:
        _impl_.action_.neck_turn_to_low_conf_teammate_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToLowConfTeammate>(arena, *from._impl_.action_.neck_turn_to_low_conf_teammate_);
        break;
      case kNeckTurnToPlayerOrScan:
        _impl_.action_.neck_turn_to_player_or_scan_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToPlayerOrScan>(arena, *from._impl_.action_.neck_turn_to_player_or_scan_);
        break;
      case kNeckTurnToPoint:
        _impl_.action_.neck_turn_to_point_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToPoint>(arena, *from._impl_.action_.neck_turn_to_point_);
        break;
      case kNeckTurnToRelative:
        _impl_.action_.neck_turn_to_relative_ = ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToRelative>(arena, *from._impl_.action_.neck_turn_to_relative_);
        break;
      case kViewChangeWidth:
        _impl_.action_.view_change_width_ = ::google::protobuf::Message::CopyConstruct<::protos::View_ChangeWidth>(arena, *from._impl_.action_.view_change_width_);
        break;
      case kViewNormal:
        _impl_.action_.view_normal_ = ::google::protobuf::Message::CopyConstruct<::protos::View_Normal>(arena, *from._impl_.action_.view_normal_);
        break;
      case kViewSynch:
        _impl_.action_.view_synch_ = ::google::protobuf::Message::CopyConstruct<::protos::View_Synch>(arena, *from._impl_.action_.view_synch_);
        break;
      case kViewWide:
        _impl_.action_.view_wide_ = ::google::protobuf::Message::CopyConstruct<::protos::View_Wide>(arena, *from._impl_.action_.view_wide_);
        break;
      case kHeliosGoalie:
        _impl_.action_.helios_goalie_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalie>(arena, *from._impl_.action_.helios_goalie_);
        break;
      case kHeliosGoalieMove:
        _impl_.action_.helios_goalie_move_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalieMove>(arena, *from._impl_.action_.helios_goalie_move_);
        break;
      case kHeliosGoalieKick:
        _impl_.action_.helios_goalie_kick_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalieKick>(arena, *from._impl_.action_.helios_goalie_kick_);
        break;
      case kHeliosShoot:
        _impl_.action_.helios_shoot_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosShoot>(arena, *from._impl_.action_.helios_shoot_);
        break;
      case kHeliosOffensivePlanner:
        _impl_.action_.helios_offensive_planner_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosOffensivePlanner>(arena, *from._impl_.action_.helios_offensive_planner_);
        break;
      case kHeliosBasicOffensive:
        _impl_.action_.helios_basic_offensive_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosBasicOffensive>(arena, *from._impl_.action_.helios_basic_offensive_);
        break;
      case kHeliosBasicMove:
        _impl_.action_.helios_basic_move_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosBasicMove>(arena, *from._impl_.action_.helios_basic_move_);
        break;
      case kHeliosSetPlay:
        _impl_.action_.helios_set_play_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosSetPlay>(arena, *from._impl_.action_.helios_set_play_);
        break;
      case kHeliosPenalty:
        _impl_.action_.helios_penalty_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosPenalty>(arena, *from._impl_.action_.helios_penalty_);
        break;
      case kHeliosCommunication:
        _impl_.action_.helios_communication_ = ::google::protobuf::Message::CopyConstruct<::protos::HeliosCommunicaion>(arena, *from._impl_.action_.helios_communication_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protos.PlayerAction)
}
inline PROTOBUF_NDEBUG_INLINE PlayerAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PlayerAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PlayerAction::~PlayerAction() {
  // @@protoc_insertion_point(destructor:protos.PlayerAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
  _impl_.~Impl_();
}

void PlayerAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:protos.PlayerAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (action_case()) {
    case kDash: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.dash_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.dash_);
      }
      break;
    }
    case kTurn: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.turn_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.turn_);
      }
      break;
    }
    case kKick: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.kick_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.kick_);
      }
      break;
    }
    case kTackle: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.tackle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.tackle_);
      }
      break;
    }
    case kCatch: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.catch__;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.catch__);
      }
      break;
    }
    case kMove: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.move_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.move_);
      }
      break;
    }
    case kTurnNeck: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.turn_neck_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.turn_neck_);
      }
      break;
    }
    case kChangeView: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.change_view_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.change_view_);
      }
      break;
    }
    case kSay: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.say_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.say_);
      }
      break;
    }
    case kPointTo: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.point_to_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.point_to_);
      }
      break;
    }
    case kPointToOf: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.point_to_of_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.point_to_of_);
      }
      break;
    }
    case kAttentionTo: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.attention_to_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.attention_to_);
      }
      break;
    }
    case kAttentionToOf: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.attention_to_of_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.attention_to_of_);
      }
      break;
    }
    case kLog: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.log_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.log_);
      }
      break;
    }
    case kDebugClient: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.debug_client_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.debug_client_);
      }
      break;
    }
    case kBodyGoToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_go_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_go_to_point_);
      }
      break;
    }
    case kBodySmartKick: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_smart_kick_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_smart_kick_);
      }
      break;
    }
    case kBhvBeforeKickOff: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_before_kick_off_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_before_kick_off_);
      }
      break;
    }
    case kBhvBodyNeckToBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_body_neck_to_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_body_neck_to_ball_);
      }
      break;
    }
    case kBhvBodyNeckToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_body_neck_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_body_neck_to_point_);
      }
      break;
    }
    case kBhvEmergency: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_emergency_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_emergency_);
      }
      break;
    }
    case kBhvGoToPointLookBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_go_to_point_look_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_go_to_point_look_ball_);
      }
      break;
    }
    case kBhvNeckBodyToBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_neck_body_to_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_neck_body_to_ball_);
      }
      break;
    }
    case kBhvNeckBodyToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_neck_body_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_neck_body_to_point_);
      }
      break;
    }
    case kBhvScanField: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.bhv_scan_field_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.bhv_scan_field_);
      }
      break;
    }
    case kBodyAdvanceBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_advance_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_advance_ball_);
      }
      break;
    }
    case kBodyClearBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_clear_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_clear_ball_);
      }
      break;
    }
    case kBodyDribble: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_dribble_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_dribble_);
      }
      break;
    }
    case kBodyGoToPointDodge: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_go_to_point_dodge_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_go_to_point_dodge_);
      }
      break;
    }
    case kBodyHoldBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_hold_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_hold_ball_);
      }
      break;
    }
    case kBodyIntercept: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_intercept_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_intercept_);
      }
      break;
    }
    case kBodyKickOneStep: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_kick_one_step_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_kick_one_step_);
      }
      break;
    }
    case kBodyStopBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_stop_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_stop_ball_);
      }
      break;
    }
    case kBodyStopDash: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_stop_dash_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_stop_dash_);
      }
      break;
    }
    case kBodyTackleToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_tackle_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_tackle_to_point_);
      }
      break;
    }
    case kBodyTurnToAngle: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_turn_to_angle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_turn_to_angle_);
      }
      break;
    }
    case kBodyTurnToBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_turn_to_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_turn_to_ball_);
      }
      break;
    }
    case kBodyTurnToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.body_turn_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.body_turn_to_point_);
      }
      break;
    }
    case kFocusMoveToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.focus_move_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.focus_move_to_point_);
      }
      break;
    }
    case kFocusReset: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.focus_reset_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.focus_reset_);
      }
      break;
    }
    case kNeckScanField: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_scan_field_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_scan_field_);
      }
      break;
    }
    case kNeckScanPlayers: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_scan_players_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_scan_players_);
      }
      break;
    }
    case kNeckTurnToBallAndPlayer: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_ball_and_player_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_ball_and_player_);
      }
      break;
    }
    case kNeckTurnToBallOrScan: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_ball_or_scan_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_ball_or_scan_);
      }
      break;
    }
    case kNeckTurnToBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_ball_);
      }
      break;
    }
    case kNeckTurnToGoalieOrScan: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_goalie_or_scan_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_goalie_or_scan_);
      }
      break;
    }
    case kNeckTurnToLowConfTeammate: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_low_conf_teammate_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_low_conf_teammate_);
      }
      break;
    }
    case kNeckTurnToPlayerOrScan: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_player_or_scan_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_player_or_scan_);
      }
      break;
    }
    case kNeckTurnToPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_point_);
      }
      break;
    }
    case kNeckTurnToRelative: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.neck_turn_to_relative_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.neck_turn_to_relative_);
      }
      break;
    }
    case kViewChangeWidth: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.view_change_width_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.view_change_width_);
      }
      break;
    }
    case kViewNormal: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.view_normal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.view_normal_);
      }
      break;
    }
    case kViewSynch: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.view_synch_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.view_synch_);
      }
      break;
    }
    case kViewWide: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.view_wide_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.view_wide_);
      }
      break;
    }
    case kHeliosGoalie: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_goalie_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_goalie_);
      }
      break;
    }
    case kHeliosGoalieMove: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_goalie_move_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_goalie_move_);
      }
      break;
    }
    case kHeliosGoalieKick: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_goalie_kick_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_goalie_kick_);
      }
      break;
    }
    case kHeliosShoot: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_shoot_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_shoot_);
      }
      break;
    }
    case kHeliosOffensivePlanner: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_offensive_planner_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_offensive_planner_);
      }
      break;
    }
    case kHeliosBasicOffensive: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_basic_offensive_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_basic_offensive_);
      }
      break;
    }
    case kHeliosBasicMove: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_basic_move_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_basic_move_);
      }
      break;
    }
    case kHeliosSetPlay: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_set_play_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_set_play_);
      }
      break;
    }
    case kHeliosPenalty: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_penalty_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_penalty_);
      }
      break;
    }
    case kHeliosCommunication: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.helios_communication_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.helios_communication_);
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PlayerAction::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PlayerAction_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PlayerAction::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PlayerAction>(),
            ::google::protobuf::Message::GetNewImpl<PlayerAction>(),
            ::google::protobuf::Message::GetClearImpl<PlayerAction>(), &PlayerAction::ByteSizeLong,
                &PlayerAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_._cached_size_),
            false,
        },
        &PlayerAction::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PlayerAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 64, 64, 0, 9> PlayerAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    64, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    64,  // num_field_entries
    64,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PlayerAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 2,
    0, 32, 0, 48,
    65535, 65535
  }}, {{
    // .protos.Dash dash = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.dash_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Turn turn = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.turn_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Kick kick = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.kick_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Tackle tackle = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.tackle_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Catch catch = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.catch__), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Move move = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.move_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.TurnNeck turn_neck = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.turn_neck_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.ChangeView change_view = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.change_view_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Say say = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.say_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.PointTo point_to = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.point_to_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.PointToOf point_to_of = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.point_to_of_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AttentionTo attention_to = 12;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.attention_to_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.AttentionToOf attention_to_of = 13;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.attention_to_of_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Log log = 14;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.log_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DebugClient debug_client = 15;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.debug_client_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_GoToPoint body_go_to_point = 16;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_go_to_point_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_SmartKick body_smart_kick = 17;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_smart_kick_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_BeforeKickOff bhv_before_kick_off = 18;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_before_kick_off_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_BodyNeckToBall bhv_body_neck_to_ball = 19;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_body_neck_to_ball_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_BodyNeckToPoint bhv_body_neck_to_point = 20;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_body_neck_to_point_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_Emergency bhv_emergency = 21;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_emergency_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_GoToPointLookBall bhv_go_to_point_look_ball = 22;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_go_to_point_look_ball_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_NeckBodyToBall bhv_neck_body_to_ball = 23;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_neck_body_to_ball_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_NeckBodyToPoint bhv_neck_body_to_point = 24;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_neck_body_to_point_), _Internal::kOneofCaseOffset + 0, 23,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Bhv_ScanField bhv_scan_field = 25;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.bhv_scan_field_), _Internal::kOneofCaseOffset + 0, 24,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_AdvanceBall body_advance_ball = 26;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_advance_ball_), _Internal::kOneofCaseOffset + 0, 25,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_ClearBall body_clear_ball = 27;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_clear_ball_), _Internal::kOneofCaseOffset + 0, 26,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_Dribble body_dribble = 28;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_dribble_), _Internal::kOneofCaseOffset + 0, 27,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_GoToPointDodge body_go_to_point_dodge = 29;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_go_to_point_dodge_), _Internal::kOneofCaseOffset + 0, 28,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_HoldBall body_hold_ball = 30;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_hold_ball_), _Internal::kOneofCaseOffset + 0, 29,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_Intercept body_intercept = 31;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_intercept_), _Internal::kOneofCaseOffset + 0, 30,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_KickOneStep body_kick_one_step = 32;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_kick_one_step_), _Internal::kOneofCaseOffset + 0, 31,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_StopBall body_stop_ball = 33;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_stop_ball_), _Internal::kOneofCaseOffset + 0, 32,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_StopDash body_stop_dash = 34;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_stop_dash_), _Internal::kOneofCaseOffset + 0, 33,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_TackleToPoint body_tackle_to_point = 35;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_tackle_to_point_), _Internal::kOneofCaseOffset + 0, 34,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_TurnToAngle body_turn_to_angle = 36;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_turn_to_angle_), _Internal::kOneofCaseOffset + 0, 35,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_TurnToBall body_turn_to_ball = 37;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_turn_to_ball_), _Internal::kOneofCaseOffset + 0, 36,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Body_TurnToPoint body_turn_to_point = 38;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.body_turn_to_point_), _Internal::kOneofCaseOffset + 0, 37,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Focus_MoveToPoint focus_move_to_point = 39;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.focus_move_to_point_), _Internal::kOneofCaseOffset + 0, 38,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Focus_Reset focus_reset = 40;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.focus_reset_), _Internal::kOneofCaseOffset + 0, 39,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_ScanField neck_scan_field = 41;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_scan_field_), _Internal::kOneofCaseOffset + 0, 40,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_ScanPlayers neck_scan_players = 42;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_scan_players_), _Internal::kOneofCaseOffset + 0, 41,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToBallAndPlayer neck_turn_to_ball_and_player = 43;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_ball_and_player_), _Internal::kOneofCaseOffset + 0, 42,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToBallOrScan neck_turn_to_ball_or_scan = 44;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_ball_or_scan_), _Internal::kOneofCaseOffset + 0, 43,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToBall neck_turn_to_ball = 45;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_ball_), _Internal::kOneofCaseOffset + 0, 44,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToGoalieOrScan neck_turn_to_goalie_or_scan = 46;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_goalie_or_scan_), _Internal::kOneofCaseOffset + 0, 45,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToLowConfTeammate neck_turn_to_low_conf_teammate = 47;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_low_conf_teammate_), _Internal::kOneofCaseOffset + 0, 46,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToPlayerOrScan neck_turn_to_player_or_scan = 48;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_player_or_scan_), _Internal::kOneofCaseOffset + 0, 47,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToPoint neck_turn_to_point = 49;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_point_), _Internal::kOneofCaseOffset + 0, 48,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.Neck_TurnToRelative neck_turn_to_relative = 50;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.neck_turn_to_relative_), _Internal::kOneofCaseOffset + 0, 49,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.View_ChangeWidth view_change_width = 51;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.view_change_width_), _Internal::kOneofCaseOffset + 0, 50,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.View_Normal view_normal = 52;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.view_normal_), _Internal::kOneofCaseOffset + 0, 51,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.View_Synch view_synch = 53;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.view_synch_), _Internal::kOneofCaseOffset + 0, 52,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.View_Wide view_wide = 54;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.view_wide_), _Internal::kOneofCaseOffset + 0, 53,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosGoalie helios_goalie = 55;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_goalie_), _Internal::kOneofCaseOffset + 0, 54,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosGoalieMove helios_goalie_move = 56;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_goalie_move_), _Internal::kOneofCaseOffset + 0, 55,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosGoalieKick helios_goalie_kick = 57;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_goalie_kick_), _Internal::kOneofCaseOffset + 0, 56,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosShoot helios_shoot = 58;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_shoot_), _Internal::kOneofCaseOffset + 0, 57,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosOffensivePlanner helios_offensive_planner = 59;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_offensive_planner_), _Internal::kOneofCaseOffset + 0, 58,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosBasicOffensive helios_basic_offensive = 60;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_basic_offensive_), _Internal::kOneofCaseOffset + 0, 59,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosBasicMove helios_basic_move = 61;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_basic_move_), _Internal::kOneofCaseOffset + 0, 60,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosSetPlay helios_set_play = 62;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_set_play_), _Internal::kOneofCaseOffset + 0, 61,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosPenalty helios_penalty = 63;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_penalty_), _Internal::kOneofCaseOffset + 0, 62,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.HeliosCommunicaion helios_communication = 64;
    {PROTOBUF_FIELD_OFFSET(PlayerAction, _impl_.action_.helios_communication_), _Internal::kOneofCaseOffset + 0, 63,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::Dash>()},
    {::_pbi::TcParser::GetTable<::protos::Turn>()},
    {::_pbi::TcParser::GetTable<::protos::Kick>()},
    {::_pbi::TcParser::GetTable<::protos::Tackle>()},
    {::_pbi::TcParser::GetTable<::protos::Catch>()},
    {::_pbi::TcParser::GetTable<::protos::Move>()},
    {::_pbi::TcParser::GetTable<::protos::TurnNeck>()},
    {::_pbi::TcParser::GetTable<::protos::ChangeView>()},
    {::_pbi::TcParser::GetTable<::protos::Say>()},
    {::_pbi::TcParser::GetTable<::protos::PointTo>()},
    {::_pbi::TcParser::GetTable<::protos::PointToOf>()},
    {::_pbi::TcParser::GetTable<::protos::AttentionTo>()},
    {::_pbi::TcParser::GetTable<::protos::AttentionToOf>()},
    {::_pbi::TcParser::GetTable<::protos::Log>()},
    {::_pbi::TcParser::GetTable<::protos::DebugClient>()},
    {::_pbi::TcParser::GetTable<::protos::Body_GoToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Body_SmartKick>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_BeforeKickOff>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_BodyNeckToBall>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_BodyNeckToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_Emergency>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_GoToPointLookBall>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_NeckBodyToBall>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_NeckBodyToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Bhv_ScanField>()},
    {::_pbi::TcParser::GetTable<::protos::Body_AdvanceBall>()},
    {::_pbi::TcParser::GetTable<::protos::Body_ClearBall>()},
    {::_pbi::TcParser::GetTable<::protos::Body_Dribble>()},
    {::_pbi::TcParser::GetTable<::protos::Body_GoToPointDodge>()},
    {::_pbi::TcParser::GetTable<::protos::Body_HoldBall>()},
    {::_pbi::TcParser::GetTable<::protos::Body_Intercept>()},
    {::_pbi::TcParser::GetTable<::protos::Body_KickOneStep>()},
    {::_pbi::TcParser::GetTable<::protos::Body_StopBall>()},
    {::_pbi::TcParser::GetTable<::protos::Body_StopDash>()},
    {::_pbi::TcParser::GetTable<::protos::Body_TackleToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Body_TurnToAngle>()},
    {::_pbi::TcParser::GetTable<::protos::Body_TurnToBall>()},
    {::_pbi::TcParser::GetTable<::protos::Body_TurnToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Focus_MoveToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Focus_Reset>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_ScanField>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_ScanPlayers>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToBallAndPlayer>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToBallOrScan>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToBall>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToGoalieOrScan>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToLowConfTeammate>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToPlayerOrScan>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToPoint>()},
    {::_pbi::TcParser::GetTable<::protos::Neck_TurnToRelative>()},
    {::_pbi::TcParser::GetTable<::protos::View_ChangeWidth>()},
    {::_pbi::TcParser::GetTable<::protos::View_Normal>()},
    {::_pbi::TcParser::GetTable<::protos::View_Synch>()},
    {::_pbi::TcParser::GetTable<::protos::View_Wide>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosGoalie>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosGoalieMove>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosGoalieKick>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosShoot>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosOffensivePlanner>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosBasicOffensive>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosBasicMove>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosSetPlay>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosPenalty>()},
    {::_pbi::TcParser::GetTable<::protos::HeliosCommunicaion>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PlayerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PlayerAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerAction& this_ = static_cast<const PlayerAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PlayerAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.action_case()) {
            case kDash: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.action_.dash_, this_._impl_.action_.dash_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTurn: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.action_.turn_, this_._impl_.action_.turn_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kKick: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.action_.kick_, this_._impl_.action_.kick_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTackle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.action_.tackle_, this_._impl_.action_.tackle_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCatch: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.action_.catch__, this_._impl_.action_.catch__->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMove: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.action_.move_, this_._impl_.action_.move_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTurnNeck: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.action_.turn_neck_, this_._impl_.action_.turn_neck_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kChangeView: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.action_.change_view_, this_._impl_.action_.change_view_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSay: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.action_.say_, this_._impl_.action_.say_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPointTo: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.action_.point_to_, this_._impl_.action_.point_to_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPointToOf: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.action_.point_to_of_, this_._impl_.action_.point_to_of_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttentionTo: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.action_.attention_to_, this_._impl_.action_.attention_to_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttentionToOf: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.action_.attention_to_of_, this_._impl_.action_.attention_to_of_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLog: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.action_.log_, this_._impl_.action_.log_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDebugClient: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.action_.debug_client_, this_._impl_.action_.debug_client_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyGoToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.action_.body_go_to_point_, this_._impl_.action_.body_go_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodySmartKick: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.action_.body_smart_kick_, this_._impl_.action_.body_smart_kick_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvBeforeKickOff: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.action_.bhv_before_kick_off_, this_._impl_.action_.bhv_before_kick_off_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvBodyNeckToBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.action_.bhv_body_neck_to_ball_, this_._impl_.action_.bhv_body_neck_to_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvBodyNeckToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.action_.bhv_body_neck_to_point_, this_._impl_.action_.bhv_body_neck_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvEmergency: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.action_.bhv_emergency_, this_._impl_.action_.bhv_emergency_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvGoToPointLookBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.action_.bhv_go_to_point_look_ball_, this_._impl_.action_.bhv_go_to_point_look_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvNeckBodyToBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.action_.bhv_neck_body_to_ball_, this_._impl_.action_.bhv_neck_body_to_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvNeckBodyToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  24, *this_._impl_.action_.bhv_neck_body_to_point_, this_._impl_.action_.bhv_neck_body_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBhvScanField: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  25, *this_._impl_.action_.bhv_scan_field_, this_._impl_.action_.bhv_scan_field_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyAdvanceBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  26, *this_._impl_.action_.body_advance_ball_, this_._impl_.action_.body_advance_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyClearBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  27, *this_._impl_.action_.body_clear_ball_, this_._impl_.action_.body_clear_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyDribble: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  28, *this_._impl_.action_.body_dribble_, this_._impl_.action_.body_dribble_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyGoToPointDodge: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  29, *this_._impl_.action_.body_go_to_point_dodge_, this_._impl_.action_.body_go_to_point_dodge_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyHoldBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  30, *this_._impl_.action_.body_hold_ball_, this_._impl_.action_.body_hold_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyIntercept: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  31, *this_._impl_.action_.body_intercept_, this_._impl_.action_.body_intercept_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyKickOneStep: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  32, *this_._impl_.action_.body_kick_one_step_, this_._impl_.action_.body_kick_one_step_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyStopBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  33, *this_._impl_.action_.body_stop_ball_, this_._impl_.action_.body_stop_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyStopDash: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  34, *this_._impl_.action_.body_stop_dash_, this_._impl_.action_.body_stop_dash_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyTackleToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  35, *this_._impl_.action_.body_tackle_to_point_, this_._impl_.action_.body_tackle_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyTurnToAngle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  36, *this_._impl_.action_.body_turn_to_angle_, this_._impl_.action_.body_turn_to_angle_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyTurnToBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  37, *this_._impl_.action_.body_turn_to_ball_, this_._impl_.action_.body_turn_to_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBodyTurnToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  38, *this_._impl_.action_.body_turn_to_point_, this_._impl_.action_.body_turn_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFocusMoveToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  39, *this_._impl_.action_.focus_move_to_point_, this_._impl_.action_.focus_move_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFocusReset: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  40, *this_._impl_.action_.focus_reset_, this_._impl_.action_.focus_reset_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckScanField: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  41, *this_._impl_.action_.neck_scan_field_, this_._impl_.action_.neck_scan_field_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckScanPlayers: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  42, *this_._impl_.action_.neck_scan_players_, this_._impl_.action_.neck_scan_players_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToBallAndPlayer: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  43, *this_._impl_.action_.neck_turn_to_ball_and_player_, this_._impl_.action_.neck_turn_to_ball_and_player_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToBallOrScan: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  44, *this_._impl_.action_.neck_turn_to_ball_or_scan_, this_._impl_.action_.neck_turn_to_ball_or_scan_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  45, *this_._impl_.action_.neck_turn_to_ball_, this_._impl_.action_.neck_turn_to_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToGoalieOrScan: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  46, *this_._impl_.action_.neck_turn_to_goalie_or_scan_, this_._impl_.action_.neck_turn_to_goalie_or_scan_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToLowConfTeammate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  47, *this_._impl_.action_.neck_turn_to_low_conf_teammate_, this_._impl_.action_.neck_turn_to_low_conf_teammate_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToPlayerOrScan: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  48, *this_._impl_.action_.neck_turn_to_player_or_scan_, this_._impl_.action_.neck_turn_to_player_or_scan_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  49, *this_._impl_.action_.neck_turn_to_point_, this_._impl_.action_.neck_turn_to_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNeckTurnToRelative: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  50, *this_._impl_.action_.neck_turn_to_relative_, this_._impl_.action_.neck_turn_to_relative_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kViewChangeWidth: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  51, *this_._impl_.action_.view_change_width_, this_._impl_.action_.view_change_width_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kViewNormal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  52, *this_._impl_.action_.view_normal_, this_._impl_.action_.view_normal_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kViewSynch: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  53, *this_._impl_.action_.view_synch_, this_._impl_.action_.view_synch_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kViewWide: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  54, *this_._impl_.action_.view_wide_, this_._impl_.action_.view_wide_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosGoalie: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  55, *this_._impl_.action_.helios_goalie_, this_._impl_.action_.helios_goalie_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosGoalieMove: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  56, *this_._impl_.action_.helios_goalie_move_, this_._impl_.action_.helios_goalie_move_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosGoalieKick: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  57, *this_._impl_.action_.helios_goalie_kick_, this_._impl_.action_.helios_goalie_kick_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosShoot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  58, *this_._impl_.action_.helios_shoot_, this_._impl_.action_.helios_shoot_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosOffensivePlanner: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  59, *this_._impl_.action_.helios_offensive_planner_, this_._impl_.action_.helios_offensive_planner_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosBasicOffensive: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  60, *this_._impl_.action_.helios_basic_offensive_, this_._impl_.action_.helios_basic_offensive_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosBasicMove: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  61, *this_._impl_.action_.helios_basic_move_, this_._impl_.action_.helios_basic_move_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosSetPlay: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  62, *this_._impl_.action_.helios_set_play_, this_._impl_.action_.helios_set_play_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosPenalty: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  63, *this_._impl_.action_.helios_penalty_, this_._impl_.action_.helios_penalty_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeliosCommunication: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  64, *this_._impl_.action_.helios_communication_, this_._impl_.action_.helios_communication_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PlayerAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerAction::ByteSizeLong(const MessageLite& base) {
          const PlayerAction& this_ = static_cast<const PlayerAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerAction::ByteSizeLong() const {
          const PlayerAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PlayerAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.action_case()) {
            // .protos.Dash dash = 1;
            case kDash: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.dash_);
              break;
            }
            // .protos.Turn turn = 2;
            case kTurn: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.turn_);
              break;
            }
            // .protos.Kick kick = 3;
            case kKick: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.kick_);
              break;
            }
            // .protos.Tackle tackle = 4;
            case kTackle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.tackle_);
              break;
            }
            // .protos.Catch catch = 5;
            case kCatch: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.catch__);
              break;
            }
            // .protos.Move move = 6;
            case kMove: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.move_);
              break;
            }
            // .protos.TurnNeck turn_neck = 7;
            case kTurnNeck: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.turn_neck_);
              break;
            }
            // .protos.ChangeView change_view = 8;
            case kChangeView: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.change_view_);
              break;
            }
            // .protos.Say say = 9;
            case kSay: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.say_);
              break;
            }
            // .protos.PointTo point_to = 10;
            case kPointTo: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.point_to_);
              break;
            }
            // .protos.PointToOf point_to_of = 11;
            case kPointToOf: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.point_to_of_);
              break;
            }
            // .protos.AttentionTo attention_to = 12;
            case kAttentionTo: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.attention_to_);
              break;
            }
            // .protos.AttentionToOf attention_to_of = 13;
            case kAttentionToOf: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.attention_to_of_);
              break;
            }
            // .protos.Log log = 14;
            case kLog: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.log_);
              break;
            }
            // .protos.DebugClient debug_client = 15;
            case kDebugClient: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.debug_client_);
              break;
            }
            // .protos.Body_GoToPoint body_go_to_point = 16;
            case kBodyGoToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_go_to_point_);
              break;
            }
            // .protos.Body_SmartKick body_smart_kick = 17;
            case kBodySmartKick: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_smart_kick_);
              break;
            }
            // .protos.Bhv_BeforeKickOff bhv_before_kick_off = 18;
            case kBhvBeforeKickOff: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_before_kick_off_);
              break;
            }
            // .protos.Bhv_BodyNeckToBall bhv_body_neck_to_ball = 19;
            case kBhvBodyNeckToBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_body_neck_to_ball_);
              break;
            }
            // .protos.Bhv_BodyNeckToPoint bhv_body_neck_to_point = 20;
            case kBhvBodyNeckToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_body_neck_to_point_);
              break;
            }
            // .protos.Bhv_Emergency bhv_emergency = 21;
            case kBhvEmergency: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_emergency_);
              break;
            }
            // .protos.Bhv_GoToPointLookBall bhv_go_to_point_look_ball = 22;
            case kBhvGoToPointLookBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_go_to_point_look_ball_);
              break;
            }
            // .protos.Bhv_NeckBodyToBall bhv_neck_body_to_ball = 23;
            case kBhvNeckBodyToBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_neck_body_to_ball_);
              break;
            }
            // .protos.Bhv_NeckBodyToPoint bhv_neck_body_to_point = 24;
            case kBhvNeckBodyToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_neck_body_to_point_);
              break;
            }
            // .protos.Bhv_ScanField bhv_scan_field = 25;
            case kBhvScanField: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.bhv_scan_field_);
              break;
            }
            // .protos.Body_AdvanceBall body_advance_ball = 26;
            case kBodyAdvanceBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_advance_ball_);
              break;
            }
            // .protos.Body_ClearBall body_clear_ball = 27;
            case kBodyClearBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_clear_ball_);
              break;
            }
            // .protos.Body_Dribble body_dribble = 28;
            case kBodyDribble: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_dribble_);
              break;
            }
            // .protos.Body_GoToPointDodge body_go_to_point_dodge = 29;
            case kBodyGoToPointDodge: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_go_to_point_dodge_);
              break;
            }
            // .protos.Body_HoldBall body_hold_ball = 30;
            case kBodyHoldBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_hold_ball_);
              break;
            }
            // .protos.Body_Intercept body_intercept = 31;
            case kBodyIntercept: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_intercept_);
              break;
            }
            // .protos.Body_KickOneStep body_kick_one_step = 32;
            case kBodyKickOneStep: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_kick_one_step_);
              break;
            }
            // .protos.Body_StopBall body_stop_ball = 33;
            case kBodyStopBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_stop_ball_);
              break;
            }
            // .protos.Body_StopDash body_stop_dash = 34;
            case kBodyStopDash: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_stop_dash_);
              break;
            }
            // .protos.Body_TackleToPoint body_tackle_to_point = 35;
            case kBodyTackleToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_tackle_to_point_);
              break;
            }
            // .protos.Body_TurnToAngle body_turn_to_angle = 36;
            case kBodyTurnToAngle: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_turn_to_angle_);
              break;
            }
            // .protos.Body_TurnToBall body_turn_to_ball = 37;
            case kBodyTurnToBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_turn_to_ball_);
              break;
            }
            // .protos.Body_TurnToPoint body_turn_to_point = 38;
            case kBodyTurnToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.body_turn_to_point_);
              break;
            }
            // .protos.Focus_MoveToPoint focus_move_to_point = 39;
            case kFocusMoveToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.focus_move_to_point_);
              break;
            }
            // .protos.Focus_Reset focus_reset = 40;
            case kFocusReset: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.focus_reset_);
              break;
            }
            // .protos.Neck_ScanField neck_scan_field = 41;
            case kNeckScanField: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_scan_field_);
              break;
            }
            // .protos.Neck_ScanPlayers neck_scan_players = 42;
            case kNeckScanPlayers: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_scan_players_);
              break;
            }
            // .protos.Neck_TurnToBallAndPlayer neck_turn_to_ball_and_player = 43;
            case kNeckTurnToBallAndPlayer: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_ball_and_player_);
              break;
            }
            // .protos.Neck_TurnToBallOrScan neck_turn_to_ball_or_scan = 44;
            case kNeckTurnToBallOrScan: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_ball_or_scan_);
              break;
            }
            // .protos.Neck_TurnToBall neck_turn_to_ball = 45;
            case kNeckTurnToBall: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_ball_);
              break;
            }
            // .protos.Neck_TurnToGoalieOrScan neck_turn_to_goalie_or_scan = 46;
            case kNeckTurnToGoalieOrScan: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_goalie_or_scan_);
              break;
            }
            // .protos.Neck_TurnToLowConfTeammate neck_turn_to_low_conf_teammate = 47;
            case kNeckTurnToLowConfTeammate: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_low_conf_teammate_);
              break;
            }
            // .protos.Neck_TurnToPlayerOrScan neck_turn_to_player_or_scan = 48;
            case kNeckTurnToPlayerOrScan: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_player_or_scan_);
              break;
            }
            // .protos.Neck_TurnToPoint neck_turn_to_point = 49;
            case kNeckTurnToPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_point_);
              break;
            }
            // .protos.Neck_TurnToRelative neck_turn_to_relative = 50;
            case kNeckTurnToRelative: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.neck_turn_to_relative_);
              break;
            }
            // .protos.View_ChangeWidth view_change_width = 51;
            case kViewChangeWidth: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.view_change_width_);
              break;
            }
            // .protos.View_Normal view_normal = 52;
            case kViewNormal: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.view_normal_);
              break;
            }
            // .protos.View_Synch view_synch = 53;
            case kViewSynch: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.view_synch_);
              break;
            }
            // .protos.View_Wide view_wide = 54;
            case kViewWide: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.view_wide_);
              break;
            }
            // .protos.HeliosGoalie helios_goalie = 55;
            case kHeliosGoalie: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_goalie_);
              break;
            }
            // .protos.HeliosGoalieMove helios_goalie_move = 56;
            case kHeliosGoalieMove: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_goalie_move_);
              break;
            }
            // .protos.HeliosGoalieKick helios_goalie_kick = 57;
            case kHeliosGoalieKick: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_goalie_kick_);
              break;
            }
            // .protos.HeliosShoot helios_shoot = 58;
            case kHeliosShoot: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_shoot_);
              break;
            }
            // .protos.HeliosOffensivePlanner helios_offensive_planner = 59;
            case kHeliosOffensivePlanner: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_offensive_planner_);
              break;
            }
            // .protos.HeliosBasicOffensive helios_basic_offensive = 60;
            case kHeliosBasicOffensive: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_basic_offensive_);
              break;
            }
            // .protos.HeliosBasicMove helios_basic_move = 61;
            case kHeliosBasicMove: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_basic_move_);
              break;
            }
            // .protos.HeliosSetPlay helios_set_play = 62;
            case kHeliosSetPlay: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_set_play_);
              break;
            }
            // .protos.HeliosPenalty helios_penalty = 63;
            case kHeliosPenalty: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_penalty_);
              break;
            }
            // .protos.HeliosCommunicaion helios_communication = 64;
            case kHeliosCommunication: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.helios_communication_);
              break;
            }
            case ACTION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerAction*>(&to_msg);
  auto& from = static_cast<const PlayerAction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PlayerAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_action();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDash: {
        if (oneof_needs_init) {
          _this->_impl_.action_.dash_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Dash>(arena, *from._impl_.action_.dash_);
        } else {
          _this->_impl_.action_.dash_->MergeFrom(from._internal_dash());
        }
        break;
      }
      case kTurn: {
        if (oneof_needs_init) {
          _this->_impl_.action_.turn_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Turn>(arena, *from._impl_.action_.turn_);
        } else {
          _this->_impl_.action_.turn_->MergeFrom(from._internal_turn());
        }
        break;
      }
      case kKick: {
        if (oneof_needs_init) {
          _this->_impl_.action_.kick_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Kick>(arena, *from._impl_.action_.kick_);
        } else {
          _this->_impl_.action_.kick_->MergeFrom(from._internal_kick());
        }
        break;
      }
      case kTackle: {
        if (oneof_needs_init) {
          _this->_impl_.action_.tackle_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Tackle>(arena, *from._impl_.action_.tackle_);
        } else {
          _this->_impl_.action_.tackle_->MergeFrom(from._internal_tackle());
        }
        break;
      }
      case kCatch: {
        if (oneof_needs_init) {
          _this->_impl_.action_.catch__ =
              ::google::protobuf::Message::CopyConstruct<::protos::Catch>(arena, *from._impl_.action_.catch__);
        } else {
          _this->_impl_.action_.catch__->MergeFrom(from._internal_catch_());
        }
        break;
      }
      case kMove: {
        if (oneof_needs_init) {
          _this->_impl_.action_.move_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Move>(arena, *from._impl_.action_.move_);
        } else {
          _this->_impl_.action_.move_->MergeFrom(from._internal_move());
        }
        break;
      }
      case kTurnNeck: {
        if (oneof_needs_init) {
          _this->_impl_.action_.turn_neck_ =
              ::google::protobuf::Message::CopyConstruct<::protos::TurnNeck>(arena, *from._impl_.action_.turn_neck_);
        } else {
          _this->_impl_.action_.turn_neck_->MergeFrom(from._internal_turn_neck());
        }
        break;
      }
      case kChangeView: {
        if (oneof_needs_init) {
          _this->_impl_.action_.change_view_ =
              ::google::protobuf::Message::CopyConstruct<::protos::ChangeView>(arena, *from._impl_.action_.change_view_);
        } else {
          _this->_impl_.action_.change_view_->MergeFrom(from._internal_change_view());
        }
        break;
      }
      case kSay: {
        if (oneof_needs_init) {
          _this->_impl_.action_.say_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Say>(arena, *from._impl_.action_.say_);
        } else {
          _this->_impl_.action_.say_->MergeFrom(from._internal_say());
        }
        break;
      }
      case kPointTo: {
        if (oneof_needs_init) {
          _this->_impl_.action_.point_to_ =
              ::google::protobuf::Message::CopyConstruct<::protos::PointTo>(arena, *from._impl_.action_.point_to_);
        } else {
          _this->_impl_.action_.point_to_->MergeFrom(from._internal_point_to());
        }
        break;
      }
      case kPointToOf: {
        if (oneof_needs_init) {
          _this->_impl_.action_.point_to_of_ =
              ::google::protobuf::Message::CopyConstruct<::protos::PointToOf>(arena, *from._impl_.action_.point_to_of_);
        } else {
          _this->_impl_.action_.point_to_of_->MergeFrom(from._internal_point_to_of());
        }
        break;
      }
      case kAttentionTo: {
        if (oneof_needs_init) {
          _this->_impl_.action_.attention_to_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AttentionTo>(arena, *from._impl_.action_.attention_to_);
        } else {
          _this->_impl_.action_.attention_to_->MergeFrom(from._internal_attention_to());
        }
        break;
      }
      case kAttentionToOf: {
        if (oneof_needs_init) {
          _this->_impl_.action_.attention_to_of_ =
              ::google::protobuf::Message::CopyConstruct<::protos::AttentionToOf>(arena, *from._impl_.action_.attention_to_of_);
        } else {
          _this->_impl_.action_.attention_to_of_->MergeFrom(from._internal_attention_to_of());
        }
        break;
      }
      case kLog: {
        if (oneof_needs_init) {
          _this->_impl_.action_.log_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Log>(arena, *from._impl_.action_.log_);
        } else {
          _this->_impl_.action_.log_->MergeFrom(from._internal_log());
        }
        break;
      }
      case kDebugClient: {
        if (oneof_needs_init) {
          _this->_impl_.action_.debug_client_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DebugClient>(arena, *from._impl_.action_.debug_client_);
        } else {
          _this->_impl_.action_.debug_client_->MergeFrom(from._internal_debug_client());
        }
        break;
      }
      case kBodyGoToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_go_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_GoToPoint>(arena, *from._impl_.action_.body_go_to_point_);
        } else {
          _this->_impl_.action_.body_go_to_point_->MergeFrom(from._internal_body_go_to_point());
        }
        break;
      }
      case kBodySmartKick: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_smart_kick_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_SmartKick>(arena, *from._impl_.action_.body_smart_kick_);
        } else {
          _this->_impl_.action_.body_smart_kick_->MergeFrom(from._internal_body_smart_kick());
        }
        break;
      }
      case kBhvBeforeKickOff: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_before_kick_off_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BeforeKickOff>(arena, *from._impl_.action_.bhv_before_kick_off_);
        } else {
          _this->_impl_.action_.bhv_before_kick_off_->MergeFrom(from._internal_bhv_before_kick_off());
        }
        break;
      }
      case kBhvBodyNeckToBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_body_neck_to_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BodyNeckToBall>(arena, *from._impl_.action_.bhv_body_neck_to_ball_);
        } else {
          _this->_impl_.action_.bhv_body_neck_to_ball_->MergeFrom(from._internal_bhv_body_neck_to_ball());
        }
        break;
      }
      case kBhvBodyNeckToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_body_neck_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_BodyNeckToPoint>(arena, *from._impl_.action_.bhv_body_neck_to_point_);
        } else {
          _this->_impl_.action_.bhv_body_neck_to_point_->MergeFrom(from._internal_bhv_body_neck_to_point());
        }
        break;
      }
      case kBhvEmergency: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_emergency_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_Emergency>(arena, *from._impl_.action_.bhv_emergency_);
        } else {
          _this->_impl_.action_.bhv_emergency_->MergeFrom(from._internal_bhv_emergency());
        }
        break;
      }
      case kBhvGoToPointLookBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_go_to_point_look_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_GoToPointLookBall>(arena, *from._impl_.action_.bhv_go_to_point_look_ball_);
        } else {
          _this->_impl_.action_.bhv_go_to_point_look_ball_->MergeFrom(from._internal_bhv_go_to_point_look_ball());
        }
        break;
      }
      case kBhvNeckBodyToBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_neck_body_to_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_NeckBodyToBall>(arena, *from._impl_.action_.bhv_neck_body_to_ball_);
        } else {
          _this->_impl_.action_.bhv_neck_body_to_ball_->MergeFrom(from._internal_bhv_neck_body_to_ball());
        }
        break;
      }
      case kBhvNeckBodyToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_neck_body_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_NeckBodyToPoint>(arena, *from._impl_.action_.bhv_neck_body_to_point_);
        } else {
          _this->_impl_.action_.bhv_neck_body_to_point_->MergeFrom(from._internal_bhv_neck_body_to_point());
        }
        break;
      }
      case kBhvScanField: {
        if (oneof_needs_init) {
          _this->_impl_.action_.bhv_scan_field_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Bhv_ScanField>(arena, *from._impl_.action_.bhv_scan_field_);
        } else {
          _this->_impl_.action_.bhv_scan_field_->MergeFrom(from._internal_bhv_scan_field());
        }
        break;
      }
      case kBodyAdvanceBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_advance_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_AdvanceBall>(arena, *from._impl_.action_.body_advance_ball_);
        } else {
          _this->_impl_.action_.body_advance_ball_->MergeFrom(from._internal_body_advance_ball());
        }
        break;
      }
      case kBodyClearBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_clear_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_ClearBall>(arena, *from._impl_.action_.body_clear_ball_);
        } else {
          _this->_impl_.action_.body_clear_ball_->MergeFrom(from._internal_body_clear_ball());
        }
        break;
      }
      case kBodyDribble: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_dribble_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_Dribble>(arena, *from._impl_.action_.body_dribble_);
        } else {
          _this->_impl_.action_.body_dribble_->MergeFrom(from._internal_body_dribble());
        }
        break;
      }
      case kBodyGoToPointDodge: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_go_to_point_dodge_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_GoToPointDodge>(arena, *from._impl_.action_.body_go_to_point_dodge_);
        } else {
          _this->_impl_.action_.body_go_to_point_dodge_->MergeFrom(from._internal_body_go_to_point_dodge());
        }
        break;
      }
      case kBodyHoldBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_hold_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_HoldBall>(arena, *from._impl_.action_.body_hold_ball_);
        } else {
          _this->_impl_.action_.body_hold_ball_->MergeFrom(from._internal_body_hold_ball());
        }
        break;
      }
      case kBodyIntercept: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_intercept_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_Intercept>(arena, *from._impl_.action_.body_intercept_);
        } else {
          _this->_impl_.action_.body_intercept_->MergeFrom(from._internal_body_intercept());
        }
        break;
      }
      case kBodyKickOneStep: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_kick_one_step_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_KickOneStep>(arena, *from._impl_.action_.body_kick_one_step_);
        } else {
          _this->_impl_.action_.body_kick_one_step_->MergeFrom(from._internal_body_kick_one_step());
        }
        break;
      }
      case kBodyStopBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_stop_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_StopBall>(arena, *from._impl_.action_.body_stop_ball_);
        } else {
          _this->_impl_.action_.body_stop_ball_->MergeFrom(from._internal_body_stop_ball());
        }
        break;
      }
      case kBodyStopDash: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_stop_dash_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_StopDash>(arena, *from._impl_.action_.body_stop_dash_);
        } else {
          _this->_impl_.action_.body_stop_dash_->MergeFrom(from._internal_body_stop_dash());
        }
        break;
      }
      case kBodyTackleToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_tackle_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_TackleToPoint>(arena, *from._impl_.action_.body_tackle_to_point_);
        } else {
          _this->_impl_.action_.body_tackle_to_point_->MergeFrom(from._internal_body_tackle_to_point());
        }
        break;
      }
      case kBodyTurnToAngle: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_turn_to_angle_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToAngle>(arena, *from._impl_.action_.body_turn_to_angle_);
        } else {
          _this->_impl_.action_.body_turn_to_angle_->MergeFrom(from._internal_body_turn_to_angle());
        }
        break;
      }
      case kBodyTurnToBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_turn_to_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToBall>(arena, *from._impl_.action_.body_turn_to_ball_);
        } else {
          _this->_impl_.action_.body_turn_to_ball_->MergeFrom(from._internal_body_turn_to_ball());
        }
        break;
      }
      case kBodyTurnToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.body_turn_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Body_TurnToPoint>(arena, *from._impl_.action_.body_turn_to_point_);
        } else {
          _this->_impl_.action_.body_turn_to_point_->MergeFrom(from._internal_body_turn_to_point());
        }
        break;
      }
      case kFocusMoveToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.focus_move_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Focus_MoveToPoint>(arena, *from._impl_.action_.focus_move_to_point_);
        } else {
          _this->_impl_.action_.focus_move_to_point_->MergeFrom(from._internal_focus_move_to_point());
        }
        break;
      }
      case kFocusReset: {
        if (oneof_needs_init) {
          _this->_impl_.action_.focus_reset_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Focus_Reset>(arena, *from._impl_.action_.focus_reset_);
        } else {
          _this->_impl_.action_.focus_reset_->MergeFrom(from._internal_focus_reset());
        }
        break;
      }
      case kNeckScanField: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_scan_field_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_ScanField>(arena, *from._impl_.action_.neck_scan_field_);
        } else {
          _this->_impl_.action_.neck_scan_field_->MergeFrom(from._internal_neck_scan_field());
        }
        break;
      }
      case kNeckScanPlayers: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_scan_players_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_ScanPlayers>(arena, *from._impl_.action_.neck_scan_players_);
        } else {
          _this->_impl_.action_.neck_scan_players_->MergeFrom(from._internal_neck_scan_players());
        }
        break;
      }
      case kNeckTurnToBallAndPlayer: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_ball_and_player_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBallAndPlayer>(arena, *from._impl_.action_.neck_turn_to_ball_and_player_);
        } else {
          _this->_impl_.action_.neck_turn_to_ball_and_player_->MergeFrom(from._internal_neck_turn_to_ball_and_player());
        }
        break;
      }
      case kNeckTurnToBallOrScan: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_ball_or_scan_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBallOrScan>(arena, *from._impl_.action_.neck_turn_to_ball_or_scan_);
        } else {
          _this->_impl_.action_.neck_turn_to_ball_or_scan_->MergeFrom(from._internal_neck_turn_to_ball_or_scan());
        }
        break;
      }
      case kNeckTurnToBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToBall>(arena, *from._impl_.action_.neck_turn_to_ball_);
        } else {
          _this->_impl_.action_.neck_turn_to_ball_->MergeFrom(from._internal_neck_turn_to_ball());
        }
        break;
      }
      case kNeckTurnToGoalieOrScan: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_goalie_or_scan_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToGoalieOrScan>(arena, *from._impl_.action_.neck_turn_to_goalie_or_scan_);
        } else {
          _this->_impl_.action_.neck_turn_to_goalie_or_scan_->MergeFrom(from._internal_neck_turn_to_goalie_or_scan());
        }
        break;
      }
      case kNeckTurnToLowConfTeammate: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_low_conf_teammate_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToLowConfTeammate>(arena, *from._impl_.action_.neck_turn_to_low_conf_teammate_);
        } else {
          _this->_impl_.action_.neck_turn_to_low_conf_teammate_->MergeFrom(from._internal_neck_turn_to_low_conf_teammate());
        }
        break;
      }
      case kNeckTurnToPlayerOrScan: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_player_or_scan_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToPlayerOrScan>(arena, *from._impl_.action_.neck_turn_to_player_or_scan_);
        } else {
          _this->_impl_.action_.neck_turn_to_player_or_scan_->MergeFrom(from._internal_neck_turn_to_player_or_scan());
        }
        break;
      }
      case kNeckTurnToPoint: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_point_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToPoint>(arena, *from._impl_.action_.neck_turn_to_point_);
        } else {
          _this->_impl_.action_.neck_turn_to_point_->MergeFrom(from._internal_neck_turn_to_point());
        }
        break;
      }
      case kNeckTurnToRelative: {
        if (oneof_needs_init) {
          _this->_impl_.action_.neck_turn_to_relative_ =
              ::google::protobuf::Message::CopyConstruct<::protos::Neck_TurnToRelative>(arena, *from._impl_.action_.neck_turn_to_relative_);
        } else {
          _this->_impl_.action_.neck_turn_to_relative_->MergeFrom(from._internal_neck_turn_to_relative());
        }
        break;
      }
      case kViewChangeWidth: {
        if (oneof_needs_init) {
          _this->_impl_.action_.view_change_width_ =
              ::google::protobuf::Message::CopyConstruct<::protos::View_ChangeWidth>(arena, *from._impl_.action_.view_change_width_);
        } else {
          _this->_impl_.action_.view_change_width_->MergeFrom(from._internal_view_change_width());
        }
        break;
      }
      case kViewNormal: {
        if (oneof_needs_init) {
          _this->_impl_.action_.view_normal_ =
              ::google::protobuf::Message::CopyConstruct<::protos::View_Normal>(arena, *from._impl_.action_.view_normal_);
        } else {
          _this->_impl_.action_.view_normal_->MergeFrom(from._internal_view_normal());
        }
        break;
      }
      case kViewSynch: {
        if (oneof_needs_init) {
          _this->_impl_.action_.view_synch_ =
              ::google::protobuf::Message::CopyConstruct<::protos::View_Synch>(arena, *from._impl_.action_.view_synch_);
        } else {
          _this->_impl_.action_.view_synch_->MergeFrom(from._internal_view_synch());
        }
        break;
      }
      case kViewWide: {
        if (oneof_needs_init) {
          _this->_impl_.action_.view_wide_ =
              ::google::protobuf::Message::CopyConstruct<::protos::View_Wide>(arena, *from._impl_.action_.view_wide_);
        } else {
          _this->_impl_.action_.view_wide_->MergeFrom(from._internal_view_wide());
        }
        break;
      }
      case kHeliosGoalie: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_goalie_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalie>(arena, *from._impl_.action_.helios_goalie_);
        } else {
          _this->_impl_.action_.helios_goalie_->MergeFrom(from._internal_helios_goalie());
        }
        break;
      }
      case kHeliosGoalieMove: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_goalie_move_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalieMove>(arena, *from._impl_.action_.helios_goalie_move_);
        } else {
          _this->_impl_.action_.helios_goalie_move_->MergeFrom(from._internal_helios_goalie_move());
        }
        break;
      }
      case kHeliosGoalieKick: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_goalie_kick_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosGoalieKick>(arena, *from._impl_.action_.helios_goalie_kick_);
        } else {
          _this->_impl_.action_.helios_goalie_kick_->MergeFrom(from._internal_helios_goalie_kick());
        }
        break;
      }
      case kHeliosShoot: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_shoot_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosShoot>(arena, *from._impl_.action_.helios_shoot_);
        } else {
          _this->_impl_.action_.helios_shoot_->MergeFrom(from._internal_helios_shoot());
        }
        break;
      }
      case kHeliosOffensivePlanner: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_offensive_planner_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosOffensivePlanner>(arena, *from._impl_.action_.helios_offensive_planner_);
        } else {
          _this->_impl_.action_.helios_offensive_planner_->MergeFrom(from._internal_helios_offensive_planner());
        }
        break;
      }
      case kHeliosBasicOffensive: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_basic_offensive_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosBasicOffensive>(arena, *from._impl_.action_.helios_basic_offensive_);
        } else {
          _this->_impl_.action_.helios_basic_offensive_->MergeFrom(from._internal_helios_basic_offensive());
        }
        break;
      }
      case kHeliosBasicMove: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_basic_move_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosBasicMove>(arena, *from._impl_.action_.helios_basic_move_);
        } else {
          _this->_impl_.action_.helios_basic_move_->MergeFrom(from._internal_helios_basic_move());
        }
        break;
      }
      case kHeliosSetPlay: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_set_play_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosSetPlay>(arena, *from._impl_.action_.helios_set_play_);
        } else {
          _this->_impl_.action_.helios_set_play_->MergeFrom(from._internal_helios_set_play());
        }
        break;
      }
      case kHeliosPenalty: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_penalty_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosPenalty>(arena, *from._impl_.action_.helios_penalty_);
        } else {
          _this->_impl_.action_.helios_penalty_->MergeFrom(from._internal_helios_penalty());
        }
        break;
      }
      case kHeliosCommunication: {
        if (oneof_needs_init) {
          _this->_impl_.action_.helios_communication_ =
              ::google::protobuf::Message::CopyConstruct<::protos::HeliosCommunicaion>(arena, *from._impl_.action_.helios_communication_);
        } else {
          _this->_impl_.action_.helios_communication_->MergeFrom(from._internal_helios_communication());
        }
        break;
      }
      case ACTION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAction::CopyFrom(const PlayerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PlayerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerAction::InternalSwap(PlayerAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PlayerAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerActions::_Internal {
 public:
};

PlayerActions::PlayerActions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PlayerActions)
}
inline PROTOBUF_NDEBUG_INLINE PlayerActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PlayerActions& from_msg)
      : actions_{visibility, arena, from.actions_},
        _cached_size_{0} {}

PlayerActions::PlayerActions(
    ::google::protobuf::Arena* arena,
    const PlayerActions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerActions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.ignore_preprocess_ = from._impl_.ignore_preprocess_;

  // @@protoc_insertion_point(copy_constructor:protos.PlayerActions)
}
inline PROTOBUF_NDEBUG_INLINE PlayerActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actions_{visibility, arena},
        _cached_size_{0} {}

inline void PlayerActions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ignore_preprocess_ = {};
}
PlayerActions::~PlayerActions() {
  // @@protoc_insertion_point(destructor:protos.PlayerActions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerActions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PlayerActions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PlayerActions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PlayerActions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PlayerActions>(),
            ::google::protobuf::Message::GetNewImpl<PlayerActions>(),
            ::google::protobuf::Message::GetClearImpl<PlayerActions>(), &PlayerActions::ByteSizeLong,
                &PlayerActions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PlayerActions, _impl_._cached_size_),
            false,
        },
        &PlayerActions::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PlayerActions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PlayerActions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PlayerActions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool ignore_preprocess = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerActions, _impl_.ignore_preprocess_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerActions, _impl_.ignore_preprocess_)}},
    // repeated .protos.PlayerAction actions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerActions, _impl_.actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protos.PlayerAction actions = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerActions, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_preprocess = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerActions, _impl_.ignore_preprocess_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::PlayerAction>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PlayerActions::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PlayerActions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _impl_.ignore_preprocess_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerActions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerActions& this_ = static_cast<const PlayerActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerActions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PlayerActions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .protos.PlayerAction actions = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_actions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_actions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool ignore_preprocess = 2;
          if (this_._internal_ignore_preprocess() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_ignore_preprocess(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PlayerActions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerActions::ByteSizeLong(const MessageLite& base) {
          const PlayerActions& this_ = static_cast<const PlayerActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerActions::ByteSizeLong() const {
          const PlayerActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PlayerActions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protos.PlayerAction actions = 1;
             {
              total_size += 1UL * this_._internal_actions_size();
              for (const auto& msg : this_._internal_actions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bool ignore_preprocess = 2;
            if (this_._internal_ignore_preprocess() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerActions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerActions*>(&to_msg);
  auto& from = static_cast<const PlayerActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PlayerActions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(
      from._internal_actions());
  if (from._internal_ignore_preprocess() != 0) {
    _this->_impl_.ignore_preprocess_ = from._impl_.ignore_preprocess_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerActions::CopyFrom(const PlayerActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PlayerActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerActions::InternalSwap(PlayerActions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
        swap(_impl_.ignore_preprocess_, other->_impl_.ignore_preprocess_);
}

::google::protobuf::Metadata PlayerActions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChangePlayerType::_Internal {
 public:
};

ChangePlayerType::ChangePlayerType(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.ChangePlayerType)
}
ChangePlayerType::ChangePlayerType(
    ::google::protobuf::Arena* arena, const ChangePlayerType& from)
    : ChangePlayerType(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ChangePlayerType::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ChangePlayerType::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uniform_number_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, uniform_number_) +
               sizeof(Impl_::type_));
}
ChangePlayerType::~ChangePlayerType() {
  // @@protoc_insertion_point(destructor:protos.ChangePlayerType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangePlayerType::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ChangePlayerType::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ChangePlayerType_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ChangePlayerType::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ChangePlayerType>(),
            ::google::protobuf::Message::GetNewImpl<ChangePlayerType>(),
            ::google::protobuf::Message::GetClearImpl<ChangePlayerType>(), &ChangePlayerType::ByteSizeLong,
                &ChangePlayerType::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_._cached_size_),
            false,
        },
        &ChangePlayerType::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ChangePlayerType::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ChangePlayerType::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::ChangePlayerType>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangePlayerType, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.type_)}},
    // int32 uniform_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangePlayerType, _impl_.uniform_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.uniform_number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 uniform_number = 1;
    {PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 2;
    {PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ChangePlayerType::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.ChangePlayerType)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uniform_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.uniform_number_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChangePlayerType::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChangePlayerType& this_ = static_cast<const ChangePlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChangePlayerType::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChangePlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.ChangePlayerType)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 uniform_number = 1;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 type = 2;
          if (this_._internal_type() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.ChangePlayerType)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChangePlayerType::ByteSizeLong(const MessageLite& base) {
          const ChangePlayerType& this_ = static_cast<const ChangePlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChangePlayerType::ByteSizeLong() const {
          const ChangePlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.ChangePlayerType)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 uniform_number = 1;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 type = 2;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChangePlayerType::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChangePlayerType*>(&to_msg);
  auto& from = static_cast<const ChangePlayerType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.ChangePlayerType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePlayerType::CopyFrom(const ChangePlayerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.ChangePlayerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChangePlayerType::InternalSwap(ChangePlayerType* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.type_)
      + sizeof(ChangePlayerType::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ChangePlayerType, _impl_.uniform_number_)>(
          reinterpret_cast<char*>(&_impl_.uniform_number_),
          reinterpret_cast<char*>(&other->_impl_.uniform_number_));
}

::google::protobuf::Metadata ChangePlayerType::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoHeliosSubstitute::_Internal {
 public:
};

DoHeliosSubstitute::DoHeliosSubstitute(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.DoHeliosSubstitute)
}
DoHeliosSubstitute::DoHeliosSubstitute(
    ::google::protobuf::Arena* arena,
    const DoHeliosSubstitute& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoHeliosSubstitute* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.DoHeliosSubstitute)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoHeliosSubstitute::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DoHeliosSubstitute_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoHeliosSubstitute::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DoHeliosSubstitute>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DoHeliosSubstitute>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DoHeliosSubstitute>(), &DoHeliosSubstitute::ByteSizeLong,
                &DoHeliosSubstitute::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoHeliosSubstitute, _impl_._cached_size_),
            false,
        },
        &DoHeliosSubstitute::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoHeliosSubstitute::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DoHeliosSubstitute::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoHeliosSubstitute>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DoHeliosSubstitute::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoHeliosSayPlayerTypes::_Internal {
 public:
};

DoHeliosSayPlayerTypes::DoHeliosSayPlayerTypes(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.DoHeliosSayPlayerTypes)
}
DoHeliosSayPlayerTypes::DoHeliosSayPlayerTypes(
    ::google::protobuf::Arena* arena,
    const DoHeliosSayPlayerTypes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoHeliosSayPlayerTypes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.DoHeliosSayPlayerTypes)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoHeliosSayPlayerTypes::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DoHeliosSayPlayerTypes_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoHeliosSayPlayerTypes::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DoHeliosSayPlayerTypes>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DoHeliosSayPlayerTypes>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DoHeliosSayPlayerTypes>(), &DoHeliosSayPlayerTypes::ByteSizeLong,
                &DoHeliosSayPlayerTypes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoHeliosSayPlayerTypes, _impl_._cached_size_),
            false,
        },
        &DoHeliosSayPlayerTypes::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoHeliosSayPlayerTypes::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DoHeliosSayPlayerTypes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoHeliosSayPlayerTypes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DoHeliosSayPlayerTypes::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CoachAction::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::protos::CoachAction, _impl_._oneof_case_);
};

void CoachAction::set_allocated_change_player_types(::protos::ChangePlayerType* change_player_types) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (change_player_types) {
    ::google::protobuf::Arena* submessage_arena = change_player_types->GetArena();
    if (message_arena != submessage_arena) {
      change_player_types = ::google::protobuf::internal::GetOwnedMessage(message_arena, change_player_types, submessage_arena);
    }
    set_has_change_player_types();
    _impl_.action_.change_player_types_ = change_player_types;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.CoachAction.change_player_types)
}
void CoachAction::set_allocated_do_helios_substitute(::protos::DoHeliosSubstitute* do_helios_substitute) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_helios_substitute) {
    ::google::protobuf::Arena* submessage_arena = do_helios_substitute->GetArena();
    if (message_arena != submessage_arena) {
      do_helios_substitute = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_helios_substitute, submessage_arena);
    }
    set_has_do_helios_substitute();
    _impl_.action_.do_helios_substitute_ = do_helios_substitute;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.CoachAction.do_helios_substitute)
}
void CoachAction::set_allocated_do_helios_say_player_types(::protos::DoHeliosSayPlayerTypes* do_helios_say_player_types) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_helios_say_player_types) {
    ::google::protobuf::Arena* submessage_arena = do_helios_say_player_types->GetArena();
    if (message_arena != submessage_arena) {
      do_helios_say_player_types = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_helios_say_player_types, submessage_arena);
    }
    set_has_do_helios_say_player_types();
    _impl_.action_.do_helios_say_player_types_ = do_helios_say_player_types;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.CoachAction.do_helios_say_player_types)
}
CoachAction::CoachAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.CoachAction)
}
inline PROTOBUF_NDEBUG_INLINE CoachAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::CoachAction& from_msg)
      : action_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

CoachAction::CoachAction(
    ::google::protobuf::Arena* arena,
    const CoachAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CoachAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (action_case()) {
    case ACTION_NOT_SET:
      break;
      case kChangePlayerTypes:
        _impl_.action_.change_player_types_ = ::google::protobuf::Message::CopyConstruct<::protos::ChangePlayerType>(arena, *from._impl_.action_.change_player_types_);
        break;
      case kDoHeliosSubstitute:
        _impl_.action_.do_helios_substitute_ = ::google::protobuf::Message::CopyConstruct<::protos::DoHeliosSubstitute>(arena, *from._impl_.action_.do_helios_substitute_);
        break;
      case kDoHeliosSayPlayerTypes:
        _impl_.action_.do_helios_say_player_types_ = ::google::protobuf::Message::CopyConstruct<::protos::DoHeliosSayPlayerTypes>(arena, *from._impl_.action_.do_helios_say_player_types_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protos.CoachAction)
}
inline PROTOBUF_NDEBUG_INLINE CoachAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void CoachAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CoachAction::~CoachAction() {
  // @@protoc_insertion_point(destructor:protos.CoachAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CoachAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
  _impl_.~Impl_();
}

void CoachAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:protos.CoachAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (action_case()) {
    case kChangePlayerTypes: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.change_player_types_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.change_player_types_);
      }
      break;
    }
    case kDoHeliosSubstitute: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_helios_substitute_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_helios_substitute_);
      }
      break;
    }
    case kDoHeliosSayPlayerTypes: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_helios_say_player_types_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_helios_say_player_types_);
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CoachAction::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CoachAction_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CoachAction::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CoachAction>(),
            ::google::protobuf::Message::GetNewImpl<CoachAction>(),
            ::google::protobuf::Message::GetClearImpl<CoachAction>(), &CoachAction::ByteSizeLong,
                &CoachAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CoachAction, _impl_._cached_size_),
            false,
        },
        &CoachAction::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CoachAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> CoachAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::CoachAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.ChangePlayerType change_player_types = 1;
    {PROTOBUF_FIELD_OFFSET(CoachAction, _impl_.action_.change_player_types_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoHeliosSubstitute do_helios_substitute = 2;
    {PROTOBUF_FIELD_OFFSET(CoachAction, _impl_.action_.do_helios_substitute_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoHeliosSayPlayerTypes do_helios_say_player_types = 3;
    {PROTOBUF_FIELD_OFFSET(CoachAction, _impl_.action_.do_helios_say_player_types_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::ChangePlayerType>()},
    {::_pbi::TcParser::GetTable<::protos::DoHeliosSubstitute>()},
    {::_pbi::TcParser::GetTable<::protos::DoHeliosSayPlayerTypes>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CoachAction::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CoachAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CoachAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CoachAction& this_ = static_cast<const CoachAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CoachAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CoachAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.CoachAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.action_case()) {
            case kChangePlayerTypes: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.action_.change_player_types_, this_._impl_.action_.change_player_types_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoHeliosSubstitute: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.action_.do_helios_substitute_, this_._impl_.action_.do_helios_substitute_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoHeliosSayPlayerTypes: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.action_.do_helios_say_player_types_, this_._impl_.action_.do_helios_say_player_types_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.CoachAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CoachAction::ByteSizeLong(const MessageLite& base) {
          const CoachAction& this_ = static_cast<const CoachAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CoachAction::ByteSizeLong() const {
          const CoachAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.CoachAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.action_case()) {
            // .protos.ChangePlayerType change_player_types = 1;
            case kChangePlayerTypes: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.change_player_types_);
              break;
            }
            // .protos.DoHeliosSubstitute do_helios_substitute = 2;
            case kDoHeliosSubstitute: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_helios_substitute_);
              break;
            }
            // .protos.DoHeliosSayPlayerTypes do_helios_say_player_types = 3;
            case kDoHeliosSayPlayerTypes: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_helios_say_player_types_);
              break;
            }
            case ACTION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CoachAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CoachAction*>(&to_msg);
  auto& from = static_cast<const CoachAction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.CoachAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_action();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kChangePlayerTypes: {
        if (oneof_needs_init) {
          _this->_impl_.action_.change_player_types_ =
              ::google::protobuf::Message::CopyConstruct<::protos::ChangePlayerType>(arena, *from._impl_.action_.change_player_types_);
        } else {
          _this->_impl_.action_.change_player_types_->MergeFrom(from._internal_change_player_types());
        }
        break;
      }
      case kDoHeliosSubstitute: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_helios_substitute_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoHeliosSubstitute>(arena, *from._impl_.action_.do_helios_substitute_);
        } else {
          _this->_impl_.action_.do_helios_substitute_->MergeFrom(from._internal_do_helios_substitute());
        }
        break;
      }
      case kDoHeliosSayPlayerTypes: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_helios_say_player_types_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoHeliosSayPlayerTypes>(arena, *from._impl_.action_.do_helios_say_player_types_);
        } else {
          _this->_impl_.action_.do_helios_say_player_types_->MergeFrom(from._internal_do_helios_say_player_types());
        }
        break;
      }
      case ACTION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CoachAction::CopyFrom(const CoachAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CoachAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CoachAction::InternalSwap(CoachAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CoachAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CoachActions::_Internal {
 public:
};

CoachActions::CoachActions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.CoachActions)
}
inline PROTOBUF_NDEBUG_INLINE CoachActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::CoachActions& from_msg)
      : actions_{visibility, arena, from.actions_},
        _cached_size_{0} {}

CoachActions::CoachActions(
    ::google::protobuf::Arena* arena,
    const CoachActions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CoachActions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protos.CoachActions)
}
inline PROTOBUF_NDEBUG_INLINE CoachActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actions_{visibility, arena},
        _cached_size_{0} {}

inline void CoachActions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CoachActions::~CoachActions() {
  // @@protoc_insertion_point(destructor:protos.CoachActions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CoachActions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CoachActions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CoachActions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CoachActions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CoachActions>(),
            ::google::protobuf::Message::GetNewImpl<CoachActions>(),
            ::google::protobuf::Message::GetClearImpl<CoachActions>(), &CoachActions::ByteSizeLong,
                &CoachActions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CoachActions, _impl_._cached_size_),
            false,
        },
        &CoachActions::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CoachActions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CoachActions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::CoachActions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .protos.CoachAction actions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CoachActions, _impl_.actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protos.CoachAction actions = 1;
    {PROTOBUF_FIELD_OFFSET(CoachActions, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::CoachAction>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CoachActions::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CoachActions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CoachActions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CoachActions& this_ = static_cast<const CoachActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CoachActions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CoachActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.CoachActions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .protos.CoachAction actions = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_actions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_actions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.CoachActions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CoachActions::ByteSizeLong(const MessageLite& base) {
          const CoachActions& this_ = static_cast<const CoachActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CoachActions::ByteSizeLong() const {
          const CoachActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.CoachActions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protos.CoachAction actions = 1;
             {
              total_size += 1UL * this_._internal_actions_size();
              for (const auto& msg : this_._internal_actions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CoachActions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CoachActions*>(&to_msg);
  auto& from = static_cast<const CoachActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.CoachActions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(
      from._internal_actions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CoachActions::CopyFrom(const CoachActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CoachActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CoachActions::InternalSwap(CoachActions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
}

::google::protobuf::Metadata CoachActions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoKickOff::_Internal {
 public:
};

DoKickOff::DoKickOff(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.DoKickOff)
}
DoKickOff::DoKickOff(
    ::google::protobuf::Arena* arena,
    const DoKickOff& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoKickOff* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.DoKickOff)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoKickOff::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DoKickOff_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoKickOff::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DoKickOff>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DoKickOff>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DoKickOff>(), &DoKickOff::ByteSizeLong,
                &DoKickOff::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoKickOff, _impl_._cached_size_),
            false,
        },
        &DoKickOff::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoKickOff::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DoKickOff::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoKickOff>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DoKickOff::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoMoveBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DoMoveBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_._has_bits_);
};

DoMoveBall::DoMoveBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DoMoveBall)
}
inline PROTOBUF_NDEBUG_INLINE DoMoveBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::DoMoveBall& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DoMoveBall::DoMoveBall(
    ::google::protobuf::Arena* arena,
    const DoMoveBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoMoveBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.velocity_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.DoMoveBall)
}
inline PROTOBUF_NDEBUG_INLINE DoMoveBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DoMoveBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, velocity_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::velocity_));
}
DoMoveBall::~DoMoveBall() {
  // @@protoc_insertion_point(destructor:protos.DoMoveBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DoMoveBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoMoveBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DoMoveBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoMoveBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DoMoveBall>(),
            ::google::protobuf::Message::GetNewImpl<DoMoveBall>(),
            ::google::protobuf::Message::GetClearImpl<DoMoveBall>(), &DoMoveBall::ByteSizeLong,
                &DoMoveBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_._cached_size_),
            false,
        },
        &DoMoveBall::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoMoveBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> DoMoveBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoMoveBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcVector2D velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.velocity_)}},
    // .protos.RpcVector2D position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcVector2D position = 1;
    {PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D velocity = 2;
    {PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DoMoveBall::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DoMoveBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DoMoveBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DoMoveBall& this_ = static_cast<const DoMoveBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DoMoveBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DoMoveBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DoMoveBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DoMoveBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DoMoveBall::ByteSizeLong(const MessageLite& base) {
          const DoMoveBall& this_ = static_cast<const DoMoveBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DoMoveBall::ByteSizeLong() const {
          const DoMoveBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DoMoveBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .protos.RpcVector2D velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DoMoveBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DoMoveBall*>(&to_msg);
  auto& from = static_cast<const DoMoveBall&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DoMoveBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DoMoveBall::CopyFrom(const DoMoveBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DoMoveBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DoMoveBall::InternalSwap(DoMoveBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.velocity_)
      + sizeof(DoMoveBall::_impl_.velocity_)
      - PROTOBUF_FIELD_OFFSET(DoMoveBall, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata DoMoveBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoMovePlayer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DoMovePlayer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_._has_bits_);
};

DoMovePlayer::DoMovePlayer(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DoMovePlayer)
}
inline PROTOBUF_NDEBUG_INLINE DoMovePlayer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::DoMovePlayer& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DoMovePlayer::DoMovePlayer(
    ::google::protobuf::Arena* arena,
    const DoMovePlayer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoMovePlayer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, our_side_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, our_side_),
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, our_side_) +
               sizeof(Impl_::body_direction_));

  // @@protoc_insertion_point(copy_constructor:protos.DoMovePlayer)
}
inline PROTOBUF_NDEBUG_INLINE DoMovePlayer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DoMovePlayer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, body_direction_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::body_direction_));
}
DoMovePlayer::~DoMovePlayer() {
  // @@protoc_insertion_point(destructor:protos.DoMovePlayer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DoMovePlayer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoMovePlayer::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DoMovePlayer_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoMovePlayer::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DoMovePlayer>(),
            ::google::protobuf::Message::GetNewImpl<DoMovePlayer>(),
            ::google::protobuf::Message::GetClearImpl<DoMovePlayer>(), &DoMovePlayer::ByteSizeLong,
                &DoMovePlayer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_._cached_size_),
            false,
        },
        &DoMovePlayer::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoMovePlayer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> DoMovePlayer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoMovePlayer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float body_direction = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.body_direction_)}},
    // bool our_side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DoMovePlayer, _impl_.our_side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.our_side_)}},
    // int32 uniform_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DoMovePlayer, _impl_.uniform_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.uniform_number_)}},
    // .protos.RpcVector2D position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool our_side = 1;
    {PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.our_side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 uniform_number = 2;
    {PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.uniform_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D position = 3;
    {PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float body_direction = 4;
    {PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.body_direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DoMovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DoMovePlayer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.our_side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.body_direction_) -
      reinterpret_cast<char*>(&_impl_.our_side_)) + sizeof(_impl_.body_direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DoMovePlayer::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DoMovePlayer& this_ = static_cast<const DoMovePlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DoMovePlayer::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DoMovePlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DoMovePlayer)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool our_side = 1;
          if (this_._internal_our_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_our_side(), target);
          }

          // int32 uniform_number = 2;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_uniform_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D position = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // float body_direction = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_body_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DoMovePlayer)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DoMovePlayer::ByteSizeLong(const MessageLite& base) {
          const DoMovePlayer& this_ = static_cast<const DoMovePlayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DoMovePlayer::ByteSizeLong() const {
          const DoMovePlayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DoMovePlayer)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RpcVector2D position = 3;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // bool our_side = 1;
            if (this_._internal_our_side() != 0) {
              total_size += 2;
            }
            // int32 uniform_number = 2;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // float body_direction = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_body_direction()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DoMovePlayer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DoMovePlayer*>(&to_msg);
  auto& from = static_cast<const DoMovePlayer&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DoMovePlayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_our_side() != 0) {
    _this->_impl_.our_side_ = from._impl_.our_side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_body_direction()) != 0) {
    _this->_impl_.body_direction_ = from._impl_.body_direction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DoMovePlayer::CopyFrom(const DoMovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DoMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DoMovePlayer::InternalSwap(DoMovePlayer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.body_direction_)
      + sizeof(DoMovePlayer::_impl_.body_direction_)
      - PROTOBUF_FIELD_OFFSET(DoMovePlayer, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata DoMovePlayer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoRecover::_Internal {
 public:
};

DoRecover::DoRecover(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.DoRecover)
}
DoRecover::DoRecover(
    ::google::protobuf::Arena* arena,
    const DoRecover& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoRecover* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.DoRecover)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoRecover::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DoRecover_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoRecover::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DoRecover>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DoRecover>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DoRecover>(), &DoRecover::ByteSizeLong,
                &DoRecover::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoRecover, _impl_._cached_size_),
            false,
        },
        &DoRecover::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoRecover::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DoRecover::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoRecover>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DoRecover::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoChangeMode::_Internal {
 public:
};

DoChangeMode::DoChangeMode(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DoChangeMode)
}
DoChangeMode::DoChangeMode(
    ::google::protobuf::Arena* arena, const DoChangeMode& from)
    : DoChangeMode(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DoChangeMode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DoChangeMode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, game_mode_type_),
           0,
           offsetof(Impl_, side_) -
               offsetof(Impl_, game_mode_type_) +
               sizeof(Impl_::side_));
}
DoChangeMode::~DoChangeMode() {
  // @@protoc_insertion_point(destructor:protos.DoChangeMode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DoChangeMode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoChangeMode::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DoChangeMode_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoChangeMode::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DoChangeMode>(),
            ::google::protobuf::Message::GetNewImpl<DoChangeMode>(),
            ::google::protobuf::Message::GetClearImpl<DoChangeMode>(), &DoChangeMode::ByteSizeLong,
                &DoChangeMode::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_._cached_size_),
            false,
        },
        &DoChangeMode::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoChangeMode::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DoChangeMode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoChangeMode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.Side side = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DoChangeMode, _impl_.side_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.side_)}},
    // .protos.GameModeType game_mode_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DoChangeMode, _impl_.game_mode_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.game_mode_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.GameModeType game_mode_type = 1;
    {PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.game_mode_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .protos.Side side = 2;
    {PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DoChangeMode::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DoChangeMode)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_mode_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.side_) -
      reinterpret_cast<char*>(&_impl_.game_mode_type_)) + sizeof(_impl_.side_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DoChangeMode::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DoChangeMode& this_ = static_cast<const DoChangeMode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DoChangeMode::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DoChangeMode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DoChangeMode)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.GameModeType game_mode_type = 1;
          if (this_._internal_game_mode_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_game_mode_type(), target);
          }

          // .protos.Side side = 2;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_side(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DoChangeMode)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DoChangeMode::ByteSizeLong(const MessageLite& base) {
          const DoChangeMode& this_ = static_cast<const DoChangeMode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DoChangeMode::ByteSizeLong() const {
          const DoChangeMode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DoChangeMode)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.GameModeType game_mode_type = 1;
            if (this_._internal_game_mode_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_mode_type());
            }
            // .protos.Side side = 2;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DoChangeMode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DoChangeMode*>(&to_msg);
  auto& from = static_cast<const DoChangeMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DoChangeMode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_mode_type() != 0) {
    _this->_impl_.game_mode_type_ = from._impl_.game_mode_type_;
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DoChangeMode::CopyFrom(const DoChangeMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DoChangeMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DoChangeMode::InternalSwap(DoChangeMode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.side_)
      + sizeof(DoChangeMode::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(DoChangeMode, _impl_.game_mode_type_)>(
          reinterpret_cast<char*>(&_impl_.game_mode_type_),
          reinterpret_cast<char*>(&other->_impl_.game_mode_type_));
}

::google::protobuf::Metadata DoChangeMode::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DoChangePlayerType::_Internal {
 public:
};

DoChangePlayerType::DoChangePlayerType(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.DoChangePlayerType)
}
DoChangePlayerType::DoChangePlayerType(
    ::google::protobuf::Arena* arena, const DoChangePlayerType& from)
    : DoChangePlayerType(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DoChangePlayerType::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DoChangePlayerType::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, our_side_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, our_side_) +
               sizeof(Impl_::type_));
}
DoChangePlayerType::~DoChangePlayerType() {
  // @@protoc_insertion_point(destructor:protos.DoChangePlayerType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DoChangePlayerType::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DoChangePlayerType::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DoChangePlayerType_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DoChangePlayerType::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DoChangePlayerType>(),
            ::google::protobuf::Message::GetNewImpl<DoChangePlayerType>(),
            ::google::protobuf::Message::GetClearImpl<DoChangePlayerType>(), &DoChangePlayerType::ByteSizeLong,
                &DoChangePlayerType::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_._cached_size_),
            false,
        },
        &DoChangePlayerType::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DoChangePlayerType::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> DoChangePlayerType::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::DoChangePlayerType>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool our_side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DoChangePlayerType, _impl_.our_side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.our_side_)}},
    // int32 uniform_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DoChangePlayerType, _impl_.uniform_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.uniform_number_)}},
    // int32 type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DoChangePlayerType, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool our_side = 1;
    {PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.our_side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 uniform_number = 2;
    {PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.uniform_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 3;
    {PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DoChangePlayerType::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DoChangePlayerType)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.our_side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.our_side_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DoChangePlayerType::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DoChangePlayerType& this_ = static_cast<const DoChangePlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DoChangePlayerType::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DoChangePlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.DoChangePlayerType)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool our_side = 1;
          if (this_._internal_our_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_our_side(), target);
          }

          // int32 uniform_number = 2;
          if (this_._internal_uniform_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_uniform_number(), target);
          }

          // int32 type = 3;
          if (this_._internal_type() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.DoChangePlayerType)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DoChangePlayerType::ByteSizeLong(const MessageLite& base) {
          const DoChangePlayerType& this_ = static_cast<const DoChangePlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DoChangePlayerType::ByteSizeLong() const {
          const DoChangePlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.DoChangePlayerType)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool our_side = 1;
            if (this_._internal_our_side() != 0) {
              total_size += 2;
            }
            // int32 uniform_number = 2;
            if (this_._internal_uniform_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_uniform_number());
            }
            // int32 type = 3;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DoChangePlayerType::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DoChangePlayerType*>(&to_msg);
  auto& from = static_cast<const DoChangePlayerType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.DoChangePlayerType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_our_side() != 0) {
    _this->_impl_.our_side_ = from._impl_.our_side_;
  }
  if (from._internal_uniform_number() != 0) {
    _this->_impl_.uniform_number_ = from._impl_.uniform_number_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DoChangePlayerType::CopyFrom(const DoChangePlayerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DoChangePlayerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DoChangePlayerType::InternalSwap(DoChangePlayerType* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.type_)
      + sizeof(DoChangePlayerType::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(DoChangePlayerType, _impl_.our_side_)>(
          reinterpret_cast<char*>(&_impl_.our_side_),
          reinterpret_cast<char*>(&other->_impl_.our_side_));
}

::google::protobuf::Metadata DoChangePlayerType::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrainerAction::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::protos::TrainerAction, _impl_._oneof_case_);
};

void TrainerAction::set_allocated_do_kick_off(::protos::DoKickOff* do_kick_off) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_kick_off) {
    ::google::protobuf::Arena* submessage_arena = do_kick_off->GetArena();
    if (message_arena != submessage_arena) {
      do_kick_off = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_kick_off, submessage_arena);
    }
    set_has_do_kick_off();
    _impl_.action_.do_kick_off_ = do_kick_off;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_kick_off)
}
void TrainerAction::set_allocated_do_move_ball(::protos::DoMoveBall* do_move_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_move_ball) {
    ::google::protobuf::Arena* submessage_arena = do_move_ball->GetArena();
    if (message_arena != submessage_arena) {
      do_move_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_move_ball, submessage_arena);
    }
    set_has_do_move_ball();
    _impl_.action_.do_move_ball_ = do_move_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_move_ball)
}
void TrainerAction::set_allocated_do_move_player(::protos::DoMovePlayer* do_move_player) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_move_player) {
    ::google::protobuf::Arena* submessage_arena = do_move_player->GetArena();
    if (message_arena != submessage_arena) {
      do_move_player = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_move_player, submessage_arena);
    }
    set_has_do_move_player();
    _impl_.action_.do_move_player_ = do_move_player;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_move_player)
}
void TrainerAction::set_allocated_do_recover(::protos::DoRecover* do_recover) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_recover) {
    ::google::protobuf::Arena* submessage_arena = do_recover->GetArena();
    if (message_arena != submessage_arena) {
      do_recover = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_recover, submessage_arena);
    }
    set_has_do_recover();
    _impl_.action_.do_recover_ = do_recover;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_recover)
}
void TrainerAction::set_allocated_do_change_mode(::protos::DoChangeMode* do_change_mode) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_change_mode) {
    ::google::protobuf::Arena* submessage_arena = do_change_mode->GetArena();
    if (message_arena != submessage_arena) {
      do_change_mode = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_change_mode, submessage_arena);
    }
    set_has_do_change_mode();
    _impl_.action_.do_change_mode_ = do_change_mode;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_change_mode)
}
void TrainerAction::set_allocated_do_change_player_type(::protos::DoChangePlayerType* do_change_player_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_action();
  if (do_change_player_type) {
    ::google::protobuf::Arena* submessage_arena = do_change_player_type->GetArena();
    if (message_arena != submessage_arena) {
      do_change_player_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, do_change_player_type, submessage_arena);
    }
    set_has_do_change_player_type();
    _impl_.action_.do_change_player_type_ = do_change_player_type;
  }
  // @@protoc_insertion_point(field_set_allocated:protos.TrainerAction.do_change_player_type)
}
TrainerAction::TrainerAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.TrainerAction)
}
inline PROTOBUF_NDEBUG_INLINE TrainerAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::TrainerAction& from_msg)
      : action_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TrainerAction::TrainerAction(
    ::google::protobuf::Arena* arena,
    const TrainerAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrainerAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (action_case()) {
    case ACTION_NOT_SET:
      break;
      case kDoKickOff:
        _impl_.action_.do_kick_off_ = ::google::protobuf::Message::CopyConstruct<::protos::DoKickOff>(arena, *from._impl_.action_.do_kick_off_);
        break;
      case kDoMoveBall:
        _impl_.action_.do_move_ball_ = ::google::protobuf::Message::CopyConstruct<::protos::DoMoveBall>(arena, *from._impl_.action_.do_move_ball_);
        break;
      case kDoMovePlayer:
        _impl_.action_.do_move_player_ = ::google::protobuf::Message::CopyConstruct<::protos::DoMovePlayer>(arena, *from._impl_.action_.do_move_player_);
        break;
      case kDoRecover:
        _impl_.action_.do_recover_ = ::google::protobuf::Message::CopyConstruct<::protos::DoRecover>(arena, *from._impl_.action_.do_recover_);
        break;
      case kDoChangeMode:
        _impl_.action_.do_change_mode_ = ::google::protobuf::Message::CopyConstruct<::protos::DoChangeMode>(arena, *from._impl_.action_.do_change_mode_);
        break;
      case kDoChangePlayerType:
        _impl_.action_.do_change_player_type_ = ::google::protobuf::Message::CopyConstruct<::protos::DoChangePlayerType>(arena, *from._impl_.action_.do_change_player_type_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protos.TrainerAction)
}
inline PROTOBUF_NDEBUG_INLINE TrainerAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : action_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TrainerAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrainerAction::~TrainerAction() {
  // @@protoc_insertion_point(destructor:protos.TrainerAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrainerAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
  _impl_.~Impl_();
}

void TrainerAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:protos.TrainerAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (action_case()) {
    case kDoKickOff: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_kick_off_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_kick_off_);
      }
      break;
    }
    case kDoMoveBall: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_move_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_move_ball_);
      }
      break;
    }
    case kDoMovePlayer: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_move_player_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_move_player_);
      }
      break;
    }
    case kDoRecover: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_recover_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_recover_);
      }
      break;
    }
    case kDoChangeMode: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_change_mode_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_change_mode_);
      }
      break;
    }
    case kDoChangePlayerType: {
      if (GetArena() == nullptr) {
        delete _impl_.action_.do_change_player_type_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.action_.do_change_player_type_);
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TrainerAction::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TrainerAction_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TrainerAction::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TrainerAction>(),
            ::google::protobuf::Message::GetNewImpl<TrainerAction>(),
            ::google::protobuf::Message::GetClearImpl<TrainerAction>(), &TrainerAction::ByteSizeLong,
                &TrainerAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_._cached_size_),
            false,
        },
        &TrainerAction::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TrainerAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> TrainerAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::TrainerAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.DoKickOff do_kick_off = 1;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_kick_off_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoMoveBall do_move_ball = 2;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_move_ball_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoMovePlayer do_move_player = 3;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_move_player_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoRecover do_recover = 4;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_recover_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoChangeMode do_change_mode = 5;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_change_mode_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.DoChangePlayerType do_change_player_type = 6;
    {PROTOBUF_FIELD_OFFSET(TrainerAction, _impl_.action_.do_change_player_type_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::DoKickOff>()},
    {::_pbi::TcParser::GetTable<::protos::DoMoveBall>()},
    {::_pbi::TcParser::GetTable<::protos::DoMovePlayer>()},
    {::_pbi::TcParser::GetTable<::protos::DoRecover>()},
    {::_pbi::TcParser::GetTable<::protos::DoChangeMode>()},
    {::_pbi::TcParser::GetTable<::protos::DoChangePlayerType>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TrainerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TrainerAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TrainerAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TrainerAction& this_ = static_cast<const TrainerAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TrainerAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TrainerAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.TrainerAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.action_case()) {
            case kDoKickOff: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.action_.do_kick_off_, this_._impl_.action_.do_kick_off_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoMoveBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.action_.do_move_ball_, this_._impl_.action_.do_move_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoMovePlayer: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.action_.do_move_player_, this_._impl_.action_.do_move_player_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoRecover: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.action_.do_recover_, this_._impl_.action_.do_recover_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoChangeMode: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.action_.do_change_mode_, this_._impl_.action_.do_change_mode_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDoChangePlayerType: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.action_.do_change_player_type_, this_._impl_.action_.do_change_player_type_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.TrainerAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TrainerAction::ByteSizeLong(const MessageLite& base) {
          const TrainerAction& this_ = static_cast<const TrainerAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TrainerAction::ByteSizeLong() const {
          const TrainerAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.TrainerAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.action_case()) {
            // .protos.DoKickOff do_kick_off = 1;
            case kDoKickOff: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_kick_off_);
              break;
            }
            // .protos.DoMoveBall do_move_ball = 2;
            case kDoMoveBall: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_move_ball_);
              break;
            }
            // .protos.DoMovePlayer do_move_player = 3;
            case kDoMovePlayer: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_move_player_);
              break;
            }
            // .protos.DoRecover do_recover = 4;
            case kDoRecover: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_recover_);
              break;
            }
            // .protos.DoChangeMode do_change_mode = 5;
            case kDoChangeMode: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_change_mode_);
              break;
            }
            // .protos.DoChangePlayerType do_change_player_type = 6;
            case kDoChangePlayerType: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_.do_change_player_type_);
              break;
            }
            case ACTION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TrainerAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrainerAction*>(&to_msg);
  auto& from = static_cast<const TrainerAction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.TrainerAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_action();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDoKickOff: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_kick_off_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoKickOff>(arena, *from._impl_.action_.do_kick_off_);
        } else {
          _this->_impl_.action_.do_kick_off_->MergeFrom(from._internal_do_kick_off());
        }
        break;
      }
      case kDoMoveBall: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_move_ball_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoMoveBall>(arena, *from._impl_.action_.do_move_ball_);
        } else {
          _this->_impl_.action_.do_move_ball_->MergeFrom(from._internal_do_move_ball());
        }
        break;
      }
      case kDoMovePlayer: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_move_player_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoMovePlayer>(arena, *from._impl_.action_.do_move_player_);
        } else {
          _this->_impl_.action_.do_move_player_->MergeFrom(from._internal_do_move_player());
        }
        break;
      }
      case kDoRecover: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_recover_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoRecover>(arena, *from._impl_.action_.do_recover_);
        } else {
          _this->_impl_.action_.do_recover_->MergeFrom(from._internal_do_recover());
        }
        break;
      }
      case kDoChangeMode: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_change_mode_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoChangeMode>(arena, *from._impl_.action_.do_change_mode_);
        } else {
          _this->_impl_.action_.do_change_mode_->MergeFrom(from._internal_do_change_mode());
        }
        break;
      }
      case kDoChangePlayerType: {
        if (oneof_needs_init) {
          _this->_impl_.action_.do_change_player_type_ =
              ::google::protobuf::Message::CopyConstruct<::protos::DoChangePlayerType>(arena, *from._impl_.action_.do_change_player_type_);
        } else {
          _this->_impl_.action_.do_change_player_type_->MergeFrom(from._internal_do_change_player_type());
        }
        break;
      }
      case ACTION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainerAction::CopyFrom(const TrainerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TrainerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrainerAction::InternalSwap(TrainerAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TrainerAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrainerActions::_Internal {
 public:
};

TrainerActions::TrainerActions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.TrainerActions)
}
inline PROTOBUF_NDEBUG_INLINE TrainerActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::TrainerActions& from_msg)
      : actions_{visibility, arena, from.actions_},
        _cached_size_{0} {}

TrainerActions::TrainerActions(
    ::google::protobuf::Arena* arena,
    const TrainerActions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrainerActions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:protos.TrainerActions)
}
inline PROTOBUF_NDEBUG_INLINE TrainerActions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actions_{visibility, arena},
        _cached_size_{0} {}

inline void TrainerActions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrainerActions::~TrainerActions() {
  // @@protoc_insertion_point(destructor:protos.TrainerActions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrainerActions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TrainerActions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TrainerActions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TrainerActions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TrainerActions>(),
            ::google::protobuf::Message::GetNewImpl<TrainerActions>(),
            ::google::protobuf::Message::GetClearImpl<TrainerActions>(), &TrainerActions::ByteSizeLong,
                &TrainerActions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TrainerActions, _impl_._cached_size_),
            false,
        },
        &TrainerActions::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TrainerActions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TrainerActions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::TrainerActions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .protos.TrainerAction actions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TrainerActions, _impl_.actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .protos.TrainerAction actions = 1;
    {PROTOBUF_FIELD_OFFSET(TrainerActions, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::TrainerAction>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TrainerActions::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TrainerActions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TrainerActions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TrainerActions& this_ = static_cast<const TrainerActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TrainerActions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TrainerActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.TrainerActions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .protos.TrainerAction actions = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_actions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_actions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.TrainerActions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TrainerActions::ByteSizeLong(const MessageLite& base) {
          const TrainerActions& this_ = static_cast<const TrainerActions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TrainerActions::ByteSizeLong() const {
          const TrainerActions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.TrainerActions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .protos.TrainerAction actions = 1;
             {
              total_size += 1UL * this_._internal_actions_size();
              for (const auto& msg : this_._internal_actions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TrainerActions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrainerActions*>(&to_msg);
  auto& from = static_cast<const TrainerActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.TrainerActions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(
      from._internal_actions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainerActions::CopyFrom(const TrainerActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TrainerActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrainerActions::InternalSwap(TrainerActions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
}

::google::protobuf::Metadata TrainerActions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServerParam::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServerParam>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServerParam, _impl_._has_bits_);
};

ServerParam::ServerParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.ServerParam)
}
inline PROTOBUF_NDEBUG_INLINE ServerParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::ServerParam& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        replay_file_(arena, from.replay_file_),
        landmark_file_(arena, from.landmark_file_),
        text_log_dir_(arena, from.text_log_dir_),
        game_log_dir_(arena, from.game_log_dir_),
        text_log_fixed_name_(arena, from.text_log_fixed_name_),
        game_log_fixed_name_(arena, from.game_log_fixed_name_),
        log_date_format_(arena, from.log_date_format_),
        team_l_start_(arena, from.team_l_start_),
        team_r_start_(arena, from.team_r_start_),
        keepaway_log_dir_(arena, from.keepaway_log_dir_),
        keepaway_log_fixed_name_(arena, from.keepaway_log_fixed_name_),
        module_dir_(arena, from.module_dir_),
        coach_msg_file_(arena, from.coach_msg_file_),
        fixed_teamname_l_(arena, from.fixed_teamname_l_),
        fixed_teamname_r_(arena, from.fixed_teamname_r_) {}

ServerParam::ServerParam(
    ::google::protobuf::Arena* arena,
    const ServerParam& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, inertia_moment_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, inertia_moment_),
           offsetof(Impl_, goal_width_) -
               offsetof(Impl_, inertia_moment_) +
               sizeof(Impl_::goal_width_));

  // @@protoc_insertion_point(copy_constructor:protos.ServerParam)
}
inline PROTOBUF_NDEBUG_INLINE ServerParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        replay_file_(arena),
        landmark_file_(arena),
        text_log_dir_(arena),
        game_log_dir_(arena),
        text_log_fixed_name_(arena),
        game_log_fixed_name_(arena),
        log_date_format_(arena),
        team_l_start_(arena),
        team_r_start_(arena),
        keepaway_log_dir_(arena),
        keepaway_log_fixed_name_(arena),
        module_dir_(arena),
        coach_msg_file_(arena),
        fixed_teamname_l_(arena),
        fixed_teamname_r_(arena) {}

inline void ServerParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, goal_width_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::goal_width_));
}
ServerParam::~ServerParam() {
  // @@protoc_insertion_point(destructor:protos.ServerParam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServerParam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.replay_file_.Destroy();
  _impl_.landmark_file_.Destroy();
  _impl_.text_log_dir_.Destroy();
  _impl_.game_log_dir_.Destroy();
  _impl_.text_log_fixed_name_.Destroy();
  _impl_.game_log_fixed_name_.Destroy();
  _impl_.log_date_format_.Destroy();
  _impl_.team_l_start_.Destroy();
  _impl_.team_r_start_.Destroy();
  _impl_.keepaway_log_dir_.Destroy();
  _impl_.keepaway_log_fixed_name_.Destroy();
  _impl_.module_dir_.Destroy();
  _impl_.coach_msg_file_.Destroy();
  _impl_.fixed_teamname_l_.Destroy();
  _impl_.fixed_teamname_r_.Destroy();
  delete _impl_.register_response_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ServerParam::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ServerParam_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ServerParam::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ServerParam>(),
            ::google::protobuf::Message::GetNewImpl<ServerParam>(),
            ::google::protobuf::Message::GetClearImpl<ServerParam>(), &ServerParam::ByteSizeLong,
                &ServerParam::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ServerParam, _impl_._cached_size_),
            false,
        },
        &ServerParam::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ServerParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 222, 1, 463, 29> ServerParam::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerParam, _impl_._has_bits_),
    0, // no _extensions_
    222, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    222,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::ServerParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.register_response_)}},
    // float inertia_moment = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.inertia_moment_)}},
    // float player_size = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_size_)}},
    // float player_decay = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_decay_)}},
    // float player_rand = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_)}},
    // float player_weight = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_weight_)}},
    // float player_speed_max = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_speed_max_)}},
    // float player_accel_max = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_accel_max_)}},
    // float stamina_max = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stamina_max_)}},
    // float stamina_inc_max = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stamina_inc_max_)}},
    // float recover_init = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_init_)}},
    // float recover_dec_thr = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_dec_thr_)}},
    // float recover_min = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_min_)}},
    // float recover_dec = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_dec_)}},
    // float effort_init = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_init_)}},
    // float effort_dec_thr = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_dec_thr_)}},
    // float effort_min = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_min_)}},
    // float effort_dec = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_dec_)}},
    // float effort_inc_thr = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_inc_thr_)}},
    // float effort_inc = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_inc_)}},
    // float kick_rand = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_)}},
    // bool team_actuator_noise = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.team_actuator_noise_)}},
    // float player_rand_factor_l = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_factor_l_)}},
    // float player_rand_factor_r = 24;
    {::_pbi::TcParser::FastF32S2,
     {453, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_factor_r_)}},
    // float kick_rand_factor_l = 25;
    {::_pbi::TcParser::FastF32S2,
     {461, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_factor_l_)}},
    // float kick_rand_factor_r = 26;
    {::_pbi::TcParser::FastF32S2,
     {469, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_factor_r_)}},
    // float ball_size = 27;
    {::_pbi::TcParser::FastF32S2,
     {477, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_size_)}},
    // float ball_decay = 28;
    {::_pbi::TcParser::FastF32S2,
     {485, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_decay_)}},
    // float ball_rand = 29;
    {::_pbi::TcParser::FastF32S2,
     {493, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_rand_)}},
    // float ball_weight = 30;
    {::_pbi::TcParser::FastF32S2,
     {501, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_weight_)}},
    // float ball_speed_max = 31;
    {::_pbi::TcParser::FastF32S2,
     {509, 63, 0, PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_speed_max_)}},
  }}, {{
    33, 0, 12,
    0, 32, 0, 48, 0, 64, 0, 80, 0, 96, 0, 112,
    0, 128, 0, 144, 0, 160, 0, 176, 0, 192, 49152, 208,
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float inertia_moment = 2;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.inertia_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_size = 3;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_decay = 4;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_decay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_rand = 5;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_weight = 6;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_weight_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_speed_max = 7;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_speed_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_accel_max = 8;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_accel_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float stamina_max = 9;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stamina_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float stamina_inc_max = 10;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stamina_inc_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float recover_init = 11;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_init_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float recover_dec_thr = 12;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_dec_thr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float recover_min = 13;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float recover_dec = 14;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recover_dec_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_init = 15;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_init_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_dec_thr = 16;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_dec_thr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_min = 17;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_dec = 18;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_dec_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_inc_thr = 19;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_inc_thr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_inc = 20;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.effort_inc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_rand = 21;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool team_actuator_noise = 22;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.team_actuator_noise_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float player_rand_factor_l = 23;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_factor_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_rand_factor_r = 24;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_rand_factor_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_rand_factor_l = 25;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_factor_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_rand_factor_r = 26;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_rand_factor_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_size = 27;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_decay = 28;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_decay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_rand = 29;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_rand_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_weight = 30;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_weight_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_speed_max = 31;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_speed_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_accel_max = 32;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_accel_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_power_rate = 33;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dash_power_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_power_rate = 34;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_power_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_margin = 35;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kickable_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float control_radius = 36;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.control_radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float control_radius_width = 37;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.control_radius_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_power = 38;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_power = 39;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_moment = 40;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_moment = 41;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_neck_moment = 42;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_neck_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_neck_moment = 43;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_neck_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_neck_angle = 44;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_neck_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_neck_angle = 45;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_neck_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float visible_angle = 46;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.visible_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float visible_distance = 47;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.visible_distance_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wind_dir = 48;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.wind_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wind_force = 49;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.wind_force_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wind_angle = 50;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.wind_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float wind_rand = 51;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.wind_rand_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_area = 52;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kickable_area_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catch_area_l = 53;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.catch_area_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catch_area_w = 54;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.catch_area_w_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catch_probability = 55;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.catch_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 goalie_max_moves = 56;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.goalie_max_moves_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float corner_kick_margin = 57;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.corner_kick_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float offside_active_area_size = 58;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.offside_active_area_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool wind_none = 59;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.wind_none_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_wind_random = 60;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_wind_random_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 coach_say_count_max = 61;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_say_count_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 coach_say_msg_size = 62;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_say_msg_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_win_size = 63;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_win_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_define_win = 64;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_define_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_meta_win = 65;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_meta_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_advice_win = 66;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_advice_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_info_win = 67;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_info_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_mess_delay = 68;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_mess_delay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_mess_per_cycle = 69;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_mess_per_cycle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 half_time = 70;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.half_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 simulator_step = 71;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.simulator_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 send_step = 72;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.send_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 recv_step = 73;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.recv_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sense_body_step = 74;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.sense_body_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lcm_step = 75;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.lcm_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 player_say_msg_size = 76;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_say_msg_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 player_hear_max = 77;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_hear_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 player_hear_inc = 78;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_hear_inc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 player_hear_decay = 79;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_hear_decay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 catch_ban_cycle = 80;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.catch_ban_cycle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 slow_down_factor = 81;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.slow_down_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool use_offside = 82;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_offside_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool kickoff_offside = 83;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kickoff_offside_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float offside_kick_margin = 84;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.offside_kick_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float audio_cut_dist = 85;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.audio_cut_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dist_quantize_step = 86;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dist_quantize_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float landmark_dist_quantize_step = 87;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.landmark_dist_quantize_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dir_quantize_step = 88;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dir_quantize_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dist_quantize_step_l = 89;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dist_quantize_step_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dist_quantize_step_r = 90;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dist_quantize_step_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float landmark_dist_quantize_step_l = 91;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.landmark_dist_quantize_step_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float landmark_dist_quantize_step_r = 92;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.landmark_dist_quantize_step_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dir_quantize_step_l = 93;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dir_quantize_step_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dir_quantize_step_r = 94;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dir_quantize_step_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool coach_mode = 95;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool coach_with_referee_mode = 96;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_with_referee_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_old_coach_hear = 97;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_old_coach_hear_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float slowness_on_top_for_left_team = 98;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.slowness_on_top_for_left_team_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float slowness_on_top_for_right_team = 99;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.slowness_on_top_for_right_team_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 start_goal_l = 100;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.start_goal_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 start_goal_r = 101;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.start_goal_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool fullstate_l = 102;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.fullstate_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool fullstate_r = 103;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.fullstate_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 drop_ball_time = 104;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.drop_ball_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool synch_mode = 105;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.synch_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 synch_offset = 106;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.synch_offset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 synch_micro_sleep = 107;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.synch_micro_sleep_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 point_to_ban = 108;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.point_to_ban_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 point_to_duration = 109;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.point_to_duration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 player_port = 110;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 trainer_port = 111;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.trainer_port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 online_coach_port = 112;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.online_coach_port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool verbose_mode = 113;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.verbose_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 coach_send_vi_step = 114;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_send_vi_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string replay_file = 115;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.replay_file_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string landmark_file = 116;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.landmark_file_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool send_comms = 117;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.send_comms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool text_logging = 118;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.text_logging_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool game_logging = 119;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_logging_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 game_log_version = 120;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_log_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text_log_dir = 121;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.text_log_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string game_log_dir = 122;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_log_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string text_log_fixed_name = 123;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.text_log_fixed_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string game_log_fixed_name = 124;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_log_fixed_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool use_text_log_fixed = 125;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_text_log_fixed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_game_log_fixed = 126;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_game_log_fixed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_text_log_dated = 127;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_text_log_dated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_game_log_dated = 128;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_game_log_dated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string log_date_format = 129;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.log_date_format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool log_times = 130;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.log_times_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool record_message = 131;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.record_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 text_log_compression = 132;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.text_log_compression_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 game_log_compression = 133;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_log_compression_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool use_profile = 134;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.use_profile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float tackle_dist = 135;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tackle_back_dist = 136;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_back_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tackle_width = 137;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tackle_exponent = 138;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_exponent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 tackle_cycles = 139;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_cycles_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float tackle_power_rate = 140;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_power_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 freeform_wait_period = 141;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.freeform_wait_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 freeform_send_period = 142;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.freeform_send_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool free_kick_faults = 143;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.free_kick_faults_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool back_passes = 144;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.back_passes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool proper_goal_kicks = 145;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.proper_goal_kicks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float stopped_ball_vel = 146;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stopped_ball_vel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 max_goal_kicks = 147;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_goal_kicks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_del_win = 148;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_del_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clang_rule_win = 149;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.clang_rule_win_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool auto_mode = 150;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.auto_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 kick_off_wait = 151;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.kick_off_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 connect_wait = 152;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.connect_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 game_over_wait = 153;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.game_over_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string team_l_start = 154;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.team_l_start_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string team_r_start = 155;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.team_r_start_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool keepaway_mode = 156;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float keepaway_length = 157;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float keepaway_width = 158;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool keepaway_logging = 159;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_logging_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string keepaway_log_dir = 160;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_log_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string keepaway_log_fixed_name = 161;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_log_fixed_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool keepaway_log_fixed = 162;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_log_fixed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool keepaway_log_dated = 163;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_log_dated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 keepaway_start = 164;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.keepaway_start_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 nr_normal_halfs = 165;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.nr_normal_halfs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 nr_extra_halfs = 166;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.nr_extra_halfs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool penalty_shoot_outs = 167;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.penalty_shoot_outs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 pen_before_setup_wait = 168;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_before_setup_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pen_setup_wait = 169;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_setup_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pen_ready_wait = 170;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_ready_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pen_taken_wait = 171;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_taken_wait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pen_nr_kicks = 172;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_nr_kicks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pen_max_extra_kicks = 173;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_max_extra_kicks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float pen_dist_x = 174;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_dist_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool pen_random_winner = 175;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_random_winner_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool pen_allow_mult_kicks = 176;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_allow_mult_kicks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float pen_max_goalie_dist_x = 177;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_max_goalie_dist_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool pen_coach_moves_players = 178;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pen_coach_moves_players_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string module_dir = 179;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.module_dir_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float ball_stuck_area = 180;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.ball_stuck_area_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string coach_msg_file = 181;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.coach_msg_file_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float max_tackle_power = 182;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_tackle_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_back_tackle_power = 183;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_back_tackle_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_speed_max_min = 184;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.player_speed_max_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float extra_stamina = 185;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.extra_stamina_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 synch_see_offset = 186;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.synch_see_offset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 extra_half_time = 187;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.extra_half_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float stamina_capacity = 188;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.stamina_capacity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_dash_angle = 189;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_dash_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_dash_angle = 190;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_dash_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_angle_step = 191;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.dash_angle_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float side_dash_rate = 192;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.side_dash_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float back_dash_rate = 193;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.back_dash_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_dash_power = 194;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_dash_power = 195;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tackle_rand_factor = 196;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.tackle_rand_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float foul_detect_probability = 197;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.foul_detect_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float foul_exponent = 198;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.foul_exponent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 foul_cycles = 199;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.foul_cycles_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool golden_goal = 200;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.golden_goal_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float red_card_probability = 201;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.red_card_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 illegal_defense_duration = 202;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.illegal_defense_duration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 illegal_defense_number = 203;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.illegal_defense_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float illegal_defense_dist_x = 204;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.illegal_defense_dist_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float illegal_defense_width = 205;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.illegal_defense_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string fixed_teamname_l = 206;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.fixed_teamname_l_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string fixed_teamname_r = 207;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.fixed_teamname_r_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float max_catch_angle = 208;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_catch_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float min_catch_angle = 209;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.min_catch_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 random_seed = 210;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.random_seed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float long_kick_power_factor = 211;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.long_kick_power_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 long_kick_delay = 212;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.long_kick_delay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_monitors = 213;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.max_monitors_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float catchable_area = 214;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.catchable_area_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float real_speed_max = 215;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.real_speed_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_half_length = 216;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pitch_half_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_half_width = 217;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.pitch_half_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float our_penalty_area_line_x = 218;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.our_penalty_area_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float their_penalty_area_line_x = 219;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.their_penalty_area_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float penalty_area_half_width = 220;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.penalty_area_half_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float penalty_area_length = 221;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.penalty_area_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float goal_width = 222;
    {PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.goal_width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
  }}, {{
    "\22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\13\15\0\0\0\0\14\14\23\23\0\0\0\0\17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\14\14\0\0\0\0\20\27\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\12\0\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\20\20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "protos.ServerParam"
    "replay_file"
    "landmark_file"
    "text_log_dir"
    "game_log_dir"
    "text_log_fixed_name"
    "game_log_fixed_name"
    "log_date_format"
    "team_l_start"
    "team_r_start"
    "keepaway_log_dir"
    "keepaway_log_fixed_name"
    "module_dir"
    "coach_msg_file"
    "fixed_teamname_l"
    "fixed_teamname_r"
  }},
};

PROTOBUF_NOINLINE void ServerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.ServerParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replay_file_.ClearToEmpty();
  _impl_.landmark_file_.ClearToEmpty();
  _impl_.text_log_dir_.ClearToEmpty();
  _impl_.game_log_dir_.ClearToEmpty();
  _impl_.text_log_fixed_name_.ClearToEmpty();
  _impl_.game_log_fixed_name_.ClearToEmpty();
  _impl_.log_date_format_.ClearToEmpty();
  _impl_.team_l_start_.ClearToEmpty();
  _impl_.team_r_start_.ClearToEmpty();
  _impl_.keepaway_log_dir_.ClearToEmpty();
  _impl_.keepaway_log_fixed_name_.ClearToEmpty();
  _impl_.module_dir_.ClearToEmpty();
  _impl_.coach_msg_file_.ClearToEmpty();
  _impl_.fixed_teamname_l_.ClearToEmpty();
  _impl_.fixed_teamname_r_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.register_response_ != nullptr);
    _impl_.register_response_->Clear();
  }
  ::memset(&_impl_.inertia_moment_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.goal_width_) -
      reinterpret_cast<char*>(&_impl_.inertia_moment_)) + sizeof(_impl_.goal_width_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServerParam::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServerParam& this_ = static_cast<const ServerParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServerParam::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServerParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.ServerParam)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // float inertia_moment = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_inertia_moment(), target);
          }

          // float player_size = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_player_size(), target);
          }

          // float player_decay = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_player_decay(), target);
          }

          // float player_rand = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_player_rand(), target);
          }

          // float player_weight = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_weight()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_player_weight(), target);
          }

          // float player_speed_max = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_player_speed_max(), target);
          }

          // float player_accel_max = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_accel_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_player_accel_max(), target);
          }

          // float stamina_max = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_stamina_max(), target);
          }

          // float stamina_inc_max = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_stamina_inc_max(), target);
          }

          // float recover_init = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recover_init()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_recover_init(), target);
          }

          // float recover_dec_thr = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recover_dec_thr()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_recover_dec_thr(), target);
          }

          // float recover_min = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recover_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_recover_min(), target);
          }

          // float recover_dec = 14;
          if (::absl::bit_cast<::uint32_t>(this_._internal_recover_dec()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_recover_dec(), target);
          }

          // float effort_init = 15;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_init()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_effort_init(), target);
          }

          // float effort_dec_thr = 16;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_dec_thr()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_effort_dec_thr(), target);
          }

          // float effort_min = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_effort_min(), target);
          }

          // float effort_dec = 18;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_dec()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                18, this_._internal_effort_dec(), target);
          }

          // float effort_inc_thr = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_inc_thr()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_effort_inc_thr(), target);
          }

          // float effort_inc = 20;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_inc()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                20, this_._internal_effort_inc(), target);
          }

          // float kick_rand = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_kick_rand(), target);
          }

          // bool team_actuator_noise = 22;
          if (this_._internal_team_actuator_noise() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                22, this_._internal_team_actuator_noise(), target);
          }

          // float player_rand_factor_l = 23;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand_factor_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                23, this_._internal_player_rand_factor_l(), target);
          }

          // float player_rand_factor_r = 24;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand_factor_r()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                24, this_._internal_player_rand_factor_r(), target);
          }

          // float kick_rand_factor_l = 25;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_factor_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                25, this_._internal_kick_rand_factor_l(), target);
          }

          // float kick_rand_factor_r = 26;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_factor_r()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                26, this_._internal_kick_rand_factor_r(), target);
          }

          // float ball_size = 27;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                27, this_._internal_ball_size(), target);
          }

          // float ball_decay = 28;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_decay()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                28, this_._internal_ball_decay(), target);
          }

          // float ball_rand = 29;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_rand()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                29, this_._internal_ball_rand(), target);
          }

          // float ball_weight = 30;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_weight()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                30, this_._internal_ball_weight(), target);
          }

          // float ball_speed_max = 31;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_speed_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                31, this_._internal_ball_speed_max(), target);
          }

          // float ball_accel_max = 32;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_accel_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                32, this_._internal_ball_accel_max(), target);
          }

          // float dash_power_rate = 33;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                33, this_._internal_dash_power_rate(), target);
          }

          // float kick_power_rate = 34;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                34, this_._internal_kick_power_rate(), target);
          }

          // float kickable_margin = 35;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                35, this_._internal_kickable_margin(), target);
          }

          // float control_radius = 36;
          if (::absl::bit_cast<::uint32_t>(this_._internal_control_radius()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                36, this_._internal_control_radius(), target);
          }

          // float control_radius_width = 37;
          if (::absl::bit_cast<::uint32_t>(this_._internal_control_radius_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                37, this_._internal_control_radius_width(), target);
          }

          // float max_power = 38;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                38, this_._internal_max_power(), target);
          }

          // float min_power = 39;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                39, this_._internal_min_power(), target);
          }

          // float max_moment = 40;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                40, this_._internal_max_moment(), target);
          }

          // float min_moment = 41;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                41, this_._internal_min_moment(), target);
          }

          // float max_neck_moment = 42;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_neck_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                42, this_._internal_max_neck_moment(), target);
          }

          // float min_neck_moment = 43;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_neck_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                43, this_._internal_min_neck_moment(), target);
          }

          // float max_neck_angle = 44;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_neck_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                44, this_._internal_max_neck_angle(), target);
          }

          // float min_neck_angle = 45;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_neck_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                45, this_._internal_min_neck_angle(), target);
          }

          // float visible_angle = 46;
          if (::absl::bit_cast<::uint32_t>(this_._internal_visible_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                46, this_._internal_visible_angle(), target);
          }

          // float visible_distance = 47;
          if (::absl::bit_cast<::uint32_t>(this_._internal_visible_distance()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                47, this_._internal_visible_distance(), target);
          }

          // float wind_dir = 48;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wind_dir()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                48, this_._internal_wind_dir(), target);
          }

          // float wind_force = 49;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wind_force()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                49, this_._internal_wind_force(), target);
          }

          // float wind_angle = 50;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wind_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                50, this_._internal_wind_angle(), target);
          }

          // float wind_rand = 51;
          if (::absl::bit_cast<::uint32_t>(this_._internal_wind_rand()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                51, this_._internal_wind_rand(), target);
          }

          // float kickable_area = 52;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_area()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                52, this_._internal_kickable_area(), target);
          }

          // float catch_area_l = 53;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catch_area_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                53, this_._internal_catch_area_l(), target);
          }

          // float catch_area_w = 54;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catch_area_w()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                54, this_._internal_catch_area_w(), target);
          }

          // float catch_probability = 55;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catch_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                55, this_._internal_catch_probability(), target);
          }

          // int32 goalie_max_moves = 56;
          if (this_._internal_goalie_max_moves() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                56, this_._internal_goalie_max_moves(), target);
          }

          // float corner_kick_margin = 57;
          if (::absl::bit_cast<::uint32_t>(this_._internal_corner_kick_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                57, this_._internal_corner_kick_margin(), target);
          }

          // float offside_active_area_size = 58;
          if (::absl::bit_cast<::uint32_t>(this_._internal_offside_active_area_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                58, this_._internal_offside_active_area_size(), target);
          }

          // bool wind_none = 59;
          if (this_._internal_wind_none() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                59, this_._internal_wind_none(), target);
          }

          // bool use_wind_random = 60;
          if (this_._internal_use_wind_random() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                60, this_._internal_use_wind_random(), target);
          }

          // int32 coach_say_count_max = 61;
          if (this_._internal_coach_say_count_max() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                61, this_._internal_coach_say_count_max(), target);
          }

          // int32 coach_say_msg_size = 62;
          if (this_._internal_coach_say_msg_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                62, this_._internal_coach_say_msg_size(), target);
          }

          // int32 clang_win_size = 63;
          if (this_._internal_clang_win_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                63, this_._internal_clang_win_size(), target);
          }

          // int32 clang_define_win = 64;
          if (this_._internal_clang_define_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                64, this_._internal_clang_define_win(), target);
          }

          // int32 clang_meta_win = 65;
          if (this_._internal_clang_meta_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                65, this_._internal_clang_meta_win(), target);
          }

          // int32 clang_advice_win = 66;
          if (this_._internal_clang_advice_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                66, this_._internal_clang_advice_win(), target);
          }

          // int32 clang_info_win = 67;
          if (this_._internal_clang_info_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                67, this_._internal_clang_info_win(), target);
          }

          // int32 clang_mess_delay = 68;
          if (this_._internal_clang_mess_delay() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                68, this_._internal_clang_mess_delay(), target);
          }

          // int32 clang_mess_per_cycle = 69;
          if (this_._internal_clang_mess_per_cycle() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                69, this_._internal_clang_mess_per_cycle(), target);
          }

          // int32 half_time = 70;
          if (this_._internal_half_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                70, this_._internal_half_time(), target);
          }

          // int32 simulator_step = 71;
          if (this_._internal_simulator_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                71, this_._internal_simulator_step(), target);
          }

          // int32 send_step = 72;
          if (this_._internal_send_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                72, this_._internal_send_step(), target);
          }

          // int32 recv_step = 73;
          if (this_._internal_recv_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                73, this_._internal_recv_step(), target);
          }

          // int32 sense_body_step = 74;
          if (this_._internal_sense_body_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                74, this_._internal_sense_body_step(), target);
          }

          // int32 lcm_step = 75;
          if (this_._internal_lcm_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                75, this_._internal_lcm_step(), target);
          }

          // int32 player_say_msg_size = 76;
          if (this_._internal_player_say_msg_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                76, this_._internal_player_say_msg_size(), target);
          }

          // int32 player_hear_max = 77;
          if (this_._internal_player_hear_max() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                77, this_._internal_player_hear_max(), target);
          }

          // int32 player_hear_inc = 78;
          if (this_._internal_player_hear_inc() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                78, this_._internal_player_hear_inc(), target);
          }

          // int32 player_hear_decay = 79;
          if (this_._internal_player_hear_decay() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                79, this_._internal_player_hear_decay(), target);
          }

          // int32 catch_ban_cycle = 80;
          if (this_._internal_catch_ban_cycle() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                80, this_._internal_catch_ban_cycle(), target);
          }

          // int32 slow_down_factor = 81;
          if (this_._internal_slow_down_factor() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                81, this_._internal_slow_down_factor(), target);
          }

          // bool use_offside = 82;
          if (this_._internal_use_offside() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                82, this_._internal_use_offside(), target);
          }

          // bool kickoff_offside = 83;
          if (this_._internal_kickoff_offside() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                83, this_._internal_kickoff_offside(), target);
          }

          // float offside_kick_margin = 84;
          if (::absl::bit_cast<::uint32_t>(this_._internal_offside_kick_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                84, this_._internal_offside_kick_margin(), target);
          }

          // float audio_cut_dist = 85;
          if (::absl::bit_cast<::uint32_t>(this_._internal_audio_cut_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                85, this_._internal_audio_cut_dist(), target);
          }

          // float dist_quantize_step = 86;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                86, this_._internal_dist_quantize_step(), target);
          }

          // float landmark_dist_quantize_step = 87;
          if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                87, this_._internal_landmark_dist_quantize_step(), target);
          }

          // float dir_quantize_step = 88;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                88, this_._internal_dir_quantize_step(), target);
          }

          // float dist_quantize_step_l = 89;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                89, this_._internal_dist_quantize_step_l(), target);
          }

          // float dist_quantize_step_r = 90;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step_r()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                90, this_._internal_dist_quantize_step_r(), target);
          }

          // float landmark_dist_quantize_step_l = 91;
          if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                91, this_._internal_landmark_dist_quantize_step_l(), target);
          }

          // float landmark_dist_quantize_step_r = 92;
          if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step_r()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                92, this_._internal_landmark_dist_quantize_step_r(), target);
          }

          // float dir_quantize_step_l = 93;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step_l()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                93, this_._internal_dir_quantize_step_l(), target);
          }

          // float dir_quantize_step_r = 94;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step_r()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                94, this_._internal_dir_quantize_step_r(), target);
          }

          // bool coach_mode = 95;
          if (this_._internal_coach_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                95, this_._internal_coach_mode(), target);
          }

          // bool coach_with_referee_mode = 96;
          if (this_._internal_coach_with_referee_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                96, this_._internal_coach_with_referee_mode(), target);
          }

          // bool use_old_coach_hear = 97;
          if (this_._internal_use_old_coach_hear() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                97, this_._internal_use_old_coach_hear(), target);
          }

          // float slowness_on_top_for_left_team = 98;
          if (::absl::bit_cast<::uint32_t>(this_._internal_slowness_on_top_for_left_team()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                98, this_._internal_slowness_on_top_for_left_team(), target);
          }

          // float slowness_on_top_for_right_team = 99;
          if (::absl::bit_cast<::uint32_t>(this_._internal_slowness_on_top_for_right_team()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                99, this_._internal_slowness_on_top_for_right_team(), target);
          }

          // int32 start_goal_l = 100;
          if (this_._internal_start_goal_l() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                100, this_._internal_start_goal_l(), target);
          }

          // int32 start_goal_r = 101;
          if (this_._internal_start_goal_r() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                101, this_._internal_start_goal_r(), target);
          }

          // bool fullstate_l = 102;
          if (this_._internal_fullstate_l() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                102, this_._internal_fullstate_l(), target);
          }

          // bool fullstate_r = 103;
          if (this_._internal_fullstate_r() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                103, this_._internal_fullstate_r(), target);
          }

          // int32 drop_ball_time = 104;
          if (this_._internal_drop_ball_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                104, this_._internal_drop_ball_time(), target);
          }

          // bool synch_mode = 105;
          if (this_._internal_synch_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                105, this_._internal_synch_mode(), target);
          }

          // int32 synch_offset = 106;
          if (this_._internal_synch_offset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                106, this_._internal_synch_offset(), target);
          }

          // int32 synch_micro_sleep = 107;
          if (this_._internal_synch_micro_sleep() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                107, this_._internal_synch_micro_sleep(), target);
          }

          // int32 point_to_ban = 108;
          if (this_._internal_point_to_ban() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                108, this_._internal_point_to_ban(), target);
          }

          // int32 point_to_duration = 109;
          if (this_._internal_point_to_duration() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                109, this_._internal_point_to_duration(), target);
          }

          // int32 player_port = 110;
          if (this_._internal_player_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                110, this_._internal_player_port(), target);
          }

          // int32 trainer_port = 111;
          if (this_._internal_trainer_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                111, this_._internal_trainer_port(), target);
          }

          // int32 online_coach_port = 112;
          if (this_._internal_online_coach_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                112, this_._internal_online_coach_port(), target);
          }

          // bool verbose_mode = 113;
          if (this_._internal_verbose_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                113, this_._internal_verbose_mode(), target);
          }

          // int32 coach_send_vi_step = 114;
          if (this_._internal_coach_send_vi_step() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                114, this_._internal_coach_send_vi_step(), target);
          }

          // string replay_file = 115;
          if (!this_._internal_replay_file().empty()) {
            const std::string& _s = this_._internal_replay_file();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.replay_file");
            target = stream->WriteStringMaybeAliased(115, _s, target);
          }

          // string landmark_file = 116;
          if (!this_._internal_landmark_file().empty()) {
            const std::string& _s = this_._internal_landmark_file();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.landmark_file");
            target = stream->WriteStringMaybeAliased(116, _s, target);
          }

          // bool send_comms = 117;
          if (this_._internal_send_comms() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                117, this_._internal_send_comms(), target);
          }

          // bool text_logging = 118;
          if (this_._internal_text_logging() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                118, this_._internal_text_logging(), target);
          }

          // bool game_logging = 119;
          if (this_._internal_game_logging() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                119, this_._internal_game_logging(), target);
          }

          // int32 game_log_version = 120;
          if (this_._internal_game_log_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                120, this_._internal_game_log_version(), target);
          }

          // string text_log_dir = 121;
          if (!this_._internal_text_log_dir().empty()) {
            const std::string& _s = this_._internal_text_log_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.text_log_dir");
            target = stream->WriteStringMaybeAliased(121, _s, target);
          }

          // string game_log_dir = 122;
          if (!this_._internal_game_log_dir().empty()) {
            const std::string& _s = this_._internal_game_log_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.game_log_dir");
            target = stream->WriteStringMaybeAliased(122, _s, target);
          }

          // string text_log_fixed_name = 123;
          if (!this_._internal_text_log_fixed_name().empty()) {
            const std::string& _s = this_._internal_text_log_fixed_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.text_log_fixed_name");
            target = stream->WriteStringMaybeAliased(123, _s, target);
          }

          // string game_log_fixed_name = 124;
          if (!this_._internal_game_log_fixed_name().empty()) {
            const std::string& _s = this_._internal_game_log_fixed_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.game_log_fixed_name");
            target = stream->WriteStringMaybeAliased(124, _s, target);
          }

          // bool use_text_log_fixed = 125;
          if (this_._internal_use_text_log_fixed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                125, this_._internal_use_text_log_fixed(), target);
          }

          // bool use_game_log_fixed = 126;
          if (this_._internal_use_game_log_fixed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                126, this_._internal_use_game_log_fixed(), target);
          }

          // bool use_text_log_dated = 127;
          if (this_._internal_use_text_log_dated() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                127, this_._internal_use_text_log_dated(), target);
          }

          // bool use_game_log_dated = 128;
          if (this_._internal_use_game_log_dated() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                128, this_._internal_use_game_log_dated(), target);
          }

          // string log_date_format = 129;
          if (!this_._internal_log_date_format().empty()) {
            const std::string& _s = this_._internal_log_date_format();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.log_date_format");
            target = stream->WriteStringMaybeAliased(129, _s, target);
          }

          // bool log_times = 130;
          if (this_._internal_log_times() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                130, this_._internal_log_times(), target);
          }

          // bool record_message = 131;
          if (this_._internal_record_message() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                131, this_._internal_record_message(), target);
          }

          // int32 text_log_compression = 132;
          if (this_._internal_text_log_compression() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                132, this_._internal_text_log_compression(), target);
          }

          // int32 game_log_compression = 133;
          if (this_._internal_game_log_compression() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                133, this_._internal_game_log_compression(), target);
          }

          // bool use_profile = 134;
          if (this_._internal_use_profile() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                134, this_._internal_use_profile(), target);
          }

          // float tackle_dist = 135;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                135, this_._internal_tackle_dist(), target);
          }

          // float tackle_back_dist = 136;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_back_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                136, this_._internal_tackle_back_dist(), target);
          }

          // float tackle_width = 137;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                137, this_._internal_tackle_width(), target);
          }

          // float tackle_exponent = 138;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_exponent()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                138, this_._internal_tackle_exponent(), target);
          }

          // int32 tackle_cycles = 139;
          if (this_._internal_tackle_cycles() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                139, this_._internal_tackle_cycles(), target);
          }

          // float tackle_power_rate = 140;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_power_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                140, this_._internal_tackle_power_rate(), target);
          }

          // int32 freeform_wait_period = 141;
          if (this_._internal_freeform_wait_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                141, this_._internal_freeform_wait_period(), target);
          }

          // int32 freeform_send_period = 142;
          if (this_._internal_freeform_send_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                142, this_._internal_freeform_send_period(), target);
          }

          // bool free_kick_faults = 143;
          if (this_._internal_free_kick_faults() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                143, this_._internal_free_kick_faults(), target);
          }

          // bool back_passes = 144;
          if (this_._internal_back_passes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                144, this_._internal_back_passes(), target);
          }

          // bool proper_goal_kicks = 145;
          if (this_._internal_proper_goal_kicks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                145, this_._internal_proper_goal_kicks(), target);
          }

          // float stopped_ball_vel = 146;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stopped_ball_vel()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                146, this_._internal_stopped_ball_vel(), target);
          }

          // int32 max_goal_kicks = 147;
          if (this_._internal_max_goal_kicks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                147, this_._internal_max_goal_kicks(), target);
          }

          // int32 clang_del_win = 148;
          if (this_._internal_clang_del_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                148, this_._internal_clang_del_win(), target);
          }

          // int32 clang_rule_win = 149;
          if (this_._internal_clang_rule_win() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                149, this_._internal_clang_rule_win(), target);
          }

          // bool auto_mode = 150;
          if (this_._internal_auto_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                150, this_._internal_auto_mode(), target);
          }

          // int32 kick_off_wait = 151;
          if (this_._internal_kick_off_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                151, this_._internal_kick_off_wait(), target);
          }

          // int32 connect_wait = 152;
          if (this_._internal_connect_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                152, this_._internal_connect_wait(), target);
          }

          // int32 game_over_wait = 153;
          if (this_._internal_game_over_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                153, this_._internal_game_over_wait(), target);
          }

          // string team_l_start = 154;
          if (!this_._internal_team_l_start().empty()) {
            const std::string& _s = this_._internal_team_l_start();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.team_l_start");
            target = stream->WriteStringMaybeAliased(154, _s, target);
          }

          // string team_r_start = 155;
          if (!this_._internal_team_r_start().empty()) {
            const std::string& _s = this_._internal_team_r_start();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.team_r_start");
            target = stream->WriteStringMaybeAliased(155, _s, target);
          }

          // bool keepaway_mode = 156;
          if (this_._internal_keepaway_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                156, this_._internal_keepaway_mode(), target);
          }

          // float keepaway_length = 157;
          if (::absl::bit_cast<::uint32_t>(this_._internal_keepaway_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                157, this_._internal_keepaway_length(), target);
          }

          // float keepaway_width = 158;
          if (::absl::bit_cast<::uint32_t>(this_._internal_keepaway_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                158, this_._internal_keepaway_width(), target);
          }

          // bool keepaway_logging = 159;
          if (this_._internal_keepaway_logging() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                159, this_._internal_keepaway_logging(), target);
          }

          // string keepaway_log_dir = 160;
          if (!this_._internal_keepaway_log_dir().empty()) {
            const std::string& _s = this_._internal_keepaway_log_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.keepaway_log_dir");
            target = stream->WriteStringMaybeAliased(160, _s, target);
          }

          // string keepaway_log_fixed_name = 161;
          if (!this_._internal_keepaway_log_fixed_name().empty()) {
            const std::string& _s = this_._internal_keepaway_log_fixed_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.keepaway_log_fixed_name");
            target = stream->WriteStringMaybeAliased(161, _s, target);
          }

          // bool keepaway_log_fixed = 162;
          if (this_._internal_keepaway_log_fixed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                162, this_._internal_keepaway_log_fixed(), target);
          }

          // bool keepaway_log_dated = 163;
          if (this_._internal_keepaway_log_dated() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                163, this_._internal_keepaway_log_dated(), target);
          }

          // int32 keepaway_start = 164;
          if (this_._internal_keepaway_start() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                164, this_._internal_keepaway_start(), target);
          }

          // int32 nr_normal_halfs = 165;
          if (this_._internal_nr_normal_halfs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                165, this_._internal_nr_normal_halfs(), target);
          }

          // int32 nr_extra_halfs = 166;
          if (this_._internal_nr_extra_halfs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                166, this_._internal_nr_extra_halfs(), target);
          }

          // bool penalty_shoot_outs = 167;
          if (this_._internal_penalty_shoot_outs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                167, this_._internal_penalty_shoot_outs(), target);
          }

          // int32 pen_before_setup_wait = 168;
          if (this_._internal_pen_before_setup_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                168, this_._internal_pen_before_setup_wait(), target);
          }

          // int32 pen_setup_wait = 169;
          if (this_._internal_pen_setup_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                169, this_._internal_pen_setup_wait(), target);
          }

          // int32 pen_ready_wait = 170;
          if (this_._internal_pen_ready_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                170, this_._internal_pen_ready_wait(), target);
          }

          // int32 pen_taken_wait = 171;
          if (this_._internal_pen_taken_wait() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                171, this_._internal_pen_taken_wait(), target);
          }

          // int32 pen_nr_kicks = 172;
          if (this_._internal_pen_nr_kicks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                172, this_._internal_pen_nr_kicks(), target);
          }

          // int32 pen_max_extra_kicks = 173;
          if (this_._internal_pen_max_extra_kicks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                173, this_._internal_pen_max_extra_kicks(), target);
          }

          // float pen_dist_x = 174;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pen_dist_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                174, this_._internal_pen_dist_x(), target);
          }

          // bool pen_random_winner = 175;
          if (this_._internal_pen_random_winner() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                175, this_._internal_pen_random_winner(), target);
          }

          // bool pen_allow_mult_kicks = 176;
          if (this_._internal_pen_allow_mult_kicks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                176, this_._internal_pen_allow_mult_kicks(), target);
          }

          // float pen_max_goalie_dist_x = 177;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pen_max_goalie_dist_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                177, this_._internal_pen_max_goalie_dist_x(), target);
          }

          // bool pen_coach_moves_players = 178;
          if (this_._internal_pen_coach_moves_players() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                178, this_._internal_pen_coach_moves_players(), target);
          }

          // string module_dir = 179;
          if (!this_._internal_module_dir().empty()) {
            const std::string& _s = this_._internal_module_dir();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.module_dir");
            target = stream->WriteStringMaybeAliased(179, _s, target);
          }

          // float ball_stuck_area = 180;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_stuck_area()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                180, this_._internal_ball_stuck_area(), target);
          }

          // string coach_msg_file = 181;
          if (!this_._internal_coach_msg_file().empty()) {
            const std::string& _s = this_._internal_coach_msg_file();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.coach_msg_file");
            target = stream->WriteStringMaybeAliased(181, _s, target);
          }

          // float max_tackle_power = 182;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_tackle_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                182, this_._internal_max_tackle_power(), target);
          }

          // float max_back_tackle_power = 183;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_back_tackle_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                183, this_._internal_max_back_tackle_power(), target);
          }

          // float player_speed_max_min = 184;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                184, this_._internal_player_speed_max_min(), target);
          }

          // float extra_stamina = 185;
          if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                185, this_._internal_extra_stamina(), target);
          }

          // int32 synch_see_offset = 186;
          if (this_._internal_synch_see_offset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                186, this_._internal_synch_see_offset(), target);
          }

          // int32 extra_half_time = 187;
          if (this_._internal_extra_half_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                187, this_._internal_extra_half_time(), target);
          }

          // float stamina_capacity = 188;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                188, this_._internal_stamina_capacity(), target);
          }

          // float max_dash_angle = 189;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                189, this_._internal_max_dash_angle(), target);
          }

          // float min_dash_angle = 190;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_dash_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                190, this_._internal_min_dash_angle(), target);
          }

          // float dash_angle_step = 191;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_angle_step()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                191, this_._internal_dash_angle_step(), target);
          }

          // float side_dash_rate = 192;
          if (::absl::bit_cast<::uint32_t>(this_._internal_side_dash_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                192, this_._internal_side_dash_rate(), target);
          }

          // float back_dash_rate = 193;
          if (::absl::bit_cast<::uint32_t>(this_._internal_back_dash_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                193, this_._internal_back_dash_rate(), target);
          }

          // float max_dash_power = 194;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                194, this_._internal_max_dash_power(), target);
          }

          // float min_dash_power = 195;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                195, this_._internal_min_dash_power(), target);
          }

          // float tackle_rand_factor = 196;
          if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_rand_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                196, this_._internal_tackle_rand_factor(), target);
          }

          // float foul_detect_probability = 197;
          if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                197, this_._internal_foul_detect_probability(), target);
          }

          // float foul_exponent = 198;
          if (::absl::bit_cast<::uint32_t>(this_._internal_foul_exponent()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                198, this_._internal_foul_exponent(), target);
          }

          // int32 foul_cycles = 199;
          if (this_._internal_foul_cycles() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                199, this_._internal_foul_cycles(), target);
          }

          // bool golden_goal = 200;
          if (this_._internal_golden_goal() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                200, this_._internal_golden_goal(), target);
          }

          // float red_card_probability = 201;
          if (::absl::bit_cast<::uint32_t>(this_._internal_red_card_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                201, this_._internal_red_card_probability(), target);
          }

          // int32 illegal_defense_duration = 202;
          if (this_._internal_illegal_defense_duration() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                202, this_._internal_illegal_defense_duration(), target);
          }

          // int32 illegal_defense_number = 203;
          if (this_._internal_illegal_defense_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                203, this_._internal_illegal_defense_number(), target);
          }

          // float illegal_defense_dist_x = 204;
          if (::absl::bit_cast<::uint32_t>(this_._internal_illegal_defense_dist_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                204, this_._internal_illegal_defense_dist_x(), target);
          }

          // float illegal_defense_width = 205;
          if (::absl::bit_cast<::uint32_t>(this_._internal_illegal_defense_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                205, this_._internal_illegal_defense_width(), target);
          }

          // string fixed_teamname_l = 206;
          if (!this_._internal_fixed_teamname_l().empty()) {
            const std::string& _s = this_._internal_fixed_teamname_l();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.fixed_teamname_l");
            target = stream->WriteStringMaybeAliased(206, _s, target);
          }

          // string fixed_teamname_r = 207;
          if (!this_._internal_fixed_teamname_r().empty()) {
            const std::string& _s = this_._internal_fixed_teamname_r();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.ServerParam.fixed_teamname_r");
            target = stream->WriteStringMaybeAliased(207, _s, target);
          }

          // float max_catch_angle = 208;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_catch_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                208, this_._internal_max_catch_angle(), target);
          }

          // float min_catch_angle = 209;
          if (::absl::bit_cast<::uint32_t>(this_._internal_min_catch_angle()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                209, this_._internal_min_catch_angle(), target);
          }

          // int32 random_seed = 210;
          if (this_._internal_random_seed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                210, this_._internal_random_seed(), target);
          }

          // float long_kick_power_factor = 211;
          if (::absl::bit_cast<::uint32_t>(this_._internal_long_kick_power_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                211, this_._internal_long_kick_power_factor(), target);
          }

          // int32 long_kick_delay = 212;
          if (this_._internal_long_kick_delay() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                212, this_._internal_long_kick_delay(), target);
          }

          // int32 max_monitors = 213;
          if (this_._internal_max_monitors() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                213, this_._internal_max_monitors(), target);
          }

          // float catchable_area = 214;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                214, this_._internal_catchable_area(), target);
          }

          // float real_speed_max = 215;
          if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                215, this_._internal_real_speed_max(), target);
          }

          // float pitch_half_length = 216;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_half_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                216, this_._internal_pitch_half_length(), target);
          }

          // float pitch_half_width = 217;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_half_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                217, this_._internal_pitch_half_width(), target);
          }

          // float our_penalty_area_line_x = 218;
          if (::absl::bit_cast<::uint32_t>(this_._internal_our_penalty_area_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                218, this_._internal_our_penalty_area_line_x(), target);
          }

          // float their_penalty_area_line_x = 219;
          if (::absl::bit_cast<::uint32_t>(this_._internal_their_penalty_area_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                219, this_._internal_their_penalty_area_line_x(), target);
          }

          // float penalty_area_half_width = 220;
          if (::absl::bit_cast<::uint32_t>(this_._internal_penalty_area_half_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                220, this_._internal_penalty_area_half_width(), target);
          }

          // float penalty_area_length = 221;
          if (::absl::bit_cast<::uint32_t>(this_._internal_penalty_area_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                221, this_._internal_penalty_area_length(), target);
          }

          // float goal_width = 222;
          if (::absl::bit_cast<::uint32_t>(this_._internal_goal_width()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                222, this_._internal_goal_width(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.ServerParam)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServerParam::ByteSizeLong(const MessageLite& base) {
          const ServerParam& this_ = static_cast<const ServerParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServerParam::ByteSizeLong() const {
          const ServerParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.ServerParam)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string replay_file = 115;
            if (!this_._internal_replay_file().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_replay_file());
            }
            // string landmark_file = 116;
            if (!this_._internal_landmark_file().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_landmark_file());
            }
            // string text_log_dir = 121;
            if (!this_._internal_text_log_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_text_log_dir());
            }
            // string game_log_dir = 122;
            if (!this_._internal_game_log_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_log_dir());
            }
            // string text_log_fixed_name = 123;
            if (!this_._internal_text_log_fixed_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_text_log_fixed_name());
            }
            // string game_log_fixed_name = 124;
            if (!this_._internal_game_log_fixed_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_log_fixed_name());
            }
            // string log_date_format = 129;
            if (!this_._internal_log_date_format().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_log_date_format());
            }
            // string team_l_start = 154;
            if (!this_._internal_team_l_start().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_team_l_start());
            }
            // string team_r_start = 155;
            if (!this_._internal_team_r_start().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_team_r_start());
            }
            // string keepaway_log_dir = 160;
            if (!this_._internal_keepaway_log_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_keepaway_log_dir());
            }
            // string keepaway_log_fixed_name = 161;
            if (!this_._internal_keepaway_log_fixed_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_keepaway_log_fixed_name());
            }
            // string module_dir = 179;
            if (!this_._internal_module_dir().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_module_dir());
            }
            // string coach_msg_file = 181;
            if (!this_._internal_coach_msg_file().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coach_msg_file());
            }
            // string fixed_teamname_l = 206;
            if (!this_._internal_fixed_teamname_l().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fixed_teamname_l());
            }
            // string fixed_teamname_r = 207;
            if (!this_._internal_fixed_teamname_r().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_fixed_teamname_r());
            }
          }
           {
            // .protos.RegisterResponse register_response = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
          }
           {
            // float inertia_moment = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment()) != 0) {
              total_size += 5;
            }
            // float player_size = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_size()) != 0) {
              total_size += 5;
            }
            // float player_decay = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay()) != 0) {
              total_size += 5;
            }
            // float player_rand = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand()) != 0) {
              total_size += 5;
            }
            // float player_weight = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_weight()) != 0) {
              total_size += 5;
            }
            // float player_speed_max = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max()) != 0) {
              total_size += 5;
            }
            // float player_accel_max = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_accel_max()) != 0) {
              total_size += 5;
            }
            // float stamina_max = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_max()) != 0) {
              total_size += 5;
            }
            // float stamina_inc_max = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max()) != 0) {
              total_size += 5;
            }
            // float recover_init = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recover_init()) != 0) {
              total_size += 5;
            }
            // float recover_dec_thr = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recover_dec_thr()) != 0) {
              total_size += 5;
            }
            // float recover_min = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recover_min()) != 0) {
              total_size += 5;
            }
            // float recover_dec = 14;
            if (::absl::bit_cast<::uint32_t>(this_._internal_recover_dec()) != 0) {
              total_size += 5;
            }
            // float effort_init = 15;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_init()) != 0) {
              total_size += 5;
            }
            // float effort_dec_thr = 16;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_dec_thr()) != 0) {
              total_size += 6;
            }
            // float effort_min = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min()) != 0) {
              total_size += 6;
            }
            // float effort_dec = 18;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_dec()) != 0) {
              total_size += 6;
            }
            // float effort_inc_thr = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_inc_thr()) != 0) {
              total_size += 6;
            }
            // float effort_inc = 20;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_inc()) != 0) {
              total_size += 6;
            }
            // float kick_rand = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand()) != 0) {
              total_size += 6;
            }
            // float player_rand_factor_l = 23;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand_factor_l()) != 0) {
              total_size += 6;
            }
            // float player_rand_factor_r = 24;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_rand_factor_r()) != 0) {
              total_size += 6;
            }
            // float kick_rand_factor_l = 25;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_factor_l()) != 0) {
              total_size += 6;
            }
            // float kick_rand_factor_r = 26;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_factor_r()) != 0) {
              total_size += 6;
            }
            // float ball_size = 27;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_size()) != 0) {
              total_size += 6;
            }
            // float ball_decay = 28;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_decay()) != 0) {
              total_size += 6;
            }
            // float ball_rand = 29;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_rand()) != 0) {
              total_size += 6;
            }
            // float ball_weight = 30;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_weight()) != 0) {
              total_size += 6;
            }
            // float ball_speed_max = 31;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_speed_max()) != 0) {
              total_size += 6;
            }
            // float ball_accel_max = 32;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_accel_max()) != 0) {
              total_size += 6;
            }
            // float dash_power_rate = 33;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate()) != 0) {
              total_size += 6;
            }
            // float kick_power_rate = 34;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate()) != 0) {
              total_size += 6;
            }
            // float kickable_margin = 35;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin()) != 0) {
              total_size += 6;
            }
            // float control_radius = 36;
            if (::absl::bit_cast<::uint32_t>(this_._internal_control_radius()) != 0) {
              total_size += 6;
            }
            // float control_radius_width = 37;
            if (::absl::bit_cast<::uint32_t>(this_._internal_control_radius_width()) != 0) {
              total_size += 6;
            }
            // float max_power = 38;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_power()) != 0) {
              total_size += 6;
            }
            // float min_power = 39;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_power()) != 0) {
              total_size += 6;
            }
            // float max_moment = 40;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_moment()) != 0) {
              total_size += 6;
            }
            // float min_moment = 41;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_moment()) != 0) {
              total_size += 6;
            }
            // float max_neck_moment = 42;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_neck_moment()) != 0) {
              total_size += 6;
            }
            // float min_neck_moment = 43;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_neck_moment()) != 0) {
              total_size += 6;
            }
            // float max_neck_angle = 44;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_neck_angle()) != 0) {
              total_size += 6;
            }
            // float min_neck_angle = 45;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_neck_angle()) != 0) {
              total_size += 6;
            }
            // float visible_angle = 46;
            if (::absl::bit_cast<::uint32_t>(this_._internal_visible_angle()) != 0) {
              total_size += 6;
            }
            // float visible_distance = 47;
            if (::absl::bit_cast<::uint32_t>(this_._internal_visible_distance()) != 0) {
              total_size += 6;
            }
            // float wind_dir = 48;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wind_dir()) != 0) {
              total_size += 6;
            }
            // float wind_force = 49;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wind_force()) != 0) {
              total_size += 6;
            }
            // float wind_angle = 50;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wind_angle()) != 0) {
              total_size += 6;
            }
            // float wind_rand = 51;
            if (::absl::bit_cast<::uint32_t>(this_._internal_wind_rand()) != 0) {
              total_size += 6;
            }
            // float kickable_area = 52;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_area()) != 0) {
              total_size += 6;
            }
            // float catch_area_l = 53;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catch_area_l()) != 0) {
              total_size += 6;
            }
            // float catch_area_w = 54;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catch_area_w()) != 0) {
              total_size += 6;
            }
            // float catch_probability = 55;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catch_probability()) != 0) {
              total_size += 6;
            }
            // bool team_actuator_noise = 22;
            if (this_._internal_team_actuator_noise() != 0) {
              total_size += 3;
            }
            // bool wind_none = 59;
            if (this_._internal_wind_none() != 0) {
              total_size += 3;
            }
            // bool use_wind_random = 60;
            if (this_._internal_use_wind_random() != 0) {
              total_size += 3;
            }
            // bool use_offside = 82;
            if (this_._internal_use_offside() != 0) {
              total_size += 3;
            }
            // int32 goalie_max_moves = 56;
            if (this_._internal_goalie_max_moves() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_goalie_max_moves());
            }
            // float corner_kick_margin = 57;
            if (::absl::bit_cast<::uint32_t>(this_._internal_corner_kick_margin()) != 0) {
              total_size += 6;
            }
            // float offside_active_area_size = 58;
            if (::absl::bit_cast<::uint32_t>(this_._internal_offside_active_area_size()) != 0) {
              total_size += 6;
            }
            // int32 coach_say_count_max = 61;
            if (this_._internal_coach_say_count_max() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_coach_say_count_max());
            }
            // int32 coach_say_msg_size = 62;
            if (this_._internal_coach_say_msg_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_coach_say_msg_size());
            }
            // int32 clang_win_size = 63;
            if (this_._internal_clang_win_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_win_size());
            }
            // int32 clang_define_win = 64;
            if (this_._internal_clang_define_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_define_win());
            }
            // int32 clang_meta_win = 65;
            if (this_._internal_clang_meta_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_meta_win());
            }
            // int32 clang_advice_win = 66;
            if (this_._internal_clang_advice_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_advice_win());
            }
            // int32 clang_info_win = 67;
            if (this_._internal_clang_info_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_info_win());
            }
            // int32 clang_mess_delay = 68;
            if (this_._internal_clang_mess_delay() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_mess_delay());
            }
            // int32 clang_mess_per_cycle = 69;
            if (this_._internal_clang_mess_per_cycle() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_mess_per_cycle());
            }
            // int32 half_time = 70;
            if (this_._internal_half_time() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_half_time());
            }
            // int32 simulator_step = 71;
            if (this_._internal_simulator_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_simulator_step());
            }
            // int32 send_step = 72;
            if (this_._internal_send_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_send_step());
            }
            // int32 recv_step = 73;
            if (this_._internal_recv_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_recv_step());
            }
            // int32 sense_body_step = 74;
            if (this_._internal_sense_body_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_sense_body_step());
            }
            // int32 lcm_step = 75;
            if (this_._internal_lcm_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_lcm_step());
            }
            // int32 player_say_msg_size = 76;
            if (this_._internal_player_say_msg_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_player_say_msg_size());
            }
            // int32 player_hear_max = 77;
            if (this_._internal_player_hear_max() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_player_hear_max());
            }
            // int32 player_hear_inc = 78;
            if (this_._internal_player_hear_inc() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_player_hear_inc());
            }
            // int32 player_hear_decay = 79;
            if (this_._internal_player_hear_decay() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_player_hear_decay());
            }
            // int32 catch_ban_cycle = 80;
            if (this_._internal_catch_ban_cycle() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_catch_ban_cycle());
            }
            // int32 slow_down_factor = 81;
            if (this_._internal_slow_down_factor() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_slow_down_factor());
            }
            // float offside_kick_margin = 84;
            if (::absl::bit_cast<::uint32_t>(this_._internal_offside_kick_margin()) != 0) {
              total_size += 6;
            }
            // float audio_cut_dist = 85;
            if (::absl::bit_cast<::uint32_t>(this_._internal_audio_cut_dist()) != 0) {
              total_size += 6;
            }
            // float dist_quantize_step = 86;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step()) != 0) {
              total_size += 6;
            }
            // float landmark_dist_quantize_step = 87;
            if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step()) != 0) {
              total_size += 6;
            }
            // float dir_quantize_step = 88;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step()) != 0) {
              total_size += 6;
            }
            // float dist_quantize_step_l = 89;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step_l()) != 0) {
              total_size += 6;
            }
            // float dist_quantize_step_r = 90;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dist_quantize_step_r()) != 0) {
              total_size += 6;
            }
            // float landmark_dist_quantize_step_l = 91;
            if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step_l()) != 0) {
              total_size += 6;
            }
            // float landmark_dist_quantize_step_r = 92;
            if (::absl::bit_cast<::uint32_t>(this_._internal_landmark_dist_quantize_step_r()) != 0) {
              total_size += 6;
            }
            // bool kickoff_offside = 83;
            if (this_._internal_kickoff_offside() != 0) {
              total_size += 3;
            }
            // bool coach_mode = 95;
            if (this_._internal_coach_mode() != 0) {
              total_size += 3;
            }
            // bool coach_with_referee_mode = 96;
            if (this_._internal_coach_with_referee_mode() != 0) {
              total_size += 3;
            }
            // bool use_old_coach_hear = 97;
            if (this_._internal_use_old_coach_hear() != 0) {
              total_size += 3;
            }
            // float dir_quantize_step_l = 93;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step_l()) != 0) {
              total_size += 6;
            }
            // float dir_quantize_step_r = 94;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dir_quantize_step_r()) != 0) {
              total_size += 6;
            }
            // float slowness_on_top_for_left_team = 98;
            if (::absl::bit_cast<::uint32_t>(this_._internal_slowness_on_top_for_left_team()) != 0) {
              total_size += 6;
            }
            // float slowness_on_top_for_right_team = 99;
            if (::absl::bit_cast<::uint32_t>(this_._internal_slowness_on_top_for_right_team()) != 0) {
              total_size += 6;
            }
            // int32 start_goal_l = 100;
            if (this_._internal_start_goal_l() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_start_goal_l());
            }
            // int32 start_goal_r = 101;
            if (this_._internal_start_goal_r() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_start_goal_r());
            }
            // int32 drop_ball_time = 104;
            if (this_._internal_drop_ball_time() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_drop_ball_time());
            }
            // bool fullstate_l = 102;
            if (this_._internal_fullstate_l() != 0) {
              total_size += 3;
            }
            // bool fullstate_r = 103;
            if (this_._internal_fullstate_r() != 0) {
              total_size += 3;
            }
            // bool synch_mode = 105;
            if (this_._internal_synch_mode() != 0) {
              total_size += 3;
            }
            // bool verbose_mode = 113;
            if (this_._internal_verbose_mode() != 0) {
              total_size += 3;
            }
            // int32 synch_offset = 106;
            if (this_._internal_synch_offset() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_synch_offset());
            }
            // int32 synch_micro_sleep = 107;
            if (this_._internal_synch_micro_sleep() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_synch_micro_sleep());
            }
            // int32 point_to_ban = 108;
            if (this_._internal_point_to_ban() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_point_to_ban());
            }
            // int32 point_to_duration = 109;
            if (this_._internal_point_to_duration() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_point_to_duration());
            }
            // int32 player_port = 110;
            if (this_._internal_player_port() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_player_port());
            }
            // int32 trainer_port = 111;
            if (this_._internal_trainer_port() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_trainer_port());
            }
            // int32 online_coach_port = 112;
            if (this_._internal_online_coach_port() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_online_coach_port());
            }
            // int32 coach_send_vi_step = 114;
            if (this_._internal_coach_send_vi_step() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_coach_send_vi_step());
            }
            // bool send_comms = 117;
            if (this_._internal_send_comms() != 0) {
              total_size += 3;
            }
            // bool text_logging = 118;
            if (this_._internal_text_logging() != 0) {
              total_size += 3;
            }
            // bool game_logging = 119;
            if (this_._internal_game_logging() != 0) {
              total_size += 3;
            }
            // bool use_text_log_fixed = 125;
            if (this_._internal_use_text_log_fixed() != 0) {
              total_size += 3;
            }
            // int32 game_log_version = 120;
            if (this_._internal_game_log_version() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_game_log_version());
            }
            // bool use_game_log_fixed = 126;
            if (this_._internal_use_game_log_fixed() != 0) {
              total_size += 3;
            }
            // bool use_text_log_dated = 127;
            if (this_._internal_use_text_log_dated() != 0) {
              total_size += 3;
            }
            // bool use_game_log_dated = 128;
            if (this_._internal_use_game_log_dated() != 0) {
              total_size += 3;
            }
            // bool log_times = 130;
            if (this_._internal_log_times() != 0) {
              total_size += 3;
            }
            // int32 text_log_compression = 132;
            if (this_._internal_text_log_compression() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_text_log_compression());
            }
            // int32 game_log_compression = 133;
            if (this_._internal_game_log_compression() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_game_log_compression());
            }
            // float tackle_dist = 135;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_dist()) != 0) {
              total_size += 6;
            }
            // float tackle_back_dist = 136;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_back_dist()) != 0) {
              total_size += 6;
            }
            // float tackle_width = 137;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_width()) != 0) {
              total_size += 6;
            }
            // float tackle_exponent = 138;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_exponent()) != 0) {
              total_size += 6;
            }
            // bool record_message = 131;
            if (this_._internal_record_message() != 0) {
              total_size += 3;
            }
            // bool use_profile = 134;
            if (this_._internal_use_profile() != 0) {
              total_size += 3;
            }
            // bool free_kick_faults = 143;
            if (this_._internal_free_kick_faults() != 0) {
              total_size += 3;
            }
            // bool back_passes = 144;
            if (this_._internal_back_passes() != 0) {
              total_size += 3;
            }
            // int32 tackle_cycles = 139;
            if (this_._internal_tackle_cycles() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_tackle_cycles());
            }
            // float tackle_power_rate = 140;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_power_rate()) != 0) {
              total_size += 6;
            }
            // int32 freeform_wait_period = 141;
            if (this_._internal_freeform_wait_period() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_freeform_wait_period());
            }
            // int32 freeform_send_period = 142;
            if (this_._internal_freeform_send_period() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_freeform_send_period());
            }
            // float stopped_ball_vel = 146;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stopped_ball_vel()) != 0) {
              total_size += 6;
            }
            // int32 max_goal_kicks = 147;
            if (this_._internal_max_goal_kicks() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_max_goal_kicks());
            }
            // int32 clang_del_win = 148;
            if (this_._internal_clang_del_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_del_win());
            }
            // int32 clang_rule_win = 149;
            if (this_._internal_clang_rule_win() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clang_rule_win());
            }
            // int32 kick_off_wait = 151;
            if (this_._internal_kick_off_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_kick_off_wait());
            }
            // int32 connect_wait = 152;
            if (this_._internal_connect_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_connect_wait());
            }
            // bool proper_goal_kicks = 145;
            if (this_._internal_proper_goal_kicks() != 0) {
              total_size += 3;
            }
            // bool auto_mode = 150;
            if (this_._internal_auto_mode() != 0) {
              total_size += 3;
            }
            // bool keepaway_mode = 156;
            if (this_._internal_keepaway_mode() != 0) {
              total_size += 3;
            }
            // bool keepaway_logging = 159;
            if (this_._internal_keepaway_logging() != 0) {
              total_size += 3;
            }
            // int32 game_over_wait = 153;
            if (this_._internal_game_over_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_game_over_wait());
            }
            // float keepaway_length = 157;
            if (::absl::bit_cast<::uint32_t>(this_._internal_keepaway_length()) != 0) {
              total_size += 6;
            }
            // float keepaway_width = 158;
            if (::absl::bit_cast<::uint32_t>(this_._internal_keepaway_width()) != 0) {
              total_size += 6;
            }
            // int32 keepaway_start = 164;
            if (this_._internal_keepaway_start() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_keepaway_start());
            }
            // int32 nr_normal_halfs = 165;
            if (this_._internal_nr_normal_halfs() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_nr_normal_halfs());
            }
            // int32 nr_extra_halfs = 166;
            if (this_._internal_nr_extra_halfs() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_nr_extra_halfs());
            }
            // bool keepaway_log_fixed = 162;
            if (this_._internal_keepaway_log_fixed() != 0) {
              total_size += 3;
            }
            // bool keepaway_log_dated = 163;
            if (this_._internal_keepaway_log_dated() != 0) {
              total_size += 3;
            }
            // bool penalty_shoot_outs = 167;
            if (this_._internal_penalty_shoot_outs() != 0) {
              total_size += 3;
            }
            // bool pen_random_winner = 175;
            if (this_._internal_pen_random_winner() != 0) {
              total_size += 3;
            }
            // int32 pen_before_setup_wait = 168;
            if (this_._internal_pen_before_setup_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_before_setup_wait());
            }
            // int32 pen_setup_wait = 169;
            if (this_._internal_pen_setup_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_setup_wait());
            }
            // int32 pen_ready_wait = 170;
            if (this_._internal_pen_ready_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_ready_wait());
            }
            // int32 pen_taken_wait = 171;
            if (this_._internal_pen_taken_wait() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_taken_wait());
            }
            // int32 pen_nr_kicks = 172;
            if (this_._internal_pen_nr_kicks() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_nr_kicks());
            }
            // int32 pen_max_extra_kicks = 173;
            if (this_._internal_pen_max_extra_kicks() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_pen_max_extra_kicks());
            }
            // float pen_dist_x = 174;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pen_dist_x()) != 0) {
              total_size += 6;
            }
            // float pen_max_goalie_dist_x = 177;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pen_max_goalie_dist_x()) != 0) {
              total_size += 6;
            }
            // float ball_stuck_area = 180;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_stuck_area()) != 0) {
              total_size += 6;
            }
            // float max_tackle_power = 182;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_tackle_power()) != 0) {
              total_size += 6;
            }
            // float max_back_tackle_power = 183;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_back_tackle_power()) != 0) {
              total_size += 6;
            }
            // float player_speed_max_min = 184;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_min()) != 0) {
              total_size += 6;
            }
            // bool pen_allow_mult_kicks = 176;
            if (this_._internal_pen_allow_mult_kicks() != 0) {
              total_size += 3;
            }
            // bool pen_coach_moves_players = 178;
            if (this_._internal_pen_coach_moves_players() != 0) {
              total_size += 3;
            }
            // bool golden_goal = 200;
            if (this_._internal_golden_goal() != 0) {
              total_size += 3;
            }
            // float extra_stamina = 185;
            if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina()) != 0) {
              total_size += 6;
            }
            // int32 synch_see_offset = 186;
            if (this_._internal_synch_see_offset() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_synch_see_offset());
            }
            // int32 extra_half_time = 187;
            if (this_._internal_extra_half_time() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_extra_half_time());
            }
            // float stamina_capacity = 188;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_capacity()) != 0) {
              total_size += 6;
            }
            // float max_dash_angle = 189;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_angle()) != 0) {
              total_size += 6;
            }
            // float min_dash_angle = 190;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_dash_angle()) != 0) {
              total_size += 6;
            }
            // float dash_angle_step = 191;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_angle_step()) != 0) {
              total_size += 6;
            }
            // float side_dash_rate = 192;
            if (::absl::bit_cast<::uint32_t>(this_._internal_side_dash_rate()) != 0) {
              total_size += 6;
            }
            // float back_dash_rate = 193;
            if (::absl::bit_cast<::uint32_t>(this_._internal_back_dash_rate()) != 0) {
              total_size += 6;
            }
            // float max_dash_power = 194;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_dash_power()) != 0) {
              total_size += 6;
            }
            // float min_dash_power = 195;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_dash_power()) != 0) {
              total_size += 6;
            }
            // float tackle_rand_factor = 196;
            if (::absl::bit_cast<::uint32_t>(this_._internal_tackle_rand_factor()) != 0) {
              total_size += 6;
            }
            // float foul_detect_probability = 197;
            if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability()) != 0) {
              total_size += 6;
            }
            // float foul_exponent = 198;
            if (::absl::bit_cast<::uint32_t>(this_._internal_foul_exponent()) != 0) {
              total_size += 6;
            }
            // int32 foul_cycles = 199;
            if (this_._internal_foul_cycles() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_foul_cycles());
            }
            // float red_card_probability = 201;
            if (::absl::bit_cast<::uint32_t>(this_._internal_red_card_probability()) != 0) {
              total_size += 6;
            }
            // int32 illegal_defense_duration = 202;
            if (this_._internal_illegal_defense_duration() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_illegal_defense_duration());
            }
            // int32 illegal_defense_number = 203;
            if (this_._internal_illegal_defense_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_illegal_defense_number());
            }
            // float illegal_defense_dist_x = 204;
            if (::absl::bit_cast<::uint32_t>(this_._internal_illegal_defense_dist_x()) != 0) {
              total_size += 6;
            }
            // float illegal_defense_width = 205;
            if (::absl::bit_cast<::uint32_t>(this_._internal_illegal_defense_width()) != 0) {
              total_size += 6;
            }
            // float max_catch_angle = 208;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_catch_angle()) != 0) {
              total_size += 6;
            }
            // float min_catch_angle = 209;
            if (::absl::bit_cast<::uint32_t>(this_._internal_min_catch_angle()) != 0) {
              total_size += 6;
            }
            // int32 random_seed = 210;
            if (this_._internal_random_seed() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_random_seed());
            }
            // float long_kick_power_factor = 211;
            if (::absl::bit_cast<::uint32_t>(this_._internal_long_kick_power_factor()) != 0) {
              total_size += 6;
            }
            // int32 long_kick_delay = 212;
            if (this_._internal_long_kick_delay() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_long_kick_delay());
            }
            // int32 max_monitors = 213;
            if (this_._internal_max_monitors() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_max_monitors());
            }
            // float catchable_area = 214;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area()) != 0) {
              total_size += 6;
            }
            // float real_speed_max = 215;
            if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max()) != 0) {
              total_size += 6;
            }
            // float pitch_half_length = 216;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_half_length()) != 0) {
              total_size += 6;
            }
            // float pitch_half_width = 217;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_half_width()) != 0) {
              total_size += 6;
            }
            // float our_penalty_area_line_x = 218;
            if (::absl::bit_cast<::uint32_t>(this_._internal_our_penalty_area_line_x()) != 0) {
              total_size += 6;
            }
            // float their_penalty_area_line_x = 219;
            if (::absl::bit_cast<::uint32_t>(this_._internal_their_penalty_area_line_x()) != 0) {
              total_size += 6;
            }
            // float penalty_area_half_width = 220;
            if (::absl::bit_cast<::uint32_t>(this_._internal_penalty_area_half_width()) != 0) {
              total_size += 6;
            }
            // float penalty_area_length = 221;
            if (::absl::bit_cast<::uint32_t>(this_._internal_penalty_area_length()) != 0) {
              total_size += 6;
            }
            // float goal_width = 222;
            if (::absl::bit_cast<::uint32_t>(this_._internal_goal_width()) != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServerParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerParam*>(&to_msg);
  auto& from = static_cast<const ServerParam&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.ServerParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_replay_file().empty()) {
    _this->_internal_set_replay_file(from._internal_replay_file());
  }
  if (!from._internal_landmark_file().empty()) {
    _this->_internal_set_landmark_file(from._internal_landmark_file());
  }
  if (!from._internal_text_log_dir().empty()) {
    _this->_internal_set_text_log_dir(from._internal_text_log_dir());
  }
  if (!from._internal_game_log_dir().empty()) {
    _this->_internal_set_game_log_dir(from._internal_game_log_dir());
  }
  if (!from._internal_text_log_fixed_name().empty()) {
    _this->_internal_set_text_log_fixed_name(from._internal_text_log_fixed_name());
  }
  if (!from._internal_game_log_fixed_name().empty()) {
    _this->_internal_set_game_log_fixed_name(from._internal_game_log_fixed_name());
  }
  if (!from._internal_log_date_format().empty()) {
    _this->_internal_set_log_date_format(from._internal_log_date_format());
  }
  if (!from._internal_team_l_start().empty()) {
    _this->_internal_set_team_l_start(from._internal_team_l_start());
  }
  if (!from._internal_team_r_start().empty()) {
    _this->_internal_set_team_r_start(from._internal_team_r_start());
  }
  if (!from._internal_keepaway_log_dir().empty()) {
    _this->_internal_set_keepaway_log_dir(from._internal_keepaway_log_dir());
  }
  if (!from._internal_keepaway_log_fixed_name().empty()) {
    _this->_internal_set_keepaway_log_fixed_name(from._internal_keepaway_log_fixed_name());
  }
  if (!from._internal_module_dir().empty()) {
    _this->_internal_set_module_dir(from._internal_module_dir());
  }
  if (!from._internal_coach_msg_file().empty()) {
    _this->_internal_set_coach_msg_file(from._internal_coach_msg_file());
  }
  if (!from._internal_fixed_teamname_l().empty()) {
    _this->_internal_set_fixed_teamname_l(from._internal_fixed_teamname_l());
  }
  if (!from._internal_fixed_teamname_r().empty()) {
    _this->_internal_set_fixed_teamname_r(from._internal_fixed_teamname_r());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.register_response_ != nullptr);
    if (_this->_impl_.register_response_ == nullptr) {
      _this->_impl_.register_response_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
    } else {
      _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
    }
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_inertia_moment()) != 0) {
    _this->_impl_.inertia_moment_ = from._impl_.inertia_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_size()) != 0) {
    _this->_impl_.player_size_ = from._impl_.player_size_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_decay()) != 0) {
    _this->_impl_.player_decay_ = from._impl_.player_decay_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_rand()) != 0) {
    _this->_impl_.player_rand_ = from._impl_.player_rand_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_weight()) != 0) {
    _this->_impl_.player_weight_ = from._impl_.player_weight_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max()) != 0) {
    _this->_impl_.player_speed_max_ = from._impl_.player_speed_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_accel_max()) != 0) {
    _this->_impl_.player_accel_max_ = from._impl_.player_accel_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_max()) != 0) {
    _this->_impl_.stamina_max_ = from._impl_.stamina_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_inc_max()) != 0) {
    _this->_impl_.stamina_inc_max_ = from._impl_.stamina_inc_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_recover_init()) != 0) {
    _this->_impl_.recover_init_ = from._impl_.recover_init_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_recover_dec_thr()) != 0) {
    _this->_impl_.recover_dec_thr_ = from._impl_.recover_dec_thr_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_recover_min()) != 0) {
    _this->_impl_.recover_min_ = from._impl_.recover_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_recover_dec()) != 0) {
    _this->_impl_.recover_dec_ = from._impl_.recover_dec_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_init()) != 0) {
    _this->_impl_.effort_init_ = from._impl_.effort_init_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_dec_thr()) != 0) {
    _this->_impl_.effort_dec_thr_ = from._impl_.effort_dec_thr_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_min()) != 0) {
    _this->_impl_.effort_min_ = from._impl_.effort_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_dec()) != 0) {
    _this->_impl_.effort_dec_ = from._impl_.effort_dec_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_inc_thr()) != 0) {
    _this->_impl_.effort_inc_thr_ = from._impl_.effort_inc_thr_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_inc()) != 0) {
    _this->_impl_.effort_inc_ = from._impl_.effort_inc_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rand()) != 0) {
    _this->_impl_.kick_rand_ = from._impl_.kick_rand_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_rand_factor_l()) != 0) {
    _this->_impl_.player_rand_factor_l_ = from._impl_.player_rand_factor_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_rand_factor_r()) != 0) {
    _this->_impl_.player_rand_factor_r_ = from._impl_.player_rand_factor_r_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rand_factor_l()) != 0) {
    _this->_impl_.kick_rand_factor_l_ = from._impl_.kick_rand_factor_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rand_factor_r()) != 0) {
    _this->_impl_.kick_rand_factor_r_ = from._impl_.kick_rand_factor_r_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_size()) != 0) {
    _this->_impl_.ball_size_ = from._impl_.ball_size_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_decay()) != 0) {
    _this->_impl_.ball_decay_ = from._impl_.ball_decay_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_rand()) != 0) {
    _this->_impl_.ball_rand_ = from._impl_.ball_rand_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_weight()) != 0) {
    _this->_impl_.ball_weight_ = from._impl_.ball_weight_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_speed_max()) != 0) {
    _this->_impl_.ball_speed_max_ = from._impl_.ball_speed_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_accel_max()) != 0) {
    _this->_impl_.ball_accel_max_ = from._impl_.ball_accel_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power_rate()) != 0) {
    _this->_impl_.dash_power_rate_ = from._impl_.dash_power_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_power_rate()) != 0) {
    _this->_impl_.kick_power_rate_ = from._impl_.kick_power_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_margin()) != 0) {
    _this->_impl_.kickable_margin_ = from._impl_.kickable_margin_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_control_radius()) != 0) {
    _this->_impl_.control_radius_ = from._impl_.control_radius_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_control_radius_width()) != 0) {
    _this->_impl_.control_radius_width_ = from._impl_.control_radius_width_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_power()) != 0) {
    _this->_impl_.max_power_ = from._impl_.max_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_power()) != 0) {
    _this->_impl_.min_power_ = from._impl_.min_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_moment()) != 0) {
    _this->_impl_.max_moment_ = from._impl_.max_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_moment()) != 0) {
    _this->_impl_.min_moment_ = from._impl_.min_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_neck_moment()) != 0) {
    _this->_impl_.max_neck_moment_ = from._impl_.max_neck_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_neck_moment()) != 0) {
    _this->_impl_.min_neck_moment_ = from._impl_.min_neck_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_neck_angle()) != 0) {
    _this->_impl_.max_neck_angle_ = from._impl_.max_neck_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_neck_angle()) != 0) {
    _this->_impl_.min_neck_angle_ = from._impl_.min_neck_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_visible_angle()) != 0) {
    _this->_impl_.visible_angle_ = from._impl_.visible_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_visible_distance()) != 0) {
    _this->_impl_.visible_distance_ = from._impl_.visible_distance_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wind_dir()) != 0) {
    _this->_impl_.wind_dir_ = from._impl_.wind_dir_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wind_force()) != 0) {
    _this->_impl_.wind_force_ = from._impl_.wind_force_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wind_angle()) != 0) {
    _this->_impl_.wind_angle_ = from._impl_.wind_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_wind_rand()) != 0) {
    _this->_impl_.wind_rand_ = from._impl_.wind_rand_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_area()) != 0) {
    _this->_impl_.kickable_area_ = from._impl_.kickable_area_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catch_area_l()) != 0) {
    _this->_impl_.catch_area_l_ = from._impl_.catch_area_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catch_area_w()) != 0) {
    _this->_impl_.catch_area_w_ = from._impl_.catch_area_w_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catch_probability()) != 0) {
    _this->_impl_.catch_probability_ = from._impl_.catch_probability_;
  }
  if (from._internal_team_actuator_noise() != 0) {
    _this->_impl_.team_actuator_noise_ = from._impl_.team_actuator_noise_;
  }
  if (from._internal_wind_none() != 0) {
    _this->_impl_.wind_none_ = from._impl_.wind_none_;
  }
  if (from._internal_use_wind_random() != 0) {
    _this->_impl_.use_wind_random_ = from._impl_.use_wind_random_;
  }
  if (from._internal_use_offside() != 0) {
    _this->_impl_.use_offside_ = from._impl_.use_offside_;
  }
  if (from._internal_goalie_max_moves() != 0) {
    _this->_impl_.goalie_max_moves_ = from._impl_.goalie_max_moves_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_corner_kick_margin()) != 0) {
    _this->_impl_.corner_kick_margin_ = from._impl_.corner_kick_margin_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_offside_active_area_size()) != 0) {
    _this->_impl_.offside_active_area_size_ = from._impl_.offside_active_area_size_;
  }
  if (from._internal_coach_say_count_max() != 0) {
    _this->_impl_.coach_say_count_max_ = from._impl_.coach_say_count_max_;
  }
  if (from._internal_coach_say_msg_size() != 0) {
    _this->_impl_.coach_say_msg_size_ = from._impl_.coach_say_msg_size_;
  }
  if (from._internal_clang_win_size() != 0) {
    _this->_impl_.clang_win_size_ = from._impl_.clang_win_size_;
  }
  if (from._internal_clang_define_win() != 0) {
    _this->_impl_.clang_define_win_ = from._impl_.clang_define_win_;
  }
  if (from._internal_clang_meta_win() != 0) {
    _this->_impl_.clang_meta_win_ = from._impl_.clang_meta_win_;
  }
  if (from._internal_clang_advice_win() != 0) {
    _this->_impl_.clang_advice_win_ = from._impl_.clang_advice_win_;
  }
  if (from._internal_clang_info_win() != 0) {
    _this->_impl_.clang_info_win_ = from._impl_.clang_info_win_;
  }
  if (from._internal_clang_mess_delay() != 0) {
    _this->_impl_.clang_mess_delay_ = from._impl_.clang_mess_delay_;
  }
  if (from._internal_clang_mess_per_cycle() != 0) {
    _this->_impl_.clang_mess_per_cycle_ = from._impl_.clang_mess_per_cycle_;
  }
  if (from._internal_half_time() != 0) {
    _this->_impl_.half_time_ = from._impl_.half_time_;
  }
  if (from._internal_simulator_step() != 0) {
    _this->_impl_.simulator_step_ = from._impl_.simulator_step_;
  }
  if (from._internal_send_step() != 0) {
    _this->_impl_.send_step_ = from._impl_.send_step_;
  }
  if (from._internal_recv_step() != 0) {
    _this->_impl_.recv_step_ = from._impl_.recv_step_;
  }
  if (from._internal_sense_body_step() != 0) {
    _this->_impl_.sense_body_step_ = from._impl_.sense_body_step_;
  }
  if (from._internal_lcm_step() != 0) {
    _this->_impl_.lcm_step_ = from._impl_.lcm_step_;
  }
  if (from._internal_player_say_msg_size() != 0) {
    _this->_impl_.player_say_msg_size_ = from._impl_.player_say_msg_size_;
  }
  if (from._internal_player_hear_max() != 0) {
    _this->_impl_.player_hear_max_ = from._impl_.player_hear_max_;
  }
  if (from._internal_player_hear_inc() != 0) {
    _this->_impl_.player_hear_inc_ = from._impl_.player_hear_inc_;
  }
  if (from._internal_player_hear_decay() != 0) {
    _this->_impl_.player_hear_decay_ = from._impl_.player_hear_decay_;
  }
  if (from._internal_catch_ban_cycle() != 0) {
    _this->_impl_.catch_ban_cycle_ = from._impl_.catch_ban_cycle_;
  }
  if (from._internal_slow_down_factor() != 0) {
    _this->_impl_.slow_down_factor_ = from._impl_.slow_down_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_offside_kick_margin()) != 0) {
    _this->_impl_.offside_kick_margin_ = from._impl_.offside_kick_margin_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_audio_cut_dist()) != 0) {
    _this->_impl_.audio_cut_dist_ = from._impl_.audio_cut_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_quantize_step()) != 0) {
    _this->_impl_.dist_quantize_step_ = from._impl_.dist_quantize_step_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_landmark_dist_quantize_step()) != 0) {
    _this->_impl_.landmark_dist_quantize_step_ = from._impl_.landmark_dist_quantize_step_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dir_quantize_step()) != 0) {
    _this->_impl_.dir_quantize_step_ = from._impl_.dir_quantize_step_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_quantize_step_l()) != 0) {
    _this->_impl_.dist_quantize_step_l_ = from._impl_.dist_quantize_step_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dist_quantize_step_r()) != 0) {
    _this->_impl_.dist_quantize_step_r_ = from._impl_.dist_quantize_step_r_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_landmark_dist_quantize_step_l()) != 0) {
    _this->_impl_.landmark_dist_quantize_step_l_ = from._impl_.landmark_dist_quantize_step_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_landmark_dist_quantize_step_r()) != 0) {
    _this->_impl_.landmark_dist_quantize_step_r_ = from._impl_.landmark_dist_quantize_step_r_;
  }
  if (from._internal_kickoff_offside() != 0) {
    _this->_impl_.kickoff_offside_ = from._impl_.kickoff_offside_;
  }
  if (from._internal_coach_mode() != 0) {
    _this->_impl_.coach_mode_ = from._impl_.coach_mode_;
  }
  if (from._internal_coach_with_referee_mode() != 0) {
    _this->_impl_.coach_with_referee_mode_ = from._impl_.coach_with_referee_mode_;
  }
  if (from._internal_use_old_coach_hear() != 0) {
    _this->_impl_.use_old_coach_hear_ = from._impl_.use_old_coach_hear_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dir_quantize_step_l()) != 0) {
    _this->_impl_.dir_quantize_step_l_ = from._impl_.dir_quantize_step_l_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dir_quantize_step_r()) != 0) {
    _this->_impl_.dir_quantize_step_r_ = from._impl_.dir_quantize_step_r_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_slowness_on_top_for_left_team()) != 0) {
    _this->_impl_.slowness_on_top_for_left_team_ = from._impl_.slowness_on_top_for_left_team_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_slowness_on_top_for_right_team()) != 0) {
    _this->_impl_.slowness_on_top_for_right_team_ = from._impl_.slowness_on_top_for_right_team_;
  }
  if (from._internal_start_goal_l() != 0) {
    _this->_impl_.start_goal_l_ = from._impl_.start_goal_l_;
  }
  if (from._internal_start_goal_r() != 0) {
    _this->_impl_.start_goal_r_ = from._impl_.start_goal_r_;
  }
  if (from._internal_drop_ball_time() != 0) {
    _this->_impl_.drop_ball_time_ = from._impl_.drop_ball_time_;
  }
  if (from._internal_fullstate_l() != 0) {
    _this->_impl_.fullstate_l_ = from._impl_.fullstate_l_;
  }
  if (from._internal_fullstate_r() != 0) {
    _this->_impl_.fullstate_r_ = from._impl_.fullstate_r_;
  }
  if (from._internal_synch_mode() != 0) {
    _this->_impl_.synch_mode_ = from._impl_.synch_mode_;
  }
  if (from._internal_verbose_mode() != 0) {
    _this->_impl_.verbose_mode_ = from._impl_.verbose_mode_;
  }
  if (from._internal_synch_offset() != 0) {
    _this->_impl_.synch_offset_ = from._impl_.synch_offset_;
  }
  if (from._internal_synch_micro_sleep() != 0) {
    _this->_impl_.synch_micro_sleep_ = from._impl_.synch_micro_sleep_;
  }
  if (from._internal_point_to_ban() != 0) {
    _this->_impl_.point_to_ban_ = from._impl_.point_to_ban_;
  }
  if (from._internal_point_to_duration() != 0) {
    _this->_impl_.point_to_duration_ = from._impl_.point_to_duration_;
  }
  if (from._internal_player_port() != 0) {
    _this->_impl_.player_port_ = from._impl_.player_port_;
  }
  if (from._internal_trainer_port() != 0) {
    _this->_impl_.trainer_port_ = from._impl_.trainer_port_;
  }
  if (from._internal_online_coach_port() != 0) {
    _this->_impl_.online_coach_port_ = from._impl_.online_coach_port_;
  }
  if (from._internal_coach_send_vi_step() != 0) {
    _this->_impl_.coach_send_vi_step_ = from._impl_.coach_send_vi_step_;
  }
  if (from._internal_send_comms() != 0) {
    _this->_impl_.send_comms_ = from._impl_.send_comms_;
  }
  if (from._internal_text_logging() != 0) {
    _this->_impl_.text_logging_ = from._impl_.text_logging_;
  }
  if (from._internal_game_logging() != 0) {
    _this->_impl_.game_logging_ = from._impl_.game_logging_;
  }
  if (from._internal_use_text_log_fixed() != 0) {
    _this->_impl_.use_text_log_fixed_ = from._impl_.use_text_log_fixed_;
  }
  if (from._internal_game_log_version() != 0) {
    _this->_impl_.game_log_version_ = from._impl_.game_log_version_;
  }
  if (from._internal_use_game_log_fixed() != 0) {
    _this->_impl_.use_game_log_fixed_ = from._impl_.use_game_log_fixed_;
  }
  if (from._internal_use_text_log_dated() != 0) {
    _this->_impl_.use_text_log_dated_ = from._impl_.use_text_log_dated_;
  }
  if (from._internal_use_game_log_dated() != 0) {
    _this->_impl_.use_game_log_dated_ = from._impl_.use_game_log_dated_;
  }
  if (from._internal_log_times() != 0) {
    _this->_impl_.log_times_ = from._impl_.log_times_;
  }
  if (from._internal_text_log_compression() != 0) {
    _this->_impl_.text_log_compression_ = from._impl_.text_log_compression_;
  }
  if (from._internal_game_log_compression() != 0) {
    _this->_impl_.game_log_compression_ = from._impl_.game_log_compression_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_dist()) != 0) {
    _this->_impl_.tackle_dist_ = from._impl_.tackle_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_back_dist()) != 0) {
    _this->_impl_.tackle_back_dist_ = from._impl_.tackle_back_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_width()) != 0) {
    _this->_impl_.tackle_width_ = from._impl_.tackle_width_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_exponent()) != 0) {
    _this->_impl_.tackle_exponent_ = from._impl_.tackle_exponent_;
  }
  if (from._internal_record_message() != 0) {
    _this->_impl_.record_message_ = from._impl_.record_message_;
  }
  if (from._internal_use_profile() != 0) {
    _this->_impl_.use_profile_ = from._impl_.use_profile_;
  }
  if (from._internal_free_kick_faults() != 0) {
    _this->_impl_.free_kick_faults_ = from._impl_.free_kick_faults_;
  }
  if (from._internal_back_passes() != 0) {
    _this->_impl_.back_passes_ = from._impl_.back_passes_;
  }
  if (from._internal_tackle_cycles() != 0) {
    _this->_impl_.tackle_cycles_ = from._impl_.tackle_cycles_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_power_rate()) != 0) {
    _this->_impl_.tackle_power_rate_ = from._impl_.tackle_power_rate_;
  }
  if (from._internal_freeform_wait_period() != 0) {
    _this->_impl_.freeform_wait_period_ = from._impl_.freeform_wait_period_;
  }
  if (from._internal_freeform_send_period() != 0) {
    _this->_impl_.freeform_send_period_ = from._impl_.freeform_send_period_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stopped_ball_vel()) != 0) {
    _this->_impl_.stopped_ball_vel_ = from._impl_.stopped_ball_vel_;
  }
  if (from._internal_max_goal_kicks() != 0) {
    _this->_impl_.max_goal_kicks_ = from._impl_.max_goal_kicks_;
  }
  if (from._internal_clang_del_win() != 0) {
    _this->_impl_.clang_del_win_ = from._impl_.clang_del_win_;
  }
  if (from._internal_clang_rule_win() != 0) {
    _this->_impl_.clang_rule_win_ = from._impl_.clang_rule_win_;
  }
  if (from._internal_kick_off_wait() != 0) {
    _this->_impl_.kick_off_wait_ = from._impl_.kick_off_wait_;
  }
  if (from._internal_connect_wait() != 0) {
    _this->_impl_.connect_wait_ = from._impl_.connect_wait_;
  }
  if (from._internal_proper_goal_kicks() != 0) {
    _this->_impl_.proper_goal_kicks_ = from._impl_.proper_goal_kicks_;
  }
  if (from._internal_auto_mode() != 0) {
    _this->_impl_.auto_mode_ = from._impl_.auto_mode_;
  }
  if (from._internal_keepaway_mode() != 0) {
    _this->_impl_.keepaway_mode_ = from._impl_.keepaway_mode_;
  }
  if (from._internal_keepaway_logging() != 0) {
    _this->_impl_.keepaway_logging_ = from._impl_.keepaway_logging_;
  }
  if (from._internal_game_over_wait() != 0) {
    _this->_impl_.game_over_wait_ = from._impl_.game_over_wait_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_keepaway_length()) != 0) {
    _this->_impl_.keepaway_length_ = from._impl_.keepaway_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_keepaway_width()) != 0) {
    _this->_impl_.keepaway_width_ = from._impl_.keepaway_width_;
  }
  if (from._internal_keepaway_start() != 0) {
    _this->_impl_.keepaway_start_ = from._impl_.keepaway_start_;
  }
  if (from._internal_nr_normal_halfs() != 0) {
    _this->_impl_.nr_normal_halfs_ = from._impl_.nr_normal_halfs_;
  }
  if (from._internal_nr_extra_halfs() != 0) {
    _this->_impl_.nr_extra_halfs_ = from._impl_.nr_extra_halfs_;
  }
  if (from._internal_keepaway_log_fixed() != 0) {
    _this->_impl_.keepaway_log_fixed_ = from._impl_.keepaway_log_fixed_;
  }
  if (from._internal_keepaway_log_dated() != 0) {
    _this->_impl_.keepaway_log_dated_ = from._impl_.keepaway_log_dated_;
  }
  if (from._internal_penalty_shoot_outs() != 0) {
    _this->_impl_.penalty_shoot_outs_ = from._impl_.penalty_shoot_outs_;
  }
  if (from._internal_pen_random_winner() != 0) {
    _this->_impl_.pen_random_winner_ = from._impl_.pen_random_winner_;
  }
  if (from._internal_pen_before_setup_wait() != 0) {
    _this->_impl_.pen_before_setup_wait_ = from._impl_.pen_before_setup_wait_;
  }
  if (from._internal_pen_setup_wait() != 0) {
    _this->_impl_.pen_setup_wait_ = from._impl_.pen_setup_wait_;
  }
  if (from._internal_pen_ready_wait() != 0) {
    _this->_impl_.pen_ready_wait_ = from._impl_.pen_ready_wait_;
  }
  if (from._internal_pen_taken_wait() != 0) {
    _this->_impl_.pen_taken_wait_ = from._impl_.pen_taken_wait_;
  }
  if (from._internal_pen_nr_kicks() != 0) {
    _this->_impl_.pen_nr_kicks_ = from._impl_.pen_nr_kicks_;
  }
  if (from._internal_pen_max_extra_kicks() != 0) {
    _this->_impl_.pen_max_extra_kicks_ = from._impl_.pen_max_extra_kicks_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pen_dist_x()) != 0) {
    _this->_impl_.pen_dist_x_ = from._impl_.pen_dist_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pen_max_goalie_dist_x()) != 0) {
    _this->_impl_.pen_max_goalie_dist_x_ = from._impl_.pen_max_goalie_dist_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_stuck_area()) != 0) {
    _this->_impl_.ball_stuck_area_ = from._impl_.ball_stuck_area_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_tackle_power()) != 0) {
    _this->_impl_.max_tackle_power_ = from._impl_.max_tackle_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_back_tackle_power()) != 0) {
    _this->_impl_.max_back_tackle_power_ = from._impl_.max_back_tackle_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max_min()) != 0) {
    _this->_impl_.player_speed_max_min_ = from._impl_.player_speed_max_min_;
  }
  if (from._internal_pen_allow_mult_kicks() != 0) {
    _this->_impl_.pen_allow_mult_kicks_ = from._impl_.pen_allow_mult_kicks_;
  }
  if (from._internal_pen_coach_moves_players() != 0) {
    _this->_impl_.pen_coach_moves_players_ = from._impl_.pen_coach_moves_players_;
  }
  if (from._internal_golden_goal() != 0) {
    _this->_impl_.golden_goal_ = from._impl_.golden_goal_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_extra_stamina()) != 0) {
    _this->_impl_.extra_stamina_ = from._impl_.extra_stamina_;
  }
  if (from._internal_synch_see_offset() != 0) {
    _this->_impl_.synch_see_offset_ = from._impl_.synch_see_offset_;
  }
  if (from._internal_extra_half_time() != 0) {
    _this->_impl_.extra_half_time_ = from._impl_.extra_half_time_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_capacity()) != 0) {
    _this->_impl_.stamina_capacity_ = from._impl_.stamina_capacity_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_dash_angle()) != 0) {
    _this->_impl_.max_dash_angle_ = from._impl_.max_dash_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_dash_angle()) != 0) {
    _this->_impl_.min_dash_angle_ = from._impl_.min_dash_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_angle_step()) != 0) {
    _this->_impl_.dash_angle_step_ = from._impl_.dash_angle_step_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_side_dash_rate()) != 0) {
    _this->_impl_.side_dash_rate_ = from._impl_.side_dash_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_back_dash_rate()) != 0) {
    _this->_impl_.back_dash_rate_ = from._impl_.back_dash_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_dash_power()) != 0) {
    _this->_impl_.max_dash_power_ = from._impl_.max_dash_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_dash_power()) != 0) {
    _this->_impl_.min_dash_power_ = from._impl_.min_dash_power_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_tackle_rand_factor()) != 0) {
    _this->_impl_.tackle_rand_factor_ = from._impl_.tackle_rand_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_foul_detect_probability()) != 0) {
    _this->_impl_.foul_detect_probability_ = from._impl_.foul_detect_probability_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_foul_exponent()) != 0) {
    _this->_impl_.foul_exponent_ = from._impl_.foul_exponent_;
  }
  if (from._internal_foul_cycles() != 0) {
    _this->_impl_.foul_cycles_ = from._impl_.foul_cycles_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_red_card_probability()) != 0) {
    _this->_impl_.red_card_probability_ = from._impl_.red_card_probability_;
  }
  if (from._internal_illegal_defense_duration() != 0) {
    _this->_impl_.illegal_defense_duration_ = from._impl_.illegal_defense_duration_;
  }
  if (from._internal_illegal_defense_number() != 0) {
    _this->_impl_.illegal_defense_number_ = from._impl_.illegal_defense_number_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_illegal_defense_dist_x()) != 0) {
    _this->_impl_.illegal_defense_dist_x_ = from._impl_.illegal_defense_dist_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_illegal_defense_width()) != 0) {
    _this->_impl_.illegal_defense_width_ = from._impl_.illegal_defense_width_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_catch_angle()) != 0) {
    _this->_impl_.max_catch_angle_ = from._impl_.max_catch_angle_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_min_catch_angle()) != 0) {
    _this->_impl_.min_catch_angle_ = from._impl_.min_catch_angle_;
  }
  if (from._internal_random_seed() != 0) {
    _this->_impl_.random_seed_ = from._impl_.random_seed_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_long_kick_power_factor()) != 0) {
    _this->_impl_.long_kick_power_factor_ = from._impl_.long_kick_power_factor_;
  }
  if (from._internal_long_kick_delay() != 0) {
    _this->_impl_.long_kick_delay_ = from._impl_.long_kick_delay_;
  }
  if (from._internal_max_monitors() != 0) {
    _this->_impl_.max_monitors_ = from._impl_.max_monitors_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catchable_area()) != 0) {
    _this->_impl_.catchable_area_ = from._impl_.catchable_area_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_real_speed_max()) != 0) {
    _this->_impl_.real_speed_max_ = from._impl_.real_speed_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch_half_length()) != 0) {
    _this->_impl_.pitch_half_length_ = from._impl_.pitch_half_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch_half_width()) != 0) {
    _this->_impl_.pitch_half_width_ = from._impl_.pitch_half_width_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_our_penalty_area_line_x()) != 0) {
    _this->_impl_.our_penalty_area_line_x_ = from._impl_.our_penalty_area_line_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_their_penalty_area_line_x()) != 0) {
    _this->_impl_.their_penalty_area_line_x_ = from._impl_.their_penalty_area_line_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_penalty_area_half_width()) != 0) {
    _this->_impl_.penalty_area_half_width_ = from._impl_.penalty_area_half_width_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_penalty_area_length()) != 0) {
    _this->_impl_.penalty_area_length_ = from._impl_.penalty_area_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_goal_width()) != 0) {
    _this->_impl_.goal_width_ = from._impl_.goal_width_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerParam::CopyFrom(const ServerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.ServerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerParam::InternalSwap(ServerParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.replay_file_, &other->_impl_.replay_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.landmark_file_, &other->_impl_.landmark_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_log_dir_, &other->_impl_.text_log_dir_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_log_dir_, &other->_impl_.game_log_dir_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_log_fixed_name_, &other->_impl_.text_log_fixed_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_log_fixed_name_, &other->_impl_.game_log_fixed_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_date_format_, &other->_impl_.log_date_format_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.team_l_start_, &other->_impl_.team_l_start_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.team_r_start_, &other->_impl_.team_r_start_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keepaway_log_dir_, &other->_impl_.keepaway_log_dir_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keepaway_log_fixed_name_, &other->_impl_.keepaway_log_fixed_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_dir_, &other->_impl_.module_dir_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coach_msg_file_, &other->_impl_.coach_msg_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fixed_teamname_l_, &other->_impl_.fixed_teamname_l_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fixed_teamname_r_, &other->_impl_.fixed_teamname_r_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.goal_width_)
      + sizeof(ServerParam::_impl_.goal_width_)
      - PROTOBUF_FIELD_OFFSET(ServerParam, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata ServerParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerParam::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlayerParam>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_._has_bits_);
};

PlayerParam::PlayerParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PlayerParam)
}
inline PROTOBUF_NDEBUG_INLINE PlayerParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PlayerParam& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PlayerParam::PlayerParam(
    ::google::protobuf::Arena* arena,
    const PlayerParam& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, player_types_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, player_types_),
           offsetof(Impl_, catchable_area_l_stretch_max_) -
               offsetof(Impl_, player_types_) +
               sizeof(Impl_::catchable_area_l_stretch_max_));

  // @@protoc_insertion_point(copy_constructor:protos.PlayerParam)
}
inline PROTOBUF_NDEBUG_INLINE PlayerParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, catchable_area_l_stretch_max_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::catchable_area_l_stretch_max_));
}
PlayerParam::~PlayerParam() {
  // @@protoc_insertion_point(destructor:protos.PlayerParam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerParam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.register_response_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PlayerParam::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PlayerParam_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PlayerParam::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PlayerParam>(),
            ::google::protobuf::Message::GetNewImpl<PlayerParam>(),
            ::google::protobuf::Message::GetClearImpl<PlayerParam>(), &PlayerParam::ByteSizeLong,
                &PlayerParam::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_._cached_size_),
            false,
        },
        &PlayerParam::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PlayerParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 30, 1, 0, 2> PlayerParam::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_._has_bits_),
    0, // no _extensions_
    30, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3221225472,  // skipmap
    offsetof(decltype(_table_), field_entries),
    30,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PlayerParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.register_response_)}},
    // int32 player_types = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerParam, _impl_.player_types_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_types_)}},
    // int32 subs_max = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerParam, _impl_.subs_max_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.subs_max_)}},
    // int32 pt_max = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerParam, _impl_.pt_max_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.pt_max_)}},
    // bool allow_mult_default_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerParam, _impl_.allow_mult_default_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.allow_mult_default_type_)}},
    // float player_speed_max_delta_min = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_speed_max_delta_min_)}},
    // float player_speed_max_delta_max = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_speed_max_delta_max_)}},
    // float stamina_inc_max_delta_factor = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.stamina_inc_max_delta_factor_)}},
    // float player_decay_delta_min = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_decay_delta_min_)}},
    // float player_decay_delta_max = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_decay_delta_max_)}},
    // float inertia_moment_delta_factor = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.inertia_moment_delta_factor_)}},
    // float dash_power_rate_delta_min = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.dash_power_rate_delta_min_)}},
    // float dash_power_rate_delta_max = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.dash_power_rate_delta_max_)}},
    // float player_size_delta_factor = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_size_delta_factor_)}},
    // float kickable_margin_delta_min = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kickable_margin_delta_min_)}},
    // float kickable_margin_delta_max = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kickable_margin_delta_max_)}},
    // float kick_rand_delta_factor = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_rand_delta_factor_)}},
    // float extra_stamina_delta_min = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.extra_stamina_delta_min_)}},
    // float extra_stamina_delta_max = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.extra_stamina_delta_max_)}},
    // float effort_max_delta_factor = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.effort_max_delta_factor_)}},
    // float effort_min_delta_factor = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.effort_min_delta_factor_)}},
    // int32 random_seed = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.random_seed_)}},
    // float new_dash_power_rate_delta_min = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_dash_power_rate_delta_min_)}},
    // float new_dash_power_rate_delta_max = 24;
    {::_pbi::TcParser::FastF32S2,
     {453, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_dash_power_rate_delta_max_)}},
    // float new_stamina_inc_max_delta_factor = 25;
    {::_pbi::TcParser::FastF32S2,
     {461, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_stamina_inc_max_delta_factor_)}},
    // float kick_power_rate_delta_min = 26;
    {::_pbi::TcParser::FastF32S2,
     {469, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_power_rate_delta_min_)}},
    // float kick_power_rate_delta_max = 27;
    {::_pbi::TcParser::FastF32S2,
     {477, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_power_rate_delta_max_)}},
    // float foul_detect_probability_delta_factor = 28;
    {::_pbi::TcParser::FastF32S2,
     {485, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.foul_detect_probability_delta_factor_)}},
    // float catchable_area_l_stretch_min = 29;
    {::_pbi::TcParser::FastF32S2,
     {493, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.catchable_area_l_stretch_min_)}},
    // float catchable_area_l_stretch_max = 30;
    {::_pbi::TcParser::FastF32S2,
     {501, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.catchable_area_l_stretch_max_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 player_types = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_types_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 subs_max = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.subs_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pt_max = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.pt_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool allow_mult_default_type = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.allow_mult_default_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float player_speed_max_delta_min = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_speed_max_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_speed_max_delta_max = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_speed_max_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float stamina_inc_max_delta_factor = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.stamina_inc_max_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_decay_delta_min = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_decay_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_decay_delta_max = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_decay_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inertia_moment_delta_factor = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.inertia_moment_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_power_rate_delta_min = 12;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.dash_power_rate_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_power_rate_delta_max = 13;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.dash_power_rate_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_size_delta_factor = 14;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.player_size_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_margin_delta_min = 15;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kickable_margin_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_margin_delta_max = 16;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kickable_margin_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_rand_delta_factor = 17;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_rand_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float extra_stamina_delta_min = 18;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.extra_stamina_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float extra_stamina_delta_max = 19;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.extra_stamina_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_max_delta_factor = 20;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.effort_max_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_min_delta_factor = 21;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.effort_min_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 random_seed = 22;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.random_seed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float new_dash_power_rate_delta_min = 23;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_dash_power_rate_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float new_dash_power_rate_delta_max = 24;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_dash_power_rate_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float new_stamina_inc_max_delta_factor = 25;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.new_stamina_inc_max_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_power_rate_delta_min = 26;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_power_rate_delta_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_power_rate_delta_max = 27;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.kick_power_rate_delta_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float foul_detect_probability_delta_factor = 28;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.foul_detect_probability_delta_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catchable_area_l_stretch_min = 29;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.catchable_area_l_stretch_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catchable_area_l_stretch_max = 30;
    {PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.catchable_area_l_stretch_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PlayerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PlayerParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.register_response_ != nullptr);
    _impl_.register_response_->Clear();
  }
  ::memset(&_impl_.player_types_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.catchable_area_l_stretch_max_) -
      reinterpret_cast<char*>(&_impl_.player_types_)) + sizeof(_impl_.catchable_area_l_stretch_max_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerParam::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerParam& this_ = static_cast<const PlayerParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerParam::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PlayerParam)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // int32 player_types = 2;
          if (this_._internal_player_types() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_player_types(), target);
          }

          // int32 subs_max = 3;
          if (this_._internal_subs_max() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_subs_max(), target);
          }

          // int32 pt_max = 4;
          if (this_._internal_pt_max() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_pt_max(), target);
          }

          // bool allow_mult_default_type = 5;
          if (this_._internal_allow_mult_default_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_allow_mult_default_type(), target);
          }

          // float player_speed_max_delta_min = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_player_speed_max_delta_min(), target);
          }

          // float player_speed_max_delta_max = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_player_speed_max_delta_max(), target);
          }

          // float stamina_inc_max_delta_factor = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_stamina_inc_max_delta_factor(), target);
          }

          // float player_decay_delta_min = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_player_decay_delta_min(), target);
          }

          // float player_decay_delta_max = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_player_decay_delta_max(), target);
          }

          // float inertia_moment_delta_factor = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_inertia_moment_delta_factor(), target);
          }

          // float dash_power_rate_delta_min = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_dash_power_rate_delta_min(), target);
          }

          // float dash_power_rate_delta_max = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_dash_power_rate_delta_max(), target);
          }

          // float player_size_delta_factor = 14;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_size_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_player_size_delta_factor(), target);
          }

          // float kickable_margin_delta_min = 15;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_kickable_margin_delta_min(), target);
          }

          // float kickable_margin_delta_max = 16;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_kickable_margin_delta_max(), target);
          }

          // float kick_rand_delta_factor = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_kick_rand_delta_factor(), target);
          }

          // float extra_stamina_delta_min = 18;
          if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                18, this_._internal_extra_stamina_delta_min(), target);
          }

          // float extra_stamina_delta_max = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_extra_stamina_delta_max(), target);
          }

          // float effort_max_delta_factor = 20;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_max_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                20, this_._internal_effort_max_delta_factor(), target);
          }

          // float effort_min_delta_factor = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_effort_min_delta_factor(), target);
          }

          // int32 random_seed = 22;
          if (this_._internal_random_seed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                22, this_._internal_random_seed(), target);
          }

          // float new_dash_power_rate_delta_min = 23;
          if (::absl::bit_cast<::uint32_t>(this_._internal_new_dash_power_rate_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                23, this_._internal_new_dash_power_rate_delta_min(), target);
          }

          // float new_dash_power_rate_delta_max = 24;
          if (::absl::bit_cast<::uint32_t>(this_._internal_new_dash_power_rate_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                24, this_._internal_new_dash_power_rate_delta_max(), target);
          }

          // float new_stamina_inc_max_delta_factor = 25;
          if (::absl::bit_cast<::uint32_t>(this_._internal_new_stamina_inc_max_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                25, this_._internal_new_stamina_inc_max_delta_factor(), target);
          }

          // float kick_power_rate_delta_min = 26;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate_delta_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                26, this_._internal_kick_power_rate_delta_min(), target);
          }

          // float kick_power_rate_delta_max = 27;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate_delta_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                27, this_._internal_kick_power_rate_delta_max(), target);
          }

          // float foul_detect_probability_delta_factor = 28;
          if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability_delta_factor()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                28, this_._internal_foul_detect_probability_delta_factor(), target);
          }

          // float catchable_area_l_stretch_min = 29;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                29, this_._internal_catchable_area_l_stretch_min(), target);
          }

          // float catchable_area_l_stretch_max = 30;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                30, this_._internal_catchable_area_l_stretch_max(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PlayerParam)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerParam::ByteSizeLong(const MessageLite& base) {
          const PlayerParam& this_ = static_cast<const PlayerParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerParam::ByteSizeLong() const {
          const PlayerParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PlayerParam)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RegisterResponse register_response = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
          }
           {
            // int32 player_types = 2;
            if (this_._internal_player_types() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_player_types());
            }
            // int32 subs_max = 3;
            if (this_._internal_subs_max() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_subs_max());
            }
            // int32 pt_max = 4;
            if (this_._internal_pt_max() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pt_max());
            }
            // bool allow_mult_default_type = 5;
            if (this_._internal_allow_mult_default_type() != 0) {
              total_size += 2;
            }
            // float player_speed_max_delta_min = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_delta_min()) != 0) {
              total_size += 5;
            }
            // float player_speed_max_delta_max = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max_delta_max()) != 0) {
              total_size += 5;
            }
            // float stamina_inc_max_delta_factor = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max_delta_factor()) != 0) {
              total_size += 5;
            }
            // float player_decay_delta_min = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay_delta_min()) != 0) {
              total_size += 5;
            }
            // float player_decay_delta_max = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay_delta_max()) != 0) {
              total_size += 5;
            }
            // float inertia_moment_delta_factor = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment_delta_factor()) != 0) {
              total_size += 5;
            }
            // float dash_power_rate_delta_min = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate_delta_min()) != 0) {
              total_size += 5;
            }
            // float dash_power_rate_delta_max = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate_delta_max()) != 0) {
              total_size += 5;
            }
            // float player_size_delta_factor = 14;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_size_delta_factor()) != 0) {
              total_size += 5;
            }
            // float kickable_margin_delta_min = 15;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin_delta_min()) != 0) {
              total_size += 5;
            }
            // float kickable_margin_delta_max = 16;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin_delta_max()) != 0) {
              total_size += 6;
            }
            // float kick_rand_delta_factor = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand_delta_factor()) != 0) {
              total_size += 6;
            }
            // float extra_stamina_delta_min = 18;
            if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina_delta_min()) != 0) {
              total_size += 6;
            }
            // float extra_stamina_delta_max = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina_delta_max()) != 0) {
              total_size += 6;
            }
            // float effort_max_delta_factor = 20;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_max_delta_factor()) != 0) {
              total_size += 6;
            }
            // float effort_min_delta_factor = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min_delta_factor()) != 0) {
              total_size += 6;
            }
            // int32 random_seed = 22;
            if (this_._internal_random_seed() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_random_seed());
            }
            // float new_dash_power_rate_delta_min = 23;
            if (::absl::bit_cast<::uint32_t>(this_._internal_new_dash_power_rate_delta_min()) != 0) {
              total_size += 6;
            }
            // float new_dash_power_rate_delta_max = 24;
            if (::absl::bit_cast<::uint32_t>(this_._internal_new_dash_power_rate_delta_max()) != 0) {
              total_size += 6;
            }
            // float new_stamina_inc_max_delta_factor = 25;
            if (::absl::bit_cast<::uint32_t>(this_._internal_new_stamina_inc_max_delta_factor()) != 0) {
              total_size += 6;
            }
            // float kick_power_rate_delta_min = 26;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate_delta_min()) != 0) {
              total_size += 6;
            }
            // float kick_power_rate_delta_max = 27;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate_delta_max()) != 0) {
              total_size += 6;
            }
            // float foul_detect_probability_delta_factor = 28;
            if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability_delta_factor()) != 0) {
              total_size += 6;
            }
            // float catchable_area_l_stretch_min = 29;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch_min()) != 0) {
              total_size += 6;
            }
            // float catchable_area_l_stretch_max = 30;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch_max()) != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerParam*>(&to_msg);
  auto& from = static_cast<const PlayerParam&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PlayerParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.register_response_ != nullptr);
    if (_this->_impl_.register_response_ == nullptr) {
      _this->_impl_.register_response_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
    } else {
      _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
    }
  }
  if (from._internal_player_types() != 0) {
    _this->_impl_.player_types_ = from._impl_.player_types_;
  }
  if (from._internal_subs_max() != 0) {
    _this->_impl_.subs_max_ = from._impl_.subs_max_;
  }
  if (from._internal_pt_max() != 0) {
    _this->_impl_.pt_max_ = from._impl_.pt_max_;
  }
  if (from._internal_allow_mult_default_type() != 0) {
    _this->_impl_.allow_mult_default_type_ = from._impl_.allow_mult_default_type_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max_delta_min()) != 0) {
    _this->_impl_.player_speed_max_delta_min_ = from._impl_.player_speed_max_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max_delta_max()) != 0) {
    _this->_impl_.player_speed_max_delta_max_ = from._impl_.player_speed_max_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_inc_max_delta_factor()) != 0) {
    _this->_impl_.stamina_inc_max_delta_factor_ = from._impl_.stamina_inc_max_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_decay_delta_min()) != 0) {
    _this->_impl_.player_decay_delta_min_ = from._impl_.player_decay_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_decay_delta_max()) != 0) {
    _this->_impl_.player_decay_delta_max_ = from._impl_.player_decay_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_inertia_moment_delta_factor()) != 0) {
    _this->_impl_.inertia_moment_delta_factor_ = from._impl_.inertia_moment_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power_rate_delta_min()) != 0) {
    _this->_impl_.dash_power_rate_delta_min_ = from._impl_.dash_power_rate_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power_rate_delta_max()) != 0) {
    _this->_impl_.dash_power_rate_delta_max_ = from._impl_.dash_power_rate_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_size_delta_factor()) != 0) {
    _this->_impl_.player_size_delta_factor_ = from._impl_.player_size_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_margin_delta_min()) != 0) {
    _this->_impl_.kickable_margin_delta_min_ = from._impl_.kickable_margin_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_margin_delta_max()) != 0) {
    _this->_impl_.kickable_margin_delta_max_ = from._impl_.kickable_margin_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rand_delta_factor()) != 0) {
    _this->_impl_.kick_rand_delta_factor_ = from._impl_.kick_rand_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_extra_stamina_delta_min()) != 0) {
    _this->_impl_.extra_stamina_delta_min_ = from._impl_.extra_stamina_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_extra_stamina_delta_max()) != 0) {
    _this->_impl_.extra_stamina_delta_max_ = from._impl_.extra_stamina_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_max_delta_factor()) != 0) {
    _this->_impl_.effort_max_delta_factor_ = from._impl_.effort_max_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_min_delta_factor()) != 0) {
    _this->_impl_.effort_min_delta_factor_ = from._impl_.effort_min_delta_factor_;
  }
  if (from._internal_random_seed() != 0) {
    _this->_impl_.random_seed_ = from._impl_.random_seed_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_new_dash_power_rate_delta_min()) != 0) {
    _this->_impl_.new_dash_power_rate_delta_min_ = from._impl_.new_dash_power_rate_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_new_dash_power_rate_delta_max()) != 0) {
    _this->_impl_.new_dash_power_rate_delta_max_ = from._impl_.new_dash_power_rate_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_new_stamina_inc_max_delta_factor()) != 0) {
    _this->_impl_.new_stamina_inc_max_delta_factor_ = from._impl_.new_stamina_inc_max_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_power_rate_delta_min()) != 0) {
    _this->_impl_.kick_power_rate_delta_min_ = from._impl_.kick_power_rate_delta_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_power_rate_delta_max()) != 0) {
    _this->_impl_.kick_power_rate_delta_max_ = from._impl_.kick_power_rate_delta_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_foul_detect_probability_delta_factor()) != 0) {
    _this->_impl_.foul_detect_probability_delta_factor_ = from._impl_.foul_detect_probability_delta_factor_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catchable_area_l_stretch_min()) != 0) {
    _this->_impl_.catchable_area_l_stretch_min_ = from._impl_.catchable_area_l_stretch_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catchable_area_l_stretch_max()) != 0) {
    _this->_impl_.catchable_area_l_stretch_max_ = from._impl_.catchable_area_l_stretch_max_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerParam::CopyFrom(const PlayerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PlayerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerParam::InternalSwap(PlayerParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.catchable_area_l_stretch_max_)
      + sizeof(PlayerParam::_impl_.catchable_area_l_stretch_max_)
      - PROTOBUF_FIELD_OFFSET(PlayerParam, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata PlayerParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerType::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlayerType>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayerType, _impl_._has_bits_);
};

PlayerType::PlayerType(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.PlayerType)
}
inline PROTOBUF_NDEBUG_INLINE PlayerType::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::PlayerType& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PlayerType::PlayerType(
    ::google::protobuf::Arena* arena,
    const PlayerType& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerType* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, player_speed_max_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::player_speed_max_));

  // @@protoc_insertion_point(copy_constructor:protos.PlayerType)
}
inline PROTOBUF_NDEBUG_INLINE PlayerType::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerType::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, player_speed_max_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::player_speed_max_));
}
PlayerType::~PlayerType() {
  // @@protoc_insertion_point(destructor:protos.PlayerType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerType::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.register_response_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PlayerType::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PlayerType_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PlayerType::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PlayerType>(),
            ::google::protobuf::Message::GetNewImpl<PlayerType>(),
            ::google::protobuf::Message::GetClearImpl<PlayerType>(), &PlayerType::ByteSizeLong,
                &PlayerType::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PlayerType, _impl_._cached_size_),
            false,
        },
        &PlayerType::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PlayerType::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 34, 1, 0, 7> PlayerType::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerType, _impl_._has_bits_),
    0, // no _extensions_
    34, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    34,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::PlayerType>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.register_response_)}},
    // int32 id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerType, _impl_.id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.id_)}},
    // float stamina_inc_max = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.stamina_inc_max_)}},
    // float player_decay = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_decay_)}},
    // float inertia_moment = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.inertia_moment_)}},
    // float dash_power_rate = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.dash_power_rate_)}},
    // float player_size = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_size_)}},
    // float kickable_margin = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kickable_margin_)}},
    // float kick_rand = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kick_rand_)}},
    // float extra_stamina = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.extra_stamina_)}},
    // float effort_max = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.effort_max_)}},
    // float effort_min = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.effort_min_)}},
    // float kick_power_rate = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kick_power_rate_)}},
    // float foul_detect_probability = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.foul_detect_probability_)}},
    // float catchable_area_l_stretch = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.catchable_area_l_stretch_)}},
    // float unum_far_length = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.unum_far_length_)}},
    // float unum_too_far_length = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.unum_too_far_length_)}},
    // float team_far_length = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.team_far_length_)}},
    // float team_too_far_length = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.team_too_far_length_)}},
    // float player_max_observation_length = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_max_observation_length_)}},
    // float ball_vel_far_length = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_vel_far_length_)}},
    // float ball_vel_too_far_length = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_vel_too_far_length_)}},
    // float ball_max_observation_length = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_max_observation_length_)}},
    // float flag_chg_far_length = 24;
    {::_pbi::TcParser::FastF32S2,
     {453, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_chg_far_length_)}},
    // float flag_chg_too_far_length = 25;
    {::_pbi::TcParser::FastF32S2,
     {461, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_chg_too_far_length_)}},
    // float flag_max_observation_length = 26;
    {::_pbi::TcParser::FastF32S2,
     {469, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_max_observation_length_)}},
    // float kickable_area = 27;
    {::_pbi::TcParser::FastF32S2,
     {477, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kickable_area_)}},
    // float reliable_catchable_dist = 28;
    {::_pbi::TcParser::FastF32S2,
     {485, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.reliable_catchable_dist_)}},
    // float max_catchable_dist = 29;
    {::_pbi::TcParser::FastF32S2,
     {493, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.max_catchable_dist_)}},
    // float real_speed_max = 30;
    {::_pbi::TcParser::FastF32S2,
     {501, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.real_speed_max_)}},
    // float player_speed_max2 = 31;
    {::_pbi::TcParser::FastF32S2,
     {509, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_speed_max2_)}},
  }}, {{
    33, 0, 1,
    65532, 32,
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 id = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float stamina_inc_max = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.stamina_inc_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_decay = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_decay_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inertia_moment = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.inertia_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dash_power_rate = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.dash_power_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_size = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_margin = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kickable_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_rand = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kick_rand_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float extra_stamina = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.extra_stamina_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_max = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.effort_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float effort_min = 12;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.effort_min_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kick_power_rate = 13;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kick_power_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float foul_detect_probability = 14;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.foul_detect_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float catchable_area_l_stretch = 15;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.catchable_area_l_stretch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float unum_far_length = 16;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.unum_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float unum_too_far_length = 17;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.unum_too_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float team_far_length = 18;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.team_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float team_too_far_length = 19;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.team_too_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_max_observation_length = 20;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_max_observation_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_vel_far_length = 21;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_vel_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_vel_too_far_length = 22;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_vel_too_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ball_max_observation_length = 23;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.ball_max_observation_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float flag_chg_far_length = 24;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_chg_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float flag_chg_too_far_length = 25;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_chg_too_far_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float flag_max_observation_length = 26;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.flag_max_observation_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float kickable_area = 27;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.kickable_area_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float reliable_catchable_dist = 28;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.reliable_catchable_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float max_catchable_dist = 29;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.max_catchable_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float real_speed_max = 30;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.real_speed_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float player_speed_max2 = 31;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_speed_max2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float real_speed_max2 = 32;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.real_speed_max2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 cycles_to_reach_max_speed = 33;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.cycles_to_reach_max_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float player_speed_max = 34;
    {PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_speed_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PlayerType::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.PlayerType)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.register_response_ != nullptr);
    _impl_.register_response_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.player_speed_max_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.player_speed_max_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerType::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerType& this_ = static_cast<const PlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerType::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.PlayerType)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // int32 id = 2;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_id(), target);
          }

          // float stamina_inc_max = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_stamina_inc_max(), target);
          }

          // float player_decay = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_player_decay(), target);
          }

          // float inertia_moment = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_inertia_moment(), target);
          }

          // float dash_power_rate = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_dash_power_rate(), target);
          }

          // float player_size = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_player_size(), target);
          }

          // float kickable_margin = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_kickable_margin(), target);
          }

          // float kick_rand = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_kick_rand(), target);
          }

          // float extra_stamina = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_extra_stamina(), target);
          }

          // float effort_max = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_effort_max(), target);
          }

          // float effort_min = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_effort_min(), target);
          }

          // float kick_power_rate = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_kick_power_rate(), target);
          }

          // float foul_detect_probability = 14;
          if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_foul_detect_probability(), target);
          }

          // float catchable_area_l_stretch = 15;
          if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_catchable_area_l_stretch(), target);
          }

          // float unum_far_length = 16;
          if (::absl::bit_cast<::uint32_t>(this_._internal_unum_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_unum_far_length(), target);
          }

          // float unum_too_far_length = 17;
          if (::absl::bit_cast<::uint32_t>(this_._internal_unum_too_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                17, this_._internal_unum_too_far_length(), target);
          }

          // float team_far_length = 18;
          if (::absl::bit_cast<::uint32_t>(this_._internal_team_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                18, this_._internal_team_far_length(), target);
          }

          // float team_too_far_length = 19;
          if (::absl::bit_cast<::uint32_t>(this_._internal_team_too_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                19, this_._internal_team_too_far_length(), target);
          }

          // float player_max_observation_length = 20;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_max_observation_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                20, this_._internal_player_max_observation_length(), target);
          }

          // float ball_vel_far_length = 21;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_vel_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_ball_vel_far_length(), target);
          }

          // float ball_vel_too_far_length = 22;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_vel_too_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                22, this_._internal_ball_vel_too_far_length(), target);
          }

          // float ball_max_observation_length = 23;
          if (::absl::bit_cast<::uint32_t>(this_._internal_ball_max_observation_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                23, this_._internal_ball_max_observation_length(), target);
          }

          // float flag_chg_far_length = 24;
          if (::absl::bit_cast<::uint32_t>(this_._internal_flag_chg_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                24, this_._internal_flag_chg_far_length(), target);
          }

          // float flag_chg_too_far_length = 25;
          if (::absl::bit_cast<::uint32_t>(this_._internal_flag_chg_too_far_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                25, this_._internal_flag_chg_too_far_length(), target);
          }

          // float flag_max_observation_length = 26;
          if (::absl::bit_cast<::uint32_t>(this_._internal_flag_max_observation_length()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                26, this_._internal_flag_max_observation_length(), target);
          }

          // float kickable_area = 27;
          if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_area()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                27, this_._internal_kickable_area(), target);
          }

          // float reliable_catchable_dist = 28;
          if (::absl::bit_cast<::uint32_t>(this_._internal_reliable_catchable_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                28, this_._internal_reliable_catchable_dist(), target);
          }

          // float max_catchable_dist = 29;
          if (::absl::bit_cast<::uint32_t>(this_._internal_max_catchable_dist()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                29, this_._internal_max_catchable_dist(), target);
          }

          // float real_speed_max = 30;
          if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                30, this_._internal_real_speed_max(), target);
          }

          // float player_speed_max2 = 31;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                31, this_._internal_player_speed_max2(), target);
          }

          // float real_speed_max2 = 32;
          if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                32, this_._internal_real_speed_max2(), target);
          }

          // int32 cycles_to_reach_max_speed = 33;
          if (this_._internal_cycles_to_reach_max_speed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                33, this_._internal_cycles_to_reach_max_speed(), target);
          }

          // float player_speed_max = 34;
          if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                34, this_._internal_player_speed_max(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.PlayerType)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerType::ByteSizeLong(const MessageLite& base) {
          const PlayerType& this_ = static_cast<const PlayerType&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerType::ByteSizeLong() const {
          const PlayerType& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.PlayerType)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .protos.RegisterResponse register_response = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
          }
           {
            // int32 id = 2;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // float stamina_inc_max = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_stamina_inc_max()) != 0) {
              total_size += 5;
            }
            // float player_decay = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_decay()) != 0) {
              total_size += 5;
            }
            // float inertia_moment = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_inertia_moment()) != 0) {
              total_size += 5;
            }
            // float dash_power_rate = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_dash_power_rate()) != 0) {
              total_size += 5;
            }
            // float player_size = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_size()) != 0) {
              total_size += 5;
            }
            // float kickable_margin = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_margin()) != 0) {
              total_size += 5;
            }
            // float kick_rand = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_rand()) != 0) {
              total_size += 5;
            }
            // float extra_stamina = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_extra_stamina()) != 0) {
              total_size += 5;
            }
            // float effort_max = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_max()) != 0) {
              total_size += 5;
            }
            // float effort_min = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_effort_min()) != 0) {
              total_size += 5;
            }
            // float kick_power_rate = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kick_power_rate()) != 0) {
              total_size += 5;
            }
            // float foul_detect_probability = 14;
            if (::absl::bit_cast<::uint32_t>(this_._internal_foul_detect_probability()) != 0) {
              total_size += 5;
            }
            // float catchable_area_l_stretch = 15;
            if (::absl::bit_cast<::uint32_t>(this_._internal_catchable_area_l_stretch()) != 0) {
              total_size += 5;
            }
            // float unum_far_length = 16;
            if (::absl::bit_cast<::uint32_t>(this_._internal_unum_far_length()) != 0) {
              total_size += 6;
            }
            // float unum_too_far_length = 17;
            if (::absl::bit_cast<::uint32_t>(this_._internal_unum_too_far_length()) != 0) {
              total_size += 6;
            }
            // float team_far_length = 18;
            if (::absl::bit_cast<::uint32_t>(this_._internal_team_far_length()) != 0) {
              total_size += 6;
            }
            // float team_too_far_length = 19;
            if (::absl::bit_cast<::uint32_t>(this_._internal_team_too_far_length()) != 0) {
              total_size += 6;
            }
            // float player_max_observation_length = 20;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_max_observation_length()) != 0) {
              total_size += 6;
            }
            // float ball_vel_far_length = 21;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_vel_far_length()) != 0) {
              total_size += 6;
            }
            // float ball_vel_too_far_length = 22;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_vel_too_far_length()) != 0) {
              total_size += 6;
            }
            // float ball_max_observation_length = 23;
            if (::absl::bit_cast<::uint32_t>(this_._internal_ball_max_observation_length()) != 0) {
              total_size += 6;
            }
            // float flag_chg_far_length = 24;
            if (::absl::bit_cast<::uint32_t>(this_._internal_flag_chg_far_length()) != 0) {
              total_size += 6;
            }
            // float flag_chg_too_far_length = 25;
            if (::absl::bit_cast<::uint32_t>(this_._internal_flag_chg_too_far_length()) != 0) {
              total_size += 6;
            }
            // float flag_max_observation_length = 26;
            if (::absl::bit_cast<::uint32_t>(this_._internal_flag_max_observation_length()) != 0) {
              total_size += 6;
            }
            // float kickable_area = 27;
            if (::absl::bit_cast<::uint32_t>(this_._internal_kickable_area()) != 0) {
              total_size += 6;
            }
            // float reliable_catchable_dist = 28;
            if (::absl::bit_cast<::uint32_t>(this_._internal_reliable_catchable_dist()) != 0) {
              total_size += 6;
            }
            // float max_catchable_dist = 29;
            if (::absl::bit_cast<::uint32_t>(this_._internal_max_catchable_dist()) != 0) {
              total_size += 6;
            }
            // float real_speed_max = 30;
            if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max()) != 0) {
              total_size += 6;
            }
            // float player_speed_max2 = 31;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max2()) != 0) {
              total_size += 6;
            }
            // float real_speed_max2 = 32;
            if (::absl::bit_cast<::uint32_t>(this_._internal_real_speed_max2()) != 0) {
              total_size += 6;
            }
            // int32 cycles_to_reach_max_speed = 33;
            if (this_._internal_cycles_to_reach_max_speed() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_cycles_to_reach_max_speed());
            }
            // float player_speed_max = 34;
            if (::absl::bit_cast<::uint32_t>(this_._internal_player_speed_max()) != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerType::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerType*>(&to_msg);
  auto& from = static_cast<const PlayerType&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.PlayerType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.register_response_ != nullptr);
    if (_this->_impl_.register_response_ == nullptr) {
      _this->_impl_.register_response_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
    } else {
      _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
    }
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_stamina_inc_max()) != 0) {
    _this->_impl_.stamina_inc_max_ = from._impl_.stamina_inc_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_decay()) != 0) {
    _this->_impl_.player_decay_ = from._impl_.player_decay_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_inertia_moment()) != 0) {
    _this->_impl_.inertia_moment_ = from._impl_.inertia_moment_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_dash_power_rate()) != 0) {
    _this->_impl_.dash_power_rate_ = from._impl_.dash_power_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_size()) != 0) {
    _this->_impl_.player_size_ = from._impl_.player_size_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_margin()) != 0) {
    _this->_impl_.kickable_margin_ = from._impl_.kickable_margin_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_rand()) != 0) {
    _this->_impl_.kick_rand_ = from._impl_.kick_rand_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_extra_stamina()) != 0) {
    _this->_impl_.extra_stamina_ = from._impl_.extra_stamina_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_max()) != 0) {
    _this->_impl_.effort_max_ = from._impl_.effort_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_effort_min()) != 0) {
    _this->_impl_.effort_min_ = from._impl_.effort_min_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kick_power_rate()) != 0) {
    _this->_impl_.kick_power_rate_ = from._impl_.kick_power_rate_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_foul_detect_probability()) != 0) {
    _this->_impl_.foul_detect_probability_ = from._impl_.foul_detect_probability_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_catchable_area_l_stretch()) != 0) {
    _this->_impl_.catchable_area_l_stretch_ = from._impl_.catchable_area_l_stretch_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_unum_far_length()) != 0) {
    _this->_impl_.unum_far_length_ = from._impl_.unum_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_unum_too_far_length()) != 0) {
    _this->_impl_.unum_too_far_length_ = from._impl_.unum_too_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_team_far_length()) != 0) {
    _this->_impl_.team_far_length_ = from._impl_.team_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_team_too_far_length()) != 0) {
    _this->_impl_.team_too_far_length_ = from._impl_.team_too_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_max_observation_length()) != 0) {
    _this->_impl_.player_max_observation_length_ = from._impl_.player_max_observation_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_vel_far_length()) != 0) {
    _this->_impl_.ball_vel_far_length_ = from._impl_.ball_vel_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_vel_too_far_length()) != 0) {
    _this->_impl_.ball_vel_too_far_length_ = from._impl_.ball_vel_too_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_ball_max_observation_length()) != 0) {
    _this->_impl_.ball_max_observation_length_ = from._impl_.ball_max_observation_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_flag_chg_far_length()) != 0) {
    _this->_impl_.flag_chg_far_length_ = from._impl_.flag_chg_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_flag_chg_too_far_length()) != 0) {
    _this->_impl_.flag_chg_too_far_length_ = from._impl_.flag_chg_too_far_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_flag_max_observation_length()) != 0) {
    _this->_impl_.flag_max_observation_length_ = from._impl_.flag_max_observation_length_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_kickable_area()) != 0) {
    _this->_impl_.kickable_area_ = from._impl_.kickable_area_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_reliable_catchable_dist()) != 0) {
    _this->_impl_.reliable_catchable_dist_ = from._impl_.reliable_catchable_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_max_catchable_dist()) != 0) {
    _this->_impl_.max_catchable_dist_ = from._impl_.max_catchable_dist_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_real_speed_max()) != 0) {
    _this->_impl_.real_speed_max_ = from._impl_.real_speed_max_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max2()) != 0) {
    _this->_impl_.player_speed_max2_ = from._impl_.player_speed_max2_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_real_speed_max2()) != 0) {
    _this->_impl_.real_speed_max2_ = from._impl_.real_speed_max2_;
  }
  if (from._internal_cycles_to_reach_max_speed() != 0) {
    _this->_impl_.cycles_to_reach_max_speed_ = from._impl_.cycles_to_reach_max_speed_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_player_speed_max()) != 0) {
    _this->_impl_.player_speed_max_ = from._impl_.player_speed_max_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerType::CopyFrom(const PlayerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.PlayerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerType::InternalSwap(PlayerType* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.player_speed_max_)
      + sizeof(PlayerType::_impl_.player_speed_max_)
      - PROTOBUF_FIELD_OFFSET(PlayerType, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata PlayerType::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcCooperativeAction::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcCooperativeAction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_._has_bits_);
};

RpcCooperativeAction::RpcCooperativeAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RpcCooperativeAction)
}
inline PROTOBUF_NDEBUG_INLINE RpcCooperativeAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::RpcCooperativeAction& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        description_(arena, from.description_) {}

RpcCooperativeAction::RpcCooperativeAction(
    ::google::protobuf::Arena* arena,
    const RpcCooperativeAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcCooperativeAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.target_point_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, category_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, category_),
           offsetof(Impl_, parent_index_) -
               offsetof(Impl_, category_) +
               sizeof(Impl_::parent_index_));

  // @@protoc_insertion_point(copy_constructor:protos.RpcCooperativeAction)
}
inline PROTOBUF_NDEBUG_INLINE RpcCooperativeAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        description_(arena) {}

inline void RpcCooperativeAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_point_),
           0,
           offsetof(Impl_, parent_index_) -
               offsetof(Impl_, target_point_) +
               sizeof(Impl_::parent_index_));
}
RpcCooperativeAction::~RpcCooperativeAction() {
  // @@protoc_insertion_point(destructor:protos.RpcCooperativeAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcCooperativeAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.description_.Destroy();
  delete _impl_.target_point_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RpcCooperativeAction::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RpcCooperativeAction_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RpcCooperativeAction::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RpcCooperativeAction>(),
            ::google::protobuf::Message::GetNewImpl<RpcCooperativeAction>(),
            ::google::protobuf::Message::GetClearImpl<RpcCooperativeAction>(), &RpcCooperativeAction::ByteSizeLong,
                &RpcCooperativeAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_._cached_size_),
            false,
        },
        &RpcCooperativeAction::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RpcCooperativeAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 1, 63, 2> RpcCooperativeAction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RpcCooperativeAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 parent_index = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.parent_index_)}},
    // .protos.RpcActionCategory category = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.category_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.category_)}},
    // int32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.index_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.index_)}},
    // int32 sender_unum = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.sender_unum_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.sender_unum_)}},
    // int32 target_unum = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.target_unum_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.target_unum_)}},
    // .protos.RpcVector2D target_point = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.target_point_)}},
    // double first_ball_speed = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_ball_speed_)}},
    // double first_turn_moment = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_turn_moment_)}},
    // double first_dash_power = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_dash_power_)}},
    // double first_dash_angle_relative = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_dash_angle_relative_)}},
    // int32 duration_step = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.duration_step_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.duration_step_)}},
    // int32 kick_count = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.kick_count_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.kick_count_)}},
    // int32 turn_count = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.turn_count_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.turn_count_)}},
    // int32 dash_count = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcCooperativeAction, _impl_.dash_count_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.dash_count_)}},
    // bool final_action = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RpcCooperativeAction, _impl_.final_action_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.final_action_)}},
    // string description = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.description_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcActionCategory category = 1;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.category_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 index = 2;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sender_unum = 3;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.sender_unum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 target_unum = 4;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.target_unum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D target_point = 5;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.target_point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double first_ball_speed = 6;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_ball_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double first_turn_moment = 7;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_turn_moment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double first_dash_power = 8;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_dash_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double first_dash_angle_relative = 9;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.first_dash_angle_relative_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 duration_step = 10;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.duration_step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 kick_count = 11;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.kick_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 turn_count = 12;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.turn_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 dash_count = 13;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.dash_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool final_action = 14;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.final_action_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string description = 15;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 parent_index = 16;
    {PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.parent_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
    "\33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\13\0\0\0\0\0\0\0\0"
    "protos.RpcCooperativeAction"
    "description"
  }},
};

PROTOBUF_NOINLINE void RpcCooperativeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RpcCooperativeAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_point_ != nullptr);
    _impl_.target_point_->Clear();
  }
  ::memset(&_impl_.category_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.parent_index_) -
      reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.parent_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RpcCooperativeAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RpcCooperativeAction& this_ = static_cast<const RpcCooperativeAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RpcCooperativeAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RpcCooperativeAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RpcCooperativeAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .protos.RpcActionCategory category = 1;
          if (this_._internal_category() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_category(), target);
          }

          // int32 index = 2;
          if (this_._internal_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_index(), target);
          }

          // int32 sender_unum = 3;
          if (this_._internal_sender_unum() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_sender_unum(), target);
          }

          // int32 target_unum = 4;
          if (this_._internal_target_unum() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_target_unum(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D target_point = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.target_point_, this_._impl_.target_point_->GetCachedSize(), target,
                stream);
          }

          // double first_ball_speed = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_first_ball_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_first_ball_speed(), target);
          }

          // double first_turn_moment = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_first_turn_moment()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_first_turn_moment(), target);
          }

          // double first_dash_power = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_first_dash_power()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_first_dash_power(), target);
          }

          // double first_dash_angle_relative = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_first_dash_angle_relative()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_first_dash_angle_relative(), target);
          }

          // int32 duration_step = 10;
          if (this_._internal_duration_step() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_duration_step(), target);
          }

          // int32 kick_count = 11;
          if (this_._internal_kick_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_kick_count(), target);
          }

          // int32 turn_count = 12;
          if (this_._internal_turn_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_turn_count(), target);
          }

          // int32 dash_count = 13;
          if (this_._internal_dash_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_dash_count(), target);
          }

          // bool final_action = 14;
          if (this_._internal_final_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_final_action(), target);
          }

          // string description = 15;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.RpcCooperativeAction.description");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // int32 parent_index = 16;
          if (this_._internal_parent_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_parent_index(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RpcCooperativeAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RpcCooperativeAction::ByteSizeLong(const MessageLite& base) {
          const RpcCooperativeAction& this_ = static_cast<const RpcCooperativeAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RpcCooperativeAction::ByteSizeLong() const {
          const RpcCooperativeAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RpcCooperativeAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string description = 15;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
          }
           {
            // .protos.RpcVector2D target_point = 5;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_point_);
            }
          }
           {
            // .protos.RpcActionCategory category = 1;
            if (this_._internal_category() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_category());
            }
            // int32 index = 2;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_index());
            }
            // int32 sender_unum = 3;
            if (this_._internal_sender_unum() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_sender_unum());
            }
            // int32 target_unum = 4;
            if (this_._internal_target_unum() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_unum());
            }
            // double first_ball_speed = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_first_ball_speed()) != 0) {
              total_size += 9;
            }
            // double first_turn_moment = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_first_turn_moment()) != 0) {
              total_size += 9;
            }
            // double first_dash_power = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_first_dash_power()) != 0) {
              total_size += 9;
            }
            // double first_dash_angle_relative = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_first_dash_angle_relative()) != 0) {
              total_size += 9;
            }
            // int32 duration_step = 10;
            if (this_._internal_duration_step() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_duration_step());
            }
            // int32 kick_count = 11;
            if (this_._internal_kick_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_kick_count());
            }
            // int32 turn_count = 12;
            if (this_._internal_turn_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_count());
            }
            // int32 dash_count = 13;
            if (this_._internal_dash_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_dash_count());
            }
            // bool final_action = 14;
            if (this_._internal_final_action() != 0) {
              total_size += 2;
            }
            // int32 parent_index = 16;
            if (this_._internal_parent_index() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_parent_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RpcCooperativeAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcCooperativeAction*>(&to_msg);
  auto& from = static_cast<const RpcCooperativeAction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RpcCooperativeAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_point_ != nullptr);
    if (_this->_impl_.target_point_ == nullptr) {
      _this->_impl_.target_point_ =
          ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.target_point_);
    } else {
      _this->_impl_.target_point_->MergeFrom(*from._impl_.target_point_);
    }
  }
  if (from._internal_category() != 0) {
    _this->_impl_.category_ = from._impl_.category_;
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_sender_unum() != 0) {
    _this->_impl_.sender_unum_ = from._impl_.sender_unum_;
  }
  if (from._internal_target_unum() != 0) {
    _this->_impl_.target_unum_ = from._impl_.target_unum_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_first_ball_speed()) != 0) {
    _this->_impl_.first_ball_speed_ = from._impl_.first_ball_speed_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_first_turn_moment()) != 0) {
    _this->_impl_.first_turn_moment_ = from._impl_.first_turn_moment_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_first_dash_power()) != 0) {
    _this->_impl_.first_dash_power_ = from._impl_.first_dash_power_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_first_dash_angle_relative()) != 0) {
    _this->_impl_.first_dash_angle_relative_ = from._impl_.first_dash_angle_relative_;
  }
  if (from._internal_duration_step() != 0) {
    _this->_impl_.duration_step_ = from._impl_.duration_step_;
  }
  if (from._internal_kick_count() != 0) {
    _this->_impl_.kick_count_ = from._impl_.kick_count_;
  }
  if (from._internal_turn_count() != 0) {
    _this->_impl_.turn_count_ = from._impl_.turn_count_;
  }
  if (from._internal_dash_count() != 0) {
    _this->_impl_.dash_count_ = from._impl_.dash_count_;
  }
  if (from._internal_final_action() != 0) {
    _this->_impl_.final_action_ = from._impl_.final_action_;
  }
  if (from._internal_parent_index() != 0) {
    _this->_impl_.parent_index_ = from._impl_.parent_index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcCooperativeAction::CopyFrom(const RpcCooperativeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RpcCooperativeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcCooperativeAction::InternalSwap(RpcCooperativeAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.parent_index_)
      + sizeof(RpcCooperativeAction::_impl_.parent_index_)
      - PROTOBUF_FIELD_OFFSET(RpcCooperativeAction, _impl_.target_point_)>(
          reinterpret_cast<char*>(&_impl_.target_point_),
          reinterpret_cast<char*>(&other->_impl_.target_point_));
}

::google::protobuf::Metadata RpcCooperativeAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcPredictState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcPredictState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_._has_bits_);
};

RpcPredictState::RpcPredictState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RpcPredictState)
}
inline PROTOBUF_NDEBUG_INLINE RpcPredictState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::RpcPredictState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RpcPredictState::RpcPredictState(
    ::google::protobuf::Arena* arena,
    const RpcPredictState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcPredictState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ball_position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_position_)
                        : nullptr;
  _impl_.ball_velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(
                              arena, *from._impl_.ball_velocity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, spend_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, spend_time_),
           offsetof(Impl_, our_offense_line_x_) -
               offsetof(Impl_, spend_time_) +
               sizeof(Impl_::our_offense_line_x_));

  // @@protoc_insertion_point(copy_constructor:protos.RpcPredictState)
}
inline PROTOBUF_NDEBUG_INLINE RpcPredictState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RpcPredictState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ball_position_),
           0,
           offsetof(Impl_, our_offense_line_x_) -
               offsetof(Impl_, ball_position_) +
               sizeof(Impl_::our_offense_line_x_));
}
RpcPredictState::~RpcPredictState() {
  // @@protoc_insertion_point(destructor:protos.RpcPredictState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcPredictState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ball_position_;
  delete _impl_.ball_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RpcPredictState::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RpcPredictState_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RpcPredictState::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RpcPredictState>(),
            ::google::protobuf::Message::GetNewImpl<RpcPredictState>(),
            ::google::protobuf::Message::GetClearImpl<RpcPredictState>(), &RpcPredictState::ByteSizeLong,
                &RpcPredictState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_._cached_size_),
            false,
        },
        &RpcPredictState::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RpcPredictState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> RpcPredictState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RpcPredictState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 spend_time = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcPredictState, _impl_.spend_time_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.spend_time_)}},
    // int32 ball_holder_unum = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcPredictState, _impl_.ball_holder_unum_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_holder_unum_)}},
    // .protos.RpcVector2D ball_position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_position_)}},
    // .protos.RpcVector2D ball_velocity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_velocity_)}},
    // double our_defense_line_x = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.our_defense_line_x_)}},
    // double our_offense_line_x = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.our_offense_line_x_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 spend_time = 1;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.spend_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ball_holder_unum = 2;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_holder_unum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcVector2D ball_position = 3;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcVector2D ball_velocity = 4;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double our_defense_line_x = 5;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.our_defense_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double our_offense_line_x = 6;
    {PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.our_offense_line_x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
    {::_pbi::TcParser::GetTable<::protos::RpcVector2D>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void RpcPredictState::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RpcPredictState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ball_position_ != nullptr);
      _impl_.ball_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_velocity_ != nullptr);
      _impl_.ball_velocity_->Clear();
    }
  }
  ::memset(&_impl_.spend_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.our_offense_line_x_) -
      reinterpret_cast<char*>(&_impl_.spend_time_)) + sizeof(_impl_.our_offense_line_x_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RpcPredictState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RpcPredictState& this_ = static_cast<const RpcPredictState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RpcPredictState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RpcPredictState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RpcPredictState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 spend_time = 1;
          if (this_._internal_spend_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_spend_time(), target);
          }

          // int32 ball_holder_unum = 2;
          if (this_._internal_ball_holder_unum() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_ball_holder_unum(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcVector2D ball_position = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.ball_position_, this_._impl_.ball_position_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcVector2D ball_velocity = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ball_velocity_, this_._impl_.ball_velocity_->GetCachedSize(), target,
                stream);
          }

          // double our_defense_line_x = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_our_defense_line_x(), target);
          }

          // double our_offense_line_x = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_our_offense_line_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_our_offense_line_x(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RpcPredictState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RpcPredictState::ByteSizeLong(const MessageLite& base) {
          const RpcPredictState& this_ = static_cast<const RpcPredictState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RpcPredictState::ByteSizeLong() const {
          const RpcPredictState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RpcPredictState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcVector2D ball_position = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_position_);
            }
            // .protos.RpcVector2D ball_velocity = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_velocity_);
            }
          }
           {
            // int32 spend_time = 1;
            if (this_._internal_spend_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_spend_time());
            }
            // int32 ball_holder_unum = 2;
            if (this_._internal_ball_holder_unum() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ball_holder_unum());
            }
            // double our_defense_line_x = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_our_defense_line_x()) != 0) {
              total_size += 9;
            }
            // double our_offense_line_x = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_our_offense_line_x()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RpcPredictState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcPredictState*>(&to_msg);
  auto& from = static_cast<const RpcPredictState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RpcPredictState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ball_position_ != nullptr);
      if (_this->_impl_.ball_position_ == nullptr) {
        _this->_impl_.ball_position_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_position_);
      } else {
        _this->_impl_.ball_position_->MergeFrom(*from._impl_.ball_position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_velocity_ != nullptr);
      if (_this->_impl_.ball_velocity_ == nullptr) {
        _this->_impl_.ball_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcVector2D>(arena, *from._impl_.ball_velocity_);
      } else {
        _this->_impl_.ball_velocity_->MergeFrom(*from._impl_.ball_velocity_);
      }
    }
  }
  if (from._internal_spend_time() != 0) {
    _this->_impl_.spend_time_ = from._impl_.spend_time_;
  }
  if (from._internal_ball_holder_unum() != 0) {
    _this->_impl_.ball_holder_unum_ = from._impl_.ball_holder_unum_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_our_defense_line_x()) != 0) {
    _this->_impl_.our_defense_line_x_ = from._impl_.our_defense_line_x_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_our_offense_line_x()) != 0) {
    _this->_impl_.our_offense_line_x_ = from._impl_.our_offense_line_x_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcPredictState::CopyFrom(const RpcPredictState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RpcPredictState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcPredictState::InternalSwap(RpcPredictState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.our_offense_line_x_)
      + sizeof(RpcPredictState::_impl_.our_offense_line_x_)
      - PROTOBUF_FIELD_OFFSET(RpcPredictState, _impl_.ball_position_)>(
          reinterpret_cast<char*>(&_impl_.ball_position_),
          reinterpret_cast<char*>(&other->_impl_.ball_position_));
}

::google::protobuf::Metadata RpcPredictState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcActionState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcActionState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_._has_bits_);
};

RpcActionState::RpcActionState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.RpcActionState)
}
inline PROTOBUF_NDEBUG_INLINE RpcActionState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::RpcActionState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RpcActionState::RpcActionState(
    ::google::protobuf::Arena* arena,
    const RpcActionState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcActionState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.action_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcCooperativeAction>(
                              arena, *from._impl_.action_)
                        : nullptr;
  _impl_.predict_state_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::RpcPredictState>(
                              arena, *from._impl_.predict_state_)
                        : nullptr;
  _impl_.evaluation_ = from._impl_.evaluation_;

  // @@protoc_insertion_point(copy_constructor:protos.RpcActionState)
}
inline PROTOBUF_NDEBUG_INLINE RpcActionState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RpcActionState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_),
           0,
           offsetof(Impl_, evaluation_) -
               offsetof(Impl_, action_) +
               sizeof(Impl_::evaluation_));
}
RpcActionState::~RpcActionState() {
  // @@protoc_insertion_point(destructor:protos.RpcActionState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcActionState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.action_;
  delete _impl_.predict_state_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RpcActionState::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RpcActionState_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RpcActionState::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RpcActionState>(),
            ::google::protobuf::Message::GetNewImpl<RpcActionState>(),
            ::google::protobuf::Message::GetClearImpl<RpcActionState>(), &RpcActionState::ByteSizeLong,
                &RpcActionState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_._cached_size_),
            false,
        },
        &RpcActionState::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RpcActionState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> RpcActionState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::RpcActionState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RpcCooperativeAction action = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.action_)}},
    // .protos.RpcPredictState predict_state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.predict_state_)}},
    // double evaluation = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.evaluation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RpcCooperativeAction action = 1;
    {PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.action_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protos.RpcPredictState predict_state = 2;
    {PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.predict_state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double evaluation = 3;
    {PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.evaluation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcCooperativeAction>()},
    {::_pbi::TcParser::GetTable<::protos::RpcPredictState>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void RpcActionState::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RpcActionState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.action_ != nullptr);
      _impl_.action_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.predict_state_ != nullptr);
      _impl_.predict_state_->Clear();
    }
  }
  _impl_.evaluation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RpcActionState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RpcActionState& this_ = static_cast<const RpcActionState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RpcActionState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RpcActionState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.RpcActionState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RpcCooperativeAction action = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.action_, this_._impl_.action_->GetCachedSize(), target,
                stream);
          }

          // .protos.RpcPredictState predict_state = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.predict_state_, this_._impl_.predict_state_->GetCachedSize(), target,
                stream);
          }

          // double evaluation = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_evaluation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_evaluation(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.RpcActionState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RpcActionState::ByteSizeLong(const MessageLite& base) {
          const RpcActionState& this_ = static_cast<const RpcActionState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RpcActionState::ByteSizeLong() const {
          const RpcActionState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.RpcActionState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RpcCooperativeAction action = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.action_);
            }
            // .protos.RpcPredictState predict_state = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.predict_state_);
            }
          }
           {
            // double evaluation = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_evaluation()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RpcActionState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcActionState*>(&to_msg);
  auto& from = static_cast<const RpcActionState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.RpcActionState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.action_ != nullptr);
      if (_this->_impl_.action_ == nullptr) {
        _this->_impl_.action_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcCooperativeAction>(arena, *from._impl_.action_);
      } else {
        _this->_impl_.action_->MergeFrom(*from._impl_.action_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.predict_state_ != nullptr);
      if (_this->_impl_.predict_state_ == nullptr) {
        _this->_impl_.predict_state_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RpcPredictState>(arena, *from._impl_.predict_state_);
      } else {
        _this->_impl_.predict_state_->MergeFrom(*from._impl_.predict_state_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_evaluation()) != 0) {
    _this->_impl_.evaluation_ = from._impl_.evaluation_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcActionState::CopyFrom(const RpcActionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RpcActionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcActionState::InternalSwap(RpcActionState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.evaluation_)
      + sizeof(RpcActionState::_impl_.evaluation_)
      - PROTOBUF_FIELD_OFFSET(RpcActionState, _impl_.action_)>(
          reinterpret_cast<char*>(&_impl_.action_),
          reinterpret_cast<char*>(&other->_impl_.action_));
}

::google::protobuf::Metadata RpcActionState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              BestPlannerActionRequest_PairsEntry_DoNotUse::BestPlannerActionRequest_PairsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              BestPlannerActionRequest_PairsEntry_DoNotUse::BestPlannerActionRequest_PairsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              BestPlannerActionRequest_PairsEntry_DoNotUse::BestPlannerActionRequest_PairsEntry_DoNotUse() : SuperType() {}
              BestPlannerActionRequest_PairsEntry_DoNotUse::BestPlannerActionRequest_PairsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::MessageLite::ClassDataFull
                  BestPlannerActionRequest_PairsEntry_DoNotUse::_class_data_ = {
                      ::google::protobuf::Message::ClassData{
                          &_BestPlannerActionRequest_PairsEntry_DoNotUse_default_instance_._instance,
                          &_table_.header,
                          nullptr,  // OnDemandRegisterArenaDtor
                          nullptr,  // IsInitialized
                          &BestPlannerActionRequest_PairsEntry_DoNotUse::MergeImpl,
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                          ::google::protobuf::Message::GetDeleteImpl<BestPlannerActionRequest_PairsEntry_DoNotUse>(),
                          ::google::protobuf::Message::GetNewImpl<BestPlannerActionRequest_PairsEntry_DoNotUse>(),
                          ::google::protobuf::Message::ClearImpl, ::google::protobuf::Message::ByteSizeLongImpl,
                              ::google::protobuf::Message::_InternalSerializeImpl,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                          PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_._cached_size_),
                          false,
                      },
                      &BestPlannerActionRequest_PairsEntry_DoNotUse::kDescriptorMethods,
                      &descriptor_table_service_2eproto,
                      nullptr,  // tracker
              };
              const ::google::protobuf::MessageLite::ClassData* BestPlannerActionRequest_PairsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> BestPlannerActionRequest_PairsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BestPlannerActionRequest_PairsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .protos.RpcActionState value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.RpcActionState value = 2;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest_PairsEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RpcActionState>()},
  }}, {{
  }},
};

// ===================================================================

class BestPlannerActionRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BestPlannerActionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_._has_bits_);
};

BestPlannerActionRequest::BestPlannerActionRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.BestPlannerActionRequest)
}
inline PROTOBUF_NDEBUG_INLINE BestPlannerActionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::protos::BestPlannerActionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        pairs_{visibility, arena, from.pairs_} {}

BestPlannerActionRequest::BestPlannerActionRequest(
    ::google::protobuf::Arena* arena,
    const BestPlannerActionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BestPlannerActionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.register_response_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(
                              arena, *from._impl_.register_response_)
                        : nullptr;
  _impl_.state_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::protos::State>(
                              arena, *from._impl_.state_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:protos.BestPlannerActionRequest)
}
inline PROTOBUF_NDEBUG_INLINE BestPlannerActionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        pairs_{visibility, arena} {}

inline void BestPlannerActionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, register_response_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, register_response_) +
               sizeof(Impl_::state_));
}
BestPlannerActionRequest::~BestPlannerActionRequest() {
  // @@protoc_insertion_point(destructor:protos.BestPlannerActionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BestPlannerActionRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.register_response_;
  delete _impl_.state_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BestPlannerActionRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BestPlannerActionRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BestPlannerActionRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BestPlannerActionRequest>(),
            ::google::protobuf::Message::GetNewImpl<BestPlannerActionRequest>(),
            ::google::protobuf::Message::GetClearImpl<BestPlannerActionRequest>(), &BestPlannerActionRequest::ByteSizeLong,
                &BestPlannerActionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_._cached_size_),
            false,
        },
        &BestPlannerActionRequest::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BestPlannerActionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 4, 0, 2> BestPlannerActionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BestPlannerActionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.RegisterResponse register_response = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.register_response_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.State state = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protos.RegisterResponse register_response = 1;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.register_response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, .protos.RpcActionState> pairs = 2;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.pairs_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .protos.State state = 3;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::RegisterResponse>()},
    {::_pbi::TcParser::GetTable<::protos::State>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(BestPlannerActionRequest()._impl_.pairs_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::protos::RpcActionState>},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BestPlannerActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BestPlannerActionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pairs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.register_response_ != nullptr);
      _impl_.register_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BestPlannerActionRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BestPlannerActionRequest& this_ = static_cast<const BestPlannerActionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BestPlannerActionRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BestPlannerActionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.BestPlannerActionRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .protos.RegisterResponse register_response = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.register_response_, this_._impl_.register_response_->GetCachedSize(), target,
                stream);
          }

          // map<int32, .protos.RpcActionState> pairs = 2;
          if (!this_._internal_pairs().empty()) {
            using MapType = ::google::protobuf::Map<::int32_t, ::protos::RpcActionState>;
            using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::protos::RpcActionState,
                                           _pbi::WireFormatLite::TYPE_INT32,
                                           _pbi::WireFormatLite::TYPE_MESSAGE>;
            const auto& field = this_._internal_pairs();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
              }
            }
          }

          // .protos.State state = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.state_, this_._impl_.state_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.BestPlannerActionRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BestPlannerActionRequest::ByteSizeLong(const MessageLite& base) {
          const BestPlannerActionRequest& this_ = static_cast<const BestPlannerActionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BestPlannerActionRequest::ByteSizeLong() const {
          const BestPlannerActionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.BestPlannerActionRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<int32, .protos.RpcActionState> pairs = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_pairs_size());
              for (const auto& entry : this_._internal_pairs()) {
                total_size += _pbi::MapEntryFuncs<::int32_t, ::protos::RpcActionState,
                                               _pbi::WireFormatLite::TYPE_INT32,
                                               _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .protos.RegisterResponse register_response = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.register_response_);
            }
            // .protos.State state = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BestPlannerActionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BestPlannerActionRequest*>(&to_msg);
  auto& from = static_cast<const BestPlannerActionRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.BestPlannerActionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pairs_.MergeFrom(from._impl_.pairs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.register_response_ != nullptr);
      if (_this->_impl_.register_response_ == nullptr) {
        _this->_impl_.register_response_ =
            ::google::protobuf::Message::CopyConstruct<::protos::RegisterResponse>(arena, *from._impl_.register_response_);
      } else {
        _this->_impl_.register_response_->MergeFrom(*from._impl_.register_response_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.state_ != nullptr);
      if (_this->_impl_.state_ == nullptr) {
        _this->_impl_.state_ =
            ::google::protobuf::Message::CopyConstruct<::protos::State>(arena, *from._impl_.state_);
      } else {
        _this->_impl_.state_->MergeFrom(*from._impl_.state_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BestPlannerActionRequest::CopyFrom(const BestPlannerActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BestPlannerActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BestPlannerActionRequest::InternalSwap(BestPlannerActionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pairs_.InternalSwap(&other->_impl_.pairs_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.state_)
      + sizeof(BestPlannerActionRequest::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(BestPlannerActionRequest, _impl_.register_response_)>(
          reinterpret_cast<char*>(&_impl_.register_response_),
          reinterpret_cast<char*>(&other->_impl_.register_response_));
}

::google::protobuf::Metadata BestPlannerActionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BestPlannerActionResponse::_Internal {
 public:
};

BestPlannerActionResponse::BestPlannerActionResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.BestPlannerActionResponse)
}
BestPlannerActionResponse::BestPlannerActionResponse(
    ::google::protobuf::Arena* arena, const BestPlannerActionResponse& from)
    : BestPlannerActionResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BestPlannerActionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BestPlannerActionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.index_ = {};
}
BestPlannerActionResponse::~BestPlannerActionResponse() {
  // @@protoc_insertion_point(destructor:protos.BestPlannerActionResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BestPlannerActionResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BestPlannerActionResponse::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BestPlannerActionResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BestPlannerActionResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BestPlannerActionResponse>(),
            ::google::protobuf::Message::GetNewImpl<BestPlannerActionResponse>(),
            ::google::protobuf::Message::GetClearImpl<BestPlannerActionResponse>(), &BestPlannerActionResponse::ByteSizeLong,
                &BestPlannerActionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BestPlannerActionResponse, _impl_._cached_size_),
            false,
        },
        &BestPlannerActionResponse::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BestPlannerActionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> BestPlannerActionResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::BestPlannerActionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BestPlannerActionResponse, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BestPlannerActionResponse, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(BestPlannerActionResponse, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void BestPlannerActionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BestPlannerActionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BestPlannerActionResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BestPlannerActionResponse& this_ = static_cast<const BestPlannerActionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BestPlannerActionResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BestPlannerActionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:protos.BestPlannerActionResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 index = 1;
          if (this_._internal_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_index(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:protos.BestPlannerActionResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BestPlannerActionResponse::ByteSizeLong(const MessageLite& base) {
          const BestPlannerActionResponse& this_ = static_cast<const BestPlannerActionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BestPlannerActionResponse::ByteSizeLong() const {
          const BestPlannerActionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:protos.BestPlannerActionResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 index = 1;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BestPlannerActionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BestPlannerActionResponse*>(&to_msg);
  auto& from = static_cast<const BestPlannerActionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.BestPlannerActionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BestPlannerActionResponse::CopyFrom(const BestPlannerActionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BestPlannerActionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BestPlannerActionResponse::InternalSwap(BestPlannerActionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.index_, other->_impl_.index_);
}

::google::protobuf::Metadata BestPlannerActionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:protos.Empty)
}
Empty::Empty(
    ::google::protobuf::Arena* arena,
    const Empty& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Empty* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Empty)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Empty::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_Empty_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Empty::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<Empty>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Empty>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Empty>(), &Empty::ByteSizeLong,
                &Empty::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Empty, _impl_._cached_size_),
            false,
        },
        &Empty::kDescriptorMethods,
        &descriptor_table_service_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Empty::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Empty::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Empty>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Empty::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_service_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
