/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Game_H
#define Game_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "soccer_service_types.h"

namespace soccer {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GameIf {
 public:
  virtual ~GameIf() {}
  virtual void GetPlayerActions(PlayerActions& _return, const State& state) = 0;
  virtual void GetCoachActions(CoachActions& _return, const State& state) = 0;
  virtual void GetTrainerActions(TrainerActions& _return, const State& state) = 0;
  virtual void SendInitMessage(const InitMessage& init_message) = 0;
  virtual void SendServerParams(const ServerParam& server_param) = 0;
  virtual void SendPlayerParams(const PlayerParam& player_param) = 0;
  virtual void SendPlayerType(const PlayerType& player_type) = 0;
  virtual void GetInitMessage(InitMessageFromServer& _return, const Empty& empty) = 0;
  virtual void SendByeCommand(const Empty& empty) = 0;
};

class GameIfFactory {
 public:
  typedef GameIf Handler;

  virtual ~GameIfFactory() {}

  virtual GameIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameIf* /* handler */) = 0;
  };

class GameIfSingletonFactory : virtual public GameIfFactory {
 public:
  GameIfSingletonFactory(const ::std::shared_ptr<GameIf>& iface) : iface_(iface) {}
  virtual ~GameIfSingletonFactory() {}

  virtual GameIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(GameIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<GameIf> iface_;
};

class GameNull : virtual public GameIf {
 public:
  virtual ~GameNull() {}
  void GetPlayerActions(PlayerActions& /* _return */, const State& /* state */) override {
    return;
  }
  void GetCoachActions(CoachActions& /* _return */, const State& /* state */) override {
    return;
  }
  void GetTrainerActions(TrainerActions& /* _return */, const State& /* state */) override {
    return;
  }
  void SendInitMessage(const InitMessage& /* init_message */) override {
    return;
  }
  void SendServerParams(const ServerParam& /* server_param */) override {
    return;
  }
  void SendPlayerParams(const PlayerParam& /* player_param */) override {
    return;
  }
  void SendPlayerType(const PlayerType& /* player_type */) override {
    return;
  }
  void GetInitMessage(InitMessageFromServer& /* _return */, const Empty& /* empty */) override {
    return;
  }
  void SendByeCommand(const Empty& /* empty */) override {
    return;
  }
};

typedef struct _Game_GetPlayerActions_args__isset {
  _Game_GetPlayerActions_args__isset() : state(false) {}
  bool state :1;
} _Game_GetPlayerActions_args__isset;

class Game_GetPlayerActions_args {
 public:

  Game_GetPlayerActions_args(const Game_GetPlayerActions_args&);
  Game_GetPlayerActions_args& operator=(const Game_GetPlayerActions_args&);
  Game_GetPlayerActions_args() noexcept {
  }

  virtual ~Game_GetPlayerActions_args() noexcept;
  State state;

  _Game_GetPlayerActions_args__isset __isset;

  void __set_state(const State& val);

  bool operator == (const Game_GetPlayerActions_args & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Game_GetPlayerActions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetPlayerActions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_GetPlayerActions_pargs {
 public:


  virtual ~Game_GetPlayerActions_pargs() noexcept;
  const State* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetPlayerActions_result__isset {
  _Game_GetPlayerActions_result__isset() : success(false) {}
  bool success :1;
} _Game_GetPlayerActions_result__isset;

class Game_GetPlayerActions_result {
 public:

  Game_GetPlayerActions_result(const Game_GetPlayerActions_result&);
  Game_GetPlayerActions_result& operator=(const Game_GetPlayerActions_result&);
  Game_GetPlayerActions_result() noexcept {
  }

  virtual ~Game_GetPlayerActions_result() noexcept;
  PlayerActions success;

  _Game_GetPlayerActions_result__isset __isset;

  void __set_success(const PlayerActions& val);

  bool operator == (const Game_GetPlayerActions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_GetPlayerActions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetPlayerActions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetPlayerActions_presult__isset {
  _Game_GetPlayerActions_presult__isset() : success(false) {}
  bool success :1;
} _Game_GetPlayerActions_presult__isset;

class Game_GetPlayerActions_presult {
 public:


  virtual ~Game_GetPlayerActions_presult() noexcept;
  PlayerActions* success;

  _Game_GetPlayerActions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_GetCoachActions_args__isset {
  _Game_GetCoachActions_args__isset() : state(false) {}
  bool state :1;
} _Game_GetCoachActions_args__isset;

class Game_GetCoachActions_args {
 public:

  Game_GetCoachActions_args(const Game_GetCoachActions_args&);
  Game_GetCoachActions_args& operator=(const Game_GetCoachActions_args&);
  Game_GetCoachActions_args() noexcept {
  }

  virtual ~Game_GetCoachActions_args() noexcept;
  State state;

  _Game_GetCoachActions_args__isset __isset;

  void __set_state(const State& val);

  bool operator == (const Game_GetCoachActions_args & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Game_GetCoachActions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetCoachActions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_GetCoachActions_pargs {
 public:


  virtual ~Game_GetCoachActions_pargs() noexcept;
  const State* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetCoachActions_result__isset {
  _Game_GetCoachActions_result__isset() : success(false) {}
  bool success :1;
} _Game_GetCoachActions_result__isset;

class Game_GetCoachActions_result {
 public:

  Game_GetCoachActions_result(const Game_GetCoachActions_result&);
  Game_GetCoachActions_result& operator=(const Game_GetCoachActions_result&);
  Game_GetCoachActions_result() noexcept {
  }

  virtual ~Game_GetCoachActions_result() noexcept;
  CoachActions success;

  _Game_GetCoachActions_result__isset __isset;

  void __set_success(const CoachActions& val);

  bool operator == (const Game_GetCoachActions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_GetCoachActions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetCoachActions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetCoachActions_presult__isset {
  _Game_GetCoachActions_presult__isset() : success(false) {}
  bool success :1;
} _Game_GetCoachActions_presult__isset;

class Game_GetCoachActions_presult {
 public:


  virtual ~Game_GetCoachActions_presult() noexcept;
  CoachActions* success;

  _Game_GetCoachActions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_GetTrainerActions_args__isset {
  _Game_GetTrainerActions_args__isset() : state(false) {}
  bool state :1;
} _Game_GetTrainerActions_args__isset;

class Game_GetTrainerActions_args {
 public:

  Game_GetTrainerActions_args(const Game_GetTrainerActions_args&);
  Game_GetTrainerActions_args& operator=(const Game_GetTrainerActions_args&);
  Game_GetTrainerActions_args() noexcept {
  }

  virtual ~Game_GetTrainerActions_args() noexcept;
  State state;

  _Game_GetTrainerActions_args__isset __isset;

  void __set_state(const State& val);

  bool operator == (const Game_GetTrainerActions_args & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Game_GetTrainerActions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetTrainerActions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_GetTrainerActions_pargs {
 public:


  virtual ~Game_GetTrainerActions_pargs() noexcept;
  const State* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetTrainerActions_result__isset {
  _Game_GetTrainerActions_result__isset() : success(false) {}
  bool success :1;
} _Game_GetTrainerActions_result__isset;

class Game_GetTrainerActions_result {
 public:

  Game_GetTrainerActions_result(const Game_GetTrainerActions_result&);
  Game_GetTrainerActions_result& operator=(const Game_GetTrainerActions_result&);
  Game_GetTrainerActions_result() noexcept {
  }

  virtual ~Game_GetTrainerActions_result() noexcept;
  TrainerActions success;

  _Game_GetTrainerActions_result__isset __isset;

  void __set_success(const TrainerActions& val);

  bool operator == (const Game_GetTrainerActions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_GetTrainerActions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetTrainerActions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetTrainerActions_presult__isset {
  _Game_GetTrainerActions_presult__isset() : success(false) {}
  bool success :1;
} _Game_GetTrainerActions_presult__isset;

class Game_GetTrainerActions_presult {
 public:


  virtual ~Game_GetTrainerActions_presult() noexcept;
  TrainerActions* success;

  _Game_GetTrainerActions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_SendInitMessage_args__isset {
  _Game_SendInitMessage_args__isset() : init_message(false) {}
  bool init_message :1;
} _Game_SendInitMessage_args__isset;

class Game_SendInitMessage_args {
 public:

  Game_SendInitMessage_args(const Game_SendInitMessage_args&) noexcept;
  Game_SendInitMessage_args& operator=(const Game_SendInitMessage_args&) noexcept;
  Game_SendInitMessage_args() noexcept {
  }

  virtual ~Game_SendInitMessage_args() noexcept;
  InitMessage init_message;

  _Game_SendInitMessage_args__isset __isset;

  void __set_init_message(const InitMessage& val);

  bool operator == (const Game_SendInitMessage_args & rhs) const
  {
    if (!(init_message == rhs.init_message))
      return false;
    return true;
  }
  bool operator != (const Game_SendInitMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendInitMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendInitMessage_pargs {
 public:


  virtual ~Game_SendInitMessage_pargs() noexcept;
  const InitMessage* init_message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendInitMessage_result {
 public:

  Game_SendInitMessage_result(const Game_SendInitMessage_result&) noexcept;
  Game_SendInitMessage_result& operator=(const Game_SendInitMessage_result&) noexcept;
  Game_SendInitMessage_result() noexcept {
  }

  virtual ~Game_SendInitMessage_result() noexcept;

  bool operator == (const Game_SendInitMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_SendInitMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendInitMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendInitMessage_presult {
 public:


  virtual ~Game_SendInitMessage_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_SendServerParams_args__isset {
  _Game_SendServerParams_args__isset() : server_param(false) {}
  bool server_param :1;
} _Game_SendServerParams_args__isset;

class Game_SendServerParams_args {
 public:

  Game_SendServerParams_args(const Game_SendServerParams_args&);
  Game_SendServerParams_args& operator=(const Game_SendServerParams_args&);
  Game_SendServerParams_args() noexcept {
  }

  virtual ~Game_SendServerParams_args() noexcept;
  ServerParam server_param;

  _Game_SendServerParams_args__isset __isset;

  void __set_server_param(const ServerParam& val);

  bool operator == (const Game_SendServerParams_args & rhs) const
  {
    if (!(server_param == rhs.server_param))
      return false;
    return true;
  }
  bool operator != (const Game_SendServerParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendServerParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendServerParams_pargs {
 public:


  virtual ~Game_SendServerParams_pargs() noexcept;
  const ServerParam* server_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendServerParams_result {
 public:

  Game_SendServerParams_result(const Game_SendServerParams_result&) noexcept;
  Game_SendServerParams_result& operator=(const Game_SendServerParams_result&) noexcept;
  Game_SendServerParams_result() noexcept {
  }

  virtual ~Game_SendServerParams_result() noexcept;

  bool operator == (const Game_SendServerParams_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_SendServerParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendServerParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendServerParams_presult {
 public:


  virtual ~Game_SendServerParams_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_SendPlayerParams_args__isset {
  _Game_SendPlayerParams_args__isset() : player_param(false) {}
  bool player_param :1;
} _Game_SendPlayerParams_args__isset;

class Game_SendPlayerParams_args {
 public:

  Game_SendPlayerParams_args(const Game_SendPlayerParams_args&) noexcept;
  Game_SendPlayerParams_args& operator=(const Game_SendPlayerParams_args&) noexcept;
  Game_SendPlayerParams_args() noexcept {
  }

  virtual ~Game_SendPlayerParams_args() noexcept;
  PlayerParam player_param;

  _Game_SendPlayerParams_args__isset __isset;

  void __set_player_param(const PlayerParam& val);

  bool operator == (const Game_SendPlayerParams_args & rhs) const
  {
    if (!(player_param == rhs.player_param))
      return false;
    return true;
  }
  bool operator != (const Game_SendPlayerParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendPlayerParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerParams_pargs {
 public:


  virtual ~Game_SendPlayerParams_pargs() noexcept;
  const PlayerParam* player_param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerParams_result {
 public:

  Game_SendPlayerParams_result(const Game_SendPlayerParams_result&) noexcept;
  Game_SendPlayerParams_result& operator=(const Game_SendPlayerParams_result&) noexcept;
  Game_SendPlayerParams_result() noexcept {
  }

  virtual ~Game_SendPlayerParams_result() noexcept;

  bool operator == (const Game_SendPlayerParams_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_SendPlayerParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendPlayerParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerParams_presult {
 public:


  virtual ~Game_SendPlayerParams_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_SendPlayerType_args__isset {
  _Game_SendPlayerType_args__isset() : player_type(false) {}
  bool player_type :1;
} _Game_SendPlayerType_args__isset;

class Game_SendPlayerType_args {
 public:

  Game_SendPlayerType_args(const Game_SendPlayerType_args&) noexcept;
  Game_SendPlayerType_args& operator=(const Game_SendPlayerType_args&) noexcept;
  Game_SendPlayerType_args() noexcept {
  }

  virtual ~Game_SendPlayerType_args() noexcept;
  PlayerType player_type;

  _Game_SendPlayerType_args__isset __isset;

  void __set_player_type(const PlayerType& val);

  bool operator == (const Game_SendPlayerType_args & rhs) const
  {
    if (!(player_type == rhs.player_type))
      return false;
    return true;
  }
  bool operator != (const Game_SendPlayerType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendPlayerType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerType_pargs {
 public:


  virtual ~Game_SendPlayerType_pargs() noexcept;
  const PlayerType* player_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerType_result {
 public:

  Game_SendPlayerType_result(const Game_SendPlayerType_result&) noexcept;
  Game_SendPlayerType_result& operator=(const Game_SendPlayerType_result&) noexcept;
  Game_SendPlayerType_result() noexcept {
  }

  virtual ~Game_SendPlayerType_result() noexcept;

  bool operator == (const Game_SendPlayerType_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_SendPlayerType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendPlayerType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendPlayerType_presult {
 public:


  virtual ~Game_SendPlayerType_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_GetInitMessage_args__isset {
  _Game_GetInitMessage_args__isset() : empty(false) {}
  bool empty :1;
} _Game_GetInitMessage_args__isset;

class Game_GetInitMessage_args {
 public:

  Game_GetInitMessage_args(const Game_GetInitMessage_args&) noexcept;
  Game_GetInitMessage_args& operator=(const Game_GetInitMessage_args&) noexcept;
  Game_GetInitMessage_args() noexcept {
  }

  virtual ~Game_GetInitMessage_args() noexcept;
  Empty empty;

  _Game_GetInitMessage_args__isset __isset;

  void __set_empty(const Empty& val);

  bool operator == (const Game_GetInitMessage_args & rhs) const
  {
    if (!(empty == rhs.empty))
      return false;
    return true;
  }
  bool operator != (const Game_GetInitMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetInitMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_GetInitMessage_pargs {
 public:


  virtual ~Game_GetInitMessage_pargs() noexcept;
  const Empty* empty;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetInitMessage_result__isset {
  _Game_GetInitMessage_result__isset() : success(false) {}
  bool success :1;
} _Game_GetInitMessage_result__isset;

class Game_GetInitMessage_result {
 public:

  Game_GetInitMessage_result(const Game_GetInitMessage_result&) noexcept;
  Game_GetInitMessage_result& operator=(const Game_GetInitMessage_result&) noexcept;
  Game_GetInitMessage_result() noexcept {
  }

  virtual ~Game_GetInitMessage_result() noexcept;
  InitMessageFromServer success;

  _Game_GetInitMessage_result__isset __isset;

  void __set_success(const InitMessageFromServer& val);

  bool operator == (const Game_GetInitMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Game_GetInitMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_GetInitMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Game_GetInitMessage_presult__isset {
  _Game_GetInitMessage_presult__isset() : success(false) {}
  bool success :1;
} _Game_GetInitMessage_presult__isset;

class Game_GetInitMessage_presult {
 public:


  virtual ~Game_GetInitMessage_presult() noexcept;
  InitMessageFromServer* success;

  _Game_GetInitMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Game_SendByeCommand_args__isset {
  _Game_SendByeCommand_args__isset() : empty(false) {}
  bool empty :1;
} _Game_SendByeCommand_args__isset;

class Game_SendByeCommand_args {
 public:

  Game_SendByeCommand_args(const Game_SendByeCommand_args&) noexcept;
  Game_SendByeCommand_args& operator=(const Game_SendByeCommand_args&) noexcept;
  Game_SendByeCommand_args() noexcept {
  }

  virtual ~Game_SendByeCommand_args() noexcept;
  Empty empty;

  _Game_SendByeCommand_args__isset __isset;

  void __set_empty(const Empty& val);

  bool operator == (const Game_SendByeCommand_args & rhs) const
  {
    if (!(empty == rhs.empty))
      return false;
    return true;
  }
  bool operator != (const Game_SendByeCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendByeCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendByeCommand_pargs {
 public:


  virtual ~Game_SendByeCommand_pargs() noexcept;
  const Empty* empty;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendByeCommand_result {
 public:

  Game_SendByeCommand_result(const Game_SendByeCommand_result&) noexcept;
  Game_SendByeCommand_result& operator=(const Game_SendByeCommand_result&) noexcept;
  Game_SendByeCommand_result() noexcept {
  }

  virtual ~Game_SendByeCommand_result() noexcept;

  bool operator == (const Game_SendByeCommand_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Game_SendByeCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Game_SendByeCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Game_SendByeCommand_presult {
 public:


  virtual ~Game_SendByeCommand_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameClient : virtual public GameIf {
 public:
  GameClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetPlayerActions(PlayerActions& _return, const State& state) override;
  void send_GetPlayerActions(const State& state);
  void recv_GetPlayerActions(PlayerActions& _return);
  void GetCoachActions(CoachActions& _return, const State& state) override;
  void send_GetCoachActions(const State& state);
  void recv_GetCoachActions(CoachActions& _return);
  void GetTrainerActions(TrainerActions& _return, const State& state) override;
  void send_GetTrainerActions(const State& state);
  void recv_GetTrainerActions(TrainerActions& _return);
  void SendInitMessage(const InitMessage& init_message) override;
  void send_SendInitMessage(const InitMessage& init_message);
  void recv_SendInitMessage();
  void SendServerParams(const ServerParam& server_param) override;
  void send_SendServerParams(const ServerParam& server_param);
  void recv_SendServerParams();
  void SendPlayerParams(const PlayerParam& player_param) override;
  void send_SendPlayerParams(const PlayerParam& player_param);
  void recv_SendPlayerParams();
  void SendPlayerType(const PlayerType& player_type) override;
  void send_SendPlayerType(const PlayerType& player_type);
  void recv_SendPlayerType();
  void GetInitMessage(InitMessageFromServer& _return, const Empty& empty) override;
  void send_GetInitMessage(const Empty& empty);
  void recv_GetInitMessage(InitMessageFromServer& _return);
  void SendByeCommand(const Empty& empty) override;
  void send_SendByeCommand(const Empty& empty);
  void recv_SendByeCommand();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<GameIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (GameProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetPlayerActions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCoachActions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTrainerActions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendInitMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendServerParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendPlayerParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendPlayerType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetInitMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendByeCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameProcessor(::std::shared_ptr<GameIf> iface) :
    iface_(iface) {
    processMap_["GetPlayerActions"] = &GameProcessor::process_GetPlayerActions;
    processMap_["GetCoachActions"] = &GameProcessor::process_GetCoachActions;
    processMap_["GetTrainerActions"] = &GameProcessor::process_GetTrainerActions;
    processMap_["SendInitMessage"] = &GameProcessor::process_SendInitMessage;
    processMap_["SendServerParams"] = &GameProcessor::process_SendServerParams;
    processMap_["SendPlayerParams"] = &GameProcessor::process_SendPlayerParams;
    processMap_["SendPlayerType"] = &GameProcessor::process_SendPlayerType;
    processMap_["GetInitMessage"] = &GameProcessor::process_GetInitMessage;
    processMap_["SendByeCommand"] = &GameProcessor::process_SendByeCommand;
  }

  virtual ~GameProcessor() {}
};

class GameProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameProcessorFactory(const ::std::shared_ptr< GameIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< GameIfFactory > handlerFactory_;
};

class GameMultiface : virtual public GameIf {
 public:
  GameMultiface(std::vector<std::shared_ptr<GameIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameMultiface() {}
 protected:
  std::vector<std::shared_ptr<GameIf> > ifaces_;
  GameMultiface() {}
  void add(::std::shared_ptr<GameIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetPlayerActions(PlayerActions& _return, const State& state) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayerActions(_return, state);
    }
    ifaces_[i]->GetPlayerActions(_return, state);
    return;
  }

  void GetCoachActions(CoachActions& _return, const State& state) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCoachActions(_return, state);
    }
    ifaces_[i]->GetCoachActions(_return, state);
    return;
  }

  void GetTrainerActions(TrainerActions& _return, const State& state) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTrainerActions(_return, state);
    }
    ifaces_[i]->GetTrainerActions(_return, state);
    return;
  }

  void SendInitMessage(const InitMessage& init_message) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendInitMessage(init_message);
    }
    ifaces_[i]->SendInitMessage(init_message);
  }

  void SendServerParams(const ServerParam& server_param) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendServerParams(server_param);
    }
    ifaces_[i]->SendServerParams(server_param);
  }

  void SendPlayerParams(const PlayerParam& player_param) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendPlayerParams(player_param);
    }
    ifaces_[i]->SendPlayerParams(player_param);
  }

  void SendPlayerType(const PlayerType& player_type) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendPlayerType(player_type);
    }
    ifaces_[i]->SendPlayerType(player_type);
  }

  void GetInitMessage(InitMessageFromServer& _return, const Empty& empty) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetInitMessage(_return, empty);
    }
    ifaces_[i]->GetInitMessage(_return, empty);
    return;
  }

  void SendByeCommand(const Empty& empty) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendByeCommand(empty);
    }
    ifaces_[i]->SendByeCommand(empty);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GameConcurrentClient : virtual public GameIf {
 public:
  GameConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  GameConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetPlayerActions(PlayerActions& _return, const State& state) override;
  int32_t send_GetPlayerActions(const State& state);
  void recv_GetPlayerActions(PlayerActions& _return, const int32_t seqid);
  void GetCoachActions(CoachActions& _return, const State& state) override;
  int32_t send_GetCoachActions(const State& state);
  void recv_GetCoachActions(CoachActions& _return, const int32_t seqid);
  void GetTrainerActions(TrainerActions& _return, const State& state) override;
  int32_t send_GetTrainerActions(const State& state);
  void recv_GetTrainerActions(TrainerActions& _return, const int32_t seqid);
  void SendInitMessage(const InitMessage& init_message) override;
  int32_t send_SendInitMessage(const InitMessage& init_message);
  void recv_SendInitMessage(const int32_t seqid);
  void SendServerParams(const ServerParam& server_param) override;
  int32_t send_SendServerParams(const ServerParam& server_param);
  void recv_SendServerParams(const int32_t seqid);
  void SendPlayerParams(const PlayerParam& player_param) override;
  int32_t send_SendPlayerParams(const PlayerParam& player_param);
  void recv_SendPlayerParams(const int32_t seqid);
  void SendPlayerType(const PlayerType& player_type) override;
  int32_t send_SendPlayerType(const PlayerType& player_type);
  void recv_SendPlayerType(const int32_t seqid);
  void GetInitMessage(InitMessageFromServer& _return, const Empty& empty) override;
  int32_t send_GetInitMessage(const Empty& empty);
  void recv_GetInitMessage(InitMessageFromServer& _return, const int32_t seqid);
  void SendByeCommand(const Empty& empty) override;
  int32_t send_SendByeCommand(const Empty& empty);
  void recv_SendByeCommand(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
