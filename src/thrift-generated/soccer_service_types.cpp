/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "soccer_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace soccer {

int _kViewWidthValues[] = {
  ViewWidth::NARROW,
  ViewWidth::NORMAL,
  ViewWidth::WIDE
};
const char* _kViewWidthNames[] = {
  "NARROW",
  "NORMAL",
  "WIDE"
};
const std::map<int, const char*> _ViewWidth_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kViewWidthValues, _kViewWidthNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ViewWidth::type& val) {
  std::map<int, const char*>::const_iterator it = _ViewWidth_VALUES_TO_NAMES.find(val);
  if (it != _ViewWidth_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ViewWidth::type& val) {
  std::map<int, const char*>::const_iterator it = _ViewWidth_VALUES_TO_NAMES.find(val);
  if (it != _ViewWidth_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kAgentTypeValues[] = {
  AgentType::PlayerT,
  AgentType::CoachT,
  AgentType::TrainerT
};
const char* _kAgentTypeNames[] = {
  "PlayerT",
  "CoachT",
  "TrainerT"
};
const std::map<int, const char*> _AgentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAgentTypeValues, _kAgentTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const AgentType::type& val) {
  std::map<int, const char*>::const_iterator it = _AgentType_VALUES_TO_NAMES.find(val);
  if (it != _AgentType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const AgentType::type& val) {
  std::map<int, const char*>::const_iterator it = _AgentType_VALUES_TO_NAMES.find(val);
  if (it != _AgentType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRpcServerLanguageTypeValues[] = {
  RpcServerLanguageType::UNKNOWN_LANGUAGE,
  RpcServerLanguageType::PYThON,
  RpcServerLanguageType::JAVA,
  RpcServerLanguageType::CPP,
  RpcServerLanguageType::CSHARP,
  RpcServerLanguageType::RUBY,
  RpcServerLanguageType::JAVE_SCRIPT,
  RpcServerLanguageType::GO
};
const char* _kRpcServerLanguageTypeNames[] = {
  "UNKNOWN_LANGUAGE",
  "PYThON",
  "JAVA",
  "CPP",
  "CSHARP",
  "RUBY",
  "JAVE_SCRIPT",
  "GO"
};
const std::map<int, const char*> _RpcServerLanguageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kRpcServerLanguageTypeValues, _kRpcServerLanguageTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const RpcServerLanguageType::type& val) {
  std::map<int, const char*>::const_iterator it = _RpcServerLanguageType_VALUES_TO_NAMES.find(val);
  if (it != _RpcServerLanguageType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RpcServerLanguageType::type& val) {
  std::map<int, const char*>::const_iterator it = _RpcServerLanguageType_VALUES_TO_NAMES.find(val);
  if (it != _RpcServerLanguageType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kSideValues[] = {
  Side::UNKNOWN,
  Side::LEFT,
  Side::RIGHT
};
const char* _kSideNames[] = {
  "UNKNOWN",
  "LEFT",
  "RIGHT"
};
const std::map<int, const char*> _Side_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSideValues, _kSideNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Side::type& val) {
  std::map<int, const char*>::const_iterator it = _Side_VALUES_TO_NAMES.find(val);
  if (it != _Side_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Side::type& val) {
  std::map<int, const char*>::const_iterator it = _Side_VALUES_TO_NAMES.find(val);
  if (it != _Side_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kLoggerLevelValues[] = {
  LoggerLevel::NoneLevel,
  LoggerLevel::SYSTEM,
  LoggerLevel::SENSOR,
  LoggerLevel::WORLD,
  LoggerLevel::ACTION,
  LoggerLevel::INTERCEPT,
  LoggerLevel::KICK,
  LoggerLevel::HOLD,
  LoggerLevel::DRIBBLE,
  LoggerLevel::PASS,
  LoggerLevel::CROSS,
  LoggerLevel::SHOOT,
  LoggerLevel::CLEAR,
  LoggerLevel::BLOCK,
  LoggerLevel::MARK,
  LoggerLevel::POSITIONING,
  LoggerLevel::ROLE,
  LoggerLevel::TEAM,
  LoggerLevel::COMMUNICATION,
  LoggerLevel::ANALYZER,
  LoggerLevel::ACTION_CHAIN,
  LoggerLevel::PLAN
};
const char* _kLoggerLevelNames[] = {
  "NoneLevel",
  "SYSTEM",
  "SENSOR",
  "WORLD",
  "ACTION",
  "INTERCEPT",
  "KICK",
  "HOLD",
  "DRIBBLE",
  "PASS",
  "CROSS",
  "SHOOT",
  "CLEAR",
  "BLOCK",
  "MARK",
  "POSITIONING",
  "ROLE",
  "TEAM",
  "COMMUNICATION",
  "ANALYZER",
  "ACTION_CHAIN",
  "PLAN"
};
const std::map<int, const char*> _LoggerLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(22, _kLoggerLevelValues, _kLoggerLevelNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LoggerLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _LoggerLevel_VALUES_TO_NAMES.find(val);
  if (it != _LoggerLevel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LoggerLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _LoggerLevel_VALUES_TO_NAMES.find(val);
  if (it != _LoggerLevel_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCardTypeValues[] = {
  CardType::NO_CARD,
  CardType::YELLOW,
  CardType::RED
};
const char* _kCardTypeNames[] = {
  "NO_CARD",
  "YELLOW",
  "RED"
};
const std::map<int, const char*> _CardType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCardTypeValues, _kCardTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CardType::type& val) {
  std::map<int, const char*>::const_iterator it = _CardType_VALUES_TO_NAMES.find(val);
  if (it != _CardType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CardType::type& val) {
  std::map<int, const char*>::const_iterator it = _CardType_VALUES_TO_NAMES.find(val);
  if (it != _CardType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kInterceptActionTypeValues[] = {
  InterceptActionType::UNKNOWN_Intercept_Action_Type,
  InterceptActionType::OMNI_DASH,
  InterceptActionType::TURN_FORWARD_DASH,
  InterceptActionType::TURN_BACKWARD_DASH
};
const char* _kInterceptActionTypeNames[] = {
  "UNKNOWN_Intercept_Action_Type",
  "OMNI_DASH",
  "TURN_FORWARD_DASH",
  "TURN_BACKWARD_DASH"
};
const std::map<int, const char*> _InterceptActionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kInterceptActionTypeValues, _kInterceptActionTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const InterceptActionType::type& val) {
  std::map<int, const char*>::const_iterator it = _InterceptActionType_VALUES_TO_NAMES.find(val);
  if (it != _InterceptActionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const InterceptActionType::type& val) {
  std::map<int, const char*>::const_iterator it = _InterceptActionType_VALUES_TO_NAMES.find(val);
  if (it != _InterceptActionType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kGameModeTypeValues[] = {
  GameModeType::BeforeKickOff,
  GameModeType::TimeOver,
  GameModeType::PlayOn,
  GameModeType::KickOff_,
  GameModeType::KickIn_,
  GameModeType::FreeKick_,
  GameModeType::CornerKick_,
  GameModeType::GoalKick_,
  GameModeType::AfterGoal_,
  GameModeType::OffSide_,
  GameModeType::PenaltyKick_,
  GameModeType::FirstHalfOver,
  GameModeType::Pause,
  GameModeType::Human,
  GameModeType::FoulCharge_,
  GameModeType::FoulPush_,
  GameModeType::FoulMultipleAttacker_,
  GameModeType::FoulBallOut_,
  GameModeType::BackPass_,
  GameModeType::FreeKickFault_,
  GameModeType::CatchFault_,
  GameModeType::IndFreeKick_,
  GameModeType::PenaltySetup_,
  GameModeType::PenaltyReady_,
  GameModeType::PenaltyTaken_,
  GameModeType::PenaltyMiss_,
  GameModeType::PenaltyScore_,
  GameModeType::IllegalDefense_,
  GameModeType::PenaltyOnfield_,
  GameModeType::PenaltyFoul_,
  GameModeType::GoalieCatch_,
  GameModeType::ExtendHalf,
  GameModeType::MODE_MAX
};
const char* _kGameModeTypeNames[] = {
  "BeforeKickOff",
  "TimeOver",
  "PlayOn",
  "KickOff_",
  "KickIn_",
  "FreeKick_",
  "CornerKick_",
  "GoalKick_",
  "AfterGoal_",
  "OffSide_",
  "PenaltyKick_",
  "FirstHalfOver",
  "Pause",
  "Human",
  "FoulCharge_",
  "FoulPush_",
  "FoulMultipleAttacker_",
  "FoulBallOut_",
  "BackPass_",
  "FreeKickFault_",
  "CatchFault_",
  "IndFreeKick_",
  "PenaltySetup_",
  "PenaltyReady_",
  "PenaltyTaken_",
  "PenaltyMiss_",
  "PenaltyScore_",
  "IllegalDefense_",
  "PenaltyOnfield_",
  "PenaltyFoul_",
  "GoalieCatch_",
  "ExtendHalf",
  "MODE_MAX"
};
const std::map<int, const char*> _GameModeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(33, _kGameModeTypeValues, _kGameModeTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const GameModeType::type& val) {
  std::map<int, const char*>::const_iterator it = _GameModeType_VALUES_TO_NAMES.find(val);
  if (it != _GameModeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const GameModeType::type& val) {
  std::map<int, const char*>::const_iterator it = _GameModeType_VALUES_TO_NAMES.find(val);
  if (it != _GameModeType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRpcActionCategoryValues[] = {
  RpcActionCategory::AC_Hold,
  RpcActionCategory::AC_Dribble,
  RpcActionCategory::AC_Pass,
  RpcActionCategory::AC_Shoot,
  RpcActionCategory::AC_Clear,
  RpcActionCategory::AC_Move,
  RpcActionCategory::AC_NoAction
};
const char* _kRpcActionCategoryNames[] = {
  "AC_Hold",
  "AC_Dribble",
  "AC_Pass",
  "AC_Shoot",
  "AC_Clear",
  "AC_Move",
  "AC_NoAction"
};
const std::map<int, const char*> _RpcActionCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kRpcActionCategoryValues, _kRpcActionCategoryNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const RpcActionCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _RpcActionCategory_VALUES_TO_NAMES.find(val);
  if (it != _RpcActionCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RpcActionCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _RpcActionCategory_VALUES_TO_NAMES.find(val);
  if (it != _RpcActionCategory_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


RpcVector2D::~RpcVector2D() noexcept {
}


void RpcVector2D::__set_x(const double val) {
  this->x = val;
}

void RpcVector2D::__set_y(const double val) {
  this->y = val;
}

void RpcVector2D::__set_dist(const double val) {
  this->dist = val;
}

void RpcVector2D::__set_angle(const double val) {
  this->angle = val;
}
std::ostream& operator<<(std::ostream& out, const RpcVector2D& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RpcVector2D::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist);
          this->__isset.dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle);
          this->__isset.angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RpcVector2D::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RpcVector2D");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RpcVector2D &a, RpcVector2D &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.dist, b.dist);
  swap(a.angle, b.angle);
  swap(a.__isset, b.__isset);
}

RpcVector2D::RpcVector2D(const RpcVector2D& other0) noexcept {
  x = other0.x;
  y = other0.y;
  dist = other0.dist;
  angle = other0.angle;
  __isset = other0.__isset;
}
RpcVector2D& RpcVector2D::operator=(const RpcVector2D& other1) noexcept {
  x = other1.x;
  y = other1.y;
  dist = other1.dist;
  angle = other1.angle;
  __isset = other1.__isset;
  return *this;
}
void RpcVector2D::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RpcVector2D(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "dist=" << to_string(dist);
  out << ", " << "angle=" << to_string(angle);
  out << ")";
}


RegisterRequest::~RegisterRequest() noexcept {
}


void RegisterRequest::__set_agent_type(const AgentType::type val) {
  this->agent_type = val;
}

void RegisterRequest::__set_team_name(const std::string& val) {
  this->team_name = val;
}

void RegisterRequest::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void RegisterRequest::__set_rpc_version(const int32_t val) {
  this->rpc_version = val;
}
std::ostream& operator<<(std::ostream& out, const RegisterRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RegisterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->agent_type = static_cast<AgentType::type>(ecast2);
          this->__isset.agent_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->team_name);
          this->__isset.team_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rpc_version);
          this->__isset.rpc_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterRequest");

  xfer += oprot->writeFieldBegin("agent_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->agent_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->team_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rpc_version", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rpc_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterRequest &a, RegisterRequest &b) {
  using ::std::swap;
  swap(a.agent_type, b.agent_type);
  swap(a.team_name, b.team_name);
  swap(a.uniform_number, b.uniform_number);
  swap(a.rpc_version, b.rpc_version);
  swap(a.__isset, b.__isset);
}

RegisterRequest::RegisterRequest(const RegisterRequest& other3) {
  agent_type = other3.agent_type;
  team_name = other3.team_name;
  uniform_number = other3.uniform_number;
  rpc_version = other3.rpc_version;
  __isset = other3.__isset;
}
RegisterRequest& RegisterRequest::operator=(const RegisterRequest& other4) {
  agent_type = other4.agent_type;
  team_name = other4.team_name;
  uniform_number = other4.uniform_number;
  rpc_version = other4.rpc_version;
  __isset = other4.__isset;
  return *this;
}
void RegisterRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterRequest(";
  out << "agent_type=" << to_string(agent_type);
  out << ", " << "team_name=" << to_string(team_name);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "rpc_version=" << to_string(rpc_version);
  out << ")";
}


RegisterResponse::~RegisterResponse() noexcept {
}


void RegisterResponse::__set_client_id(const int32_t val) {
  this->client_id = val;
}

void RegisterResponse::__set_agent_type(const AgentType::type val) {
  this->agent_type = val;
}

void RegisterResponse::__set_team_name(const std::string& val) {
  this->team_name = val;
}

void RegisterResponse::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void RegisterResponse::__set_rpc_server_language_type(const RpcServerLanguageType::type val) {
  this->rpc_server_language_type = val;
}
std::ostream& operator<<(std::ostream& out, const RegisterResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RegisterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->client_id);
          this->__isset.client_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->agent_type = static_cast<AgentType::type>(ecast5);
          this->__isset.agent_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->team_name);
          this->__isset.team_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->rpc_server_language_type = static_cast<RpcServerLanguageType::type>(ecast6);
          this->__isset.rpc_server_language_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterResponse");

  xfer += oprot->writeFieldBegin("client_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->client_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agent_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->agent_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->team_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rpc_server_language_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(static_cast<int32_t>(this->rpc_server_language_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterResponse &a, RegisterResponse &b) {
  using ::std::swap;
  swap(a.client_id, b.client_id);
  swap(a.agent_type, b.agent_type);
  swap(a.team_name, b.team_name);
  swap(a.uniform_number, b.uniform_number);
  swap(a.rpc_server_language_type, b.rpc_server_language_type);
  swap(a.__isset, b.__isset);
}

RegisterResponse::RegisterResponse(const RegisterResponse& other7) {
  client_id = other7.client_id;
  agent_type = other7.agent_type;
  team_name = other7.team_name;
  uniform_number = other7.uniform_number;
  rpc_server_language_type = other7.rpc_server_language_type;
  __isset = other7.__isset;
}
RegisterResponse& RegisterResponse::operator=(const RegisterResponse& other8) {
  client_id = other8.client_id;
  agent_type = other8.agent_type;
  team_name = other8.team_name;
  uniform_number = other8.uniform_number;
  rpc_server_language_type = other8.rpc_server_language_type;
  __isset = other8.__isset;
  return *this;
}
void RegisterResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterResponse(";
  out << "client_id=" << to_string(client_id);
  out << ", " << "agent_type=" << to_string(agent_type);
  out << ", " << "team_name=" << to_string(team_name);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "rpc_server_language_type=" << to_string(rpc_server_language_type);
  out << ")";
}


Ball::~Ball() noexcept {
}


void Ball::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void Ball::__set_relative_position(const RpcVector2D& val) {
  this->relative_position = val;
}

void Ball::__set_seen_position(const RpcVector2D& val) {
  this->seen_position = val;
}

void Ball::__set_heard_position(const RpcVector2D& val) {
  this->heard_position = val;
}

void Ball::__set_velocity(const RpcVector2D& val) {
  this->velocity = val;
}

void Ball::__set_seen_velocity(const RpcVector2D& val) {
  this->seen_velocity = val;
}

void Ball::__set_heard_velocity(const RpcVector2D& val) {
  this->heard_velocity = val;
}

void Ball::__set_pos_count(const int32_t val) {
  this->pos_count = val;
}

void Ball::__set_seen_pos_count(const int32_t val) {
  this->seen_pos_count = val;
}

void Ball::__set_heard_pos_count(const int32_t val) {
  this->heard_pos_count = val;
}

void Ball::__set_vel_count(const int32_t val) {
  this->vel_count = val;
}

void Ball::__set_seen_vel_count(const int32_t val) {
  this->seen_vel_count = val;
}

void Ball::__set_heard_vel_count(const int32_t val) {
  this->heard_vel_count = val;
}

void Ball::__set_lost_count(const int32_t val) {
  this->lost_count = val;
}

void Ball::__set_ghost_count(const int32_t val) {
  this->ghost_count = val;
}

void Ball::__set_dist_from_self(const double val) {
  this->dist_from_self = val;
}

void Ball::__set_angle_from_self(const double val) {
  this->angle_from_self = val;
}
std::ostream& operator<<(std::ostream& out, const Ball& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Ball::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relative_position.read(iprot);
          this->__isset.relative_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_position.read(iprot);
          this->__isset.seen_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->heard_position.read(iprot);
          this->__isset.heard_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->velocity.read(iprot);
          this->__isset.velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_velocity.read(iprot);
          this->__isset.seen_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->heard_velocity.read(iprot);
          this->__isset.heard_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_count);
          this->__isset.pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_pos_count);
          this->__isset.seen_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heard_pos_count);
          this->__isset.heard_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vel_count);
          this->__isset.vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_vel_count);
          this->__isset.seen_vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heard_vel_count);
          this->__isset.heard_vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lost_count);
          this->__isset.lost_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ghost_count);
          this->__isset.ghost_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_from_self);
          this->__isset.dist_from_self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_from_self);
          this->__isset.angle_from_self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ball::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Ball");

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->relative_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->seen_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_position", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->heard_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("velocity", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_velocity", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->seen_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_velocity", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->heard_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_count", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_pos_count", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->seen_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_pos_count", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->heard_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vel_count", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_vel_count", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->seen_vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_vel_count", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->heard_vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lost_count", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->lost_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ghost_count", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->ghost_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_from_self", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->dist_from_self);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle_from_self", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->angle_from_self);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ball &a, Ball &b) {
  using ::std::swap;
  swap(a.position, b.position);
  swap(a.relative_position, b.relative_position);
  swap(a.seen_position, b.seen_position);
  swap(a.heard_position, b.heard_position);
  swap(a.velocity, b.velocity);
  swap(a.seen_velocity, b.seen_velocity);
  swap(a.heard_velocity, b.heard_velocity);
  swap(a.pos_count, b.pos_count);
  swap(a.seen_pos_count, b.seen_pos_count);
  swap(a.heard_pos_count, b.heard_pos_count);
  swap(a.vel_count, b.vel_count);
  swap(a.seen_vel_count, b.seen_vel_count);
  swap(a.heard_vel_count, b.heard_vel_count);
  swap(a.lost_count, b.lost_count);
  swap(a.ghost_count, b.ghost_count);
  swap(a.dist_from_self, b.dist_from_self);
  swap(a.angle_from_self, b.angle_from_self);
  swap(a.__isset, b.__isset);
}

Ball::Ball(const Ball& other9) noexcept {
  position = other9.position;
  relative_position = other9.relative_position;
  seen_position = other9.seen_position;
  heard_position = other9.heard_position;
  velocity = other9.velocity;
  seen_velocity = other9.seen_velocity;
  heard_velocity = other9.heard_velocity;
  pos_count = other9.pos_count;
  seen_pos_count = other9.seen_pos_count;
  heard_pos_count = other9.heard_pos_count;
  vel_count = other9.vel_count;
  seen_vel_count = other9.seen_vel_count;
  heard_vel_count = other9.heard_vel_count;
  lost_count = other9.lost_count;
  ghost_count = other9.ghost_count;
  dist_from_self = other9.dist_from_self;
  angle_from_self = other9.angle_from_self;
  __isset = other9.__isset;
}
Ball& Ball::operator=(const Ball& other10) noexcept {
  position = other10.position;
  relative_position = other10.relative_position;
  seen_position = other10.seen_position;
  heard_position = other10.heard_position;
  velocity = other10.velocity;
  seen_velocity = other10.seen_velocity;
  heard_velocity = other10.heard_velocity;
  pos_count = other10.pos_count;
  seen_pos_count = other10.seen_pos_count;
  heard_pos_count = other10.heard_pos_count;
  vel_count = other10.vel_count;
  seen_vel_count = other10.seen_vel_count;
  heard_vel_count = other10.heard_vel_count;
  lost_count = other10.lost_count;
  ghost_count = other10.ghost_count;
  dist_from_self = other10.dist_from_self;
  angle_from_self = other10.angle_from_self;
  __isset = other10.__isset;
  return *this;
}
void Ball::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Ball(";
  out << "position=" << to_string(position);
  out << ", " << "relative_position=" << to_string(relative_position);
  out << ", " << "seen_position=" << to_string(seen_position);
  out << ", " << "heard_position=" << to_string(heard_position);
  out << ", " << "velocity=" << to_string(velocity);
  out << ", " << "seen_velocity=" << to_string(seen_velocity);
  out << ", " << "heard_velocity=" << to_string(heard_velocity);
  out << ", " << "pos_count=" << to_string(pos_count);
  out << ", " << "seen_pos_count=" << to_string(seen_pos_count);
  out << ", " << "heard_pos_count=" << to_string(heard_pos_count);
  out << ", " << "vel_count=" << to_string(vel_count);
  out << ", " << "seen_vel_count=" << to_string(seen_vel_count);
  out << ", " << "heard_vel_count=" << to_string(heard_vel_count);
  out << ", " << "lost_count=" << to_string(lost_count);
  out << ", " << "ghost_count=" << to_string(ghost_count);
  out << ", " << "dist_from_self=" << to_string(dist_from_self);
  out << ", " << "angle_from_self=" << to_string(angle_from_self);
  out << ")";
}


Player::~Player() noexcept {
}


void Player::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void Player::__set_seen_position(const RpcVector2D& val) {
  this->seen_position = val;
}

void Player::__set_heard_position(const RpcVector2D& val) {
  this->heard_position = val;
}

void Player::__set_velocity(const RpcVector2D& val) {
  this->velocity = val;
}

void Player::__set_seen_velocity(const RpcVector2D& val) {
  this->seen_velocity = val;
}

void Player::__set_pos_count(const int32_t val) {
  this->pos_count = val;
}

void Player::__set_seen_pos_count(const int32_t val) {
  this->seen_pos_count = val;
}

void Player::__set_heard_pos_count(const int32_t val) {
  this->heard_pos_count = val;
}

void Player::__set_vel_count(const int32_t val) {
  this->vel_count = val;
}

void Player::__set_seen_vel_count(const int32_t val) {
  this->seen_vel_count = val;
}

void Player::__set_ghost_count(const int32_t val) {
  this->ghost_count = val;
}

void Player::__set_dist_from_self(const double val) {
  this->dist_from_self = val;
}

void Player::__set_angle_from_self(const double val) {
  this->angle_from_self = val;
}

void Player::__set_id(const int32_t val) {
  this->id = val;
}

void Player::__set_side(const Side::type val) {
  this->side = val;
}

void Player::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void Player::__set_uniform_number_count(const int32_t val) {
  this->uniform_number_count = val;
}

void Player::__set_is_goalie(const bool val) {
  this->is_goalie = val;
}

void Player::__set_body_direction(const double val) {
  this->body_direction = val;
}

void Player::__set_body_direction_count(const int32_t val) {
  this->body_direction_count = val;
}

void Player::__set_face_direction(const double val) {
  this->face_direction = val;
}

void Player::__set_face_direction_count(const int32_t val) {
  this->face_direction_count = val;
}

void Player::__set_point_to_direction(const double val) {
  this->point_to_direction = val;
}

void Player::__set_point_to_direction_count(const int32_t val) {
  this->point_to_direction_count = val;
}

void Player::__set_is_kicking(const bool val) {
  this->is_kicking = val;
}

void Player::__set_dist_from_ball(const double val) {
  this->dist_from_ball = val;
}

void Player::__set_angle_from_ball(const double val) {
  this->angle_from_ball = val;
}

void Player::__set_ball_reach_steps(const int32_t val) {
  this->ball_reach_steps = val;
}

void Player::__set_is_tackling(const bool val) {
  this->is_tackling = val;
}

void Player::__set_type_id(const int32_t val) {
  this->type_id = val;
}
std::ostream& operator<<(std::ostream& out, const Player& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Player::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_position.read(iprot);
          this->__isset.seen_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->heard_position.read(iprot);
          this->__isset.heard_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->velocity.read(iprot);
          this->__isset.velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_velocity.read(iprot);
          this->__isset.seen_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_count);
          this->__isset.pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_pos_count);
          this->__isset.seen_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heard_pos_count);
          this->__isset.heard_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vel_count);
          this->__isset.vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_vel_count);
          this->__isset.seen_vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ghost_count);
          this->__isset.ghost_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_from_self);
          this->__isset.dist_from_self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_from_self);
          this->__isset.angle_from_self = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->side = static_cast<Side::type>(ecast11);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number_count);
          this->__isset.uniform_number_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_goalie);
          this->__isset.is_goalie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->body_direction_count);
          this->__isset.body_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->face_direction);
          this->__isset.face_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->face_direction_count);
          this->__isset.face_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->point_to_direction);
          this->__isset.point_to_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->point_to_direction_count);
          this->__isset.point_to_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_kicking);
          this->__isset.is_kicking = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_from_ball);
          this->__isset.dist_from_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_from_ball);
          this->__isset.angle_from_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ball_reach_steps);
          this->__isset.ball_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_tackling);
          this->__isset.is_tackling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Player::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Player");

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->seen_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->heard_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("velocity", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_velocity", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->seen_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_pos_count", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->seen_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_pos_count", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->heard_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vel_count", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_vel_count", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->seen_vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ghost_count", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ghost_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_from_self", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->dist_from_self);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle_from_self", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->angle_from_self);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number_count", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->uniform_number_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_goalie", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->is_goalie);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction_count", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->body_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("face_direction", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->face_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("face_direction_count", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->face_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_direction", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->point_to_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_direction_count", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->point_to_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_kicking", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->is_kicking);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_from_ball", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->dist_from_ball);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle_from_ball", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->angle_from_ball);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_reach_steps", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->ball_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_tackling", ::apache::thrift::protocol::T_BOOL, 29);
  xfer += oprot->writeBool(this->is_tackling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Player &a, Player &b) {
  using ::std::swap;
  swap(a.position, b.position);
  swap(a.seen_position, b.seen_position);
  swap(a.heard_position, b.heard_position);
  swap(a.velocity, b.velocity);
  swap(a.seen_velocity, b.seen_velocity);
  swap(a.pos_count, b.pos_count);
  swap(a.seen_pos_count, b.seen_pos_count);
  swap(a.heard_pos_count, b.heard_pos_count);
  swap(a.vel_count, b.vel_count);
  swap(a.seen_vel_count, b.seen_vel_count);
  swap(a.ghost_count, b.ghost_count);
  swap(a.dist_from_self, b.dist_from_self);
  swap(a.angle_from_self, b.angle_from_self);
  swap(a.id, b.id);
  swap(a.side, b.side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.uniform_number_count, b.uniform_number_count);
  swap(a.is_goalie, b.is_goalie);
  swap(a.body_direction, b.body_direction);
  swap(a.body_direction_count, b.body_direction_count);
  swap(a.face_direction, b.face_direction);
  swap(a.face_direction_count, b.face_direction_count);
  swap(a.point_to_direction, b.point_to_direction);
  swap(a.point_to_direction_count, b.point_to_direction_count);
  swap(a.is_kicking, b.is_kicking);
  swap(a.dist_from_ball, b.dist_from_ball);
  swap(a.angle_from_ball, b.angle_from_ball);
  swap(a.ball_reach_steps, b.ball_reach_steps);
  swap(a.is_tackling, b.is_tackling);
  swap(a.type_id, b.type_id);
  swap(a.__isset, b.__isset);
}

Player::Player(const Player& other12) noexcept {
  position = other12.position;
  seen_position = other12.seen_position;
  heard_position = other12.heard_position;
  velocity = other12.velocity;
  seen_velocity = other12.seen_velocity;
  pos_count = other12.pos_count;
  seen_pos_count = other12.seen_pos_count;
  heard_pos_count = other12.heard_pos_count;
  vel_count = other12.vel_count;
  seen_vel_count = other12.seen_vel_count;
  ghost_count = other12.ghost_count;
  dist_from_self = other12.dist_from_self;
  angle_from_self = other12.angle_from_self;
  id = other12.id;
  side = other12.side;
  uniform_number = other12.uniform_number;
  uniform_number_count = other12.uniform_number_count;
  is_goalie = other12.is_goalie;
  body_direction = other12.body_direction;
  body_direction_count = other12.body_direction_count;
  face_direction = other12.face_direction;
  face_direction_count = other12.face_direction_count;
  point_to_direction = other12.point_to_direction;
  point_to_direction_count = other12.point_to_direction_count;
  is_kicking = other12.is_kicking;
  dist_from_ball = other12.dist_from_ball;
  angle_from_ball = other12.angle_from_ball;
  ball_reach_steps = other12.ball_reach_steps;
  is_tackling = other12.is_tackling;
  type_id = other12.type_id;
  __isset = other12.__isset;
}
Player& Player::operator=(const Player& other13) noexcept {
  position = other13.position;
  seen_position = other13.seen_position;
  heard_position = other13.heard_position;
  velocity = other13.velocity;
  seen_velocity = other13.seen_velocity;
  pos_count = other13.pos_count;
  seen_pos_count = other13.seen_pos_count;
  heard_pos_count = other13.heard_pos_count;
  vel_count = other13.vel_count;
  seen_vel_count = other13.seen_vel_count;
  ghost_count = other13.ghost_count;
  dist_from_self = other13.dist_from_self;
  angle_from_self = other13.angle_from_self;
  id = other13.id;
  side = other13.side;
  uniform_number = other13.uniform_number;
  uniform_number_count = other13.uniform_number_count;
  is_goalie = other13.is_goalie;
  body_direction = other13.body_direction;
  body_direction_count = other13.body_direction_count;
  face_direction = other13.face_direction;
  face_direction_count = other13.face_direction_count;
  point_to_direction = other13.point_to_direction;
  point_to_direction_count = other13.point_to_direction_count;
  is_kicking = other13.is_kicking;
  dist_from_ball = other13.dist_from_ball;
  angle_from_ball = other13.angle_from_ball;
  ball_reach_steps = other13.ball_reach_steps;
  is_tackling = other13.is_tackling;
  type_id = other13.type_id;
  __isset = other13.__isset;
  return *this;
}
void Player::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Player(";
  out << "position=" << to_string(position);
  out << ", " << "seen_position=" << to_string(seen_position);
  out << ", " << "heard_position=" << to_string(heard_position);
  out << ", " << "velocity=" << to_string(velocity);
  out << ", " << "seen_velocity=" << to_string(seen_velocity);
  out << ", " << "pos_count=" << to_string(pos_count);
  out << ", " << "seen_pos_count=" << to_string(seen_pos_count);
  out << ", " << "heard_pos_count=" << to_string(heard_pos_count);
  out << ", " << "vel_count=" << to_string(vel_count);
  out << ", " << "seen_vel_count=" << to_string(seen_vel_count);
  out << ", " << "ghost_count=" << to_string(ghost_count);
  out << ", " << "dist_from_self=" << to_string(dist_from_self);
  out << ", " << "angle_from_self=" << to_string(angle_from_self);
  out << ", " << "id=" << to_string(id);
  out << ", " << "side=" << to_string(side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "uniform_number_count=" << to_string(uniform_number_count);
  out << ", " << "is_goalie=" << to_string(is_goalie);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ", " << "body_direction_count=" << to_string(body_direction_count);
  out << ", " << "face_direction=" << to_string(face_direction);
  out << ", " << "face_direction_count=" << to_string(face_direction_count);
  out << ", " << "point_to_direction=" << to_string(point_to_direction);
  out << ", " << "point_to_direction_count=" << to_string(point_to_direction_count);
  out << ", " << "is_kicking=" << to_string(is_kicking);
  out << ", " << "dist_from_ball=" << to_string(dist_from_ball);
  out << ", " << "angle_from_ball=" << to_string(angle_from_ball);
  out << ", " << "ball_reach_steps=" << to_string(ball_reach_steps);
  out << ", " << "is_tackling=" << to_string(is_tackling);
  out << ", " << "type_id=" << to_string(type_id);
  out << ")";
}


Self::~Self() noexcept {
}


void Self::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void Self::__set_seen_position(const RpcVector2D& val) {
  this->seen_position = val;
}

void Self::__set_heard_position(const RpcVector2D& val) {
  this->heard_position = val;
}

void Self::__set_velocity(const RpcVector2D& val) {
  this->velocity = val;
}

void Self::__set_seen_velocity(const RpcVector2D& val) {
  this->seen_velocity = val;
}

void Self::__set_pos_count(const int32_t val) {
  this->pos_count = val;
}

void Self::__set_seen_pos_count(const int32_t val) {
  this->seen_pos_count = val;
}

void Self::__set_heard_pos_count(const int32_t val) {
  this->heard_pos_count = val;
}

void Self::__set_vel_count(const int32_t val) {
  this->vel_count = val;
}

void Self::__set_seen_vel_count(const int32_t val) {
  this->seen_vel_count = val;
}

void Self::__set_ghost_count(const int32_t val) {
  this->ghost_count = val;
}

void Self::__set_id(const int32_t val) {
  this->id = val;
}

void Self::__set_side(const Side::type val) {
  this->side = val;
}

void Self::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void Self::__set_uniform_number_count(const int32_t val) {
  this->uniform_number_count = val;
}

void Self::__set_is_goalie(const bool val) {
  this->is_goalie = val;
}

void Self::__set_body_direction(const double val) {
  this->body_direction = val;
}

void Self::__set_body_direction_count(const int32_t val) {
  this->body_direction_count = val;
}

void Self::__set_face_direction(const double val) {
  this->face_direction = val;
}

void Self::__set_face_direction_count(const int32_t val) {
  this->face_direction_count = val;
}

void Self::__set_point_to_direction(const double val) {
  this->point_to_direction = val;
}

void Self::__set_point_to_direction_count(const int32_t val) {
  this->point_to_direction_count = val;
}

void Self::__set_is_kicking(const bool val) {
  this->is_kicking = val;
}

void Self::__set_dist_from_ball(const double val) {
  this->dist_from_ball = val;
}

void Self::__set_angle_from_ball(const double val) {
  this->angle_from_ball = val;
}

void Self::__set_ball_reach_steps(const int32_t val) {
  this->ball_reach_steps = val;
}

void Self::__set_is_tackling(const bool val) {
  this->is_tackling = val;
}

void Self::__set_relative_neck_direction(const double val) {
  this->relative_neck_direction = val;
}

void Self::__set_stamina(const double val) {
  this->stamina = val;
}

void Self::__set_is_kickable(const bool val) {
  this->is_kickable = val;
}

void Self::__set_catch_probability(const double val) {
  this->catch_probability = val;
}

void Self::__set_tackle_probability(const double val) {
  this->tackle_probability = val;
}

void Self::__set_foul_probability(const double val) {
  this->foul_probability = val;
}

void Self::__set_view_width(const ViewWidth::type val) {
  this->view_width = val;
}

void Self::__set_type_id(const int32_t val) {
  this->type_id = val;
}

void Self::__set_kick_rate(const double val) {
  this->kick_rate = val;
}

void Self::__set_recovery(const double val) {
  this->recovery = val;
}

void Self::__set_stamina_capacity(const double val) {
  this->stamina_capacity = val;
}

void Self::__set_card(const CardType::type val) {
  this->card = val;
}

void Self::__set_catch_time(const int32_t val) {
  this->catch_time = val;
}
std::ostream& operator<<(std::ostream& out, const Self& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Self::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_position.read(iprot);
          this->__isset.seen_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->heard_position.read(iprot);
          this->__isset.heard_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->velocity.read(iprot);
          this->__isset.velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seen_velocity.read(iprot);
          this->__isset.seen_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pos_count);
          this->__isset.pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_pos_count);
          this->__isset.seen_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heard_pos_count);
          this->__isset.heard_pos_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vel_count);
          this->__isset.vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seen_vel_count);
          this->__isset.seen_vel_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ghost_count);
          this->__isset.ghost_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->side = static_cast<Side::type>(ecast14);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number_count);
          this->__isset.uniform_number_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_goalie);
          this->__isset.is_goalie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->body_direction_count);
          this->__isset.body_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->face_direction);
          this->__isset.face_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->face_direction_count);
          this->__isset.face_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->point_to_direction);
          this->__isset.point_to_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->point_to_direction_count);
          this->__isset.point_to_direction_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_kicking);
          this->__isset.is_kicking = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_from_ball);
          this->__isset.dist_from_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_from_ball);
          this->__isset.angle_from_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ball_reach_steps);
          this->__isset.ball_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_tackling);
          this->__isset.is_tackling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relative_neck_direction);
          this->__isset.relative_neck_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina);
          this->__isset.stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_kickable);
          this->__isset.is_kickable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catch_probability);
          this->__isset.catch_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_probability);
          this->__isset.tackle_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->foul_probability);
          this->__isset.foul_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->view_width = static_cast<ViewWidth::type>(ecast15);
          this->__isset.view_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rate);
          this->__isset.kick_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recovery);
          this->__isset.recovery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_capacity);
          this->__isset.stamina_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->card = static_cast<CardType::type>(ecast16);
          this->__isset.card = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->catch_time);
          this->__isset.catch_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Self::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Self");

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->seen_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->heard_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("velocity", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_velocity", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->seen_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pos_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_pos_count", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->seen_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heard_pos_count", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->heard_pos_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vel_count", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seen_vel_count", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->seen_vel_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ghost_count", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ghost_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number_count", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->uniform_number_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_goalie", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->is_goalie);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction_count", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->body_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("face_direction", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->face_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("face_direction_count", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->face_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_direction", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->point_to_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_direction_count", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->point_to_direction_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_kicking", ::apache::thrift::protocol::T_BOOL, 23);
  xfer += oprot->writeBool(this->is_kicking);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_from_ball", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->dist_from_ball);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle_from_ball", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->angle_from_ball);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_reach_steps", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->ball_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_tackling", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->is_tackling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_neck_direction", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->relative_neck_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_kickable", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->is_kickable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_probability", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->catch_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_probability", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->tackle_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_probability", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->foul_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("view_width", ::apache::thrift::protocol::T_I32, 34);
  xfer += oprot->writeI32(static_cast<int32_t>(this->view_width));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rate", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->kick_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recovery", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->recovery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_capacity", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->stamina_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("card", ::apache::thrift::protocol::T_I32, 39);
  xfer += oprot->writeI32(static_cast<int32_t>(this->card));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_time", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->catch_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Self &a, Self &b) {
  using ::std::swap;
  swap(a.position, b.position);
  swap(a.seen_position, b.seen_position);
  swap(a.heard_position, b.heard_position);
  swap(a.velocity, b.velocity);
  swap(a.seen_velocity, b.seen_velocity);
  swap(a.pos_count, b.pos_count);
  swap(a.seen_pos_count, b.seen_pos_count);
  swap(a.heard_pos_count, b.heard_pos_count);
  swap(a.vel_count, b.vel_count);
  swap(a.seen_vel_count, b.seen_vel_count);
  swap(a.ghost_count, b.ghost_count);
  swap(a.id, b.id);
  swap(a.side, b.side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.uniform_number_count, b.uniform_number_count);
  swap(a.is_goalie, b.is_goalie);
  swap(a.body_direction, b.body_direction);
  swap(a.body_direction_count, b.body_direction_count);
  swap(a.face_direction, b.face_direction);
  swap(a.face_direction_count, b.face_direction_count);
  swap(a.point_to_direction, b.point_to_direction);
  swap(a.point_to_direction_count, b.point_to_direction_count);
  swap(a.is_kicking, b.is_kicking);
  swap(a.dist_from_ball, b.dist_from_ball);
  swap(a.angle_from_ball, b.angle_from_ball);
  swap(a.ball_reach_steps, b.ball_reach_steps);
  swap(a.is_tackling, b.is_tackling);
  swap(a.relative_neck_direction, b.relative_neck_direction);
  swap(a.stamina, b.stamina);
  swap(a.is_kickable, b.is_kickable);
  swap(a.catch_probability, b.catch_probability);
  swap(a.tackle_probability, b.tackle_probability);
  swap(a.foul_probability, b.foul_probability);
  swap(a.view_width, b.view_width);
  swap(a.type_id, b.type_id);
  swap(a.kick_rate, b.kick_rate);
  swap(a.recovery, b.recovery);
  swap(a.stamina_capacity, b.stamina_capacity);
  swap(a.card, b.card);
  swap(a.catch_time, b.catch_time);
  swap(a.__isset, b.__isset);
}

Self::Self(const Self& other17) noexcept {
  position = other17.position;
  seen_position = other17.seen_position;
  heard_position = other17.heard_position;
  velocity = other17.velocity;
  seen_velocity = other17.seen_velocity;
  pos_count = other17.pos_count;
  seen_pos_count = other17.seen_pos_count;
  heard_pos_count = other17.heard_pos_count;
  vel_count = other17.vel_count;
  seen_vel_count = other17.seen_vel_count;
  ghost_count = other17.ghost_count;
  id = other17.id;
  side = other17.side;
  uniform_number = other17.uniform_number;
  uniform_number_count = other17.uniform_number_count;
  is_goalie = other17.is_goalie;
  body_direction = other17.body_direction;
  body_direction_count = other17.body_direction_count;
  face_direction = other17.face_direction;
  face_direction_count = other17.face_direction_count;
  point_to_direction = other17.point_to_direction;
  point_to_direction_count = other17.point_to_direction_count;
  is_kicking = other17.is_kicking;
  dist_from_ball = other17.dist_from_ball;
  angle_from_ball = other17.angle_from_ball;
  ball_reach_steps = other17.ball_reach_steps;
  is_tackling = other17.is_tackling;
  relative_neck_direction = other17.relative_neck_direction;
  stamina = other17.stamina;
  is_kickable = other17.is_kickable;
  catch_probability = other17.catch_probability;
  tackle_probability = other17.tackle_probability;
  foul_probability = other17.foul_probability;
  view_width = other17.view_width;
  type_id = other17.type_id;
  kick_rate = other17.kick_rate;
  recovery = other17.recovery;
  stamina_capacity = other17.stamina_capacity;
  card = other17.card;
  catch_time = other17.catch_time;
  __isset = other17.__isset;
}
Self& Self::operator=(const Self& other18) noexcept {
  position = other18.position;
  seen_position = other18.seen_position;
  heard_position = other18.heard_position;
  velocity = other18.velocity;
  seen_velocity = other18.seen_velocity;
  pos_count = other18.pos_count;
  seen_pos_count = other18.seen_pos_count;
  heard_pos_count = other18.heard_pos_count;
  vel_count = other18.vel_count;
  seen_vel_count = other18.seen_vel_count;
  ghost_count = other18.ghost_count;
  id = other18.id;
  side = other18.side;
  uniform_number = other18.uniform_number;
  uniform_number_count = other18.uniform_number_count;
  is_goalie = other18.is_goalie;
  body_direction = other18.body_direction;
  body_direction_count = other18.body_direction_count;
  face_direction = other18.face_direction;
  face_direction_count = other18.face_direction_count;
  point_to_direction = other18.point_to_direction;
  point_to_direction_count = other18.point_to_direction_count;
  is_kicking = other18.is_kicking;
  dist_from_ball = other18.dist_from_ball;
  angle_from_ball = other18.angle_from_ball;
  ball_reach_steps = other18.ball_reach_steps;
  is_tackling = other18.is_tackling;
  relative_neck_direction = other18.relative_neck_direction;
  stamina = other18.stamina;
  is_kickable = other18.is_kickable;
  catch_probability = other18.catch_probability;
  tackle_probability = other18.tackle_probability;
  foul_probability = other18.foul_probability;
  view_width = other18.view_width;
  type_id = other18.type_id;
  kick_rate = other18.kick_rate;
  recovery = other18.recovery;
  stamina_capacity = other18.stamina_capacity;
  card = other18.card;
  catch_time = other18.catch_time;
  __isset = other18.__isset;
  return *this;
}
void Self::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Self(";
  out << "position=" << to_string(position);
  out << ", " << "seen_position=" << to_string(seen_position);
  out << ", " << "heard_position=" << to_string(heard_position);
  out << ", " << "velocity=" << to_string(velocity);
  out << ", " << "seen_velocity=" << to_string(seen_velocity);
  out << ", " << "pos_count=" << to_string(pos_count);
  out << ", " << "seen_pos_count=" << to_string(seen_pos_count);
  out << ", " << "heard_pos_count=" << to_string(heard_pos_count);
  out << ", " << "vel_count=" << to_string(vel_count);
  out << ", " << "seen_vel_count=" << to_string(seen_vel_count);
  out << ", " << "ghost_count=" << to_string(ghost_count);
  out << ", " << "id=" << to_string(id);
  out << ", " << "side=" << to_string(side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "uniform_number_count=" << to_string(uniform_number_count);
  out << ", " << "is_goalie=" << to_string(is_goalie);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ", " << "body_direction_count=" << to_string(body_direction_count);
  out << ", " << "face_direction=" << to_string(face_direction);
  out << ", " << "face_direction_count=" << to_string(face_direction_count);
  out << ", " << "point_to_direction=" << to_string(point_to_direction);
  out << ", " << "point_to_direction_count=" << to_string(point_to_direction_count);
  out << ", " << "is_kicking=" << to_string(is_kicking);
  out << ", " << "dist_from_ball=" << to_string(dist_from_ball);
  out << ", " << "angle_from_ball=" << to_string(angle_from_ball);
  out << ", " << "ball_reach_steps=" << to_string(ball_reach_steps);
  out << ", " << "is_tackling=" << to_string(is_tackling);
  out << ", " << "relative_neck_direction=" << to_string(relative_neck_direction);
  out << ", " << "stamina=" << to_string(stamina);
  out << ", " << "is_kickable=" << to_string(is_kickable);
  out << ", " << "catch_probability=" << to_string(catch_probability);
  out << ", " << "tackle_probability=" << to_string(tackle_probability);
  out << ", " << "foul_probability=" << to_string(foul_probability);
  out << ", " << "view_width=" << to_string(view_width);
  out << ", " << "type_id=" << to_string(type_id);
  out << ", " << "kick_rate=" << to_string(kick_rate);
  out << ", " << "recovery=" << to_string(recovery);
  out << ", " << "stamina_capacity=" << to_string(stamina_capacity);
  out << ", " << "card=" << to_string(card);
  out << ", " << "catch_time=" << to_string(catch_time);
  out << ")";
}


InterceptInfo::~InterceptInfo() noexcept {
}


void InterceptInfo::__set_action_type(const InterceptActionType::type val) {
  this->action_type = val;
}

void InterceptInfo::__set_turn_steps(const int32_t val) {
  this->turn_steps = val;
}

void InterceptInfo::__set_turn_angle(const double val) {
  this->turn_angle = val;
}

void InterceptInfo::__set_dash_steps(const int32_t val) {
  this->dash_steps = val;
}

void InterceptInfo::__set_dash_power(const double val) {
  this->dash_power = val;
}

void InterceptInfo::__set_dash_dir(const double val) {
  this->dash_dir = val;
}

void InterceptInfo::__set_final_self_position(const RpcVector2D& val) {
  this->final_self_position = val;
}

void InterceptInfo::__set_final_ball_dist(const double val) {
  this->final_ball_dist = val;
}

void InterceptInfo::__set_final_stamina(const double val) {
  this->final_stamina = val;
}

void InterceptInfo::__set_value(const double val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const InterceptInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InterceptInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->action_type = static_cast<InterceptActionType::type>(ecast19);
          this->__isset.action_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->turn_steps);
          this->__isset.turn_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->turn_angle);
          this->__isset.turn_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dash_steps);
          this->__isset.dash_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power);
          this->__isset.dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_dir);
          this->__isset.dash_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->final_self_position.read(iprot);
          this->__isset.final_self_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->final_ball_dist);
          this->__isset.final_ball_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->final_stamina);
          this->__isset.final_stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InterceptInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InterceptInfo");

  xfer += oprot->writeFieldBegin("action_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->action_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("turn_steps", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->turn_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("turn_angle", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->turn_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_steps", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dash_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_dir", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->dash_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("final_self_position", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->final_self_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("final_ball_dist", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->final_ball_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("final_stamina", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->final_stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterceptInfo &a, InterceptInfo &b) {
  using ::std::swap;
  swap(a.action_type, b.action_type);
  swap(a.turn_steps, b.turn_steps);
  swap(a.turn_angle, b.turn_angle);
  swap(a.dash_steps, b.dash_steps);
  swap(a.dash_power, b.dash_power);
  swap(a.dash_dir, b.dash_dir);
  swap(a.final_self_position, b.final_self_position);
  swap(a.final_ball_dist, b.final_ball_dist);
  swap(a.final_stamina, b.final_stamina);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

InterceptInfo::InterceptInfo(const InterceptInfo& other20) noexcept {
  action_type = other20.action_type;
  turn_steps = other20.turn_steps;
  turn_angle = other20.turn_angle;
  dash_steps = other20.dash_steps;
  dash_power = other20.dash_power;
  dash_dir = other20.dash_dir;
  final_self_position = other20.final_self_position;
  final_ball_dist = other20.final_ball_dist;
  final_stamina = other20.final_stamina;
  value = other20.value;
  __isset = other20.__isset;
}
InterceptInfo& InterceptInfo::operator=(const InterceptInfo& other21) noexcept {
  action_type = other21.action_type;
  turn_steps = other21.turn_steps;
  turn_angle = other21.turn_angle;
  dash_steps = other21.dash_steps;
  dash_power = other21.dash_power;
  dash_dir = other21.dash_dir;
  final_self_position = other21.final_self_position;
  final_ball_dist = other21.final_ball_dist;
  final_stamina = other21.final_stamina;
  value = other21.value;
  __isset = other21.__isset;
  return *this;
}
void InterceptInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InterceptInfo(";
  out << "action_type=" << to_string(action_type);
  out << ", " << "turn_steps=" << to_string(turn_steps);
  out << ", " << "turn_angle=" << to_string(turn_angle);
  out << ", " << "dash_steps=" << to_string(dash_steps);
  out << ", " << "dash_power=" << to_string(dash_power);
  out << ", " << "dash_dir=" << to_string(dash_dir);
  out << ", " << "final_self_position=" << to_string(final_self_position);
  out << ", " << "final_ball_dist=" << to_string(final_ball_dist);
  out << ", " << "final_stamina=" << to_string(final_stamina);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


InterceptTable::~InterceptTable() noexcept {
}


void InterceptTable::__set_self_reach_steps(const int32_t val) {
  this->self_reach_steps = val;
}

void InterceptTable::__set_first_teammate_reach_steps(const int32_t val) {
  this->first_teammate_reach_steps = val;
}

void InterceptTable::__set_second_teammate_reach_steps(const int32_t val) {
  this->second_teammate_reach_steps = val;
}

void InterceptTable::__set_first_opponent_reach_steps(const int32_t val) {
  this->first_opponent_reach_steps = val;
}

void InterceptTable::__set_second_opponent_reach_steps(const int32_t val) {
  this->second_opponent_reach_steps = val;
}

void InterceptTable::__set_first_teammate_id(const int32_t val) {
  this->first_teammate_id = val;
}

void InterceptTable::__set_second_teammate_id(const int32_t val) {
  this->second_teammate_id = val;
}

void InterceptTable::__set_first_opponent_id(const int32_t val) {
  this->first_opponent_id = val;
}

void InterceptTable::__set_second_opponent_id(const int32_t val) {
  this->second_opponent_id = val;
}

void InterceptTable::__set_self_intercept_info(const std::vector<InterceptInfo> & val) {
  this->self_intercept_info = val;
}
std::ostream& operator<<(std::ostream& out, const InterceptTable& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InterceptTable::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->self_reach_steps);
          this->__isset.self_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_teammate_reach_steps);
          this->__isset.first_teammate_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_teammate_reach_steps);
          this->__isset.second_teammate_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_opponent_reach_steps);
          this->__isset.first_opponent_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_opponent_reach_steps);
          this->__isset.second_opponent_reach_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_teammate_id);
          this->__isset.first_teammate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_teammate_id);
          this->__isset.second_teammate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_opponent_id);
          this->__isset.first_opponent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_opponent_id);
          this->__isset.second_opponent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->self_intercept_info.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->self_intercept_info.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->self_intercept_info[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.self_intercept_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InterceptTable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InterceptTable");

  xfer += oprot->writeFieldBegin("self_reach_steps", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->self_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_teammate_reach_steps", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->first_teammate_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_teammate_reach_steps", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->second_teammate_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_opponent_reach_steps", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->first_opponent_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_opponent_reach_steps", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->second_opponent_reach_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_teammate_id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->first_teammate_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_teammate_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->second_teammate_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_opponent_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->first_opponent_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_opponent_id", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->second_opponent_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("self_intercept_info", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->self_intercept_info.size()));
    std::vector<InterceptInfo> ::const_iterator _iter27;
    for (_iter27 = this->self_intercept_info.begin(); _iter27 != this->self_intercept_info.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterceptTable &a, InterceptTable &b) {
  using ::std::swap;
  swap(a.self_reach_steps, b.self_reach_steps);
  swap(a.first_teammate_reach_steps, b.first_teammate_reach_steps);
  swap(a.second_teammate_reach_steps, b.second_teammate_reach_steps);
  swap(a.first_opponent_reach_steps, b.first_opponent_reach_steps);
  swap(a.second_opponent_reach_steps, b.second_opponent_reach_steps);
  swap(a.first_teammate_id, b.first_teammate_id);
  swap(a.second_teammate_id, b.second_teammate_id);
  swap(a.first_opponent_id, b.first_opponent_id);
  swap(a.second_opponent_id, b.second_opponent_id);
  swap(a.self_intercept_info, b.self_intercept_info);
  swap(a.__isset, b.__isset);
}

InterceptTable::InterceptTable(const InterceptTable& other28) {
  self_reach_steps = other28.self_reach_steps;
  first_teammate_reach_steps = other28.first_teammate_reach_steps;
  second_teammate_reach_steps = other28.second_teammate_reach_steps;
  first_opponent_reach_steps = other28.first_opponent_reach_steps;
  second_opponent_reach_steps = other28.second_opponent_reach_steps;
  first_teammate_id = other28.first_teammate_id;
  second_teammate_id = other28.second_teammate_id;
  first_opponent_id = other28.first_opponent_id;
  second_opponent_id = other28.second_opponent_id;
  self_intercept_info = other28.self_intercept_info;
  __isset = other28.__isset;
}
InterceptTable& InterceptTable::operator=(const InterceptTable& other29) {
  self_reach_steps = other29.self_reach_steps;
  first_teammate_reach_steps = other29.first_teammate_reach_steps;
  second_teammate_reach_steps = other29.second_teammate_reach_steps;
  first_opponent_reach_steps = other29.first_opponent_reach_steps;
  second_opponent_reach_steps = other29.second_opponent_reach_steps;
  first_teammate_id = other29.first_teammate_id;
  second_teammate_id = other29.second_teammate_id;
  first_opponent_id = other29.first_opponent_id;
  second_opponent_id = other29.second_opponent_id;
  self_intercept_info = other29.self_intercept_info;
  __isset = other29.__isset;
  return *this;
}
void InterceptTable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InterceptTable(";
  out << "self_reach_steps=" << to_string(self_reach_steps);
  out << ", " << "first_teammate_reach_steps=" << to_string(first_teammate_reach_steps);
  out << ", " << "second_teammate_reach_steps=" << to_string(second_teammate_reach_steps);
  out << ", " << "first_opponent_reach_steps=" << to_string(first_opponent_reach_steps);
  out << ", " << "second_opponent_reach_steps=" << to_string(second_opponent_reach_steps);
  out << ", " << "first_teammate_id=" << to_string(first_teammate_id);
  out << ", " << "second_teammate_id=" << to_string(second_teammate_id);
  out << ", " << "first_opponent_id=" << to_string(first_opponent_id);
  out << ", " << "second_opponent_id=" << to_string(second_opponent_id);
  out << ", " << "self_intercept_info=" << to_string(self_intercept_info);
  out << ")";
}


WorldModel::~WorldModel() noexcept {
}


void WorldModel::__set_intercept_table(const InterceptTable& val) {
  this->intercept_table = val;
}

void WorldModel::__set_our_team_name(const std::string& val) {
  this->our_team_name = val;
}

void WorldModel::__set_their_team_name(const std::string& val) {
  this->their_team_name = val;
}

void WorldModel::__set_our_side(const Side::type val) {
  this->our_side = val;
}

void WorldModel::__set_last_set_play_start_time(const int32_t val) {
  this->last_set_play_start_time = val;
}

void WorldModel::__set_myself(const Self& val) {
  this->myself = val;
}

void WorldModel::__set_ball(const Ball& val) {
  this->ball = val;
}

void WorldModel::__set_teammates(const std::vector<Player> & val) {
  this->teammates = val;
}

void WorldModel::__set_opponents(const std::vector<Player> & val) {
  this->opponents = val;
}

void WorldModel::__set_unknowns(const std::vector<Player> & val) {
  this->unknowns = val;
}

void WorldModel::__set_our_players_dict(const std::map<int32_t, Player> & val) {
  this->our_players_dict = val;
}

void WorldModel::__set_their_players_dict(const std::map<int32_t, Player> & val) {
  this->their_players_dict = val;
}

void WorldModel::__set_our_goalie_uniform_number(const int32_t val) {
  this->our_goalie_uniform_number = val;
}

void WorldModel::__set_their_goalie_uniform_number(const int32_t val) {
  this->their_goalie_uniform_number = val;
}

void WorldModel::__set_offside_line_x(const double val) {
  this->offside_line_x = val;
}

void WorldModel::__set_offside_line_x_count(const int32_t val) {
  this->offside_line_x_count = val;
}

void WorldModel::__set_kickable_teammate_id(const int32_t val) {
  this->kickable_teammate_id = val;
}

void WorldModel::__set_kickable_opponent_id(const int32_t val) {
  this->kickable_opponent_id = val;
}

void WorldModel::__set_last_kick_side(const Side::type val) {
  this->last_kick_side = val;
}

void WorldModel::__set_last_kicker_uniform_number(const int32_t val) {
  this->last_kicker_uniform_number = val;
}

void WorldModel::__set_cycle(const int32_t val) {
  this->cycle = val;
}

void WorldModel::__set_game_mode_type(const GameModeType::type val) {
  this->game_mode_type = val;
}

void WorldModel::__set_left_team_score(const int32_t val) {
  this->left_team_score = val;
}

void WorldModel::__set_right_team_score(const int32_t val) {
  this->right_team_score = val;
}

void WorldModel::__set_is_our_set_play(const bool val) {
  this->is_our_set_play = val;
}

void WorldModel::__set_is_their_set_play(const bool val) {
  this->is_their_set_play = val;
}

void WorldModel::__set_stoped_cycle(const int32_t val) {
  this->stoped_cycle = val;
}

void WorldModel::__set_our_team_score(const int32_t val) {
  this->our_team_score = val;
}

void WorldModel::__set_their_team_score(const int32_t val) {
  this->their_team_score = val;
}

void WorldModel::__set_is_penalty_kick_mode(const bool val) {
  this->is_penalty_kick_mode = val;
}

void WorldModel::__set_helios_home_positions(const std::map<int32_t, RpcVector2D> & val) {
  this->helios_home_positions = val;
}

void WorldModel::__set_our_defense_line_x(const double val) {
  this->our_defense_line_x = val;
}

void WorldModel::__set_their_defense_line_x(const double val) {
  this->their_defense_line_x = val;
}

void WorldModel::__set_our_defense_player_line_x(const double val) {
  this->our_defense_player_line_x = val;
}

void WorldModel::__set_their_defense_player_line_x(const double val) {
  this->their_defense_player_line_x = val;
}
std::ostream& operator<<(std::ostream& out, const WorldModel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WorldModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->intercept_table.read(iprot);
          this->__isset.intercept_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->our_team_name);
          this->__isset.our_team_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->their_team_name);
          this->__isset.their_team_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast30;
          xfer += iprot->readI32(ecast30);
          this->our_side = static_cast<Side::type>(ecast30);
          this->__isset.our_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_set_play_start_time);
          this->__isset.last_set_play_start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myself.read(iprot);
          this->__isset.myself = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball.read(iprot);
          this->__isset.ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->teammates.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->teammates.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->teammates[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.teammates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opponents.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->opponents.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->opponents[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unknowns.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->unknowns.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += this->unknowns[_i45].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.unknowns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->our_players_dict.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _ktype47;
            ::apache::thrift::protocol::TType _vtype48;
            xfer += iprot->readMapBegin(_ktype47, _vtype48, _size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              int32_t _key51;
              xfer += iprot->readI32(_key51);
              Player& _val52 = this->our_players_dict[_key51];
              xfer += _val52.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.our_players_dict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->their_players_dict.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _ktype54;
            ::apache::thrift::protocol::TType _vtype55;
            xfer += iprot->readMapBegin(_ktype54, _vtype55, _size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              int32_t _key58;
              xfer += iprot->readI32(_key58);
              Player& _val59 = this->their_players_dict[_key58];
              xfer += _val59.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.their_players_dict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->our_goalie_uniform_number);
          this->__isset.our_goalie_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->their_goalie_uniform_number);
          this->__isset.their_goalie_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offside_line_x);
          this->__isset.offside_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offside_line_x_count);
          this->__isset.offside_line_x_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kickable_teammate_id);
          this->__isset.kickable_teammate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kickable_opponent_id);
          this->__isset.kickable_opponent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast60;
          xfer += iprot->readI32(ecast60);
          this->last_kick_side = static_cast<Side::type>(ecast60);
          this->__isset.last_kick_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->last_kicker_uniform_number);
          this->__isset.last_kicker_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycle);
          this->__isset.cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast61;
          xfer += iprot->readI32(ecast61);
          this->game_mode_type = static_cast<GameModeType::type>(ecast61);
          this->__isset.game_mode_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left_team_score);
          this->__isset.left_team_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right_team_score);
          this->__isset.right_team_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_our_set_play);
          this->__isset.is_our_set_play = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_their_set_play);
          this->__isset.is_their_set_play = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stoped_cycle);
          this->__isset.stoped_cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->our_team_score);
          this->__isset.our_team_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->their_team_score);
          this->__isset.their_team_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_penalty_kick_mode);
          this->__isset.is_penalty_kick_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->helios_home_positions.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _ktype63;
            ::apache::thrift::protocol::TType _vtype64;
            xfer += iprot->readMapBegin(_ktype63, _vtype64, _size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              int32_t _key67;
              xfer += iprot->readI32(_key67);
              RpcVector2D& _val68 = this->helios_home_positions[_key67];
              xfer += _val68.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.helios_home_positions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->our_defense_line_x);
          this->__isset.our_defense_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->their_defense_line_x);
          this->__isset.their_defense_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->our_defense_player_line_x);
          this->__isset.our_defense_player_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->their_defense_player_line_x);
          this->__isset.their_defense_player_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorldModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WorldModel");

  xfer += oprot->writeFieldBegin("intercept_table", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->intercept_table.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_team_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->our_team_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_team_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->their_team_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_side", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(static_cast<int32_t>(this->our_side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_set_play_start_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->last_set_play_start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myself", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->myself.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->ball.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("teammates", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->teammates.size()));
    std::vector<Player> ::const_iterator _iter69;
    for (_iter69 = this->teammates.begin(); _iter69 != this->teammates.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opponents", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opponents.size()));
    std::vector<Player> ::const_iterator _iter70;
    for (_iter70 = this->opponents.begin(); _iter70 != this->opponents.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unknowns", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->unknowns.size()));
    std::vector<Player> ::const_iterator _iter71;
    for (_iter71 = this->unknowns.begin(); _iter71 != this->unknowns.end(); ++_iter71)
    {
      xfer += (*_iter71).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_players_dict", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->our_players_dict.size()));
    std::map<int32_t, Player> ::const_iterator _iter72;
    for (_iter72 = this->our_players_dict.begin(); _iter72 != this->our_players_dict.end(); ++_iter72)
    {
      xfer += oprot->writeI32(_iter72->first);
      xfer += _iter72->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_players_dict", ::apache::thrift::protocol::T_MAP, 12);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->their_players_dict.size()));
    std::map<int32_t, Player> ::const_iterator _iter73;
    for (_iter73 = this->their_players_dict.begin(); _iter73 != this->their_players_dict.end(); ++_iter73)
    {
      xfer += oprot->writeI32(_iter73->first);
      xfer += _iter73->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_goalie_uniform_number", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->our_goalie_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_goalie_uniform_number", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->their_goalie_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offside_line_x", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->offside_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offside_line_x_count", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->offside_line_x_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_teammate_id", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->kickable_teammate_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_opponent_id", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->kickable_opponent_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_kick_side", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(static_cast<int32_t>(this->last_kick_side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_kicker_uniform_number", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->last_kicker_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cycle", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_mode_type", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(static_cast<int32_t>(this->game_mode_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_team_score", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->left_team_score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right_team_score", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->right_team_score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_our_set_play", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->is_our_set_play);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_their_set_play", ::apache::thrift::protocol::T_BOOL, 26);
  xfer += oprot->writeBool(this->is_their_set_play);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stoped_cycle", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32(this->stoped_cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_team_score", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32(this->our_team_score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_team_score", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->their_team_score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_penalty_kick_mode", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->is_penalty_kick_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("helios_home_positions", ::apache::thrift::protocol::T_MAP, 31);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->helios_home_positions.size()));
    std::map<int32_t, RpcVector2D> ::const_iterator _iter74;
    for (_iter74 = this->helios_home_positions.begin(); _iter74 != this->helios_home_positions.end(); ++_iter74)
    {
      xfer += oprot->writeI32(_iter74->first);
      xfer += _iter74->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_defense_line_x", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->our_defense_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_defense_line_x", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->their_defense_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_defense_player_line_x", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->our_defense_player_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_defense_player_line_x", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->their_defense_player_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorldModel &a, WorldModel &b) {
  using ::std::swap;
  swap(a.intercept_table, b.intercept_table);
  swap(a.our_team_name, b.our_team_name);
  swap(a.their_team_name, b.their_team_name);
  swap(a.our_side, b.our_side);
  swap(a.last_set_play_start_time, b.last_set_play_start_time);
  swap(a.myself, b.myself);
  swap(a.ball, b.ball);
  swap(a.teammates, b.teammates);
  swap(a.opponents, b.opponents);
  swap(a.unknowns, b.unknowns);
  swap(a.our_players_dict, b.our_players_dict);
  swap(a.their_players_dict, b.their_players_dict);
  swap(a.our_goalie_uniform_number, b.our_goalie_uniform_number);
  swap(a.their_goalie_uniform_number, b.their_goalie_uniform_number);
  swap(a.offside_line_x, b.offside_line_x);
  swap(a.offside_line_x_count, b.offside_line_x_count);
  swap(a.kickable_teammate_id, b.kickable_teammate_id);
  swap(a.kickable_opponent_id, b.kickable_opponent_id);
  swap(a.last_kick_side, b.last_kick_side);
  swap(a.last_kicker_uniform_number, b.last_kicker_uniform_number);
  swap(a.cycle, b.cycle);
  swap(a.game_mode_type, b.game_mode_type);
  swap(a.left_team_score, b.left_team_score);
  swap(a.right_team_score, b.right_team_score);
  swap(a.is_our_set_play, b.is_our_set_play);
  swap(a.is_their_set_play, b.is_their_set_play);
  swap(a.stoped_cycle, b.stoped_cycle);
  swap(a.our_team_score, b.our_team_score);
  swap(a.their_team_score, b.their_team_score);
  swap(a.is_penalty_kick_mode, b.is_penalty_kick_mode);
  swap(a.helios_home_positions, b.helios_home_positions);
  swap(a.our_defense_line_x, b.our_defense_line_x);
  swap(a.their_defense_line_x, b.their_defense_line_x);
  swap(a.our_defense_player_line_x, b.our_defense_player_line_x);
  swap(a.their_defense_player_line_x, b.their_defense_player_line_x);
  swap(a.__isset, b.__isset);
}

WorldModel::WorldModel(const WorldModel& other75) {
  intercept_table = other75.intercept_table;
  our_team_name = other75.our_team_name;
  their_team_name = other75.their_team_name;
  our_side = other75.our_side;
  last_set_play_start_time = other75.last_set_play_start_time;
  myself = other75.myself;
  ball = other75.ball;
  teammates = other75.teammates;
  opponents = other75.opponents;
  unknowns = other75.unknowns;
  our_players_dict = other75.our_players_dict;
  their_players_dict = other75.their_players_dict;
  our_goalie_uniform_number = other75.our_goalie_uniform_number;
  their_goalie_uniform_number = other75.their_goalie_uniform_number;
  offside_line_x = other75.offside_line_x;
  offside_line_x_count = other75.offside_line_x_count;
  kickable_teammate_id = other75.kickable_teammate_id;
  kickable_opponent_id = other75.kickable_opponent_id;
  last_kick_side = other75.last_kick_side;
  last_kicker_uniform_number = other75.last_kicker_uniform_number;
  cycle = other75.cycle;
  game_mode_type = other75.game_mode_type;
  left_team_score = other75.left_team_score;
  right_team_score = other75.right_team_score;
  is_our_set_play = other75.is_our_set_play;
  is_their_set_play = other75.is_their_set_play;
  stoped_cycle = other75.stoped_cycle;
  our_team_score = other75.our_team_score;
  their_team_score = other75.their_team_score;
  is_penalty_kick_mode = other75.is_penalty_kick_mode;
  helios_home_positions = other75.helios_home_positions;
  our_defense_line_x = other75.our_defense_line_x;
  their_defense_line_x = other75.their_defense_line_x;
  our_defense_player_line_x = other75.our_defense_player_line_x;
  their_defense_player_line_x = other75.their_defense_player_line_x;
  __isset = other75.__isset;
}
WorldModel& WorldModel::operator=(const WorldModel& other76) {
  intercept_table = other76.intercept_table;
  our_team_name = other76.our_team_name;
  their_team_name = other76.their_team_name;
  our_side = other76.our_side;
  last_set_play_start_time = other76.last_set_play_start_time;
  myself = other76.myself;
  ball = other76.ball;
  teammates = other76.teammates;
  opponents = other76.opponents;
  unknowns = other76.unknowns;
  our_players_dict = other76.our_players_dict;
  their_players_dict = other76.their_players_dict;
  our_goalie_uniform_number = other76.our_goalie_uniform_number;
  their_goalie_uniform_number = other76.their_goalie_uniform_number;
  offside_line_x = other76.offside_line_x;
  offside_line_x_count = other76.offside_line_x_count;
  kickable_teammate_id = other76.kickable_teammate_id;
  kickable_opponent_id = other76.kickable_opponent_id;
  last_kick_side = other76.last_kick_side;
  last_kicker_uniform_number = other76.last_kicker_uniform_number;
  cycle = other76.cycle;
  game_mode_type = other76.game_mode_type;
  left_team_score = other76.left_team_score;
  right_team_score = other76.right_team_score;
  is_our_set_play = other76.is_our_set_play;
  is_their_set_play = other76.is_their_set_play;
  stoped_cycle = other76.stoped_cycle;
  our_team_score = other76.our_team_score;
  their_team_score = other76.their_team_score;
  is_penalty_kick_mode = other76.is_penalty_kick_mode;
  helios_home_positions = other76.helios_home_positions;
  our_defense_line_x = other76.our_defense_line_x;
  their_defense_line_x = other76.their_defense_line_x;
  our_defense_player_line_x = other76.our_defense_player_line_x;
  their_defense_player_line_x = other76.their_defense_player_line_x;
  __isset = other76.__isset;
  return *this;
}
void WorldModel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WorldModel(";
  out << "intercept_table=" << to_string(intercept_table);
  out << ", " << "our_team_name=" << to_string(our_team_name);
  out << ", " << "their_team_name=" << to_string(their_team_name);
  out << ", " << "our_side=" << to_string(our_side);
  out << ", " << "last_set_play_start_time=" << to_string(last_set_play_start_time);
  out << ", " << "myself=" << to_string(myself);
  out << ", " << "ball=" << to_string(ball);
  out << ", " << "teammates=" << to_string(teammates);
  out << ", " << "opponents=" << to_string(opponents);
  out << ", " << "unknowns=" << to_string(unknowns);
  out << ", " << "our_players_dict=" << to_string(our_players_dict);
  out << ", " << "their_players_dict=" << to_string(their_players_dict);
  out << ", " << "our_goalie_uniform_number=" << to_string(our_goalie_uniform_number);
  out << ", " << "their_goalie_uniform_number=" << to_string(their_goalie_uniform_number);
  out << ", " << "offside_line_x=" << to_string(offside_line_x);
  out << ", " << "offside_line_x_count=" << to_string(offside_line_x_count);
  out << ", " << "kickable_teammate_id=" << to_string(kickable_teammate_id);
  out << ", " << "kickable_opponent_id=" << to_string(kickable_opponent_id);
  out << ", " << "last_kick_side=" << to_string(last_kick_side);
  out << ", " << "last_kicker_uniform_number=" << to_string(last_kicker_uniform_number);
  out << ", " << "cycle=" << to_string(cycle);
  out << ", " << "game_mode_type=" << to_string(game_mode_type);
  out << ", " << "left_team_score=" << to_string(left_team_score);
  out << ", " << "right_team_score=" << to_string(right_team_score);
  out << ", " << "is_our_set_play=" << to_string(is_our_set_play);
  out << ", " << "is_their_set_play=" << to_string(is_their_set_play);
  out << ", " << "stoped_cycle=" << to_string(stoped_cycle);
  out << ", " << "our_team_score=" << to_string(our_team_score);
  out << ", " << "their_team_score=" << to_string(their_team_score);
  out << ", " << "is_penalty_kick_mode=" << to_string(is_penalty_kick_mode);
  out << ", " << "helios_home_positions=" << to_string(helios_home_positions);
  out << ", " << "our_defense_line_x=" << to_string(our_defense_line_x);
  out << ", " << "their_defense_line_x=" << to_string(their_defense_line_x);
  out << ", " << "our_defense_player_line_x=" << to_string(our_defense_player_line_x);
  out << ", " << "their_defense_player_line_x=" << to_string(their_defense_player_line_x);
  out << ")";
}


State::~State() noexcept {
}


void State::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void State::__set_world_model(const WorldModel& val) {
  this->world_model = val;
}

void State::__set_full_world_model(const WorldModel& val) {
  this->full_world_model = val;
}

void State::__set_need_preprocess(const bool val) {
  this->need_preprocess = val;
}
std::ostream& operator<<(std::ostream& out, const State& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t State::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->world_model.read(iprot);
          this->__isset.world_model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->full_world_model.read(iprot);
          this->__isset.full_world_model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->need_preprocess);
          this->__isset.need_preprocess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t State::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("State");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("world_model", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->world_model.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("full_world_model", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->full_world_model.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("need_preprocess", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->need_preprocess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(State &a, State &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.world_model, b.world_model);
  swap(a.full_world_model, b.full_world_model);
  swap(a.need_preprocess, b.need_preprocess);
  swap(a.__isset, b.__isset);
}

State::State(const State& other77) {
  register_response = other77.register_response;
  world_model = other77.world_model;
  full_world_model = other77.full_world_model;
  need_preprocess = other77.need_preprocess;
  __isset = other77.__isset;
}
State& State::operator=(const State& other78) {
  register_response = other78.register_response;
  world_model = other78.world_model;
  full_world_model = other78.full_world_model;
  need_preprocess = other78.need_preprocess;
  __isset = other78.__isset;
  return *this;
}
void State::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "State(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "world_model=" << to_string(world_model);
  out << ", " << "full_world_model=" << to_string(full_world_model);
  out << ", " << "need_preprocess=" << to_string(need_preprocess);
  out << ")";
}


InitMessage::~InitMessage() noexcept {
}


void InitMessage::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void InitMessage::__set_debug_mode(const bool val) {
  this->debug_mode = val;
}
std::ostream& operator<<(std::ostream& out, const InitMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InitMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->debug_mode);
          this->__isset.debug_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InitMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InitMessage");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("debug_mode", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->debug_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InitMessage &a, InitMessage &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.debug_mode, b.debug_mode);
  swap(a.__isset, b.__isset);
}

InitMessage::InitMessage(const InitMessage& other79) {
  register_response = other79.register_response;
  debug_mode = other79.debug_mode;
  __isset = other79.__isset;
}
InitMessage& InitMessage::operator=(const InitMessage& other80) {
  register_response = other80.register_response;
  debug_mode = other80.debug_mode;
  __isset = other80.__isset;
  return *this;
}
void InitMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InitMessage(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "debug_mode=" << to_string(debug_mode);
  out << ")";
}


Dash::~Dash() noexcept {
}


void Dash::__set_power(const double val) {
  this->power = val;
}

void Dash::__set_relative_direction(const double val) {
  this->relative_direction = val;
}
std::ostream& operator<<(std::ostream& out, const Dash& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Dash::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->power);
          this->__isset.power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relative_direction);
          this->__isset.relative_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dash::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dash");

  xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_direction", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->relative_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dash &a, Dash &b) {
  using ::std::swap;
  swap(a.power, b.power);
  swap(a.relative_direction, b.relative_direction);
  swap(a.__isset, b.__isset);
}

Dash::Dash(const Dash& other81) noexcept {
  power = other81.power;
  relative_direction = other81.relative_direction;
  __isset = other81.__isset;
}
Dash& Dash::operator=(const Dash& other82) noexcept {
  power = other82.power;
  relative_direction = other82.relative_direction;
  __isset = other82.__isset;
  return *this;
}
void Dash::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dash(";
  out << "power=" << to_string(power);
  out << ", " << "relative_direction=" << to_string(relative_direction);
  out << ")";
}


Turn::~Turn() noexcept {
}


void Turn::__set_relative_direction(const double val) {
  this->relative_direction = val;
}
std::ostream& operator<<(std::ostream& out, const Turn& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Turn::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relative_direction);
          this->__isset.relative_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Turn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Turn");

  xfer += oprot->writeFieldBegin("relative_direction", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->relative_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Turn &a, Turn &b) {
  using ::std::swap;
  swap(a.relative_direction, b.relative_direction);
  swap(a.__isset, b.__isset);
}

Turn::Turn(const Turn& other83) noexcept {
  relative_direction = other83.relative_direction;
  __isset = other83.__isset;
}
Turn& Turn::operator=(const Turn& other84) noexcept {
  relative_direction = other84.relative_direction;
  __isset = other84.__isset;
  return *this;
}
void Turn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Turn(";
  out << "relative_direction=" << to_string(relative_direction);
  out << ")";
}


Kick::~Kick() noexcept {
}


void Kick::__set_power(const double val) {
  this->power = val;
}

void Kick::__set_relative_direction(const double val) {
  this->relative_direction = val;
}
std::ostream& operator<<(std::ostream& out, const Kick& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Kick::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->power);
          this->__isset.power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relative_direction);
          this->__isset.relative_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Kick::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Kick");

  xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_direction", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->relative_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Kick &a, Kick &b) {
  using ::std::swap;
  swap(a.power, b.power);
  swap(a.relative_direction, b.relative_direction);
  swap(a.__isset, b.__isset);
}

Kick::Kick(const Kick& other85) noexcept {
  power = other85.power;
  relative_direction = other85.relative_direction;
  __isset = other85.__isset;
}
Kick& Kick::operator=(const Kick& other86) noexcept {
  power = other86.power;
  relative_direction = other86.relative_direction;
  __isset = other86.__isset;
  return *this;
}
void Kick::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Kick(";
  out << "power=" << to_string(power);
  out << ", " << "relative_direction=" << to_string(relative_direction);
  out << ")";
}


Tackle::~Tackle() noexcept {
}


void Tackle::__set_power_or_dir(const double val) {
  this->power_or_dir = val;
}

void Tackle::__set_foul(const bool val) {
  this->foul = val;
}
std::ostream& operator<<(std::ostream& out, const Tackle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Tackle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->power_or_dir);
          this->__isset.power_or_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->foul);
          this->__isset.foul = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tackle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tackle");

  xfer += oprot->writeFieldBegin("power_or_dir", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->power_or_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->foul);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tackle &a, Tackle &b) {
  using ::std::swap;
  swap(a.power_or_dir, b.power_or_dir);
  swap(a.foul, b.foul);
  swap(a.__isset, b.__isset);
}

Tackle::Tackle(const Tackle& other87) noexcept {
  power_or_dir = other87.power_or_dir;
  foul = other87.foul;
  __isset = other87.__isset;
}
Tackle& Tackle::operator=(const Tackle& other88) noexcept {
  power_or_dir = other88.power_or_dir;
  foul = other88.foul;
  __isset = other88.__isset;
  return *this;
}
void Tackle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tackle(";
  out << "power_or_dir=" << to_string(power_or_dir);
  out << ", " << "foul=" << to_string(foul);
  out << ")";
}


Catch::~Catch() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Catch& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Catch::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Catch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Catch");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Catch &a, Catch &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Catch::Catch(const Catch& other89) noexcept {
  (void) other89;
}
Catch& Catch::operator=(const Catch& other90) noexcept {
  (void) other90;
  return *this;
}
void Catch::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Catch(";
  out << ")";
}


Move::~Move() noexcept {
}


void Move::__set_x(const double val) {
  this->x = val;
}

void Move::__set_y(const double val) {
  this->y = val;
}
std::ostream& operator<<(std::ostream& out, const Move& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Move::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Move::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Move");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Move &a, Move &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

Move::Move(const Move& other91) noexcept {
  x = other91.x;
  y = other91.y;
  __isset = other91.__isset;
}
Move& Move::operator=(const Move& other92) noexcept {
  x = other92.x;
  y = other92.y;
  __isset = other92.__isset;
  return *this;
}
void Move::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Move(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ")";
}


TurnNeck::~TurnNeck() noexcept {
}


void TurnNeck::__set_moment(const double val) {
  this->moment = val;
}
std::ostream& operator<<(std::ostream& out, const TurnNeck& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TurnNeck::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->moment);
          this->__isset.moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TurnNeck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TurnNeck");

  xfer += oprot->writeFieldBegin("moment", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TurnNeck &a, TurnNeck &b) {
  using ::std::swap;
  swap(a.moment, b.moment);
  swap(a.__isset, b.__isset);
}

TurnNeck::TurnNeck(const TurnNeck& other93) noexcept {
  moment = other93.moment;
  __isset = other93.__isset;
}
TurnNeck& TurnNeck::operator=(const TurnNeck& other94) noexcept {
  moment = other94.moment;
  __isset = other94.__isset;
  return *this;
}
void TurnNeck::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TurnNeck(";
  out << "moment=" << to_string(moment);
  out << ")";
}


ChangeView::~ChangeView() noexcept {
}


void ChangeView::__set_view_width(const ViewWidth::type val) {
  this->view_width = val;
}
std::ostream& operator<<(std::ostream& out, const ChangeView& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChangeView::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast95;
          xfer += iprot->readI32(ecast95);
          this->view_width = static_cast<ViewWidth::type>(ecast95);
          this->__isset.view_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangeView::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChangeView");

  xfer += oprot->writeFieldBegin("view_width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->view_width));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangeView &a, ChangeView &b) {
  using ::std::swap;
  swap(a.view_width, b.view_width);
  swap(a.__isset, b.__isset);
}

ChangeView::ChangeView(const ChangeView& other96) noexcept {
  view_width = other96.view_width;
  __isset = other96.__isset;
}
ChangeView& ChangeView::operator=(const ChangeView& other97) noexcept {
  view_width = other97.view_width;
  __isset = other97.__isset;
  return *this;
}
void ChangeView::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChangeView(";
  out << "view_width=" << to_string(view_width);
  out << ")";
}


BallMessage::~BallMessage() noexcept {
}


void BallMessage::__set_ball_position(const RpcVector2D& val) {
  this->ball_position = val;
}

void BallMessage::__set_ball_velocity(const RpcVector2D& val) {
  this->ball_velocity = val;
}
std::ostream& operator<<(std::ostream& out, const BallMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BallMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_position.read(iprot);
          this->__isset.ball_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_velocity.read(iprot);
          this->__isset.ball_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BallMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BallMessage");

  xfer += oprot->writeFieldBegin("ball_position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ball_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_velocity", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ball_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BallMessage &a, BallMessage &b) {
  using ::std::swap;
  swap(a.ball_position, b.ball_position);
  swap(a.ball_velocity, b.ball_velocity);
  swap(a.__isset, b.__isset);
}

BallMessage::BallMessage(const BallMessage& other98) noexcept {
  ball_position = other98.ball_position;
  ball_velocity = other98.ball_velocity;
  __isset = other98.__isset;
}
BallMessage& BallMessage::operator=(const BallMessage& other99) noexcept {
  ball_position = other99.ball_position;
  ball_velocity = other99.ball_velocity;
  __isset = other99.__isset;
  return *this;
}
void BallMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BallMessage(";
  out << "ball_position=" << to_string(ball_position);
  out << ", " << "ball_velocity=" << to_string(ball_velocity);
  out << ")";
}


PassMessage::~PassMessage() noexcept {
}


void PassMessage::__set_receiver_uniform_number(const int32_t val) {
  this->receiver_uniform_number = val;
}

void PassMessage::__set_receiver_point(const RpcVector2D& val) {
  this->receiver_point = val;
}

void PassMessage::__set_ball_position(const RpcVector2D& val) {
  this->ball_position = val;
}

void PassMessage::__set_ball_velocity(const RpcVector2D& val) {
  this->ball_velocity = val;
}
std::ostream& operator<<(std::ostream& out, const PassMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PassMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->receiver_uniform_number);
          this->__isset.receiver_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->receiver_point.read(iprot);
          this->__isset.receiver_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_position.read(iprot);
          this->__isset.ball_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_velocity.read(iprot);
          this->__isset.ball_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PassMessage");

  xfer += oprot->writeFieldBegin("receiver_uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->receiver_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiver_point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->receiver_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->ball_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_velocity", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->ball_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassMessage &a, PassMessage &b) {
  using ::std::swap;
  swap(a.receiver_uniform_number, b.receiver_uniform_number);
  swap(a.receiver_point, b.receiver_point);
  swap(a.ball_position, b.ball_position);
  swap(a.ball_velocity, b.ball_velocity);
  swap(a.__isset, b.__isset);
}

PassMessage::PassMessage(const PassMessage& other100) noexcept {
  receiver_uniform_number = other100.receiver_uniform_number;
  receiver_point = other100.receiver_point;
  ball_position = other100.ball_position;
  ball_velocity = other100.ball_velocity;
  __isset = other100.__isset;
}
PassMessage& PassMessage::operator=(const PassMessage& other101) noexcept {
  receiver_uniform_number = other101.receiver_uniform_number;
  receiver_point = other101.receiver_point;
  ball_position = other101.ball_position;
  ball_velocity = other101.ball_velocity;
  __isset = other101.__isset;
  return *this;
}
void PassMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PassMessage(";
  out << "receiver_uniform_number=" << to_string(receiver_uniform_number);
  out << ", " << "receiver_point=" << to_string(receiver_point);
  out << ", " << "ball_position=" << to_string(ball_position);
  out << ", " << "ball_velocity=" << to_string(ball_velocity);
  out << ")";
}


InterceptMessage::~InterceptMessage() noexcept {
}


void InterceptMessage::__set_our(const bool val) {
  this->our = val;
}

void InterceptMessage::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void InterceptMessage::__set_cycle(const int32_t val) {
  this->cycle = val;
}
std::ostream& operator<<(std::ostream& out, const InterceptMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InterceptMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->our);
          this->__isset.our = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycle);
          this->__isset.cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InterceptMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InterceptMessage");

  xfer += oprot->writeFieldBegin("our", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->our);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cycle", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterceptMessage &a, InterceptMessage &b) {
  using ::std::swap;
  swap(a.our, b.our);
  swap(a.uniform_number, b.uniform_number);
  swap(a.cycle, b.cycle);
  swap(a.__isset, b.__isset);
}

InterceptMessage::InterceptMessage(const InterceptMessage& other102) noexcept {
  our = other102.our;
  uniform_number = other102.uniform_number;
  cycle = other102.cycle;
  __isset = other102.__isset;
}
InterceptMessage& InterceptMessage::operator=(const InterceptMessage& other103) noexcept {
  our = other103.our;
  uniform_number = other103.uniform_number;
  cycle = other103.cycle;
  __isset = other103.__isset;
  return *this;
}
void InterceptMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InterceptMessage(";
  out << "our=" << to_string(our);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "cycle=" << to_string(cycle);
  out << ")";
}


GoalieMessage::~GoalieMessage() noexcept {
}


void GoalieMessage::__set_goalie_uniform_number(const int32_t val) {
  this->goalie_uniform_number = val;
}

void GoalieMessage::__set_goalie_position(const RpcVector2D& val) {
  this->goalie_position = val;
}

void GoalieMessage::__set_goalie_body_direction(const double val) {
  this->goalie_body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const GoalieMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GoalieMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goalie_uniform_number);
          this->__isset.goalie_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->goalie_position.read(iprot);
          this->__isset.goalie_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->goalie_body_direction);
          this->__isset.goalie_body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GoalieMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GoalieMessage");

  xfer += oprot->writeFieldBegin("goalie_uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->goalie_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->goalie_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_body_direction", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->goalie_body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GoalieMessage &a, GoalieMessage &b) {
  using ::std::swap;
  swap(a.goalie_uniform_number, b.goalie_uniform_number);
  swap(a.goalie_position, b.goalie_position);
  swap(a.goalie_body_direction, b.goalie_body_direction);
  swap(a.__isset, b.__isset);
}

GoalieMessage::GoalieMessage(const GoalieMessage& other104) noexcept {
  goalie_uniform_number = other104.goalie_uniform_number;
  goalie_position = other104.goalie_position;
  goalie_body_direction = other104.goalie_body_direction;
  __isset = other104.__isset;
}
GoalieMessage& GoalieMessage::operator=(const GoalieMessage& other105) noexcept {
  goalie_uniform_number = other105.goalie_uniform_number;
  goalie_position = other105.goalie_position;
  goalie_body_direction = other105.goalie_body_direction;
  __isset = other105.__isset;
  return *this;
}
void GoalieMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GoalieMessage(";
  out << "goalie_uniform_number=" << to_string(goalie_uniform_number);
  out << ", " << "goalie_position=" << to_string(goalie_position);
  out << ", " << "goalie_body_direction=" << to_string(goalie_body_direction);
  out << ")";
}


GoalieAndPlayerMessage::~GoalieAndPlayerMessage() noexcept {
}


void GoalieAndPlayerMessage::__set_goalie_uniform_number(const int32_t val) {
  this->goalie_uniform_number = val;
}

void GoalieAndPlayerMessage::__set_goalie_position(const RpcVector2D& val) {
  this->goalie_position = val;
}

void GoalieAndPlayerMessage::__set_goalie_body_direction(const double val) {
  this->goalie_body_direction = val;
}

void GoalieAndPlayerMessage::__set_player_uniform_number(const int32_t val) {
  this->player_uniform_number = val;
}

void GoalieAndPlayerMessage::__set_player_position(const RpcVector2D& val) {
  this->player_position = val;
}
std::ostream& operator<<(std::ostream& out, const GoalieAndPlayerMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GoalieAndPlayerMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goalie_uniform_number);
          this->__isset.goalie_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->goalie_position.read(iprot);
          this->__isset.goalie_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->goalie_body_direction);
          this->__isset.goalie_body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_uniform_number);
          this->__isset.player_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->player_position.read(iprot);
          this->__isset.player_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GoalieAndPlayerMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GoalieAndPlayerMessage");

  xfer += oprot->writeFieldBegin("goalie_uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->goalie_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->goalie_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_body_direction", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->goalie_body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_uniform_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->player_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_position", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->player_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GoalieAndPlayerMessage &a, GoalieAndPlayerMessage &b) {
  using ::std::swap;
  swap(a.goalie_uniform_number, b.goalie_uniform_number);
  swap(a.goalie_position, b.goalie_position);
  swap(a.goalie_body_direction, b.goalie_body_direction);
  swap(a.player_uniform_number, b.player_uniform_number);
  swap(a.player_position, b.player_position);
  swap(a.__isset, b.__isset);
}

GoalieAndPlayerMessage::GoalieAndPlayerMessage(const GoalieAndPlayerMessage& other106) noexcept {
  goalie_uniform_number = other106.goalie_uniform_number;
  goalie_position = other106.goalie_position;
  goalie_body_direction = other106.goalie_body_direction;
  player_uniform_number = other106.player_uniform_number;
  player_position = other106.player_position;
  __isset = other106.__isset;
}
GoalieAndPlayerMessage& GoalieAndPlayerMessage::operator=(const GoalieAndPlayerMessage& other107) noexcept {
  goalie_uniform_number = other107.goalie_uniform_number;
  goalie_position = other107.goalie_position;
  goalie_body_direction = other107.goalie_body_direction;
  player_uniform_number = other107.player_uniform_number;
  player_position = other107.player_position;
  __isset = other107.__isset;
  return *this;
}
void GoalieAndPlayerMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GoalieAndPlayerMessage(";
  out << "goalie_uniform_number=" << to_string(goalie_uniform_number);
  out << ", " << "goalie_position=" << to_string(goalie_position);
  out << ", " << "goalie_body_direction=" << to_string(goalie_body_direction);
  out << ", " << "player_uniform_number=" << to_string(player_uniform_number);
  out << ", " << "player_position=" << to_string(player_position);
  out << ")";
}


OffsideLineMessage::~OffsideLineMessage() noexcept {
}


void OffsideLineMessage::__set_offside_line_x(const double val) {
  this->offside_line_x = val;
}
std::ostream& operator<<(std::ostream& out, const OffsideLineMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OffsideLineMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offside_line_x);
          this->__isset.offside_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OffsideLineMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OffsideLineMessage");

  xfer += oprot->writeFieldBegin("offside_line_x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->offside_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OffsideLineMessage &a, OffsideLineMessage &b) {
  using ::std::swap;
  swap(a.offside_line_x, b.offside_line_x);
  swap(a.__isset, b.__isset);
}

OffsideLineMessage::OffsideLineMessage(const OffsideLineMessage& other108) noexcept {
  offside_line_x = other108.offside_line_x;
  __isset = other108.__isset;
}
OffsideLineMessage& OffsideLineMessage::operator=(const OffsideLineMessage& other109) noexcept {
  offside_line_x = other109.offside_line_x;
  __isset = other109.__isset;
  return *this;
}
void OffsideLineMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OffsideLineMessage(";
  out << "offside_line_x=" << to_string(offside_line_x);
  out << ")";
}


DefenseLineMessage::~DefenseLineMessage() noexcept {
}


void DefenseLineMessage::__set_defense_line_x(const double val) {
  this->defense_line_x = val;
}
std::ostream& operator<<(std::ostream& out, const DefenseLineMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DefenseLineMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->defense_line_x);
          this->__isset.defense_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DefenseLineMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefenseLineMessage");

  xfer += oprot->writeFieldBegin("defense_line_x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->defense_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefenseLineMessage &a, DefenseLineMessage &b) {
  using ::std::swap;
  swap(a.defense_line_x, b.defense_line_x);
  swap(a.__isset, b.__isset);
}

DefenseLineMessage::DefenseLineMessage(const DefenseLineMessage& other110) noexcept {
  defense_line_x = other110.defense_line_x;
  __isset = other110.__isset;
}
DefenseLineMessage& DefenseLineMessage::operator=(const DefenseLineMessage& other111) noexcept {
  defense_line_x = other111.defense_line_x;
  __isset = other111.__isset;
  return *this;
}
void DefenseLineMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefenseLineMessage(";
  out << "defense_line_x=" << to_string(defense_line_x);
  out << ")";
}


WaitRequestMessage::~WaitRequestMessage() noexcept {
}

std::ostream& operator<<(std::ostream& out, const WaitRequestMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WaitRequestMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WaitRequestMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WaitRequestMessage");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WaitRequestMessage &a, WaitRequestMessage &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WaitRequestMessage::WaitRequestMessage(const WaitRequestMessage& other112) noexcept {
  (void) other112;
}
WaitRequestMessage& WaitRequestMessage::operator=(const WaitRequestMessage& other113) noexcept {
  (void) other113;
  return *this;
}
void WaitRequestMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WaitRequestMessage(";
  out << ")";
}


SetplayMessage::~SetplayMessage() noexcept {
}


void SetplayMessage::__set_wait_step(const int32_t val) {
  this->wait_step = val;
}
std::ostream& operator<<(std::ostream& out, const SetplayMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SetplayMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wait_step);
          this->__isset.wait_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetplayMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetplayMessage");

  xfer += oprot->writeFieldBegin("wait_step", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->wait_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetplayMessage &a, SetplayMessage &b) {
  using ::std::swap;
  swap(a.wait_step, b.wait_step);
  swap(a.__isset, b.__isset);
}

SetplayMessage::SetplayMessage(const SetplayMessage& other114) noexcept {
  wait_step = other114.wait_step;
  __isset = other114.__isset;
}
SetplayMessage& SetplayMessage::operator=(const SetplayMessage& other115) noexcept {
  wait_step = other115.wait_step;
  __isset = other115.__isset;
  return *this;
}
void SetplayMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetplayMessage(";
  out << "wait_step=" << to_string(wait_step);
  out << ")";
}


PassRequestMessage::~PassRequestMessage() noexcept {
}


void PassRequestMessage::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}
std::ostream& operator<<(std::ostream& out, const PassRequestMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PassRequestMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassRequestMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PassRequestMessage");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassRequestMessage &a, PassRequestMessage &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.__isset, b.__isset);
}

PassRequestMessage::PassRequestMessage(const PassRequestMessage& other116) noexcept {
  target_point = other116.target_point;
  __isset = other116.__isset;
}
PassRequestMessage& PassRequestMessage::operator=(const PassRequestMessage& other117) noexcept {
  target_point = other117.target_point;
  __isset = other117.__isset;
  return *this;
}
void PassRequestMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PassRequestMessage(";
  out << "target_point=" << to_string(target_point);
  out << ")";
}


StaminaMessage::~StaminaMessage() noexcept {
}


void StaminaMessage::__set_stamina(const double val) {
  this->stamina = val;
}
std::ostream& operator<<(std::ostream& out, const StaminaMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StaminaMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina);
          this->__isset.stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StaminaMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StaminaMessage");

  xfer += oprot->writeFieldBegin("stamina", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StaminaMessage &a, StaminaMessage &b) {
  using ::std::swap;
  swap(a.stamina, b.stamina);
  swap(a.__isset, b.__isset);
}

StaminaMessage::StaminaMessage(const StaminaMessage& other118) noexcept {
  stamina = other118.stamina;
  __isset = other118.__isset;
}
StaminaMessage& StaminaMessage::operator=(const StaminaMessage& other119) noexcept {
  stamina = other119.stamina;
  __isset = other119.__isset;
  return *this;
}
void StaminaMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StaminaMessage(";
  out << "stamina=" << to_string(stamina);
  out << ")";
}


RecoveryMessage::~RecoveryMessage() noexcept {
}


void RecoveryMessage::__set_recovery(const double val) {
  this->recovery = val;
}
std::ostream& operator<<(std::ostream& out, const RecoveryMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RecoveryMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recovery);
          this->__isset.recovery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RecoveryMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RecoveryMessage");

  xfer += oprot->writeFieldBegin("recovery", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->recovery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecoveryMessage &a, RecoveryMessage &b) {
  using ::std::swap;
  swap(a.recovery, b.recovery);
  swap(a.__isset, b.__isset);
}

RecoveryMessage::RecoveryMessage(const RecoveryMessage& other120) noexcept {
  recovery = other120.recovery;
  __isset = other120.__isset;
}
RecoveryMessage& RecoveryMessage::operator=(const RecoveryMessage& other121) noexcept {
  recovery = other121.recovery;
  __isset = other121.__isset;
  return *this;
}
void RecoveryMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RecoveryMessage(";
  out << "recovery=" << to_string(recovery);
  out << ")";
}


StaminaCapacityMessage::~StaminaCapacityMessage() noexcept {
}


void StaminaCapacityMessage::__set_stamina_capacity(const double val) {
  this->stamina_capacity = val;
}
std::ostream& operator<<(std::ostream& out, const StaminaCapacityMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StaminaCapacityMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_capacity);
          this->__isset.stamina_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StaminaCapacityMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StaminaCapacityMessage");

  xfer += oprot->writeFieldBegin("stamina_capacity", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->stamina_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StaminaCapacityMessage &a, StaminaCapacityMessage &b) {
  using ::std::swap;
  swap(a.stamina_capacity, b.stamina_capacity);
  swap(a.__isset, b.__isset);
}

StaminaCapacityMessage::StaminaCapacityMessage(const StaminaCapacityMessage& other122) noexcept {
  stamina_capacity = other122.stamina_capacity;
  __isset = other122.__isset;
}
StaminaCapacityMessage& StaminaCapacityMessage::operator=(const StaminaCapacityMessage& other123) noexcept {
  stamina_capacity = other123.stamina_capacity;
  __isset = other123.__isset;
  return *this;
}
void StaminaCapacityMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StaminaCapacityMessage(";
  out << "stamina_capacity=" << to_string(stamina_capacity);
  out << ")";
}


DribbleMessage::~DribbleMessage() noexcept {
}


void DribbleMessage::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void DribbleMessage::__set_queue_count(const int32_t val) {
  this->queue_count = val;
}
std::ostream& operator<<(std::ostream& out, const DribbleMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DribbleMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queue_count);
          this->__isset.queue_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DribbleMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DribbleMessage");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->queue_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DribbleMessage &a, DribbleMessage &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.queue_count, b.queue_count);
  swap(a.__isset, b.__isset);
}

DribbleMessage::DribbleMessage(const DribbleMessage& other124) noexcept {
  target_point = other124.target_point;
  queue_count = other124.queue_count;
  __isset = other124.__isset;
}
DribbleMessage& DribbleMessage::operator=(const DribbleMessage& other125) noexcept {
  target_point = other125.target_point;
  queue_count = other125.queue_count;
  __isset = other125.__isset;
  return *this;
}
void DribbleMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DribbleMessage(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "queue_count=" << to_string(queue_count);
  out << ")";
}


BallGoalieMessage::~BallGoalieMessage() noexcept {
}


void BallGoalieMessage::__set_ball_position(const RpcVector2D& val) {
  this->ball_position = val;
}

void BallGoalieMessage::__set_ball_velocity(const RpcVector2D& val) {
  this->ball_velocity = val;
}

void BallGoalieMessage::__set_goalie_position(const RpcVector2D& val) {
  this->goalie_position = val;
}

void BallGoalieMessage::__set_goalie_body_direction(const double val) {
  this->goalie_body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const BallGoalieMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BallGoalieMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_position.read(iprot);
          this->__isset.ball_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_velocity.read(iprot);
          this->__isset.ball_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->goalie_position.read(iprot);
          this->__isset.goalie_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->goalie_body_direction);
          this->__isset.goalie_body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BallGoalieMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BallGoalieMessage");

  xfer += oprot->writeFieldBegin("ball_position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ball_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_velocity", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ball_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->goalie_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_body_direction", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->goalie_body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BallGoalieMessage &a, BallGoalieMessage &b) {
  using ::std::swap;
  swap(a.ball_position, b.ball_position);
  swap(a.ball_velocity, b.ball_velocity);
  swap(a.goalie_position, b.goalie_position);
  swap(a.goalie_body_direction, b.goalie_body_direction);
  swap(a.__isset, b.__isset);
}

BallGoalieMessage::BallGoalieMessage(const BallGoalieMessage& other126) noexcept {
  ball_position = other126.ball_position;
  ball_velocity = other126.ball_velocity;
  goalie_position = other126.goalie_position;
  goalie_body_direction = other126.goalie_body_direction;
  __isset = other126.__isset;
}
BallGoalieMessage& BallGoalieMessage::operator=(const BallGoalieMessage& other127) noexcept {
  ball_position = other127.ball_position;
  ball_velocity = other127.ball_velocity;
  goalie_position = other127.goalie_position;
  goalie_body_direction = other127.goalie_body_direction;
  __isset = other127.__isset;
  return *this;
}
void BallGoalieMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BallGoalieMessage(";
  out << "ball_position=" << to_string(ball_position);
  out << ", " << "ball_velocity=" << to_string(ball_velocity);
  out << ", " << "goalie_position=" << to_string(goalie_position);
  out << ", " << "goalie_body_direction=" << to_string(goalie_body_direction);
  out << ")";
}


OnePlayerMessage::~OnePlayerMessage() noexcept {
}


void OnePlayerMessage::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void OnePlayerMessage::__set_position(const RpcVector2D& val) {
  this->position = val;
}
std::ostream& operator<<(std::ostream& out, const OnePlayerMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OnePlayerMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnePlayerMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OnePlayerMessage");

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OnePlayerMessage &a, OnePlayerMessage &b) {
  using ::std::swap;
  swap(a.uniform_number, b.uniform_number);
  swap(a.position, b.position);
  swap(a.__isset, b.__isset);
}

OnePlayerMessage::OnePlayerMessage(const OnePlayerMessage& other128) noexcept {
  uniform_number = other128.uniform_number;
  position = other128.position;
  __isset = other128.__isset;
}
OnePlayerMessage& OnePlayerMessage::operator=(const OnePlayerMessage& other129) noexcept {
  uniform_number = other129.uniform_number;
  position = other129.position;
  __isset = other129.__isset;
  return *this;
}
void OnePlayerMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OnePlayerMessage(";
  out << "uniform_number=" << to_string(uniform_number);
  out << ", " << "position=" << to_string(position);
  out << ")";
}


TwoPlayerMessage::~TwoPlayerMessage() noexcept {
}


void TwoPlayerMessage::__set_first_uniform_number(const int32_t val) {
  this->first_uniform_number = val;
}

void TwoPlayerMessage::__set_first_position(const RpcVector2D& val) {
  this->first_position = val;
}

void TwoPlayerMessage::__set_second_uniform_number(const int32_t val) {
  this->second_uniform_number = val;
}

void TwoPlayerMessage::__set_second_position(const RpcVector2D& val) {
  this->second_position = val;
}
std::ostream& operator<<(std::ostream& out, const TwoPlayerMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TwoPlayerMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_uniform_number);
          this->__isset.first_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->first_position.read(iprot);
          this->__isset.first_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_uniform_number);
          this->__isset.second_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->second_position.read(iprot);
          this->__isset.second_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TwoPlayerMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TwoPlayerMessage");

  xfer += oprot->writeFieldBegin("first_uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->first_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->first_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_uniform_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->second_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_position", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->second_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TwoPlayerMessage &a, TwoPlayerMessage &b) {
  using ::std::swap;
  swap(a.first_uniform_number, b.first_uniform_number);
  swap(a.first_position, b.first_position);
  swap(a.second_uniform_number, b.second_uniform_number);
  swap(a.second_position, b.second_position);
  swap(a.__isset, b.__isset);
}

TwoPlayerMessage::TwoPlayerMessage(const TwoPlayerMessage& other130) noexcept {
  first_uniform_number = other130.first_uniform_number;
  first_position = other130.first_position;
  second_uniform_number = other130.second_uniform_number;
  second_position = other130.second_position;
  __isset = other130.__isset;
}
TwoPlayerMessage& TwoPlayerMessage::operator=(const TwoPlayerMessage& other131) noexcept {
  first_uniform_number = other131.first_uniform_number;
  first_position = other131.first_position;
  second_uniform_number = other131.second_uniform_number;
  second_position = other131.second_position;
  __isset = other131.__isset;
  return *this;
}
void TwoPlayerMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TwoPlayerMessage(";
  out << "first_uniform_number=" << to_string(first_uniform_number);
  out << ", " << "first_position=" << to_string(first_position);
  out << ", " << "second_uniform_number=" << to_string(second_uniform_number);
  out << ", " << "second_position=" << to_string(second_position);
  out << ")";
}


ThreePlayerMessage::~ThreePlayerMessage() noexcept {
}


void ThreePlayerMessage::__set_first_uniform_number(const int32_t val) {
  this->first_uniform_number = val;
}

void ThreePlayerMessage::__set_first_position(const RpcVector2D& val) {
  this->first_position = val;
}

void ThreePlayerMessage::__set_second_uniform_number(const int32_t val) {
  this->second_uniform_number = val;
}

void ThreePlayerMessage::__set_second_position(const RpcVector2D& val) {
  this->second_position = val;
}

void ThreePlayerMessage::__set_third_uniform_number(const int32_t val) {
  this->third_uniform_number = val;
}

void ThreePlayerMessage::__set_third_position(const RpcVector2D& val) {
  this->third_position = val;
}
std::ostream& operator<<(std::ostream& out, const ThreePlayerMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ThreePlayerMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->first_uniform_number);
          this->__isset.first_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->first_position.read(iprot);
          this->__isset.first_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second_uniform_number);
          this->__isset.second_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->second_position.read(iprot);
          this->__isset.second_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->third_uniform_number);
          this->__isset.third_uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->third_position.read(iprot);
          this->__isset.third_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThreePlayerMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThreePlayerMessage");

  xfer += oprot->writeFieldBegin("first_uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->first_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->first_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_uniform_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->second_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second_position", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->second_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("third_uniform_number", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->third_uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("third_position", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->third_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThreePlayerMessage &a, ThreePlayerMessage &b) {
  using ::std::swap;
  swap(a.first_uniform_number, b.first_uniform_number);
  swap(a.first_position, b.first_position);
  swap(a.second_uniform_number, b.second_uniform_number);
  swap(a.second_position, b.second_position);
  swap(a.third_uniform_number, b.third_uniform_number);
  swap(a.third_position, b.third_position);
  swap(a.__isset, b.__isset);
}

ThreePlayerMessage::ThreePlayerMessage(const ThreePlayerMessage& other132) noexcept {
  first_uniform_number = other132.first_uniform_number;
  first_position = other132.first_position;
  second_uniform_number = other132.second_uniform_number;
  second_position = other132.second_position;
  third_uniform_number = other132.third_uniform_number;
  third_position = other132.third_position;
  __isset = other132.__isset;
}
ThreePlayerMessage& ThreePlayerMessage::operator=(const ThreePlayerMessage& other133) noexcept {
  first_uniform_number = other133.first_uniform_number;
  first_position = other133.first_position;
  second_uniform_number = other133.second_uniform_number;
  second_position = other133.second_position;
  third_uniform_number = other133.third_uniform_number;
  third_position = other133.third_position;
  __isset = other133.__isset;
  return *this;
}
void ThreePlayerMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThreePlayerMessage(";
  out << "first_uniform_number=" << to_string(first_uniform_number);
  out << ", " << "first_position=" << to_string(first_position);
  out << ", " << "second_uniform_number=" << to_string(second_uniform_number);
  out << ", " << "second_position=" << to_string(second_position);
  out << ", " << "third_uniform_number=" << to_string(third_uniform_number);
  out << ", " << "third_position=" << to_string(third_position);
  out << ")";
}


SelfMessage::~SelfMessage() noexcept {
}


void SelfMessage::__set_self_position(const RpcVector2D& val) {
  this->self_position = val;
}

void SelfMessage::__set_self_body_direction(const double val) {
  this->self_body_direction = val;
}

void SelfMessage::__set_self_stamina(const double val) {
  this->self_stamina = val;
}
std::ostream& operator<<(std::ostream& out, const SelfMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelfMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->self_position.read(iprot);
          this->__isset.self_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->self_body_direction);
          this->__isset.self_body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->self_stamina);
          this->__isset.self_stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelfMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelfMessage");

  xfer += oprot->writeFieldBegin("self_position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->self_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("self_body_direction", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->self_body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("self_stamina", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->self_stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelfMessage &a, SelfMessage &b) {
  using ::std::swap;
  swap(a.self_position, b.self_position);
  swap(a.self_body_direction, b.self_body_direction);
  swap(a.self_stamina, b.self_stamina);
  swap(a.__isset, b.__isset);
}

SelfMessage::SelfMessage(const SelfMessage& other134) noexcept {
  self_position = other134.self_position;
  self_body_direction = other134.self_body_direction;
  self_stamina = other134.self_stamina;
  __isset = other134.__isset;
}
SelfMessage& SelfMessage::operator=(const SelfMessage& other135) noexcept {
  self_position = other135.self_position;
  self_body_direction = other135.self_body_direction;
  self_stamina = other135.self_stamina;
  __isset = other135.__isset;
  return *this;
}
void SelfMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelfMessage(";
  out << "self_position=" << to_string(self_position);
  out << ", " << "self_body_direction=" << to_string(self_body_direction);
  out << ", " << "self_stamina=" << to_string(self_stamina);
  out << ")";
}


TeammateMessage::~TeammateMessage() noexcept {
}


void TeammateMessage::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void TeammateMessage::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void TeammateMessage::__set_body_direction(const double val) {
  this->body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const TeammateMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TeammateMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TeammateMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TeammateMessage");

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TeammateMessage &a, TeammateMessage &b) {
  using ::std::swap;
  swap(a.uniform_number, b.uniform_number);
  swap(a.position, b.position);
  swap(a.body_direction, b.body_direction);
  swap(a.__isset, b.__isset);
}

TeammateMessage::TeammateMessage(const TeammateMessage& other136) noexcept {
  uniform_number = other136.uniform_number;
  position = other136.position;
  body_direction = other136.body_direction;
  __isset = other136.__isset;
}
TeammateMessage& TeammateMessage::operator=(const TeammateMessage& other137) noexcept {
  uniform_number = other137.uniform_number;
  position = other137.position;
  body_direction = other137.body_direction;
  __isset = other137.__isset;
  return *this;
}
void TeammateMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TeammateMessage(";
  out << "uniform_number=" << to_string(uniform_number);
  out << ", " << "position=" << to_string(position);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ")";
}


OpponentMessage::~OpponentMessage() noexcept {
}


void OpponentMessage::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void OpponentMessage::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void OpponentMessage::__set_body_direction(const double val) {
  this->body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const OpponentMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OpponentMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OpponentMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OpponentMessage");

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpponentMessage &a, OpponentMessage &b) {
  using ::std::swap;
  swap(a.uniform_number, b.uniform_number);
  swap(a.position, b.position);
  swap(a.body_direction, b.body_direction);
  swap(a.__isset, b.__isset);
}

OpponentMessage::OpponentMessage(const OpponentMessage& other138) noexcept {
  uniform_number = other138.uniform_number;
  position = other138.position;
  body_direction = other138.body_direction;
  __isset = other138.__isset;
}
OpponentMessage& OpponentMessage::operator=(const OpponentMessage& other139) noexcept {
  uniform_number = other139.uniform_number;
  position = other139.position;
  body_direction = other139.body_direction;
  __isset = other139.__isset;
  return *this;
}
void OpponentMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpponentMessage(";
  out << "uniform_number=" << to_string(uniform_number);
  out << ", " << "position=" << to_string(position);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ")";
}


BallPlayerMessage::~BallPlayerMessage() noexcept {
}


void BallPlayerMessage::__set_ball_position(const RpcVector2D& val) {
  this->ball_position = val;
}

void BallPlayerMessage::__set_ball_velocity(const RpcVector2D& val) {
  this->ball_velocity = val;
}

void BallPlayerMessage::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void BallPlayerMessage::__set_player_position(const RpcVector2D& val) {
  this->player_position = val;
}

void BallPlayerMessage::__set_body_direction(const double val) {
  this->body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const BallPlayerMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BallPlayerMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_position.read(iprot);
          this->__isset.ball_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_velocity.read(iprot);
          this->__isset.ball_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->player_position.read(iprot);
          this->__isset.player_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BallPlayerMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BallPlayerMessage");

  xfer += oprot->writeFieldBegin("ball_position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ball_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_velocity", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ball_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_position", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->player_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BallPlayerMessage &a, BallPlayerMessage &b) {
  using ::std::swap;
  swap(a.ball_position, b.ball_position);
  swap(a.ball_velocity, b.ball_velocity);
  swap(a.uniform_number, b.uniform_number);
  swap(a.player_position, b.player_position);
  swap(a.body_direction, b.body_direction);
  swap(a.__isset, b.__isset);
}

BallPlayerMessage::BallPlayerMessage(const BallPlayerMessage& other140) noexcept {
  ball_position = other140.ball_position;
  ball_velocity = other140.ball_velocity;
  uniform_number = other140.uniform_number;
  player_position = other140.player_position;
  body_direction = other140.body_direction;
  __isset = other140.__isset;
}
BallPlayerMessage& BallPlayerMessage::operator=(const BallPlayerMessage& other141) noexcept {
  ball_position = other141.ball_position;
  ball_velocity = other141.ball_velocity;
  uniform_number = other141.uniform_number;
  player_position = other141.player_position;
  body_direction = other141.body_direction;
  __isset = other141.__isset;
  return *this;
}
void BallPlayerMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BallPlayerMessage(";
  out << "ball_position=" << to_string(ball_position);
  out << ", " << "ball_velocity=" << to_string(ball_velocity);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "player_position=" << to_string(player_position);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ")";
}


Say::~Say() noexcept {
}


void Say::__set_ball_message(const BallMessage& val) {
  this->ball_message = val;
__isset.ball_message = true;
}

void Say::__set_pass_message(const PassMessage& val) {
  this->pass_message = val;
__isset.pass_message = true;
}

void Say::__set_intercept_message(const InterceptMessage& val) {
  this->intercept_message = val;
__isset.intercept_message = true;
}

void Say::__set_goalie_message(const GoalieMessage& val) {
  this->goalie_message = val;
__isset.goalie_message = true;
}

void Say::__set_goalie_and_player_message(const GoalieAndPlayerMessage& val) {
  this->goalie_and_player_message = val;
__isset.goalie_and_player_message = true;
}

void Say::__set_offside_line_message(const OffsideLineMessage& val) {
  this->offside_line_message = val;
__isset.offside_line_message = true;
}

void Say::__set_defense_line_message(const DefenseLineMessage& val) {
  this->defense_line_message = val;
__isset.defense_line_message = true;
}

void Say::__set_wait_request_message(const WaitRequestMessage& val) {
  this->wait_request_message = val;
__isset.wait_request_message = true;
}

void Say::__set_setplay_message(const SetplayMessage& val) {
  this->setplay_message = val;
__isset.setplay_message = true;
}

void Say::__set_pass_request_message(const PassRequestMessage& val) {
  this->pass_request_message = val;
__isset.pass_request_message = true;
}

void Say::__set_stamina_message(const StaminaMessage& val) {
  this->stamina_message = val;
__isset.stamina_message = true;
}

void Say::__set_recovery_message(const RecoveryMessage& val) {
  this->recovery_message = val;
__isset.recovery_message = true;
}

void Say::__set_stamina_capacity_message(const StaminaCapacityMessage& val) {
  this->stamina_capacity_message = val;
__isset.stamina_capacity_message = true;
}

void Say::__set_dribble_message(const DribbleMessage& val) {
  this->dribble_message = val;
__isset.dribble_message = true;
}

void Say::__set_ball_goalie_message(const BallGoalieMessage& val) {
  this->ball_goalie_message = val;
__isset.ball_goalie_message = true;
}

void Say::__set_one_player_message(const OnePlayerMessage& val) {
  this->one_player_message = val;
__isset.one_player_message = true;
}

void Say::__set_two_player_message(const TwoPlayerMessage& val) {
  this->two_player_message = val;
__isset.two_player_message = true;
}

void Say::__set_three_player_message(const ThreePlayerMessage& val) {
  this->three_player_message = val;
__isset.three_player_message = true;
}

void Say::__set_self_message(const SelfMessage& val) {
  this->self_message = val;
__isset.self_message = true;
}

void Say::__set_teammate_message(const TeammateMessage& val) {
  this->teammate_message = val;
__isset.teammate_message = true;
}

void Say::__set_opponent_message(const OpponentMessage& val) {
  this->opponent_message = val;
__isset.opponent_message = true;
}

void Say::__set_ball_player_message(const BallPlayerMessage& val) {
  this->ball_player_message = val;
__isset.ball_player_message = true;
}
std::ostream& operator<<(std::ostream& out, const Say& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Say::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_message.read(iprot);
          this->__isset.ball_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pass_message.read(iprot);
          this->__isset.pass_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->intercept_message.read(iprot);
          this->__isset.intercept_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->goalie_message.read(iprot);
          this->__isset.goalie_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->goalie_and_player_message.read(iprot);
          this->__isset.goalie_and_player_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offside_line_message.read(iprot);
          this->__isset.offside_line_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->defense_line_message.read(iprot);
          this->__isset.defense_line_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wait_request_message.read(iprot);
          this->__isset.wait_request_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->setplay_message.read(iprot);
          this->__isset.setplay_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pass_request_message.read(iprot);
          this->__isset.pass_request_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stamina_message.read(iprot);
          this->__isset.stamina_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recovery_message.read(iprot);
          this->__isset.recovery_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stamina_capacity_message.read(iprot);
          this->__isset.stamina_capacity_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dribble_message.read(iprot);
          this->__isset.dribble_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_goalie_message.read(iprot);
          this->__isset.ball_goalie_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->one_player_message.read(iprot);
          this->__isset.one_player_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->two_player_message.read(iprot);
          this->__isset.two_player_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->three_player_message.read(iprot);
          this->__isset.three_player_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->self_message.read(iprot);
          this->__isset.self_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->teammate_message.read(iprot);
          this->__isset.teammate_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opponent_message.read(iprot);
          this->__isset.opponent_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_player_message.read(iprot);
          this->__isset.ball_player_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Say::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Say");

  if (this->__isset.ball_message) {
    xfer += oprot->writeFieldBegin("ball_message", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ball_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pass_message) {
    xfer += oprot->writeFieldBegin("pass_message", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->pass_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intercept_message) {
    xfer += oprot->writeFieldBegin("intercept_message", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->intercept_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goalie_message) {
    xfer += oprot->writeFieldBegin("goalie_message", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->goalie_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goalie_and_player_message) {
    xfer += oprot->writeFieldBegin("goalie_and_player_message", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->goalie_and_player_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offside_line_message) {
    xfer += oprot->writeFieldBegin("offside_line_message", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->offside_line_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defense_line_message) {
    xfer += oprot->writeFieldBegin("defense_line_message", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->defense_line_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wait_request_message) {
    xfer += oprot->writeFieldBegin("wait_request_message", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->wait_request_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.setplay_message) {
    xfer += oprot->writeFieldBegin("setplay_message", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->setplay_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pass_request_message) {
    xfer += oprot->writeFieldBegin("pass_request_message", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->pass_request_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stamina_message) {
    xfer += oprot->writeFieldBegin("stamina_message", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->stamina_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recovery_message) {
    xfer += oprot->writeFieldBegin("recovery_message", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->recovery_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stamina_capacity_message) {
    xfer += oprot->writeFieldBegin("stamina_capacity_message", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->stamina_capacity_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dribble_message) {
    xfer += oprot->writeFieldBegin("dribble_message", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->dribble_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ball_goalie_message) {
    xfer += oprot->writeFieldBegin("ball_goalie_message", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->ball_goalie_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.one_player_message) {
    xfer += oprot->writeFieldBegin("one_player_message", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->one_player_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.two_player_message) {
    xfer += oprot->writeFieldBegin("two_player_message", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->two_player_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.three_player_message) {
    xfer += oprot->writeFieldBegin("three_player_message", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->three_player_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.self_message) {
    xfer += oprot->writeFieldBegin("self_message", ::apache::thrift::protocol::T_STRUCT, 19);
    xfer += this->self_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.teammate_message) {
    xfer += oprot->writeFieldBegin("teammate_message", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->teammate_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.opponent_message) {
    xfer += oprot->writeFieldBegin("opponent_message", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->opponent_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ball_player_message) {
    xfer += oprot->writeFieldBegin("ball_player_message", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->ball_player_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Say &a, Say &b) {
  using ::std::swap;
  swap(a.ball_message, b.ball_message);
  swap(a.pass_message, b.pass_message);
  swap(a.intercept_message, b.intercept_message);
  swap(a.goalie_message, b.goalie_message);
  swap(a.goalie_and_player_message, b.goalie_and_player_message);
  swap(a.offside_line_message, b.offside_line_message);
  swap(a.defense_line_message, b.defense_line_message);
  swap(a.wait_request_message, b.wait_request_message);
  swap(a.setplay_message, b.setplay_message);
  swap(a.pass_request_message, b.pass_request_message);
  swap(a.stamina_message, b.stamina_message);
  swap(a.recovery_message, b.recovery_message);
  swap(a.stamina_capacity_message, b.stamina_capacity_message);
  swap(a.dribble_message, b.dribble_message);
  swap(a.ball_goalie_message, b.ball_goalie_message);
  swap(a.one_player_message, b.one_player_message);
  swap(a.two_player_message, b.two_player_message);
  swap(a.three_player_message, b.three_player_message);
  swap(a.self_message, b.self_message);
  swap(a.teammate_message, b.teammate_message);
  swap(a.opponent_message, b.opponent_message);
  swap(a.ball_player_message, b.ball_player_message);
  swap(a.__isset, b.__isset);
}

Say::Say(const Say& other142) noexcept {
  ball_message = other142.ball_message;
  pass_message = other142.pass_message;
  intercept_message = other142.intercept_message;
  goalie_message = other142.goalie_message;
  goalie_and_player_message = other142.goalie_and_player_message;
  offside_line_message = other142.offside_line_message;
  defense_line_message = other142.defense_line_message;
  wait_request_message = other142.wait_request_message;
  setplay_message = other142.setplay_message;
  pass_request_message = other142.pass_request_message;
  stamina_message = other142.stamina_message;
  recovery_message = other142.recovery_message;
  stamina_capacity_message = other142.stamina_capacity_message;
  dribble_message = other142.dribble_message;
  ball_goalie_message = other142.ball_goalie_message;
  one_player_message = other142.one_player_message;
  two_player_message = other142.two_player_message;
  three_player_message = other142.three_player_message;
  self_message = other142.self_message;
  teammate_message = other142.teammate_message;
  opponent_message = other142.opponent_message;
  ball_player_message = other142.ball_player_message;
  __isset = other142.__isset;
}
Say& Say::operator=(const Say& other143) noexcept {
  ball_message = other143.ball_message;
  pass_message = other143.pass_message;
  intercept_message = other143.intercept_message;
  goalie_message = other143.goalie_message;
  goalie_and_player_message = other143.goalie_and_player_message;
  offside_line_message = other143.offside_line_message;
  defense_line_message = other143.defense_line_message;
  wait_request_message = other143.wait_request_message;
  setplay_message = other143.setplay_message;
  pass_request_message = other143.pass_request_message;
  stamina_message = other143.stamina_message;
  recovery_message = other143.recovery_message;
  stamina_capacity_message = other143.stamina_capacity_message;
  dribble_message = other143.dribble_message;
  ball_goalie_message = other143.ball_goalie_message;
  one_player_message = other143.one_player_message;
  two_player_message = other143.two_player_message;
  three_player_message = other143.three_player_message;
  self_message = other143.self_message;
  teammate_message = other143.teammate_message;
  opponent_message = other143.opponent_message;
  ball_player_message = other143.ball_player_message;
  __isset = other143.__isset;
  return *this;
}
void Say::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Say(";
  out << "ball_message="; (__isset.ball_message ? (out << to_string(ball_message)) : (out << "<null>"));
  out << ", " << "pass_message="; (__isset.pass_message ? (out << to_string(pass_message)) : (out << "<null>"));
  out << ", " << "intercept_message="; (__isset.intercept_message ? (out << to_string(intercept_message)) : (out << "<null>"));
  out << ", " << "goalie_message="; (__isset.goalie_message ? (out << to_string(goalie_message)) : (out << "<null>"));
  out << ", " << "goalie_and_player_message="; (__isset.goalie_and_player_message ? (out << to_string(goalie_and_player_message)) : (out << "<null>"));
  out << ", " << "offside_line_message="; (__isset.offside_line_message ? (out << to_string(offside_line_message)) : (out << "<null>"));
  out << ", " << "defense_line_message="; (__isset.defense_line_message ? (out << to_string(defense_line_message)) : (out << "<null>"));
  out << ", " << "wait_request_message="; (__isset.wait_request_message ? (out << to_string(wait_request_message)) : (out << "<null>"));
  out << ", " << "setplay_message="; (__isset.setplay_message ? (out << to_string(setplay_message)) : (out << "<null>"));
  out << ", " << "pass_request_message="; (__isset.pass_request_message ? (out << to_string(pass_request_message)) : (out << "<null>"));
  out << ", " << "stamina_message="; (__isset.stamina_message ? (out << to_string(stamina_message)) : (out << "<null>"));
  out << ", " << "recovery_message="; (__isset.recovery_message ? (out << to_string(recovery_message)) : (out << "<null>"));
  out << ", " << "stamina_capacity_message="; (__isset.stamina_capacity_message ? (out << to_string(stamina_capacity_message)) : (out << "<null>"));
  out << ", " << "dribble_message="; (__isset.dribble_message ? (out << to_string(dribble_message)) : (out << "<null>"));
  out << ", " << "ball_goalie_message="; (__isset.ball_goalie_message ? (out << to_string(ball_goalie_message)) : (out << "<null>"));
  out << ", " << "one_player_message="; (__isset.one_player_message ? (out << to_string(one_player_message)) : (out << "<null>"));
  out << ", " << "two_player_message="; (__isset.two_player_message ? (out << to_string(two_player_message)) : (out << "<null>"));
  out << ", " << "three_player_message="; (__isset.three_player_message ? (out << to_string(three_player_message)) : (out << "<null>"));
  out << ", " << "self_message="; (__isset.self_message ? (out << to_string(self_message)) : (out << "<null>"));
  out << ", " << "teammate_message="; (__isset.teammate_message ? (out << to_string(teammate_message)) : (out << "<null>"));
  out << ", " << "opponent_message="; (__isset.opponent_message ? (out << to_string(opponent_message)) : (out << "<null>"));
  out << ", " << "ball_player_message="; (__isset.ball_player_message ? (out << to_string(ball_player_message)) : (out << "<null>"));
  out << ")";
}


PointTo::~PointTo() noexcept {
}


void PointTo::__set_x(const double val) {
  this->x = val;
}

void PointTo::__set_y(const double val) {
  this->y = val;
}
std::ostream& operator<<(std::ostream& out, const PointTo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PointTo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PointTo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PointTo");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointTo &a, PointTo &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

PointTo::PointTo(const PointTo& other144) noexcept {
  x = other144.x;
  y = other144.y;
  __isset = other144.__isset;
}
PointTo& PointTo::operator=(const PointTo& other145) noexcept {
  x = other145.x;
  y = other145.y;
  __isset = other145.__isset;
  return *this;
}
void PointTo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PointTo(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ")";
}


PointToOf::~PointToOf() noexcept {
}

std::ostream& operator<<(std::ostream& out, const PointToOf& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PointToOf::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PointToOf::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PointToOf");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointToOf &a, PointToOf &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PointToOf::PointToOf(const PointToOf& other146) noexcept {
  (void) other146;
}
PointToOf& PointToOf::operator=(const PointToOf& other147) noexcept {
  (void) other147;
  return *this;
}
void PointToOf::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PointToOf(";
  out << ")";
}


AttentionTo::~AttentionTo() noexcept {
}


void AttentionTo::__set_side(const Side::type val) {
  this->side = val;
}

void AttentionTo::__set_unum(const int32_t val) {
  this->unum = val;
}
std::ostream& operator<<(std::ostream& out, const AttentionTo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AttentionTo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast148;
          xfer += iprot->readI32(ecast148);
          this->side = static_cast<Side::type>(ecast148);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unum);
          this->__isset.unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttentionTo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AttentionTo");

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AttentionTo &a, AttentionTo &b) {
  using ::std::swap;
  swap(a.side, b.side);
  swap(a.unum, b.unum);
  swap(a.__isset, b.__isset);
}

AttentionTo::AttentionTo(const AttentionTo& other149) noexcept {
  side = other149.side;
  unum = other149.unum;
  __isset = other149.__isset;
}
AttentionTo& AttentionTo::operator=(const AttentionTo& other150) noexcept {
  side = other150.side;
  unum = other150.unum;
  __isset = other150.__isset;
  return *this;
}
void AttentionTo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AttentionTo(";
  out << "side=" << to_string(side);
  out << ", " << "unum=" << to_string(unum);
  out << ")";
}


AttentionToOf::~AttentionToOf() noexcept {
}

std::ostream& operator<<(std::ostream& out, const AttentionToOf& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AttentionToOf::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttentionToOf::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AttentionToOf");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AttentionToOf &a, AttentionToOf &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AttentionToOf::AttentionToOf(const AttentionToOf& other151) noexcept {
  (void) other151;
}
AttentionToOf& AttentionToOf::operator=(const AttentionToOf& other152) noexcept {
  (void) other152;
  return *this;
}
void AttentionToOf::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AttentionToOf(";
  out << ")";
}


AddText::~AddText() noexcept {
}


void AddText::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddText::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const AddText& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddText::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast153;
          xfer += iprot->readI32(ecast153);
          this->level = static_cast<LoggerLevel::type>(ecast153);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddText::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddText");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddText &a, AddText &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

AddText::AddText(const AddText& other154) {
  level = other154.level;
  message = other154.message;
  __isset = other154.__isset;
}
AddText& AddText::operator=(const AddText& other155) {
  level = other155.level;
  message = other155.message;
  __isset = other155.__isset;
  return *this;
}
void AddText::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddText(";
  out << "level=" << to_string(level);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


AddPoint::~AddPoint() noexcept {
}


void AddPoint::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddPoint::__set_point(const RpcVector2D& val) {
  this->point = val;
}

void AddPoint::__set_color(const std::string& val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const AddPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast156;
          xfer += iprot->readI32(ecast156);
          this->level = static_cast<LoggerLevel::type>(ecast156);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPoint");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPoint &a, AddPoint &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.point, b.point);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

AddPoint::AddPoint(const AddPoint& other157) {
  level = other157.level;
  point = other157.point;
  color = other157.color;
  __isset = other157.__isset;
}
AddPoint& AddPoint::operator=(const AddPoint& other158) {
  level = other158.level;
  point = other158.point;
  color = other158.color;
  __isset = other158.__isset;
  return *this;
}
void AddPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPoint(";
  out << "level=" << to_string(level);
  out << ", " << "point=" << to_string(point);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


AddLine::~AddLine() noexcept {
}


void AddLine::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddLine::__set_start_point(const RpcVector2D& val) {
  this->start_point = val;
}

void AddLine::__set_end_point(const RpcVector2D& val) {
  this->end_point = val;
}

void AddLine::__set_color(const std::string& val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const AddLine& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddLine::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast159;
          xfer += iprot->readI32(ecast159);
          this->level = static_cast<LoggerLevel::type>(ecast159);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->start_point.read(iprot);
          this->__isset.start_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->end_point.read(iprot);
          this->__isset.end_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddLine::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddLine");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->start_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_point", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->end_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddLine &a, AddLine &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.start_point, b.start_point);
  swap(a.end_point, b.end_point);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

AddLine::AddLine(const AddLine& other160) {
  level = other160.level;
  start_point = other160.start_point;
  end_point = other160.end_point;
  color = other160.color;
  __isset = other160.__isset;
}
AddLine& AddLine::operator=(const AddLine& other161) {
  level = other161.level;
  start_point = other161.start_point;
  end_point = other161.end_point;
  color = other161.color;
  __isset = other161.__isset;
  return *this;
}
void AddLine::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddLine(";
  out << "level=" << to_string(level);
  out << ", " << "start_point=" << to_string(start_point);
  out << ", " << "end_point=" << to_string(end_point);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


AddArc::~AddArc() noexcept {
}


void AddArc::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddArc::__set_center(const RpcVector2D& val) {
  this->center = val;
}

void AddArc::__set_radius(const double val) {
  this->radius = val;
}

void AddArc::__set_start_angle(const double val) {
  this->start_angle = val;
}

void AddArc::__set_span_angel(const double val) {
  this->span_angel = val;
}

void AddArc::__set_color(const std::string& val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const AddArc& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddArc::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast162;
          xfer += iprot->readI32(ecast162);
          this->level = static_cast<LoggerLevel::type>(ecast162);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->center.read(iprot);
          this->__isset.center = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radius);
          this->__isset.radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_angle);
          this->__isset.start_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->span_angel);
          this->__isset.span_angel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddArc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddArc");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("center", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->center.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("radius", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->radius);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_angle", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->start_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("span_angel", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->span_angel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddArc &a, AddArc &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.center, b.center);
  swap(a.radius, b.radius);
  swap(a.start_angle, b.start_angle);
  swap(a.span_angel, b.span_angel);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

AddArc::AddArc(const AddArc& other163) {
  level = other163.level;
  center = other163.center;
  radius = other163.radius;
  start_angle = other163.start_angle;
  span_angel = other163.span_angel;
  color = other163.color;
  __isset = other163.__isset;
}
AddArc& AddArc::operator=(const AddArc& other164) {
  level = other164.level;
  center = other164.center;
  radius = other164.radius;
  start_angle = other164.start_angle;
  span_angel = other164.span_angel;
  color = other164.color;
  __isset = other164.__isset;
  return *this;
}
void AddArc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddArc(";
  out << "level=" << to_string(level);
  out << ", " << "center=" << to_string(center);
  out << ", " << "radius=" << to_string(radius);
  out << ", " << "start_angle=" << to_string(start_angle);
  out << ", " << "span_angel=" << to_string(span_angel);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


AddCircle::~AddCircle() noexcept {
}


void AddCircle::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddCircle::__set_center(const RpcVector2D& val) {
  this->center = val;
}

void AddCircle::__set_radius(const double val) {
  this->radius = val;
}

void AddCircle::__set_color(const std::string& val) {
  this->color = val;
}

void AddCircle::__set_fill(const bool val) {
  this->fill = val;
}
std::ostream& operator<<(std::ostream& out, const AddCircle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddCircle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast165;
          xfer += iprot->readI32(ecast165);
          this->level = static_cast<LoggerLevel::type>(ecast165);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->center.read(iprot);
          this->__isset.center = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radius);
          this->__isset.radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fill);
          this->__isset.fill = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddCircle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddCircle");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("center", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->center.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("radius", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->radius);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fill", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->fill);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddCircle &a, AddCircle &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.center, b.center);
  swap(a.radius, b.radius);
  swap(a.color, b.color);
  swap(a.fill, b.fill);
  swap(a.__isset, b.__isset);
}

AddCircle::AddCircle(const AddCircle& other166) {
  level = other166.level;
  center = other166.center;
  radius = other166.radius;
  color = other166.color;
  fill = other166.fill;
  __isset = other166.__isset;
}
AddCircle& AddCircle::operator=(const AddCircle& other167) {
  level = other167.level;
  center = other167.center;
  radius = other167.radius;
  color = other167.color;
  fill = other167.fill;
  __isset = other167.__isset;
  return *this;
}
void AddCircle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddCircle(";
  out << "level=" << to_string(level);
  out << ", " << "center=" << to_string(center);
  out << ", " << "radius=" << to_string(radius);
  out << ", " << "color=" << to_string(color);
  out << ", " << "fill=" << to_string(fill);
  out << ")";
}


AddTriangle::~AddTriangle() noexcept {
}


void AddTriangle::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddTriangle::__set_point1(const RpcVector2D& val) {
  this->point1 = val;
}

void AddTriangle::__set_point2(const RpcVector2D& val) {
  this->point2 = val;
}

void AddTriangle::__set_point3(const RpcVector2D& val) {
  this->point3 = val;
}

void AddTriangle::__set_color(const std::string& val) {
  this->color = val;
}

void AddTriangle::__set_fill(const bool val) {
  this->fill = val;
}
std::ostream& operator<<(std::ostream& out, const AddTriangle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddTriangle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast168;
          xfer += iprot->readI32(ecast168);
          this->level = static_cast<LoggerLevel::type>(ecast168);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point1.read(iprot);
          this->__isset.point1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point2.read(iprot);
          this->__isset.point2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point3.read(iprot);
          this->__isset.point3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fill);
          this->__isset.fill = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddTriangle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddTriangle");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point1", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->point1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point2", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->point2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point3", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->point3.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fill", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->fill);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddTriangle &a, AddTriangle &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.point1, b.point1);
  swap(a.point2, b.point2);
  swap(a.point3, b.point3);
  swap(a.color, b.color);
  swap(a.fill, b.fill);
  swap(a.__isset, b.__isset);
}

AddTriangle::AddTriangle(const AddTriangle& other169) {
  level = other169.level;
  point1 = other169.point1;
  point2 = other169.point2;
  point3 = other169.point3;
  color = other169.color;
  fill = other169.fill;
  __isset = other169.__isset;
}
AddTriangle& AddTriangle::operator=(const AddTriangle& other170) {
  level = other170.level;
  point1 = other170.point1;
  point2 = other170.point2;
  point3 = other170.point3;
  color = other170.color;
  fill = other170.fill;
  __isset = other170.__isset;
  return *this;
}
void AddTriangle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddTriangle(";
  out << "level=" << to_string(level);
  out << ", " << "point1=" << to_string(point1);
  out << ", " << "point2=" << to_string(point2);
  out << ", " << "point3=" << to_string(point3);
  out << ", " << "color=" << to_string(color);
  out << ", " << "fill=" << to_string(fill);
  out << ")";
}


AddRectangle::~AddRectangle() noexcept {
}


void AddRectangle::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddRectangle::__set_left(const double val) {
  this->left = val;
}

void AddRectangle::__set_top(const double val) {
  this->top = val;
}

void AddRectangle::__set_length(const double val) {
  this->length = val;
}

void AddRectangle::__set_width(const double val) {
  this->width = val;
}

void AddRectangle::__set_color(const std::string& val) {
  this->color = val;
}

void AddRectangle::__set_fill(const bool val) {
  this->fill = val;
}
std::ostream& operator<<(std::ostream& out, const AddRectangle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddRectangle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast171;
          xfer += iprot->readI32(ecast171);
          this->level = static_cast<LoggerLevel::type>(ecast171);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->top);
          this->__isset.top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fill);
          this->__isset.fill = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddRectangle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddRectangle");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->top);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fill", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->fill);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddRectangle &a, AddRectangle &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.left, b.left);
  swap(a.top, b.top);
  swap(a.length, b.length);
  swap(a.width, b.width);
  swap(a.color, b.color);
  swap(a.fill, b.fill);
  swap(a.__isset, b.__isset);
}

AddRectangle::AddRectangle(const AddRectangle& other172) {
  level = other172.level;
  left = other172.left;
  top = other172.top;
  length = other172.length;
  width = other172.width;
  color = other172.color;
  fill = other172.fill;
  __isset = other172.__isset;
}
AddRectangle& AddRectangle::operator=(const AddRectangle& other173) {
  level = other173.level;
  left = other173.left;
  top = other173.top;
  length = other173.length;
  width = other173.width;
  color = other173.color;
  fill = other173.fill;
  __isset = other173.__isset;
  return *this;
}
void AddRectangle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddRectangle(";
  out << "level=" << to_string(level);
  out << ", " << "left=" << to_string(left);
  out << ", " << "top=" << to_string(top);
  out << ", " << "length=" << to_string(length);
  out << ", " << "width=" << to_string(width);
  out << ", " << "color=" << to_string(color);
  out << ", " << "fill=" << to_string(fill);
  out << ")";
}


AddSector::~AddSector() noexcept {
}


void AddSector::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddSector::__set_center(const RpcVector2D& val) {
  this->center = val;
}

void AddSector::__set_min_radius(const double val) {
  this->min_radius = val;
}

void AddSector::__set_max_radius(const double val) {
  this->max_radius = val;
}

void AddSector::__set_start_angle(const double val) {
  this->start_angle = val;
}

void AddSector::__set_span_angel(const double val) {
  this->span_angel = val;
}

void AddSector::__set_color(const std::string& val) {
  this->color = val;
}

void AddSector::__set_fill(const bool val) {
  this->fill = val;
}
std::ostream& operator<<(std::ostream& out, const AddSector& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddSector::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast174;
          xfer += iprot->readI32(ecast174);
          this->level = static_cast<LoggerLevel::type>(ecast174);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->center.read(iprot);
          this->__isset.center = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_radius);
          this->__isset.min_radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_radius);
          this->__isset.max_radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_angle);
          this->__isset.start_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->span_angel);
          this->__isset.span_angel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fill);
          this->__isset.fill = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddSector::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddSector");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("center", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->center.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_radius", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->min_radius);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_radius", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->max_radius);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_angle", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->start_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("span_angel", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->span_angel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fill", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->fill);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddSector &a, AddSector &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.center, b.center);
  swap(a.min_radius, b.min_radius);
  swap(a.max_radius, b.max_radius);
  swap(a.start_angle, b.start_angle);
  swap(a.span_angel, b.span_angel);
  swap(a.color, b.color);
  swap(a.fill, b.fill);
  swap(a.__isset, b.__isset);
}

AddSector::AddSector(const AddSector& other175) {
  level = other175.level;
  center = other175.center;
  min_radius = other175.min_radius;
  max_radius = other175.max_radius;
  start_angle = other175.start_angle;
  span_angel = other175.span_angel;
  color = other175.color;
  fill = other175.fill;
  __isset = other175.__isset;
}
AddSector& AddSector::operator=(const AddSector& other176) {
  level = other176.level;
  center = other176.center;
  min_radius = other176.min_radius;
  max_radius = other176.max_radius;
  start_angle = other176.start_angle;
  span_angel = other176.span_angel;
  color = other176.color;
  fill = other176.fill;
  __isset = other176.__isset;
  return *this;
}
void AddSector::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddSector(";
  out << "level=" << to_string(level);
  out << ", " << "center=" << to_string(center);
  out << ", " << "min_radius=" << to_string(min_radius);
  out << ", " << "max_radius=" << to_string(max_radius);
  out << ", " << "start_angle=" << to_string(start_angle);
  out << ", " << "span_angel=" << to_string(span_angel);
  out << ", " << "color=" << to_string(color);
  out << ", " << "fill=" << to_string(fill);
  out << ")";
}


AddMessage::~AddMessage() noexcept {
}


void AddMessage::__set_level(const LoggerLevel::type val) {
  this->level = val;
}

void AddMessage::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void AddMessage::__set_message(const std::string& val) {
  this->message = val;
}

void AddMessage::__set_color(const std::string& val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const AddMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast177;
          xfer += iprot->readI32(ecast177);
          this->level = static_cast<LoggerLevel::type>(ecast177);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddMessage");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->level));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddMessage &a, AddMessage &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.position, b.position);
  swap(a.message, b.message);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

AddMessage::AddMessage(const AddMessage& other178) {
  level = other178.level;
  position = other178.position;
  message = other178.message;
  color = other178.color;
  __isset = other178.__isset;
}
AddMessage& AddMessage::operator=(const AddMessage& other179) {
  level = other179.level;
  position = other179.position;
  message = other179.message;
  color = other179.color;
  __isset = other179.__isset;
  return *this;
}
void AddMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddMessage(";
  out << "level=" << to_string(level);
  out << ", " << "position=" << to_string(position);
  out << ", " << "message=" << to_string(message);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


Log::~Log() noexcept {
}


void Log::__set_add_text(const AddText& val) {
  this->add_text = val;
__isset.add_text = true;
}

void Log::__set_add_point(const AddPoint& val) {
  this->add_point = val;
__isset.add_point = true;
}

void Log::__set_add_line(const AddLine& val) {
  this->add_line = val;
__isset.add_line = true;
}

void Log::__set_add_arc(const AddArc& val) {
  this->add_arc = val;
__isset.add_arc = true;
}

void Log::__set_add_circle(const AddCircle& val) {
  this->add_circle = val;
__isset.add_circle = true;
}

void Log::__set_add_triangle(const AddTriangle& val) {
  this->add_triangle = val;
__isset.add_triangle = true;
}

void Log::__set_add_rectangle(const AddRectangle& val) {
  this->add_rectangle = val;
__isset.add_rectangle = true;
}

void Log::__set_add_sector(const AddSector& val) {
  this->add_sector = val;
__isset.add_sector = true;
}

void Log::__set_add_message(const AddMessage& val) {
  this->add_message = val;
__isset.add_message = true;
}
std::ostream& operator<<(std::ostream& out, const Log& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Log::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_text.read(iprot);
          this->__isset.add_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_point.read(iprot);
          this->__isset.add_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_line.read(iprot);
          this->__isset.add_line = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_arc.read(iprot);
          this->__isset.add_arc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_circle.read(iprot);
          this->__isset.add_circle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_triangle.read(iprot);
          this->__isset.add_triangle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_rectangle.read(iprot);
          this->__isset.add_rectangle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_sector.read(iprot);
          this->__isset.add_sector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_message.read(iprot);
          this->__isset.add_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Log::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Log");

  if (this->__isset.add_text) {
    xfer += oprot->writeFieldBegin("add_text", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->add_text.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_point) {
    xfer += oprot->writeFieldBegin("add_point", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->add_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_line) {
    xfer += oprot->writeFieldBegin("add_line", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->add_line.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_arc) {
    xfer += oprot->writeFieldBegin("add_arc", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->add_arc.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_circle) {
    xfer += oprot->writeFieldBegin("add_circle", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->add_circle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_triangle) {
    xfer += oprot->writeFieldBegin("add_triangle", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->add_triangle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_rectangle) {
    xfer += oprot->writeFieldBegin("add_rectangle", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->add_rectangle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_sector) {
    xfer += oprot->writeFieldBegin("add_sector", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->add_sector.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_message) {
    xfer += oprot->writeFieldBegin("add_message", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->add_message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Log &a, Log &b) {
  using ::std::swap;
  swap(a.add_text, b.add_text);
  swap(a.add_point, b.add_point);
  swap(a.add_line, b.add_line);
  swap(a.add_arc, b.add_arc);
  swap(a.add_circle, b.add_circle);
  swap(a.add_triangle, b.add_triangle);
  swap(a.add_rectangle, b.add_rectangle);
  swap(a.add_sector, b.add_sector);
  swap(a.add_message, b.add_message);
  swap(a.__isset, b.__isset);
}

Log::Log(const Log& other180) {
  add_text = other180.add_text;
  add_point = other180.add_point;
  add_line = other180.add_line;
  add_arc = other180.add_arc;
  add_circle = other180.add_circle;
  add_triangle = other180.add_triangle;
  add_rectangle = other180.add_rectangle;
  add_sector = other180.add_sector;
  add_message = other180.add_message;
  __isset = other180.__isset;
}
Log& Log::operator=(const Log& other181) {
  add_text = other181.add_text;
  add_point = other181.add_point;
  add_line = other181.add_line;
  add_arc = other181.add_arc;
  add_circle = other181.add_circle;
  add_triangle = other181.add_triangle;
  add_rectangle = other181.add_rectangle;
  add_sector = other181.add_sector;
  add_message = other181.add_message;
  __isset = other181.__isset;
  return *this;
}
void Log::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Log(";
  out << "add_text="; (__isset.add_text ? (out << to_string(add_text)) : (out << "<null>"));
  out << ", " << "add_point="; (__isset.add_point ? (out << to_string(add_point)) : (out << "<null>"));
  out << ", " << "add_line="; (__isset.add_line ? (out << to_string(add_line)) : (out << "<null>"));
  out << ", " << "add_arc="; (__isset.add_arc ? (out << to_string(add_arc)) : (out << "<null>"));
  out << ", " << "add_circle="; (__isset.add_circle ? (out << to_string(add_circle)) : (out << "<null>"));
  out << ", " << "add_triangle="; (__isset.add_triangle ? (out << to_string(add_triangle)) : (out << "<null>"));
  out << ", " << "add_rectangle="; (__isset.add_rectangle ? (out << to_string(add_rectangle)) : (out << "<null>"));
  out << ", " << "add_sector="; (__isset.add_sector ? (out << to_string(add_sector)) : (out << "<null>"));
  out << ", " << "add_message="; (__isset.add_message ? (out << to_string(add_message)) : (out << "<null>"));
  out << ")";
}


DebugClient::~DebugClient() noexcept {
}


void DebugClient::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const DebugClient& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DebugClient::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DebugClient::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DebugClient");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DebugClient &a, DebugClient &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

DebugClient::DebugClient(const DebugClient& other182) {
  message = other182.message;
  __isset = other182.__isset;
}
DebugClient& DebugClient::operator=(const DebugClient& other183) {
  message = other183.message;
  __isset = other183.__isset;
  return *this;
}
void DebugClient::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DebugClient(";
  out << "message=" << to_string(message);
  out << ")";
}


Body_GoToPoint::~Body_GoToPoint() noexcept {
}


void Body_GoToPoint::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_GoToPoint::__set_distance_threshold(const double val) {
  this->distance_threshold = val;
}

void Body_GoToPoint::__set_max_dash_power(const double val) {
  this->max_dash_power = val;
}
std::ostream& operator<<(std::ostream& out, const Body_GoToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_GoToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance_threshold);
          this->__isset.distance_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_dash_power);
          this->__isset.max_dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_GoToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_GoToPoint");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance_threshold", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->distance_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_dash_power", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->max_dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_GoToPoint &a, Body_GoToPoint &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.distance_threshold, b.distance_threshold);
  swap(a.max_dash_power, b.max_dash_power);
  swap(a.__isset, b.__isset);
}

Body_GoToPoint::Body_GoToPoint(const Body_GoToPoint& other184) noexcept {
  target_point = other184.target_point;
  distance_threshold = other184.distance_threshold;
  max_dash_power = other184.max_dash_power;
  __isset = other184.__isset;
}
Body_GoToPoint& Body_GoToPoint::operator=(const Body_GoToPoint& other185) noexcept {
  target_point = other185.target_point;
  distance_threshold = other185.distance_threshold;
  max_dash_power = other185.max_dash_power;
  __isset = other185.__isset;
  return *this;
}
void Body_GoToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_GoToPoint(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "distance_threshold=" << to_string(distance_threshold);
  out << ", " << "max_dash_power=" << to_string(max_dash_power);
  out << ")";
}


Body_SmartKick::~Body_SmartKick() noexcept {
}


void Body_SmartKick::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_SmartKick::__set_first_speed(const double val) {
  this->first_speed = val;
}

void Body_SmartKick::__set_first_speed_threshold(const double val) {
  this->first_speed_threshold = val;
}

void Body_SmartKick::__set_max_steps(const int32_t val) {
  this->max_steps = val;
}
std::ostream& operator<<(std::ostream& out, const Body_SmartKick& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_SmartKick::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_speed);
          this->__isset.first_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_speed_threshold);
          this->__isset.first_speed_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_steps);
          this->__isset.max_steps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_SmartKick::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_SmartKick");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_speed", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->first_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_speed_threshold", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->first_speed_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_steps", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->max_steps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_SmartKick &a, Body_SmartKick &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.first_speed, b.first_speed);
  swap(a.first_speed_threshold, b.first_speed_threshold);
  swap(a.max_steps, b.max_steps);
  swap(a.__isset, b.__isset);
}

Body_SmartKick::Body_SmartKick(const Body_SmartKick& other186) noexcept {
  target_point = other186.target_point;
  first_speed = other186.first_speed;
  first_speed_threshold = other186.first_speed_threshold;
  max_steps = other186.max_steps;
  __isset = other186.__isset;
}
Body_SmartKick& Body_SmartKick::operator=(const Body_SmartKick& other187) noexcept {
  target_point = other187.target_point;
  first_speed = other187.first_speed;
  first_speed_threshold = other187.first_speed_threshold;
  max_steps = other187.max_steps;
  __isset = other187.__isset;
  return *this;
}
void Body_SmartKick::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_SmartKick(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "first_speed=" << to_string(first_speed);
  out << ", " << "first_speed_threshold=" << to_string(first_speed_threshold);
  out << ", " << "max_steps=" << to_string(max_steps);
  out << ")";
}


Bhv_BeforeKickOff::~Bhv_BeforeKickOff() noexcept {
}


void Bhv_BeforeKickOff::__set_point(const RpcVector2D& val) {
  this->point = val;
}
std::ostream& operator<<(std::ostream& out, const Bhv_BeforeKickOff& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_BeforeKickOff::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_BeforeKickOff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_BeforeKickOff");

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_BeforeKickOff &a, Bhv_BeforeKickOff &b) {
  using ::std::swap;
  swap(a.point, b.point);
  swap(a.__isset, b.__isset);
}

Bhv_BeforeKickOff::Bhv_BeforeKickOff(const Bhv_BeforeKickOff& other188) noexcept {
  point = other188.point;
  __isset = other188.__isset;
}
Bhv_BeforeKickOff& Bhv_BeforeKickOff::operator=(const Bhv_BeforeKickOff& other189) noexcept {
  point = other189.point;
  __isset = other189.__isset;
  return *this;
}
void Bhv_BeforeKickOff::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_BeforeKickOff(";
  out << "point=" << to_string(point);
  out << ")";
}


Bhv_BodyNeckToBall::~Bhv_BodyNeckToBall() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Bhv_BodyNeckToBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_BodyNeckToBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_BodyNeckToBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_BodyNeckToBall");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_BodyNeckToBall &a, Bhv_BodyNeckToBall &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Bhv_BodyNeckToBall::Bhv_BodyNeckToBall(const Bhv_BodyNeckToBall& other190) noexcept {
  (void) other190;
}
Bhv_BodyNeckToBall& Bhv_BodyNeckToBall::operator=(const Bhv_BodyNeckToBall& other191) noexcept {
  (void) other191;
  return *this;
}
void Bhv_BodyNeckToBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_BodyNeckToBall(";
  out << ")";
}


Bhv_BodyNeckToPoint::~Bhv_BodyNeckToPoint() noexcept {
}


void Bhv_BodyNeckToPoint::__set_point(const RpcVector2D& val) {
  this->point = val;
}
std::ostream& operator<<(std::ostream& out, const Bhv_BodyNeckToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_BodyNeckToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_BodyNeckToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_BodyNeckToPoint");

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_BodyNeckToPoint &a, Bhv_BodyNeckToPoint &b) {
  using ::std::swap;
  swap(a.point, b.point);
  swap(a.__isset, b.__isset);
}

Bhv_BodyNeckToPoint::Bhv_BodyNeckToPoint(const Bhv_BodyNeckToPoint& other192) noexcept {
  point = other192.point;
  __isset = other192.__isset;
}
Bhv_BodyNeckToPoint& Bhv_BodyNeckToPoint::operator=(const Bhv_BodyNeckToPoint& other193) noexcept {
  point = other193.point;
  __isset = other193.__isset;
  return *this;
}
void Bhv_BodyNeckToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_BodyNeckToPoint(";
  out << "point=" << to_string(point);
  out << ")";
}


Bhv_Emergency::~Bhv_Emergency() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Bhv_Emergency& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_Emergency::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_Emergency::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_Emergency");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_Emergency &a, Bhv_Emergency &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Bhv_Emergency::Bhv_Emergency(const Bhv_Emergency& other194) noexcept {
  (void) other194;
}
Bhv_Emergency& Bhv_Emergency::operator=(const Bhv_Emergency& other195) noexcept {
  (void) other195;
  return *this;
}
void Bhv_Emergency::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_Emergency(";
  out << ")";
}


Bhv_GoToPointLookBall::~Bhv_GoToPointLookBall() noexcept {
}


void Bhv_GoToPointLookBall::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Bhv_GoToPointLookBall::__set_distance_threshold(const double val) {
  this->distance_threshold = val;
}

void Bhv_GoToPointLookBall::__set_max_dash_power(const double val) {
  this->max_dash_power = val;
}
std::ostream& operator<<(std::ostream& out, const Bhv_GoToPointLookBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_GoToPointLookBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance_threshold);
          this->__isset.distance_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_dash_power);
          this->__isset.max_dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_GoToPointLookBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_GoToPointLookBall");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance_threshold", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->distance_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_dash_power", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->max_dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_GoToPointLookBall &a, Bhv_GoToPointLookBall &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.distance_threshold, b.distance_threshold);
  swap(a.max_dash_power, b.max_dash_power);
  swap(a.__isset, b.__isset);
}

Bhv_GoToPointLookBall::Bhv_GoToPointLookBall(const Bhv_GoToPointLookBall& other196) noexcept {
  target_point = other196.target_point;
  distance_threshold = other196.distance_threshold;
  max_dash_power = other196.max_dash_power;
  __isset = other196.__isset;
}
Bhv_GoToPointLookBall& Bhv_GoToPointLookBall::operator=(const Bhv_GoToPointLookBall& other197) noexcept {
  target_point = other197.target_point;
  distance_threshold = other197.distance_threshold;
  max_dash_power = other197.max_dash_power;
  __isset = other197.__isset;
  return *this;
}
void Bhv_GoToPointLookBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_GoToPointLookBall(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "distance_threshold=" << to_string(distance_threshold);
  out << ", " << "max_dash_power=" << to_string(max_dash_power);
  out << ")";
}


Bhv_NeckBodyToBall::~Bhv_NeckBodyToBall() noexcept {
}


void Bhv_NeckBodyToBall::__set_angle_buf(const double val) {
  this->angle_buf = val;
}
std::ostream& operator<<(std::ostream& out, const Bhv_NeckBodyToBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_NeckBodyToBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_buf);
          this->__isset.angle_buf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_NeckBodyToBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_NeckBodyToBall");

  xfer += oprot->writeFieldBegin("angle_buf", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->angle_buf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_NeckBodyToBall &a, Bhv_NeckBodyToBall &b) {
  using ::std::swap;
  swap(a.angle_buf, b.angle_buf);
  swap(a.__isset, b.__isset);
}

Bhv_NeckBodyToBall::Bhv_NeckBodyToBall(const Bhv_NeckBodyToBall& other198) noexcept {
  angle_buf = other198.angle_buf;
  __isset = other198.__isset;
}
Bhv_NeckBodyToBall& Bhv_NeckBodyToBall::operator=(const Bhv_NeckBodyToBall& other199) noexcept {
  angle_buf = other199.angle_buf;
  __isset = other199.__isset;
  return *this;
}
void Bhv_NeckBodyToBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_NeckBodyToBall(";
  out << "angle_buf=" << to_string(angle_buf);
  out << ")";
}


Bhv_NeckBodyToPoint::~Bhv_NeckBodyToPoint() noexcept {
}


void Bhv_NeckBodyToPoint::__set_point(const RpcVector2D& val) {
  this->point = val;
}

void Bhv_NeckBodyToPoint::__set_angle_buf(const double val) {
  this->angle_buf = val;
}
std::ostream& operator<<(std::ostream& out, const Bhv_NeckBodyToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_NeckBodyToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle_buf);
          this->__isset.angle_buf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_NeckBodyToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_NeckBodyToPoint");

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle_buf", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->angle_buf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_NeckBodyToPoint &a, Bhv_NeckBodyToPoint &b) {
  using ::std::swap;
  swap(a.point, b.point);
  swap(a.angle_buf, b.angle_buf);
  swap(a.__isset, b.__isset);
}

Bhv_NeckBodyToPoint::Bhv_NeckBodyToPoint(const Bhv_NeckBodyToPoint& other200) noexcept {
  point = other200.point;
  angle_buf = other200.angle_buf;
  __isset = other200.__isset;
}
Bhv_NeckBodyToPoint& Bhv_NeckBodyToPoint::operator=(const Bhv_NeckBodyToPoint& other201) noexcept {
  point = other201.point;
  angle_buf = other201.angle_buf;
  __isset = other201.__isset;
  return *this;
}
void Bhv_NeckBodyToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_NeckBodyToPoint(";
  out << "point=" << to_string(point);
  out << ", " << "angle_buf=" << to_string(angle_buf);
  out << ")";
}


Bhv_ScanField::~Bhv_ScanField() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Bhv_ScanField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Bhv_ScanField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bhv_ScanField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bhv_ScanField");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bhv_ScanField &a, Bhv_ScanField &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Bhv_ScanField::Bhv_ScanField(const Bhv_ScanField& other202) noexcept {
  (void) other202;
}
Bhv_ScanField& Bhv_ScanField::operator=(const Bhv_ScanField& other203) noexcept {
  (void) other203;
  return *this;
}
void Bhv_ScanField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bhv_ScanField(";
  out << ")";
}


Body_AdvanceBall::~Body_AdvanceBall() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Body_AdvanceBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_AdvanceBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_AdvanceBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_AdvanceBall");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_AdvanceBall &a, Body_AdvanceBall &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Body_AdvanceBall::Body_AdvanceBall(const Body_AdvanceBall& other204) noexcept {
  (void) other204;
}
Body_AdvanceBall& Body_AdvanceBall::operator=(const Body_AdvanceBall& other205) noexcept {
  (void) other205;
  return *this;
}
void Body_AdvanceBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_AdvanceBall(";
  out << ")";
}


Body_ClearBall::~Body_ClearBall() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Body_ClearBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_ClearBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_ClearBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_ClearBall");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_ClearBall &a, Body_ClearBall &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Body_ClearBall::Body_ClearBall(const Body_ClearBall& other206) noexcept {
  (void) other206;
}
Body_ClearBall& Body_ClearBall::operator=(const Body_ClearBall& other207) noexcept {
  (void) other207;
  return *this;
}
void Body_ClearBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_ClearBall(";
  out << ")";
}


Body_Dribble::~Body_Dribble() noexcept {
}


void Body_Dribble::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_Dribble::__set_distance_threshold(const double val) {
  this->distance_threshold = val;
}

void Body_Dribble::__set_dash_power(const double val) {
  this->dash_power = val;
}

void Body_Dribble::__set_dash_count(const int32_t val) {
  this->dash_count = val;
}

void Body_Dribble::__set_dodge(const bool val) {
  this->dodge = val;
}
std::ostream& operator<<(std::ostream& out, const Body_Dribble& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_Dribble::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance_threshold);
          this->__isset.distance_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power);
          this->__isset.dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dash_count);
          this->__isset.dash_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dodge);
          this->__isset.dodge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_Dribble::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_Dribble");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance_threshold", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->distance_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dash_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dodge", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->dodge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_Dribble &a, Body_Dribble &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.distance_threshold, b.distance_threshold);
  swap(a.dash_power, b.dash_power);
  swap(a.dash_count, b.dash_count);
  swap(a.dodge, b.dodge);
  swap(a.__isset, b.__isset);
}

Body_Dribble::Body_Dribble(const Body_Dribble& other208) noexcept {
  target_point = other208.target_point;
  distance_threshold = other208.distance_threshold;
  dash_power = other208.dash_power;
  dash_count = other208.dash_count;
  dodge = other208.dodge;
  __isset = other208.__isset;
}
Body_Dribble& Body_Dribble::operator=(const Body_Dribble& other209) noexcept {
  target_point = other209.target_point;
  distance_threshold = other209.distance_threshold;
  dash_power = other209.dash_power;
  dash_count = other209.dash_count;
  dodge = other209.dodge;
  __isset = other209.__isset;
  return *this;
}
void Body_Dribble::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_Dribble(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "distance_threshold=" << to_string(distance_threshold);
  out << ", " << "dash_power=" << to_string(dash_power);
  out << ", " << "dash_count=" << to_string(dash_count);
  out << ", " << "dodge=" << to_string(dodge);
  out << ")";
}


Body_GoToPointDodge::~Body_GoToPointDodge() noexcept {
}


void Body_GoToPointDodge::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_GoToPointDodge::__set_dash_power(const double val) {
  this->dash_power = val;
}
std::ostream& operator<<(std::ostream& out, const Body_GoToPointDodge& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_GoToPointDodge::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power);
          this->__isset.dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_GoToPointDodge::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_GoToPointDodge");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_GoToPointDodge &a, Body_GoToPointDodge &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.dash_power, b.dash_power);
  swap(a.__isset, b.__isset);
}

Body_GoToPointDodge::Body_GoToPointDodge(const Body_GoToPointDodge& other210) noexcept {
  target_point = other210.target_point;
  dash_power = other210.dash_power;
  __isset = other210.__isset;
}
Body_GoToPointDodge& Body_GoToPointDodge::operator=(const Body_GoToPointDodge& other211) noexcept {
  target_point = other211.target_point;
  dash_power = other211.dash_power;
  __isset = other211.__isset;
  return *this;
}
void Body_GoToPointDodge::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_GoToPointDodge(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "dash_power=" << to_string(dash_power);
  out << ")";
}


Body_HoldBall::~Body_HoldBall() noexcept {
}


void Body_HoldBall::__set_do_turn(const bool val) {
  this->do_turn = val;
}

void Body_HoldBall::__set_turn_target_point(const RpcVector2D& val) {
  this->turn_target_point = val;
}

void Body_HoldBall::__set_kick_target_point(const RpcVector2D& val) {
  this->kick_target_point = val;
}
std::ostream& operator<<(std::ostream& out, const Body_HoldBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_HoldBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->do_turn);
          this->__isset.do_turn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->turn_target_point.read(iprot);
          this->__isset.turn_target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->kick_target_point.read(iprot);
          this->__isset.kick_target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_HoldBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_HoldBall");

  xfer += oprot->writeFieldBegin("do_turn", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->do_turn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("turn_target_point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->turn_target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_target_point", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->kick_target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_HoldBall &a, Body_HoldBall &b) {
  using ::std::swap;
  swap(a.do_turn, b.do_turn);
  swap(a.turn_target_point, b.turn_target_point);
  swap(a.kick_target_point, b.kick_target_point);
  swap(a.__isset, b.__isset);
}

Body_HoldBall::Body_HoldBall(const Body_HoldBall& other212) noexcept {
  do_turn = other212.do_turn;
  turn_target_point = other212.turn_target_point;
  kick_target_point = other212.kick_target_point;
  __isset = other212.__isset;
}
Body_HoldBall& Body_HoldBall::operator=(const Body_HoldBall& other213) noexcept {
  do_turn = other213.do_turn;
  turn_target_point = other213.turn_target_point;
  kick_target_point = other213.kick_target_point;
  __isset = other213.__isset;
  return *this;
}
void Body_HoldBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_HoldBall(";
  out << "do_turn=" << to_string(do_turn);
  out << ", " << "turn_target_point=" << to_string(turn_target_point);
  out << ", " << "kick_target_point=" << to_string(kick_target_point);
  out << ")";
}


Body_Intercept::~Body_Intercept() noexcept {
}


void Body_Intercept::__set_save_recovery(const bool val) {
  this->save_recovery = val;
}

void Body_Intercept::__set_face_point(const RpcVector2D& val) {
  this->face_point = val;
}
std::ostream& operator<<(std::ostream& out, const Body_Intercept& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_Intercept::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->save_recovery);
          this->__isset.save_recovery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->face_point.read(iprot);
          this->__isset.face_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_Intercept::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_Intercept");

  xfer += oprot->writeFieldBegin("save_recovery", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->save_recovery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("face_point", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->face_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_Intercept &a, Body_Intercept &b) {
  using ::std::swap;
  swap(a.save_recovery, b.save_recovery);
  swap(a.face_point, b.face_point);
  swap(a.__isset, b.__isset);
}

Body_Intercept::Body_Intercept(const Body_Intercept& other214) noexcept {
  save_recovery = other214.save_recovery;
  face_point = other214.face_point;
  __isset = other214.__isset;
}
Body_Intercept& Body_Intercept::operator=(const Body_Intercept& other215) noexcept {
  save_recovery = other215.save_recovery;
  face_point = other215.face_point;
  __isset = other215.__isset;
  return *this;
}
void Body_Intercept::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_Intercept(";
  out << "save_recovery=" << to_string(save_recovery);
  out << ", " << "face_point=" << to_string(face_point);
  out << ")";
}


Body_KickOneStep::~Body_KickOneStep() noexcept {
}


void Body_KickOneStep::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_KickOneStep::__set_first_speed(const double val) {
  this->first_speed = val;
}

void Body_KickOneStep::__set_force_mode(const bool val) {
  this->force_mode = val;
}
std::ostream& operator<<(std::ostream& out, const Body_KickOneStep& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_KickOneStep::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_speed);
          this->__isset.first_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->force_mode);
          this->__isset.force_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_KickOneStep::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_KickOneStep");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_speed", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->first_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("force_mode", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->force_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_KickOneStep &a, Body_KickOneStep &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.first_speed, b.first_speed);
  swap(a.force_mode, b.force_mode);
  swap(a.__isset, b.__isset);
}

Body_KickOneStep::Body_KickOneStep(const Body_KickOneStep& other216) noexcept {
  target_point = other216.target_point;
  first_speed = other216.first_speed;
  force_mode = other216.force_mode;
  __isset = other216.__isset;
}
Body_KickOneStep& Body_KickOneStep::operator=(const Body_KickOneStep& other217) noexcept {
  target_point = other217.target_point;
  first_speed = other217.first_speed;
  force_mode = other217.force_mode;
  __isset = other217.__isset;
  return *this;
}
void Body_KickOneStep::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_KickOneStep(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "first_speed=" << to_string(first_speed);
  out << ", " << "force_mode=" << to_string(force_mode);
  out << ")";
}


Body_StopBall::~Body_StopBall() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Body_StopBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_StopBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_StopBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_StopBall");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_StopBall &a, Body_StopBall &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Body_StopBall::Body_StopBall(const Body_StopBall& other218) noexcept {
  (void) other218;
}
Body_StopBall& Body_StopBall::operator=(const Body_StopBall& other219) noexcept {
  (void) other219;
  return *this;
}
void Body_StopBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_StopBall(";
  out << ")";
}


Body_StopDash::~Body_StopDash() noexcept {
}


void Body_StopDash::__set_save_recovery(const bool val) {
  this->save_recovery = val;
}
std::ostream& operator<<(std::ostream& out, const Body_StopDash& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_StopDash::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->save_recovery);
          this->__isset.save_recovery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_StopDash::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_StopDash");

  xfer += oprot->writeFieldBegin("save_recovery", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->save_recovery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_StopDash &a, Body_StopDash &b) {
  using ::std::swap;
  swap(a.save_recovery, b.save_recovery);
  swap(a.__isset, b.__isset);
}

Body_StopDash::Body_StopDash(const Body_StopDash& other220) noexcept {
  save_recovery = other220.save_recovery;
  __isset = other220.__isset;
}
Body_StopDash& Body_StopDash::operator=(const Body_StopDash& other221) noexcept {
  save_recovery = other221.save_recovery;
  __isset = other221.__isset;
  return *this;
}
void Body_StopDash::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_StopDash(";
  out << "save_recovery=" << to_string(save_recovery);
  out << ")";
}


Body_TackleToPoint::~Body_TackleToPoint() noexcept {
}


void Body_TackleToPoint::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_TackleToPoint::__set_min_probability(const double val) {
  this->min_probability = val;
}

void Body_TackleToPoint::__set_min_speed(const double val) {
  this->min_speed = val;
}
std::ostream& operator<<(std::ostream& out, const Body_TackleToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_TackleToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_probability);
          this->__isset.min_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_speed);
          this->__isset.min_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_TackleToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_TackleToPoint");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_probability", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->min_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_speed", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->min_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_TackleToPoint &a, Body_TackleToPoint &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.min_probability, b.min_probability);
  swap(a.min_speed, b.min_speed);
  swap(a.__isset, b.__isset);
}

Body_TackleToPoint::Body_TackleToPoint(const Body_TackleToPoint& other222) noexcept {
  target_point = other222.target_point;
  min_probability = other222.min_probability;
  min_speed = other222.min_speed;
  __isset = other222.__isset;
}
Body_TackleToPoint& Body_TackleToPoint::operator=(const Body_TackleToPoint& other223) noexcept {
  target_point = other223.target_point;
  min_probability = other223.min_probability;
  min_speed = other223.min_speed;
  __isset = other223.__isset;
  return *this;
}
void Body_TackleToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_TackleToPoint(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "min_probability=" << to_string(min_probability);
  out << ", " << "min_speed=" << to_string(min_speed);
  out << ")";
}


Body_TurnToAngle::~Body_TurnToAngle() noexcept {
}


void Body_TurnToAngle::__set_angle(const double val) {
  this->angle = val;
}
std::ostream& operator<<(std::ostream& out, const Body_TurnToAngle& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_TurnToAngle::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle);
          this->__isset.angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_TurnToAngle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_TurnToAngle");

  xfer += oprot->writeFieldBegin("angle", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_TurnToAngle &a, Body_TurnToAngle &b) {
  using ::std::swap;
  swap(a.angle, b.angle);
  swap(a.__isset, b.__isset);
}

Body_TurnToAngle::Body_TurnToAngle(const Body_TurnToAngle& other224) noexcept {
  angle = other224.angle;
  __isset = other224.__isset;
}
Body_TurnToAngle& Body_TurnToAngle::operator=(const Body_TurnToAngle& other225) noexcept {
  angle = other225.angle;
  __isset = other225.__isset;
  return *this;
}
void Body_TurnToAngle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_TurnToAngle(";
  out << "angle=" << to_string(angle);
  out << ")";
}


Body_TurnToBall::~Body_TurnToBall() noexcept {
}


void Body_TurnToBall::__set_cycle(const int32_t val) {
  this->cycle = val;
}
std::ostream& operator<<(std::ostream& out, const Body_TurnToBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_TurnToBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycle);
          this->__isset.cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_TurnToBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_TurnToBall");

  xfer += oprot->writeFieldBegin("cycle", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_TurnToBall &a, Body_TurnToBall &b) {
  using ::std::swap;
  swap(a.cycle, b.cycle);
  swap(a.__isset, b.__isset);
}

Body_TurnToBall::Body_TurnToBall(const Body_TurnToBall& other226) noexcept {
  cycle = other226.cycle;
  __isset = other226.__isset;
}
Body_TurnToBall& Body_TurnToBall::operator=(const Body_TurnToBall& other227) noexcept {
  cycle = other227.cycle;
  __isset = other227.__isset;
  return *this;
}
void Body_TurnToBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_TurnToBall(";
  out << "cycle=" << to_string(cycle);
  out << ")";
}


Body_TurnToPoint::~Body_TurnToPoint() noexcept {
}


void Body_TurnToPoint::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void Body_TurnToPoint::__set_cycle(const int32_t val) {
  this->cycle = val;
}
std::ostream& operator<<(std::ostream& out, const Body_TurnToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Body_TurnToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycle);
          this->__isset.cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Body_TurnToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Body_TurnToPoint");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cycle", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Body_TurnToPoint &a, Body_TurnToPoint &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.cycle, b.cycle);
  swap(a.__isset, b.__isset);
}

Body_TurnToPoint::Body_TurnToPoint(const Body_TurnToPoint& other228) noexcept {
  target_point = other228.target_point;
  cycle = other228.cycle;
  __isset = other228.__isset;
}
Body_TurnToPoint& Body_TurnToPoint::operator=(const Body_TurnToPoint& other229) noexcept {
  target_point = other229.target_point;
  cycle = other229.cycle;
  __isset = other229.__isset;
  return *this;
}
void Body_TurnToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Body_TurnToPoint(";
  out << "target_point=" << to_string(target_point);
  out << ", " << "cycle=" << to_string(cycle);
  out << ")";
}


Focus_MoveToPoint::~Focus_MoveToPoint() noexcept {
}


void Focus_MoveToPoint::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}
std::ostream& operator<<(std::ostream& out, const Focus_MoveToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Focus_MoveToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Focus_MoveToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Focus_MoveToPoint");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Focus_MoveToPoint &a, Focus_MoveToPoint &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.__isset, b.__isset);
}

Focus_MoveToPoint::Focus_MoveToPoint(const Focus_MoveToPoint& other230) noexcept {
  target_point = other230.target_point;
  __isset = other230.__isset;
}
Focus_MoveToPoint& Focus_MoveToPoint::operator=(const Focus_MoveToPoint& other231) noexcept {
  target_point = other231.target_point;
  __isset = other231.__isset;
  return *this;
}
void Focus_MoveToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Focus_MoveToPoint(";
  out << "target_point=" << to_string(target_point);
  out << ")";
}


Focus_Reset::~Focus_Reset() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Focus_Reset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Focus_Reset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Focus_Reset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Focus_Reset");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Focus_Reset &a, Focus_Reset &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Focus_Reset::Focus_Reset(const Focus_Reset& other232) noexcept {
  (void) other232;
}
Focus_Reset& Focus_Reset::operator=(const Focus_Reset& other233) noexcept {
  (void) other233;
  return *this;
}
void Focus_Reset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Focus_Reset(";
  out << ")";
}


Neck_ScanField::~Neck_ScanField() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Neck_ScanField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_ScanField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_ScanField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_ScanField");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_ScanField &a, Neck_ScanField &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Neck_ScanField::Neck_ScanField(const Neck_ScanField& other234) noexcept {
  (void) other234;
}
Neck_ScanField& Neck_ScanField::operator=(const Neck_ScanField& other235) noexcept {
  (void) other235;
  return *this;
}
void Neck_ScanField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_ScanField(";
  out << ")";
}


Neck_ScanPlayers::~Neck_ScanPlayers() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Neck_ScanPlayers& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_ScanPlayers::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_ScanPlayers::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_ScanPlayers");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_ScanPlayers &a, Neck_ScanPlayers &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Neck_ScanPlayers::Neck_ScanPlayers(const Neck_ScanPlayers& other236) noexcept {
  (void) other236;
}
Neck_ScanPlayers& Neck_ScanPlayers::operator=(const Neck_ScanPlayers& other237) noexcept {
  (void) other237;
  return *this;
}
void Neck_ScanPlayers::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_ScanPlayers(";
  out << ")";
}


Neck_TurnToBallAndPlayer::~Neck_TurnToBallAndPlayer() noexcept {
}


void Neck_TurnToBallAndPlayer::__set_side(const Side::type val) {
  this->side = val;
}

void Neck_TurnToBallAndPlayer::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void Neck_TurnToBallAndPlayer::__set_count_threshold(const int32_t val) {
  this->count_threshold = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToBallAndPlayer& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToBallAndPlayer::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast238;
          xfer += iprot->readI32(ecast238);
          this->side = static_cast<Side::type>(ecast238);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_threshold);
          this->__isset.count_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToBallAndPlayer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToBallAndPlayer");

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count_threshold", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToBallAndPlayer &a, Neck_TurnToBallAndPlayer &b) {
  using ::std::swap;
  swap(a.side, b.side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.count_threshold, b.count_threshold);
  swap(a.__isset, b.__isset);
}

Neck_TurnToBallAndPlayer::Neck_TurnToBallAndPlayer(const Neck_TurnToBallAndPlayer& other239) noexcept {
  side = other239.side;
  uniform_number = other239.uniform_number;
  count_threshold = other239.count_threshold;
  __isset = other239.__isset;
}
Neck_TurnToBallAndPlayer& Neck_TurnToBallAndPlayer::operator=(const Neck_TurnToBallAndPlayer& other240) noexcept {
  side = other240.side;
  uniform_number = other240.uniform_number;
  count_threshold = other240.count_threshold;
  __isset = other240.__isset;
  return *this;
}
void Neck_TurnToBallAndPlayer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToBallAndPlayer(";
  out << "side=" << to_string(side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "count_threshold=" << to_string(count_threshold);
  out << ")";
}


Neck_TurnToBallOrScan::~Neck_TurnToBallOrScan() noexcept {
}


void Neck_TurnToBallOrScan::__set_count_threshold(const int32_t val) {
  this->count_threshold = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToBallOrScan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToBallOrScan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_threshold);
          this->__isset.count_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToBallOrScan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToBallOrScan");

  xfer += oprot->writeFieldBegin("count_threshold", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToBallOrScan &a, Neck_TurnToBallOrScan &b) {
  using ::std::swap;
  swap(a.count_threshold, b.count_threshold);
  swap(a.__isset, b.__isset);
}

Neck_TurnToBallOrScan::Neck_TurnToBallOrScan(const Neck_TurnToBallOrScan& other241) noexcept {
  count_threshold = other241.count_threshold;
  __isset = other241.__isset;
}
Neck_TurnToBallOrScan& Neck_TurnToBallOrScan::operator=(const Neck_TurnToBallOrScan& other242) noexcept {
  count_threshold = other242.count_threshold;
  __isset = other242.__isset;
  return *this;
}
void Neck_TurnToBallOrScan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToBallOrScan(";
  out << "count_threshold=" << to_string(count_threshold);
  out << ")";
}


Neck_TurnToBall::~Neck_TurnToBall() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Neck_TurnToBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToBall");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToBall &a, Neck_TurnToBall &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Neck_TurnToBall::Neck_TurnToBall(const Neck_TurnToBall& other243) noexcept {
  (void) other243;
}
Neck_TurnToBall& Neck_TurnToBall::operator=(const Neck_TurnToBall& other244) noexcept {
  (void) other244;
  return *this;
}
void Neck_TurnToBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToBall(";
  out << ")";
}


Neck_TurnToGoalieOrScan::~Neck_TurnToGoalieOrScan() noexcept {
}


void Neck_TurnToGoalieOrScan::__set_count_threshold(const int32_t val) {
  this->count_threshold = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToGoalieOrScan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToGoalieOrScan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_threshold);
          this->__isset.count_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToGoalieOrScan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToGoalieOrScan");

  xfer += oprot->writeFieldBegin("count_threshold", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToGoalieOrScan &a, Neck_TurnToGoalieOrScan &b) {
  using ::std::swap;
  swap(a.count_threshold, b.count_threshold);
  swap(a.__isset, b.__isset);
}

Neck_TurnToGoalieOrScan::Neck_TurnToGoalieOrScan(const Neck_TurnToGoalieOrScan& other245) noexcept {
  count_threshold = other245.count_threshold;
  __isset = other245.__isset;
}
Neck_TurnToGoalieOrScan& Neck_TurnToGoalieOrScan::operator=(const Neck_TurnToGoalieOrScan& other246) noexcept {
  count_threshold = other246.count_threshold;
  __isset = other246.__isset;
  return *this;
}
void Neck_TurnToGoalieOrScan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToGoalieOrScan(";
  out << "count_threshold=" << to_string(count_threshold);
  out << ")";
}


Neck_TurnToLowConfTeammate::~Neck_TurnToLowConfTeammate() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Neck_TurnToLowConfTeammate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToLowConfTeammate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToLowConfTeammate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToLowConfTeammate");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToLowConfTeammate &a, Neck_TurnToLowConfTeammate &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Neck_TurnToLowConfTeammate::Neck_TurnToLowConfTeammate(const Neck_TurnToLowConfTeammate& other247) noexcept {
  (void) other247;
}
Neck_TurnToLowConfTeammate& Neck_TurnToLowConfTeammate::operator=(const Neck_TurnToLowConfTeammate& other248) noexcept {
  (void) other248;
  return *this;
}
void Neck_TurnToLowConfTeammate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToLowConfTeammate(";
  out << ")";
}


Neck_TurnToPlayerOrScan::~Neck_TurnToPlayerOrScan() noexcept {
}


void Neck_TurnToPlayerOrScan::__set_side(const Side::type val) {
  this->side = val;
}

void Neck_TurnToPlayerOrScan::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void Neck_TurnToPlayerOrScan::__set_count_threshold(const int32_t val) {
  this->count_threshold = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToPlayerOrScan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToPlayerOrScan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast249;
          xfer += iprot->readI32(ecast249);
          this->side = static_cast<Side::type>(ecast249);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_threshold);
          this->__isset.count_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToPlayerOrScan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToPlayerOrScan");

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count_threshold", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToPlayerOrScan &a, Neck_TurnToPlayerOrScan &b) {
  using ::std::swap;
  swap(a.side, b.side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.count_threshold, b.count_threshold);
  swap(a.__isset, b.__isset);
}

Neck_TurnToPlayerOrScan::Neck_TurnToPlayerOrScan(const Neck_TurnToPlayerOrScan& other250) noexcept {
  side = other250.side;
  uniform_number = other250.uniform_number;
  count_threshold = other250.count_threshold;
  __isset = other250.__isset;
}
Neck_TurnToPlayerOrScan& Neck_TurnToPlayerOrScan::operator=(const Neck_TurnToPlayerOrScan& other251) noexcept {
  side = other251.side;
  uniform_number = other251.uniform_number;
  count_threshold = other251.count_threshold;
  __isset = other251.__isset;
  return *this;
}
void Neck_TurnToPlayerOrScan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToPlayerOrScan(";
  out << "side=" << to_string(side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "count_threshold=" << to_string(count_threshold);
  out << ")";
}


Neck_TurnToPoint::~Neck_TurnToPoint() noexcept {
}


void Neck_TurnToPoint::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToPoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToPoint");

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToPoint &a, Neck_TurnToPoint &b) {
  using ::std::swap;
  swap(a.target_point, b.target_point);
  swap(a.__isset, b.__isset);
}

Neck_TurnToPoint::Neck_TurnToPoint(const Neck_TurnToPoint& other252) noexcept {
  target_point = other252.target_point;
  __isset = other252.__isset;
}
Neck_TurnToPoint& Neck_TurnToPoint::operator=(const Neck_TurnToPoint& other253) noexcept {
  target_point = other253.target_point;
  __isset = other253.__isset;
  return *this;
}
void Neck_TurnToPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToPoint(";
  out << "target_point=" << to_string(target_point);
  out << ")";
}


Neck_TurnToRelative::~Neck_TurnToRelative() noexcept {
}


void Neck_TurnToRelative::__set_angle(const double val) {
  this->angle = val;
}
std::ostream& operator<<(std::ostream& out, const Neck_TurnToRelative& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Neck_TurnToRelative::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle);
          this->__isset.angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Neck_TurnToRelative::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Neck_TurnToRelative");

  xfer += oprot->writeFieldBegin("angle", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Neck_TurnToRelative &a, Neck_TurnToRelative &b) {
  using ::std::swap;
  swap(a.angle, b.angle);
  swap(a.__isset, b.__isset);
}

Neck_TurnToRelative::Neck_TurnToRelative(const Neck_TurnToRelative& other254) noexcept {
  angle = other254.angle;
  __isset = other254.__isset;
}
Neck_TurnToRelative& Neck_TurnToRelative::operator=(const Neck_TurnToRelative& other255) noexcept {
  angle = other255.angle;
  __isset = other255.__isset;
  return *this;
}
void Neck_TurnToRelative::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Neck_TurnToRelative(";
  out << "angle=" << to_string(angle);
  out << ")";
}


View_ChangeWidth::~View_ChangeWidth() noexcept {
}


void View_ChangeWidth::__set_view_width(const ViewWidth::type val) {
  this->view_width = val;
}
std::ostream& operator<<(std::ostream& out, const View_ChangeWidth& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t View_ChangeWidth::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast256;
          xfer += iprot->readI32(ecast256);
          this->view_width = static_cast<ViewWidth::type>(ecast256);
          this->__isset.view_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t View_ChangeWidth::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("View_ChangeWidth");

  xfer += oprot->writeFieldBegin("view_width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->view_width));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(View_ChangeWidth &a, View_ChangeWidth &b) {
  using ::std::swap;
  swap(a.view_width, b.view_width);
  swap(a.__isset, b.__isset);
}

View_ChangeWidth::View_ChangeWidth(const View_ChangeWidth& other257) noexcept {
  view_width = other257.view_width;
  __isset = other257.__isset;
}
View_ChangeWidth& View_ChangeWidth::operator=(const View_ChangeWidth& other258) noexcept {
  view_width = other258.view_width;
  __isset = other258.__isset;
  return *this;
}
void View_ChangeWidth::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "View_ChangeWidth(";
  out << "view_width=" << to_string(view_width);
  out << ")";
}


View_Normal::~View_Normal() noexcept {
}

std::ostream& operator<<(std::ostream& out, const View_Normal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t View_Normal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t View_Normal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("View_Normal");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(View_Normal &a, View_Normal &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

View_Normal::View_Normal(const View_Normal& other259) noexcept {
  (void) other259;
}
View_Normal& View_Normal::operator=(const View_Normal& other260) noexcept {
  (void) other260;
  return *this;
}
void View_Normal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "View_Normal(";
  out << ")";
}


View_Synch::~View_Synch() noexcept {
}

std::ostream& operator<<(std::ostream& out, const View_Synch& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t View_Synch::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t View_Synch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("View_Synch");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(View_Synch &a, View_Synch &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

View_Synch::View_Synch(const View_Synch& other261) noexcept {
  (void) other261;
}
View_Synch& View_Synch::operator=(const View_Synch& other262) noexcept {
  (void) other262;
  return *this;
}
void View_Synch::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "View_Synch(";
  out << ")";
}


View_Wide::~View_Wide() noexcept {
}

std::ostream& operator<<(std::ostream& out, const View_Wide& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t View_Wide::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t View_Wide::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("View_Wide");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(View_Wide &a, View_Wide &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

View_Wide::View_Wide(const View_Wide& other263) noexcept {
  (void) other263;
}
View_Wide& View_Wide::operator=(const View_Wide& other264) noexcept {
  (void) other264;
  return *this;
}
void View_Wide::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "View_Wide(";
  out << ")";
}


HeliosGoalie::~HeliosGoalie() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosGoalie& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosGoalie::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosGoalie::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosGoalie");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosGoalie &a, HeliosGoalie &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosGoalie::HeliosGoalie(const HeliosGoalie& other265) noexcept {
  (void) other265;
}
HeliosGoalie& HeliosGoalie::operator=(const HeliosGoalie& other266) noexcept {
  (void) other266;
  return *this;
}
void HeliosGoalie::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosGoalie(";
  out << ")";
}


HeliosGoalieMove::~HeliosGoalieMove() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosGoalieMove& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosGoalieMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosGoalieMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosGoalieMove");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosGoalieMove &a, HeliosGoalieMove &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosGoalieMove::HeliosGoalieMove(const HeliosGoalieMove& other267) noexcept {
  (void) other267;
}
HeliosGoalieMove& HeliosGoalieMove::operator=(const HeliosGoalieMove& other268) noexcept {
  (void) other268;
  return *this;
}
void HeliosGoalieMove::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosGoalieMove(";
  out << ")";
}


HeliosGoalieKick::~HeliosGoalieKick() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosGoalieKick& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosGoalieKick::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosGoalieKick::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosGoalieKick");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosGoalieKick &a, HeliosGoalieKick &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosGoalieKick::HeliosGoalieKick(const HeliosGoalieKick& other269) noexcept {
  (void) other269;
}
HeliosGoalieKick& HeliosGoalieKick::operator=(const HeliosGoalieKick& other270) noexcept {
  (void) other270;
  return *this;
}
void HeliosGoalieKick::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosGoalieKick(";
  out << ")";
}


HeliosShoot::~HeliosShoot() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosShoot& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosShoot::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosShoot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosShoot");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosShoot &a, HeliosShoot &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosShoot::HeliosShoot(const HeliosShoot& other271) noexcept {
  (void) other271;
}
HeliosShoot& HeliosShoot::operator=(const HeliosShoot& other272) noexcept {
  (void) other272;
  return *this;
}
void HeliosShoot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosShoot(";
  out << ")";
}


HeliosOffensivePlanner::~HeliosOffensivePlanner() noexcept {
}


void HeliosOffensivePlanner::__set_direct_pass(const bool val) {
  this->direct_pass = val;
}

void HeliosOffensivePlanner::__set_lead_pass(const bool val) {
  this->lead_pass = val;
}

void HeliosOffensivePlanner::__set_through_pass(const bool val) {
  this->through_pass = val;
}

void HeliosOffensivePlanner::__set_short_dribble(const bool val) {
  this->short_dribble = val;
}

void HeliosOffensivePlanner::__set_long_dribble(const bool val) {
  this->long_dribble = val;
}

void HeliosOffensivePlanner::__set_cross(const bool val) {
  this->cross = val;
}

void HeliosOffensivePlanner::__set_simple_pass(const bool val) {
  this->simple_pass = val;
}

void HeliosOffensivePlanner::__set_simple_dribble(const bool val) {
  this->simple_dribble = val;
}

void HeliosOffensivePlanner::__set_simple_shoot(const bool val) {
  this->simple_shoot = val;
}

void HeliosOffensivePlanner::__set_server_side_decision(const bool val) {
  this->server_side_decision = val;
}
std::ostream& operator<<(std::ostream& out, const HeliosOffensivePlanner& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosOffensivePlanner::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->direct_pass);
          this->__isset.direct_pass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lead_pass);
          this->__isset.lead_pass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->through_pass);
          this->__isset.through_pass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->short_dribble);
          this->__isset.short_dribble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->long_dribble);
          this->__isset.long_dribble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->cross);
          this->__isset.cross = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simple_pass);
          this->__isset.simple_pass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simple_dribble);
          this->__isset.simple_dribble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simple_shoot);
          this->__isset.simple_shoot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->server_side_decision);
          this->__isset.server_side_decision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosOffensivePlanner::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosOffensivePlanner");

  xfer += oprot->writeFieldBegin("direct_pass", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->direct_pass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lead_pass", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->lead_pass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("through_pass", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->through_pass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("short_dribble", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->short_dribble);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("long_dribble", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->long_dribble);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cross", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->cross);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("simple_pass", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->simple_pass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("simple_dribble", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->simple_dribble);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("simple_shoot", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->simple_shoot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_side_decision", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->server_side_decision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosOffensivePlanner &a, HeliosOffensivePlanner &b) {
  using ::std::swap;
  swap(a.direct_pass, b.direct_pass);
  swap(a.lead_pass, b.lead_pass);
  swap(a.through_pass, b.through_pass);
  swap(a.short_dribble, b.short_dribble);
  swap(a.long_dribble, b.long_dribble);
  swap(a.cross, b.cross);
  swap(a.simple_pass, b.simple_pass);
  swap(a.simple_dribble, b.simple_dribble);
  swap(a.simple_shoot, b.simple_shoot);
  swap(a.server_side_decision, b.server_side_decision);
  swap(a.__isset, b.__isset);
}

HeliosOffensivePlanner::HeliosOffensivePlanner(const HeliosOffensivePlanner& other273) noexcept {
  direct_pass = other273.direct_pass;
  lead_pass = other273.lead_pass;
  through_pass = other273.through_pass;
  short_dribble = other273.short_dribble;
  long_dribble = other273.long_dribble;
  cross = other273.cross;
  simple_pass = other273.simple_pass;
  simple_dribble = other273.simple_dribble;
  simple_shoot = other273.simple_shoot;
  server_side_decision = other273.server_side_decision;
  __isset = other273.__isset;
}
HeliosOffensivePlanner& HeliosOffensivePlanner::operator=(const HeliosOffensivePlanner& other274) noexcept {
  direct_pass = other274.direct_pass;
  lead_pass = other274.lead_pass;
  through_pass = other274.through_pass;
  short_dribble = other274.short_dribble;
  long_dribble = other274.long_dribble;
  cross = other274.cross;
  simple_pass = other274.simple_pass;
  simple_dribble = other274.simple_dribble;
  simple_shoot = other274.simple_shoot;
  server_side_decision = other274.server_side_decision;
  __isset = other274.__isset;
  return *this;
}
void HeliosOffensivePlanner::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosOffensivePlanner(";
  out << "direct_pass=" << to_string(direct_pass);
  out << ", " << "lead_pass=" << to_string(lead_pass);
  out << ", " << "through_pass=" << to_string(through_pass);
  out << ", " << "short_dribble=" << to_string(short_dribble);
  out << ", " << "long_dribble=" << to_string(long_dribble);
  out << ", " << "cross=" << to_string(cross);
  out << ", " << "simple_pass=" << to_string(simple_pass);
  out << ", " << "simple_dribble=" << to_string(simple_dribble);
  out << ", " << "simple_shoot=" << to_string(simple_shoot);
  out << ", " << "server_side_decision=" << to_string(server_side_decision);
  out << ")";
}


HeliosBasicOffensive::~HeliosBasicOffensive() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosBasicOffensive& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosBasicOffensive::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosBasicOffensive::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosBasicOffensive");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosBasicOffensive &a, HeliosBasicOffensive &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosBasicOffensive::HeliosBasicOffensive(const HeliosBasicOffensive& other275) noexcept {
  (void) other275;
}
HeliosBasicOffensive& HeliosBasicOffensive::operator=(const HeliosBasicOffensive& other276) noexcept {
  (void) other276;
  return *this;
}
void HeliosBasicOffensive::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosBasicOffensive(";
  out << ")";
}


HeliosBasicMove::~HeliosBasicMove() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosBasicMove& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosBasicMove::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosBasicMove::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosBasicMove");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosBasicMove &a, HeliosBasicMove &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosBasicMove::HeliosBasicMove(const HeliosBasicMove& other277) noexcept {
  (void) other277;
}
HeliosBasicMove& HeliosBasicMove::operator=(const HeliosBasicMove& other278) noexcept {
  (void) other278;
  return *this;
}
void HeliosBasicMove::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosBasicMove(";
  out << ")";
}


HeliosSetPlay::~HeliosSetPlay() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosSetPlay& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosSetPlay::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosSetPlay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosSetPlay");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosSetPlay &a, HeliosSetPlay &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosSetPlay::HeliosSetPlay(const HeliosSetPlay& other279) noexcept {
  (void) other279;
}
HeliosSetPlay& HeliosSetPlay::operator=(const HeliosSetPlay& other280) noexcept {
  (void) other280;
  return *this;
}
void HeliosSetPlay::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosSetPlay(";
  out << ")";
}


HeliosPenalty::~HeliosPenalty() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosPenalty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosPenalty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosPenalty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosPenalty");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosPenalty &a, HeliosPenalty &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosPenalty::HeliosPenalty(const HeliosPenalty& other281) noexcept {
  (void) other281;
}
HeliosPenalty& HeliosPenalty::operator=(const HeliosPenalty& other282) noexcept {
  (void) other282;
  return *this;
}
void HeliosPenalty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosPenalty(";
  out << ")";
}


HeliosCommunicaion::~HeliosCommunicaion() noexcept {
}

std::ostream& operator<<(std::ostream& out, const HeliosCommunicaion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HeliosCommunicaion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeliosCommunicaion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeliosCommunicaion");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeliosCommunicaion &a, HeliosCommunicaion &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HeliosCommunicaion::HeliosCommunicaion(const HeliosCommunicaion& other283) noexcept {
  (void) other283;
}
HeliosCommunicaion& HeliosCommunicaion::operator=(const HeliosCommunicaion& other284) noexcept {
  (void) other284;
  return *this;
}
void HeliosCommunicaion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeliosCommunicaion(";
  out << ")";
}


PlayerAction::~PlayerAction() noexcept {
}


void PlayerAction::__set_dash(const Dash& val) {
  this->dash = val;
__isset.dash = true;
}

void PlayerAction::__set_turn(const Turn& val) {
  this->turn = val;
__isset.turn = true;
}

void PlayerAction::__set_kick(const Kick& val) {
  this->kick = val;
__isset.kick = true;
}

void PlayerAction::__set_tackle(const Tackle& val) {
  this->tackle = val;
__isset.tackle = true;
}

void PlayerAction::__set_catch_action(const Catch& val) {
  this->catch_action = val;
__isset.catch_action = true;
}

void PlayerAction::__set_move(const Move& val) {
  this->move = val;
__isset.move = true;
}

void PlayerAction::__set_turn_neck(const TurnNeck& val) {
  this->turn_neck = val;
__isset.turn_neck = true;
}

void PlayerAction::__set_change_view(const ChangeView& val) {
  this->change_view = val;
__isset.change_view = true;
}

void PlayerAction::__set_say(const Say& val) {
  this->say = val;
__isset.say = true;
}

void PlayerAction::__set_point_to(const PointTo& val) {
  this->point_to = val;
__isset.point_to = true;
}

void PlayerAction::__set_point_to_of(const PointToOf& val) {
  this->point_to_of = val;
__isset.point_to_of = true;
}

void PlayerAction::__set_attention_to(const AttentionTo& val) {
  this->attention_to = val;
__isset.attention_to = true;
}

void PlayerAction::__set_attention_to_of(const AttentionToOf& val) {
  this->attention_to_of = val;
__isset.attention_to_of = true;
}

void PlayerAction::__set_log(const Log& val) {
  this->log = val;
__isset.log = true;
}

void PlayerAction::__set_debug_client(const DebugClient& val) {
  this->debug_client = val;
__isset.debug_client = true;
}

void PlayerAction::__set_body_go_to_point(const Body_GoToPoint& val) {
  this->body_go_to_point = val;
__isset.body_go_to_point = true;
}

void PlayerAction::__set_body_smart_kick(const Body_SmartKick& val) {
  this->body_smart_kick = val;
__isset.body_smart_kick = true;
}

void PlayerAction::__set_bhv_before_kick_off(const Bhv_BeforeKickOff& val) {
  this->bhv_before_kick_off = val;
__isset.bhv_before_kick_off = true;
}

void PlayerAction::__set_bhv_body_neck_to_ball(const Bhv_BodyNeckToBall& val) {
  this->bhv_body_neck_to_ball = val;
__isset.bhv_body_neck_to_ball = true;
}

void PlayerAction::__set_bhv_body_neck_to_point(const Bhv_BodyNeckToPoint& val) {
  this->bhv_body_neck_to_point = val;
__isset.bhv_body_neck_to_point = true;
}

void PlayerAction::__set_bhv_emergency(const Bhv_Emergency& val) {
  this->bhv_emergency = val;
__isset.bhv_emergency = true;
}

void PlayerAction::__set_bhv_go_to_point_look_ball(const Bhv_GoToPointLookBall& val) {
  this->bhv_go_to_point_look_ball = val;
__isset.bhv_go_to_point_look_ball = true;
}

void PlayerAction::__set_bhv_neck_body_to_ball(const Bhv_NeckBodyToBall& val) {
  this->bhv_neck_body_to_ball = val;
__isset.bhv_neck_body_to_ball = true;
}

void PlayerAction::__set_bhv_neck_body_to_point(const Bhv_NeckBodyToPoint& val) {
  this->bhv_neck_body_to_point = val;
__isset.bhv_neck_body_to_point = true;
}

void PlayerAction::__set_bhv_scan_field(const Bhv_ScanField& val) {
  this->bhv_scan_field = val;
__isset.bhv_scan_field = true;
}

void PlayerAction::__set_body_advance_ball(const Body_AdvanceBall& val) {
  this->body_advance_ball = val;
__isset.body_advance_ball = true;
}

void PlayerAction::__set_body_clear_ball(const Body_ClearBall& val) {
  this->body_clear_ball = val;
__isset.body_clear_ball = true;
}

void PlayerAction::__set_body_dribble(const Body_Dribble& val) {
  this->body_dribble = val;
__isset.body_dribble = true;
}

void PlayerAction::__set_body_go_to_point_dodge(const Body_GoToPointDodge& val) {
  this->body_go_to_point_dodge = val;
__isset.body_go_to_point_dodge = true;
}

void PlayerAction::__set_body_hold_ball(const Body_HoldBall& val) {
  this->body_hold_ball = val;
__isset.body_hold_ball = true;
}

void PlayerAction::__set_body_intercept(const Body_Intercept& val) {
  this->body_intercept = val;
__isset.body_intercept = true;
}

void PlayerAction::__set_body_kick_one_step(const Body_KickOneStep& val) {
  this->body_kick_one_step = val;
__isset.body_kick_one_step = true;
}

void PlayerAction::__set_body_stop_ball(const Body_StopBall& val) {
  this->body_stop_ball = val;
__isset.body_stop_ball = true;
}

void PlayerAction::__set_body_stop_dash(const Body_StopDash& val) {
  this->body_stop_dash = val;
__isset.body_stop_dash = true;
}

void PlayerAction::__set_body_tackle_to_point(const Body_TackleToPoint& val) {
  this->body_tackle_to_point = val;
__isset.body_tackle_to_point = true;
}

void PlayerAction::__set_body_turn_to_angle(const Body_TurnToAngle& val) {
  this->body_turn_to_angle = val;
__isset.body_turn_to_angle = true;
}

void PlayerAction::__set_body_turn_to_ball(const Body_TurnToBall& val) {
  this->body_turn_to_ball = val;
__isset.body_turn_to_ball = true;
}

void PlayerAction::__set_body_turn_to_point(const Body_TurnToPoint& val) {
  this->body_turn_to_point = val;
__isset.body_turn_to_point = true;
}

void PlayerAction::__set_focus_move_to_point(const Focus_MoveToPoint& val) {
  this->focus_move_to_point = val;
__isset.focus_move_to_point = true;
}

void PlayerAction::__set_focus_reset(const Focus_Reset& val) {
  this->focus_reset = val;
__isset.focus_reset = true;
}

void PlayerAction::__set_neck_scan_field(const Neck_ScanField& val) {
  this->neck_scan_field = val;
__isset.neck_scan_field = true;
}

void PlayerAction::__set_neck_scan_players(const Neck_ScanPlayers& val) {
  this->neck_scan_players = val;
__isset.neck_scan_players = true;
}

void PlayerAction::__set_neck_turn_to_ball_and_player(const Neck_TurnToBallAndPlayer& val) {
  this->neck_turn_to_ball_and_player = val;
__isset.neck_turn_to_ball_and_player = true;
}

void PlayerAction::__set_neck_turn_to_ball_or_scan(const Neck_TurnToBallOrScan& val) {
  this->neck_turn_to_ball_or_scan = val;
__isset.neck_turn_to_ball_or_scan = true;
}

void PlayerAction::__set_neck_turn_to_ball(const Neck_TurnToBall& val) {
  this->neck_turn_to_ball = val;
__isset.neck_turn_to_ball = true;
}

void PlayerAction::__set_neck_turn_to_goalie_or_scan(const Neck_TurnToGoalieOrScan& val) {
  this->neck_turn_to_goalie_or_scan = val;
__isset.neck_turn_to_goalie_or_scan = true;
}

void PlayerAction::__set_neck_turn_to_low_conf_teammate(const Neck_TurnToLowConfTeammate& val) {
  this->neck_turn_to_low_conf_teammate = val;
__isset.neck_turn_to_low_conf_teammate = true;
}

void PlayerAction::__set_neck_turn_to_player_or_scan(const Neck_TurnToPlayerOrScan& val) {
  this->neck_turn_to_player_or_scan = val;
__isset.neck_turn_to_player_or_scan = true;
}

void PlayerAction::__set_neck_turn_to_point(const Neck_TurnToPoint& val) {
  this->neck_turn_to_point = val;
__isset.neck_turn_to_point = true;
}

void PlayerAction::__set_neck_turn_to_relative(const Neck_TurnToRelative& val) {
  this->neck_turn_to_relative = val;
__isset.neck_turn_to_relative = true;
}

void PlayerAction::__set_view_change_width(const View_ChangeWidth& val) {
  this->view_change_width = val;
__isset.view_change_width = true;
}

void PlayerAction::__set_view_normal(const View_Normal& val) {
  this->view_normal = val;
__isset.view_normal = true;
}

void PlayerAction::__set_view_synch(const View_Synch& val) {
  this->view_synch = val;
__isset.view_synch = true;
}

void PlayerAction::__set_view_wide(const View_Wide& val) {
  this->view_wide = val;
__isset.view_wide = true;
}

void PlayerAction::__set_helios_goalie(const HeliosGoalie& val) {
  this->helios_goalie = val;
__isset.helios_goalie = true;
}

void PlayerAction::__set_helios_goalie_move(const HeliosGoalieMove& val) {
  this->helios_goalie_move = val;
__isset.helios_goalie_move = true;
}

void PlayerAction::__set_helios_goalie_kick(const HeliosGoalieKick& val) {
  this->helios_goalie_kick = val;
__isset.helios_goalie_kick = true;
}

void PlayerAction::__set_helios_shoot(const HeliosShoot& val) {
  this->helios_shoot = val;
__isset.helios_shoot = true;
}

void PlayerAction::__set_helios_offensive_planner(const HeliosOffensivePlanner& val) {
  this->helios_offensive_planner = val;
__isset.helios_offensive_planner = true;
}

void PlayerAction::__set_helios_basic_offensive(const HeliosBasicOffensive& val) {
  this->helios_basic_offensive = val;
__isset.helios_basic_offensive = true;
}

void PlayerAction::__set_helios_basic_move(const HeliosBasicMove& val) {
  this->helios_basic_move = val;
__isset.helios_basic_move = true;
}

void PlayerAction::__set_helios_set_play(const HeliosSetPlay& val) {
  this->helios_set_play = val;
__isset.helios_set_play = true;
}

void PlayerAction::__set_helios_penalty(const HeliosPenalty& val) {
  this->helios_penalty = val;
__isset.helios_penalty = true;
}

void PlayerAction::__set_helios_communication(const HeliosCommunicaion& val) {
  this->helios_communication = val;
__isset.helios_communication = true;
}
std::ostream& operator<<(std::ostream& out, const PlayerAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dash.read(iprot);
          this->__isset.dash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->turn.read(iprot);
          this->__isset.turn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->kick.read(iprot);
          this->__isset.kick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tackle.read(iprot);
          this->__isset.tackle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->catch_action.read(iprot);
          this->__isset.catch_action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->move.read(iprot);
          this->__isset.move = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->turn_neck.read(iprot);
          this->__isset.turn_neck = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->change_view.read(iprot);
          this->__isset.change_view = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->say.read(iprot);
          this->__isset.say = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point_to.read(iprot);
          this->__isset.point_to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point_to_of.read(iprot);
          this->__isset.point_to_of = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attention_to.read(iprot);
          this->__isset.attention_to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attention_to_of.read(iprot);
          this->__isset.attention_to_of = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->log.read(iprot);
          this->__isset.log = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->debug_client.read(iprot);
          this->__isset.debug_client = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_go_to_point.read(iprot);
          this->__isset.body_go_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_smart_kick.read(iprot);
          this->__isset.body_smart_kick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_before_kick_off.read(iprot);
          this->__isset.bhv_before_kick_off = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_body_neck_to_ball.read(iprot);
          this->__isset.bhv_body_neck_to_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_body_neck_to_point.read(iprot);
          this->__isset.bhv_body_neck_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_emergency.read(iprot);
          this->__isset.bhv_emergency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_go_to_point_look_ball.read(iprot);
          this->__isset.bhv_go_to_point_look_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_neck_body_to_ball.read(iprot);
          this->__isset.bhv_neck_body_to_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_neck_body_to_point.read(iprot);
          this->__isset.bhv_neck_body_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bhv_scan_field.read(iprot);
          this->__isset.bhv_scan_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_advance_ball.read(iprot);
          this->__isset.body_advance_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_clear_ball.read(iprot);
          this->__isset.body_clear_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_dribble.read(iprot);
          this->__isset.body_dribble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_go_to_point_dodge.read(iprot);
          this->__isset.body_go_to_point_dodge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_hold_ball.read(iprot);
          this->__isset.body_hold_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_intercept.read(iprot);
          this->__isset.body_intercept = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_kick_one_step.read(iprot);
          this->__isset.body_kick_one_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_stop_ball.read(iprot);
          this->__isset.body_stop_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_stop_dash.read(iprot);
          this->__isset.body_stop_dash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_tackle_to_point.read(iprot);
          this->__isset.body_tackle_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_turn_to_angle.read(iprot);
          this->__isset.body_turn_to_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_turn_to_ball.read(iprot);
          this->__isset.body_turn_to_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->body_turn_to_point.read(iprot);
          this->__isset.body_turn_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->focus_move_to_point.read(iprot);
          this->__isset.focus_move_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->focus_reset.read(iprot);
          this->__isset.focus_reset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_scan_field.read(iprot);
          this->__isset.neck_scan_field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_scan_players.read(iprot);
          this->__isset.neck_scan_players = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_ball_and_player.read(iprot);
          this->__isset.neck_turn_to_ball_and_player = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_ball_or_scan.read(iprot);
          this->__isset.neck_turn_to_ball_or_scan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_ball.read(iprot);
          this->__isset.neck_turn_to_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_goalie_or_scan.read(iprot);
          this->__isset.neck_turn_to_goalie_or_scan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_low_conf_teammate.read(iprot);
          this->__isset.neck_turn_to_low_conf_teammate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_player_or_scan.read(iprot);
          this->__isset.neck_turn_to_player_or_scan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_point.read(iprot);
          this->__isset.neck_turn_to_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->neck_turn_to_relative.read(iprot);
          this->__isset.neck_turn_to_relative = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->view_change_width.read(iprot);
          this->__isset.view_change_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->view_normal.read(iprot);
          this->__isset.view_normal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->view_synch.read(iprot);
          this->__isset.view_synch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->view_wide.read(iprot);
          this->__isset.view_wide = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_goalie.read(iprot);
          this->__isset.helios_goalie = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_goalie_move.read(iprot);
          this->__isset.helios_goalie_move = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_goalie_kick.read(iprot);
          this->__isset.helios_goalie_kick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_shoot.read(iprot);
          this->__isset.helios_shoot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_offensive_planner.read(iprot);
          this->__isset.helios_offensive_planner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_basic_offensive.read(iprot);
          this->__isset.helios_basic_offensive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_basic_move.read(iprot);
          this->__isset.helios_basic_move = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_set_play.read(iprot);
          this->__isset.helios_set_play = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_penalty.read(iprot);
          this->__isset.helios_penalty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->helios_communication.read(iprot);
          this->__isset.helios_communication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerAction");

  if (this->__isset.dash) {
    xfer += oprot->writeFieldBegin("dash", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->dash.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.turn) {
    xfer += oprot->writeFieldBegin("turn", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->turn.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kick) {
    xfer += oprot->writeFieldBegin("kick", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->kick.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tackle) {
    xfer += oprot->writeFieldBegin("tackle", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->tackle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.catch_action) {
    xfer += oprot->writeFieldBegin("catch_action", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->catch_action.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.move) {
    xfer += oprot->writeFieldBegin("move", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->move.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.turn_neck) {
    xfer += oprot->writeFieldBegin("turn_neck", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->turn_neck.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.change_view) {
    xfer += oprot->writeFieldBegin("change_view", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->change_view.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.say) {
    xfer += oprot->writeFieldBegin("say", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->say.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.point_to) {
    xfer += oprot->writeFieldBegin("point_to", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->point_to.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.point_to_of) {
    xfer += oprot->writeFieldBegin("point_to_of", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->point_to_of.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attention_to) {
    xfer += oprot->writeFieldBegin("attention_to", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->attention_to.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attention_to_of) {
    xfer += oprot->writeFieldBegin("attention_to_of", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->attention_to_of.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log) {
    xfer += oprot->writeFieldBegin("log", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->log.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.debug_client) {
    xfer += oprot->writeFieldBegin("debug_client", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->debug_client.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_go_to_point) {
    xfer += oprot->writeFieldBegin("body_go_to_point", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->body_go_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_smart_kick) {
    xfer += oprot->writeFieldBegin("body_smart_kick", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->body_smart_kick.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_before_kick_off) {
    xfer += oprot->writeFieldBegin("bhv_before_kick_off", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->bhv_before_kick_off.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_body_neck_to_ball) {
    xfer += oprot->writeFieldBegin("bhv_body_neck_to_ball", ::apache::thrift::protocol::T_STRUCT, 19);
    xfer += this->bhv_body_neck_to_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_body_neck_to_point) {
    xfer += oprot->writeFieldBegin("bhv_body_neck_to_point", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->bhv_body_neck_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_emergency) {
    xfer += oprot->writeFieldBegin("bhv_emergency", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->bhv_emergency.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_go_to_point_look_ball) {
    xfer += oprot->writeFieldBegin("bhv_go_to_point_look_ball", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->bhv_go_to_point_look_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_neck_body_to_ball) {
    xfer += oprot->writeFieldBegin("bhv_neck_body_to_ball", ::apache::thrift::protocol::T_STRUCT, 23);
    xfer += this->bhv_neck_body_to_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_neck_body_to_point) {
    xfer += oprot->writeFieldBegin("bhv_neck_body_to_point", ::apache::thrift::protocol::T_STRUCT, 24);
    xfer += this->bhv_neck_body_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bhv_scan_field) {
    xfer += oprot->writeFieldBegin("bhv_scan_field", ::apache::thrift::protocol::T_STRUCT, 25);
    xfer += this->bhv_scan_field.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_advance_ball) {
    xfer += oprot->writeFieldBegin("body_advance_ball", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->body_advance_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_clear_ball) {
    xfer += oprot->writeFieldBegin("body_clear_ball", ::apache::thrift::protocol::T_STRUCT, 27);
    xfer += this->body_clear_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_dribble) {
    xfer += oprot->writeFieldBegin("body_dribble", ::apache::thrift::protocol::T_STRUCT, 28);
    xfer += this->body_dribble.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_go_to_point_dodge) {
    xfer += oprot->writeFieldBegin("body_go_to_point_dodge", ::apache::thrift::protocol::T_STRUCT, 29);
    xfer += this->body_go_to_point_dodge.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_hold_ball) {
    xfer += oprot->writeFieldBegin("body_hold_ball", ::apache::thrift::protocol::T_STRUCT, 30);
    xfer += this->body_hold_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_intercept) {
    xfer += oprot->writeFieldBegin("body_intercept", ::apache::thrift::protocol::T_STRUCT, 31);
    xfer += this->body_intercept.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_kick_one_step) {
    xfer += oprot->writeFieldBegin("body_kick_one_step", ::apache::thrift::protocol::T_STRUCT, 32);
    xfer += this->body_kick_one_step.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_stop_ball) {
    xfer += oprot->writeFieldBegin("body_stop_ball", ::apache::thrift::protocol::T_STRUCT, 33);
    xfer += this->body_stop_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_stop_dash) {
    xfer += oprot->writeFieldBegin("body_stop_dash", ::apache::thrift::protocol::T_STRUCT, 34);
    xfer += this->body_stop_dash.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_tackle_to_point) {
    xfer += oprot->writeFieldBegin("body_tackle_to_point", ::apache::thrift::protocol::T_STRUCT, 35);
    xfer += this->body_tackle_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_turn_to_angle) {
    xfer += oprot->writeFieldBegin("body_turn_to_angle", ::apache::thrift::protocol::T_STRUCT, 36);
    xfer += this->body_turn_to_angle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_turn_to_ball) {
    xfer += oprot->writeFieldBegin("body_turn_to_ball", ::apache::thrift::protocol::T_STRUCT, 37);
    xfer += this->body_turn_to_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body_turn_to_point) {
    xfer += oprot->writeFieldBegin("body_turn_to_point", ::apache::thrift::protocol::T_STRUCT, 38);
    xfer += this->body_turn_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.focus_move_to_point) {
    xfer += oprot->writeFieldBegin("focus_move_to_point", ::apache::thrift::protocol::T_STRUCT, 39);
    xfer += this->focus_move_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.focus_reset) {
    xfer += oprot->writeFieldBegin("focus_reset", ::apache::thrift::protocol::T_STRUCT, 40);
    xfer += this->focus_reset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_scan_field) {
    xfer += oprot->writeFieldBegin("neck_scan_field", ::apache::thrift::protocol::T_STRUCT, 41);
    xfer += this->neck_scan_field.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_scan_players) {
    xfer += oprot->writeFieldBegin("neck_scan_players", ::apache::thrift::protocol::T_STRUCT, 42);
    xfer += this->neck_scan_players.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_ball_and_player) {
    xfer += oprot->writeFieldBegin("neck_turn_to_ball_and_player", ::apache::thrift::protocol::T_STRUCT, 43);
    xfer += this->neck_turn_to_ball_and_player.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_ball_or_scan) {
    xfer += oprot->writeFieldBegin("neck_turn_to_ball_or_scan", ::apache::thrift::protocol::T_STRUCT, 44);
    xfer += this->neck_turn_to_ball_or_scan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_ball) {
    xfer += oprot->writeFieldBegin("neck_turn_to_ball", ::apache::thrift::protocol::T_STRUCT, 45);
    xfer += this->neck_turn_to_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_goalie_or_scan) {
    xfer += oprot->writeFieldBegin("neck_turn_to_goalie_or_scan", ::apache::thrift::protocol::T_STRUCT, 46);
    xfer += this->neck_turn_to_goalie_or_scan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_low_conf_teammate) {
    xfer += oprot->writeFieldBegin("neck_turn_to_low_conf_teammate", ::apache::thrift::protocol::T_STRUCT, 47);
    xfer += this->neck_turn_to_low_conf_teammate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_player_or_scan) {
    xfer += oprot->writeFieldBegin("neck_turn_to_player_or_scan", ::apache::thrift::protocol::T_STRUCT, 48);
    xfer += this->neck_turn_to_player_or_scan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_point) {
    xfer += oprot->writeFieldBegin("neck_turn_to_point", ::apache::thrift::protocol::T_STRUCT, 49);
    xfer += this->neck_turn_to_point.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.neck_turn_to_relative) {
    xfer += oprot->writeFieldBegin("neck_turn_to_relative", ::apache::thrift::protocol::T_STRUCT, 50);
    xfer += this->neck_turn_to_relative.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.view_change_width) {
    xfer += oprot->writeFieldBegin("view_change_width", ::apache::thrift::protocol::T_STRUCT, 51);
    xfer += this->view_change_width.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.view_normal) {
    xfer += oprot->writeFieldBegin("view_normal", ::apache::thrift::protocol::T_STRUCT, 52);
    xfer += this->view_normal.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.view_synch) {
    xfer += oprot->writeFieldBegin("view_synch", ::apache::thrift::protocol::T_STRUCT, 53);
    xfer += this->view_synch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.view_wide) {
    xfer += oprot->writeFieldBegin("view_wide", ::apache::thrift::protocol::T_STRUCT, 54);
    xfer += this->view_wide.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_goalie) {
    xfer += oprot->writeFieldBegin("helios_goalie", ::apache::thrift::protocol::T_STRUCT, 55);
    xfer += this->helios_goalie.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_goalie_move) {
    xfer += oprot->writeFieldBegin("helios_goalie_move", ::apache::thrift::protocol::T_STRUCT, 56);
    xfer += this->helios_goalie_move.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_goalie_kick) {
    xfer += oprot->writeFieldBegin("helios_goalie_kick", ::apache::thrift::protocol::T_STRUCT, 57);
    xfer += this->helios_goalie_kick.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_shoot) {
    xfer += oprot->writeFieldBegin("helios_shoot", ::apache::thrift::protocol::T_STRUCT, 58);
    xfer += this->helios_shoot.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_offensive_planner) {
    xfer += oprot->writeFieldBegin("helios_offensive_planner", ::apache::thrift::protocol::T_STRUCT, 59);
    xfer += this->helios_offensive_planner.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_basic_offensive) {
    xfer += oprot->writeFieldBegin("helios_basic_offensive", ::apache::thrift::protocol::T_STRUCT, 60);
    xfer += this->helios_basic_offensive.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_basic_move) {
    xfer += oprot->writeFieldBegin("helios_basic_move", ::apache::thrift::protocol::T_STRUCT, 61);
    xfer += this->helios_basic_move.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_set_play) {
    xfer += oprot->writeFieldBegin("helios_set_play", ::apache::thrift::protocol::T_STRUCT, 62);
    xfer += this->helios_set_play.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_penalty) {
    xfer += oprot->writeFieldBegin("helios_penalty", ::apache::thrift::protocol::T_STRUCT, 63);
    xfer += this->helios_penalty.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.helios_communication) {
    xfer += oprot->writeFieldBegin("helios_communication", ::apache::thrift::protocol::T_STRUCT, 64);
    xfer += this->helios_communication.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerAction &a, PlayerAction &b) {
  using ::std::swap;
  swap(a.dash, b.dash);
  swap(a.turn, b.turn);
  swap(a.kick, b.kick);
  swap(a.tackle, b.tackle);
  swap(a.catch_action, b.catch_action);
  swap(a.move, b.move);
  swap(a.turn_neck, b.turn_neck);
  swap(a.change_view, b.change_view);
  swap(a.say, b.say);
  swap(a.point_to, b.point_to);
  swap(a.point_to_of, b.point_to_of);
  swap(a.attention_to, b.attention_to);
  swap(a.attention_to_of, b.attention_to_of);
  swap(a.log, b.log);
  swap(a.debug_client, b.debug_client);
  swap(a.body_go_to_point, b.body_go_to_point);
  swap(a.body_smart_kick, b.body_smart_kick);
  swap(a.bhv_before_kick_off, b.bhv_before_kick_off);
  swap(a.bhv_body_neck_to_ball, b.bhv_body_neck_to_ball);
  swap(a.bhv_body_neck_to_point, b.bhv_body_neck_to_point);
  swap(a.bhv_emergency, b.bhv_emergency);
  swap(a.bhv_go_to_point_look_ball, b.bhv_go_to_point_look_ball);
  swap(a.bhv_neck_body_to_ball, b.bhv_neck_body_to_ball);
  swap(a.bhv_neck_body_to_point, b.bhv_neck_body_to_point);
  swap(a.bhv_scan_field, b.bhv_scan_field);
  swap(a.body_advance_ball, b.body_advance_ball);
  swap(a.body_clear_ball, b.body_clear_ball);
  swap(a.body_dribble, b.body_dribble);
  swap(a.body_go_to_point_dodge, b.body_go_to_point_dodge);
  swap(a.body_hold_ball, b.body_hold_ball);
  swap(a.body_intercept, b.body_intercept);
  swap(a.body_kick_one_step, b.body_kick_one_step);
  swap(a.body_stop_ball, b.body_stop_ball);
  swap(a.body_stop_dash, b.body_stop_dash);
  swap(a.body_tackle_to_point, b.body_tackle_to_point);
  swap(a.body_turn_to_angle, b.body_turn_to_angle);
  swap(a.body_turn_to_ball, b.body_turn_to_ball);
  swap(a.body_turn_to_point, b.body_turn_to_point);
  swap(a.focus_move_to_point, b.focus_move_to_point);
  swap(a.focus_reset, b.focus_reset);
  swap(a.neck_scan_field, b.neck_scan_field);
  swap(a.neck_scan_players, b.neck_scan_players);
  swap(a.neck_turn_to_ball_and_player, b.neck_turn_to_ball_and_player);
  swap(a.neck_turn_to_ball_or_scan, b.neck_turn_to_ball_or_scan);
  swap(a.neck_turn_to_ball, b.neck_turn_to_ball);
  swap(a.neck_turn_to_goalie_or_scan, b.neck_turn_to_goalie_or_scan);
  swap(a.neck_turn_to_low_conf_teammate, b.neck_turn_to_low_conf_teammate);
  swap(a.neck_turn_to_player_or_scan, b.neck_turn_to_player_or_scan);
  swap(a.neck_turn_to_point, b.neck_turn_to_point);
  swap(a.neck_turn_to_relative, b.neck_turn_to_relative);
  swap(a.view_change_width, b.view_change_width);
  swap(a.view_normal, b.view_normal);
  swap(a.view_synch, b.view_synch);
  swap(a.view_wide, b.view_wide);
  swap(a.helios_goalie, b.helios_goalie);
  swap(a.helios_goalie_move, b.helios_goalie_move);
  swap(a.helios_goalie_kick, b.helios_goalie_kick);
  swap(a.helios_shoot, b.helios_shoot);
  swap(a.helios_offensive_planner, b.helios_offensive_planner);
  swap(a.helios_basic_offensive, b.helios_basic_offensive);
  swap(a.helios_basic_move, b.helios_basic_move);
  swap(a.helios_set_play, b.helios_set_play);
  swap(a.helios_penalty, b.helios_penalty);
  swap(a.helios_communication, b.helios_communication);
  swap(a.__isset, b.__isset);
}

PlayerAction::PlayerAction(const PlayerAction& other285) {
  dash = other285.dash;
  turn = other285.turn;
  kick = other285.kick;
  tackle = other285.tackle;
  catch_action = other285.catch_action;
  move = other285.move;
  turn_neck = other285.turn_neck;
  change_view = other285.change_view;
  say = other285.say;
  point_to = other285.point_to;
  point_to_of = other285.point_to_of;
  attention_to = other285.attention_to;
  attention_to_of = other285.attention_to_of;
  log = other285.log;
  debug_client = other285.debug_client;
  body_go_to_point = other285.body_go_to_point;
  body_smart_kick = other285.body_smart_kick;
  bhv_before_kick_off = other285.bhv_before_kick_off;
  bhv_body_neck_to_ball = other285.bhv_body_neck_to_ball;
  bhv_body_neck_to_point = other285.bhv_body_neck_to_point;
  bhv_emergency = other285.bhv_emergency;
  bhv_go_to_point_look_ball = other285.bhv_go_to_point_look_ball;
  bhv_neck_body_to_ball = other285.bhv_neck_body_to_ball;
  bhv_neck_body_to_point = other285.bhv_neck_body_to_point;
  bhv_scan_field = other285.bhv_scan_field;
  body_advance_ball = other285.body_advance_ball;
  body_clear_ball = other285.body_clear_ball;
  body_dribble = other285.body_dribble;
  body_go_to_point_dodge = other285.body_go_to_point_dodge;
  body_hold_ball = other285.body_hold_ball;
  body_intercept = other285.body_intercept;
  body_kick_one_step = other285.body_kick_one_step;
  body_stop_ball = other285.body_stop_ball;
  body_stop_dash = other285.body_stop_dash;
  body_tackle_to_point = other285.body_tackle_to_point;
  body_turn_to_angle = other285.body_turn_to_angle;
  body_turn_to_ball = other285.body_turn_to_ball;
  body_turn_to_point = other285.body_turn_to_point;
  focus_move_to_point = other285.focus_move_to_point;
  focus_reset = other285.focus_reset;
  neck_scan_field = other285.neck_scan_field;
  neck_scan_players = other285.neck_scan_players;
  neck_turn_to_ball_and_player = other285.neck_turn_to_ball_and_player;
  neck_turn_to_ball_or_scan = other285.neck_turn_to_ball_or_scan;
  neck_turn_to_ball = other285.neck_turn_to_ball;
  neck_turn_to_goalie_or_scan = other285.neck_turn_to_goalie_or_scan;
  neck_turn_to_low_conf_teammate = other285.neck_turn_to_low_conf_teammate;
  neck_turn_to_player_or_scan = other285.neck_turn_to_player_or_scan;
  neck_turn_to_point = other285.neck_turn_to_point;
  neck_turn_to_relative = other285.neck_turn_to_relative;
  view_change_width = other285.view_change_width;
  view_normal = other285.view_normal;
  view_synch = other285.view_synch;
  view_wide = other285.view_wide;
  helios_goalie = other285.helios_goalie;
  helios_goalie_move = other285.helios_goalie_move;
  helios_goalie_kick = other285.helios_goalie_kick;
  helios_shoot = other285.helios_shoot;
  helios_offensive_planner = other285.helios_offensive_planner;
  helios_basic_offensive = other285.helios_basic_offensive;
  helios_basic_move = other285.helios_basic_move;
  helios_set_play = other285.helios_set_play;
  helios_penalty = other285.helios_penalty;
  helios_communication = other285.helios_communication;
  __isset = other285.__isset;
}
PlayerAction& PlayerAction::operator=(const PlayerAction& other286) {
  dash = other286.dash;
  turn = other286.turn;
  kick = other286.kick;
  tackle = other286.tackle;
  catch_action = other286.catch_action;
  move = other286.move;
  turn_neck = other286.turn_neck;
  change_view = other286.change_view;
  say = other286.say;
  point_to = other286.point_to;
  point_to_of = other286.point_to_of;
  attention_to = other286.attention_to;
  attention_to_of = other286.attention_to_of;
  log = other286.log;
  debug_client = other286.debug_client;
  body_go_to_point = other286.body_go_to_point;
  body_smart_kick = other286.body_smart_kick;
  bhv_before_kick_off = other286.bhv_before_kick_off;
  bhv_body_neck_to_ball = other286.bhv_body_neck_to_ball;
  bhv_body_neck_to_point = other286.bhv_body_neck_to_point;
  bhv_emergency = other286.bhv_emergency;
  bhv_go_to_point_look_ball = other286.bhv_go_to_point_look_ball;
  bhv_neck_body_to_ball = other286.bhv_neck_body_to_ball;
  bhv_neck_body_to_point = other286.bhv_neck_body_to_point;
  bhv_scan_field = other286.bhv_scan_field;
  body_advance_ball = other286.body_advance_ball;
  body_clear_ball = other286.body_clear_ball;
  body_dribble = other286.body_dribble;
  body_go_to_point_dodge = other286.body_go_to_point_dodge;
  body_hold_ball = other286.body_hold_ball;
  body_intercept = other286.body_intercept;
  body_kick_one_step = other286.body_kick_one_step;
  body_stop_ball = other286.body_stop_ball;
  body_stop_dash = other286.body_stop_dash;
  body_tackle_to_point = other286.body_tackle_to_point;
  body_turn_to_angle = other286.body_turn_to_angle;
  body_turn_to_ball = other286.body_turn_to_ball;
  body_turn_to_point = other286.body_turn_to_point;
  focus_move_to_point = other286.focus_move_to_point;
  focus_reset = other286.focus_reset;
  neck_scan_field = other286.neck_scan_field;
  neck_scan_players = other286.neck_scan_players;
  neck_turn_to_ball_and_player = other286.neck_turn_to_ball_and_player;
  neck_turn_to_ball_or_scan = other286.neck_turn_to_ball_or_scan;
  neck_turn_to_ball = other286.neck_turn_to_ball;
  neck_turn_to_goalie_or_scan = other286.neck_turn_to_goalie_or_scan;
  neck_turn_to_low_conf_teammate = other286.neck_turn_to_low_conf_teammate;
  neck_turn_to_player_or_scan = other286.neck_turn_to_player_or_scan;
  neck_turn_to_point = other286.neck_turn_to_point;
  neck_turn_to_relative = other286.neck_turn_to_relative;
  view_change_width = other286.view_change_width;
  view_normal = other286.view_normal;
  view_synch = other286.view_synch;
  view_wide = other286.view_wide;
  helios_goalie = other286.helios_goalie;
  helios_goalie_move = other286.helios_goalie_move;
  helios_goalie_kick = other286.helios_goalie_kick;
  helios_shoot = other286.helios_shoot;
  helios_offensive_planner = other286.helios_offensive_planner;
  helios_basic_offensive = other286.helios_basic_offensive;
  helios_basic_move = other286.helios_basic_move;
  helios_set_play = other286.helios_set_play;
  helios_penalty = other286.helios_penalty;
  helios_communication = other286.helios_communication;
  __isset = other286.__isset;
  return *this;
}
void PlayerAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerAction(";
  out << "dash="; (__isset.dash ? (out << to_string(dash)) : (out << "<null>"));
  out << ", " << "turn="; (__isset.turn ? (out << to_string(turn)) : (out << "<null>"));
  out << ", " << "kick="; (__isset.kick ? (out << to_string(kick)) : (out << "<null>"));
  out << ", " << "tackle="; (__isset.tackle ? (out << to_string(tackle)) : (out << "<null>"));
  out << ", " << "catch_action="; (__isset.catch_action ? (out << to_string(catch_action)) : (out << "<null>"));
  out << ", " << "move="; (__isset.move ? (out << to_string(move)) : (out << "<null>"));
  out << ", " << "turn_neck="; (__isset.turn_neck ? (out << to_string(turn_neck)) : (out << "<null>"));
  out << ", " << "change_view="; (__isset.change_view ? (out << to_string(change_view)) : (out << "<null>"));
  out << ", " << "say="; (__isset.say ? (out << to_string(say)) : (out << "<null>"));
  out << ", " << "point_to="; (__isset.point_to ? (out << to_string(point_to)) : (out << "<null>"));
  out << ", " << "point_to_of="; (__isset.point_to_of ? (out << to_string(point_to_of)) : (out << "<null>"));
  out << ", " << "attention_to="; (__isset.attention_to ? (out << to_string(attention_to)) : (out << "<null>"));
  out << ", " << "attention_to_of="; (__isset.attention_to_of ? (out << to_string(attention_to_of)) : (out << "<null>"));
  out << ", " << "log="; (__isset.log ? (out << to_string(log)) : (out << "<null>"));
  out << ", " << "debug_client="; (__isset.debug_client ? (out << to_string(debug_client)) : (out << "<null>"));
  out << ", " << "body_go_to_point="; (__isset.body_go_to_point ? (out << to_string(body_go_to_point)) : (out << "<null>"));
  out << ", " << "body_smart_kick="; (__isset.body_smart_kick ? (out << to_string(body_smart_kick)) : (out << "<null>"));
  out << ", " << "bhv_before_kick_off="; (__isset.bhv_before_kick_off ? (out << to_string(bhv_before_kick_off)) : (out << "<null>"));
  out << ", " << "bhv_body_neck_to_ball="; (__isset.bhv_body_neck_to_ball ? (out << to_string(bhv_body_neck_to_ball)) : (out << "<null>"));
  out << ", " << "bhv_body_neck_to_point="; (__isset.bhv_body_neck_to_point ? (out << to_string(bhv_body_neck_to_point)) : (out << "<null>"));
  out << ", " << "bhv_emergency="; (__isset.bhv_emergency ? (out << to_string(bhv_emergency)) : (out << "<null>"));
  out << ", " << "bhv_go_to_point_look_ball="; (__isset.bhv_go_to_point_look_ball ? (out << to_string(bhv_go_to_point_look_ball)) : (out << "<null>"));
  out << ", " << "bhv_neck_body_to_ball="; (__isset.bhv_neck_body_to_ball ? (out << to_string(bhv_neck_body_to_ball)) : (out << "<null>"));
  out << ", " << "bhv_neck_body_to_point="; (__isset.bhv_neck_body_to_point ? (out << to_string(bhv_neck_body_to_point)) : (out << "<null>"));
  out << ", " << "bhv_scan_field="; (__isset.bhv_scan_field ? (out << to_string(bhv_scan_field)) : (out << "<null>"));
  out << ", " << "body_advance_ball="; (__isset.body_advance_ball ? (out << to_string(body_advance_ball)) : (out << "<null>"));
  out << ", " << "body_clear_ball="; (__isset.body_clear_ball ? (out << to_string(body_clear_ball)) : (out << "<null>"));
  out << ", " << "body_dribble="; (__isset.body_dribble ? (out << to_string(body_dribble)) : (out << "<null>"));
  out << ", " << "body_go_to_point_dodge="; (__isset.body_go_to_point_dodge ? (out << to_string(body_go_to_point_dodge)) : (out << "<null>"));
  out << ", " << "body_hold_ball="; (__isset.body_hold_ball ? (out << to_string(body_hold_ball)) : (out << "<null>"));
  out << ", " << "body_intercept="; (__isset.body_intercept ? (out << to_string(body_intercept)) : (out << "<null>"));
  out << ", " << "body_kick_one_step="; (__isset.body_kick_one_step ? (out << to_string(body_kick_one_step)) : (out << "<null>"));
  out << ", " << "body_stop_ball="; (__isset.body_stop_ball ? (out << to_string(body_stop_ball)) : (out << "<null>"));
  out << ", " << "body_stop_dash="; (__isset.body_stop_dash ? (out << to_string(body_stop_dash)) : (out << "<null>"));
  out << ", " << "body_tackle_to_point="; (__isset.body_tackle_to_point ? (out << to_string(body_tackle_to_point)) : (out << "<null>"));
  out << ", " << "body_turn_to_angle="; (__isset.body_turn_to_angle ? (out << to_string(body_turn_to_angle)) : (out << "<null>"));
  out << ", " << "body_turn_to_ball="; (__isset.body_turn_to_ball ? (out << to_string(body_turn_to_ball)) : (out << "<null>"));
  out << ", " << "body_turn_to_point="; (__isset.body_turn_to_point ? (out << to_string(body_turn_to_point)) : (out << "<null>"));
  out << ", " << "focus_move_to_point="; (__isset.focus_move_to_point ? (out << to_string(focus_move_to_point)) : (out << "<null>"));
  out << ", " << "focus_reset="; (__isset.focus_reset ? (out << to_string(focus_reset)) : (out << "<null>"));
  out << ", " << "neck_scan_field="; (__isset.neck_scan_field ? (out << to_string(neck_scan_field)) : (out << "<null>"));
  out << ", " << "neck_scan_players="; (__isset.neck_scan_players ? (out << to_string(neck_scan_players)) : (out << "<null>"));
  out << ", " << "neck_turn_to_ball_and_player="; (__isset.neck_turn_to_ball_and_player ? (out << to_string(neck_turn_to_ball_and_player)) : (out << "<null>"));
  out << ", " << "neck_turn_to_ball_or_scan="; (__isset.neck_turn_to_ball_or_scan ? (out << to_string(neck_turn_to_ball_or_scan)) : (out << "<null>"));
  out << ", " << "neck_turn_to_ball="; (__isset.neck_turn_to_ball ? (out << to_string(neck_turn_to_ball)) : (out << "<null>"));
  out << ", " << "neck_turn_to_goalie_or_scan="; (__isset.neck_turn_to_goalie_or_scan ? (out << to_string(neck_turn_to_goalie_or_scan)) : (out << "<null>"));
  out << ", " << "neck_turn_to_low_conf_teammate="; (__isset.neck_turn_to_low_conf_teammate ? (out << to_string(neck_turn_to_low_conf_teammate)) : (out << "<null>"));
  out << ", " << "neck_turn_to_player_or_scan="; (__isset.neck_turn_to_player_or_scan ? (out << to_string(neck_turn_to_player_or_scan)) : (out << "<null>"));
  out << ", " << "neck_turn_to_point="; (__isset.neck_turn_to_point ? (out << to_string(neck_turn_to_point)) : (out << "<null>"));
  out << ", " << "neck_turn_to_relative="; (__isset.neck_turn_to_relative ? (out << to_string(neck_turn_to_relative)) : (out << "<null>"));
  out << ", " << "view_change_width="; (__isset.view_change_width ? (out << to_string(view_change_width)) : (out << "<null>"));
  out << ", " << "view_normal="; (__isset.view_normal ? (out << to_string(view_normal)) : (out << "<null>"));
  out << ", " << "view_synch="; (__isset.view_synch ? (out << to_string(view_synch)) : (out << "<null>"));
  out << ", " << "view_wide="; (__isset.view_wide ? (out << to_string(view_wide)) : (out << "<null>"));
  out << ", " << "helios_goalie="; (__isset.helios_goalie ? (out << to_string(helios_goalie)) : (out << "<null>"));
  out << ", " << "helios_goalie_move="; (__isset.helios_goalie_move ? (out << to_string(helios_goalie_move)) : (out << "<null>"));
  out << ", " << "helios_goalie_kick="; (__isset.helios_goalie_kick ? (out << to_string(helios_goalie_kick)) : (out << "<null>"));
  out << ", " << "helios_shoot="; (__isset.helios_shoot ? (out << to_string(helios_shoot)) : (out << "<null>"));
  out << ", " << "helios_offensive_planner="; (__isset.helios_offensive_planner ? (out << to_string(helios_offensive_planner)) : (out << "<null>"));
  out << ", " << "helios_basic_offensive="; (__isset.helios_basic_offensive ? (out << to_string(helios_basic_offensive)) : (out << "<null>"));
  out << ", " << "helios_basic_move="; (__isset.helios_basic_move ? (out << to_string(helios_basic_move)) : (out << "<null>"));
  out << ", " << "helios_set_play="; (__isset.helios_set_play ? (out << to_string(helios_set_play)) : (out << "<null>"));
  out << ", " << "helios_penalty="; (__isset.helios_penalty ? (out << to_string(helios_penalty)) : (out << "<null>"));
  out << ", " << "helios_communication="; (__isset.helios_communication ? (out << to_string(helios_communication)) : (out << "<null>"));
  out << ")";
}


PlayerActions::~PlayerActions() noexcept {
}


void PlayerActions::__set_actions(const std::vector<PlayerAction> & val) {
  this->actions = val;
}

void PlayerActions::__set_ignore_preprocess(const bool val) {
  this->ignore_preprocess = val;
}
std::ostream& operator<<(std::ostream& out, const PlayerActions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerActions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions.clear();
            uint32_t _size287;
            ::apache::thrift::protocol::TType _etype290;
            xfer += iprot->readListBegin(_etype290, _size287);
            this->actions.resize(_size287);
            uint32_t _i291;
            for (_i291 = 0; _i291 < _size287; ++_i291)
            {
              xfer += this->actions[_i291].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignore_preprocess);
          this->__isset.ignore_preprocess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerActions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerActions");

  xfer += oprot->writeFieldBegin("actions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions.size()));
    std::vector<PlayerAction> ::const_iterator _iter292;
    for (_iter292 = this->actions.begin(); _iter292 != this->actions.end(); ++_iter292)
    {
      xfer += (*_iter292).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignore_preprocess", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->ignore_preprocess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerActions &a, PlayerActions &b) {
  using ::std::swap;
  swap(a.actions, b.actions);
  swap(a.ignore_preprocess, b.ignore_preprocess);
  swap(a.__isset, b.__isset);
}

PlayerActions::PlayerActions(const PlayerActions& other293) {
  actions = other293.actions;
  ignore_preprocess = other293.ignore_preprocess;
  __isset = other293.__isset;
}
PlayerActions& PlayerActions::operator=(const PlayerActions& other294) {
  actions = other294.actions;
  ignore_preprocess = other294.ignore_preprocess;
  __isset = other294.__isset;
  return *this;
}
void PlayerActions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerActions(";
  out << "actions=" << to_string(actions);
  out << ", " << "ignore_preprocess=" << to_string(ignore_preprocess);
  out << ")";
}


ChangePlayerType::~ChangePlayerType() noexcept {
}


void ChangePlayerType::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void ChangePlayerType::__set_type(const int32_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const ChangePlayerType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChangePlayerType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangePlayerType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChangePlayerType");

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangePlayerType &a, ChangePlayerType &b) {
  using ::std::swap;
  swap(a.uniform_number, b.uniform_number);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

ChangePlayerType::ChangePlayerType(const ChangePlayerType& other295) noexcept {
  uniform_number = other295.uniform_number;
  type = other295.type;
  __isset = other295.__isset;
}
ChangePlayerType& ChangePlayerType::operator=(const ChangePlayerType& other296) noexcept {
  uniform_number = other296.uniform_number;
  type = other296.type;
  __isset = other296.__isset;
  return *this;
}
void ChangePlayerType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChangePlayerType(";
  out << "uniform_number=" << to_string(uniform_number);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


DoHeliosSubstitute::~DoHeliosSubstitute() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DoHeliosSubstitute& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoHeliosSubstitute::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoHeliosSubstitute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoHeliosSubstitute");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoHeliosSubstitute &a, DoHeliosSubstitute &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DoHeliosSubstitute::DoHeliosSubstitute(const DoHeliosSubstitute& other297) noexcept {
  (void) other297;
}
DoHeliosSubstitute& DoHeliosSubstitute::operator=(const DoHeliosSubstitute& other298) noexcept {
  (void) other298;
  return *this;
}
void DoHeliosSubstitute::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoHeliosSubstitute(";
  out << ")";
}


DoHeliosSayPlayerTypes::~DoHeliosSayPlayerTypes() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DoHeliosSayPlayerTypes& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoHeliosSayPlayerTypes::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoHeliosSayPlayerTypes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoHeliosSayPlayerTypes");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoHeliosSayPlayerTypes &a, DoHeliosSayPlayerTypes &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DoHeliosSayPlayerTypes::DoHeliosSayPlayerTypes(const DoHeliosSayPlayerTypes& other299) noexcept {
  (void) other299;
}
DoHeliosSayPlayerTypes& DoHeliosSayPlayerTypes::operator=(const DoHeliosSayPlayerTypes& other300) noexcept {
  (void) other300;
  return *this;
}
void DoHeliosSayPlayerTypes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoHeliosSayPlayerTypes(";
  out << ")";
}


CoachAction::~CoachAction() noexcept {
}


void CoachAction::__set_change_player_types(const ChangePlayerType& val) {
  this->change_player_types = val;
__isset.change_player_types = true;
}

void CoachAction::__set_do_helios_substitute(const DoHeliosSubstitute& val) {
  this->do_helios_substitute = val;
__isset.do_helios_substitute = true;
}

void CoachAction::__set_do_helios_say_player_types(const DoHeliosSayPlayerTypes& val) {
  this->do_helios_say_player_types = val;
__isset.do_helios_say_player_types = true;
}
std::ostream& operator<<(std::ostream& out, const CoachAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoachAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->change_player_types.read(iprot);
          this->__isset.change_player_types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_helios_substitute.read(iprot);
          this->__isset.do_helios_substitute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_helios_say_player_types.read(iprot);
          this->__isset.do_helios_say_player_types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoachAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoachAction");

  if (this->__isset.change_player_types) {
    xfer += oprot->writeFieldBegin("change_player_types", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->change_player_types.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_helios_substitute) {
    xfer += oprot->writeFieldBegin("do_helios_substitute", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->do_helios_substitute.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_helios_say_player_types) {
    xfer += oprot->writeFieldBegin("do_helios_say_player_types", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->do_helios_say_player_types.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoachAction &a, CoachAction &b) {
  using ::std::swap;
  swap(a.change_player_types, b.change_player_types);
  swap(a.do_helios_substitute, b.do_helios_substitute);
  swap(a.do_helios_say_player_types, b.do_helios_say_player_types);
  swap(a.__isset, b.__isset);
}

CoachAction::CoachAction(const CoachAction& other301) noexcept {
  change_player_types = other301.change_player_types;
  do_helios_substitute = other301.do_helios_substitute;
  do_helios_say_player_types = other301.do_helios_say_player_types;
  __isset = other301.__isset;
}
CoachAction& CoachAction::operator=(const CoachAction& other302) noexcept {
  change_player_types = other302.change_player_types;
  do_helios_substitute = other302.do_helios_substitute;
  do_helios_say_player_types = other302.do_helios_say_player_types;
  __isset = other302.__isset;
  return *this;
}
void CoachAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoachAction(";
  out << "change_player_types="; (__isset.change_player_types ? (out << to_string(change_player_types)) : (out << "<null>"));
  out << ", " << "do_helios_substitute="; (__isset.do_helios_substitute ? (out << to_string(do_helios_substitute)) : (out << "<null>"));
  out << ", " << "do_helios_say_player_types="; (__isset.do_helios_say_player_types ? (out << to_string(do_helios_say_player_types)) : (out << "<null>"));
  out << ")";
}


CoachActions::~CoachActions() noexcept {
}


void CoachActions::__set_actions(const std::vector<CoachAction> & val) {
  this->actions = val;
}
std::ostream& operator<<(std::ostream& out, const CoachActions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoachActions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions.clear();
            uint32_t _size303;
            ::apache::thrift::protocol::TType _etype306;
            xfer += iprot->readListBegin(_etype306, _size303);
            this->actions.resize(_size303);
            uint32_t _i307;
            for (_i307 = 0; _i307 < _size303; ++_i307)
            {
              xfer += this->actions[_i307].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoachActions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoachActions");

  xfer += oprot->writeFieldBegin("actions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions.size()));
    std::vector<CoachAction> ::const_iterator _iter308;
    for (_iter308 = this->actions.begin(); _iter308 != this->actions.end(); ++_iter308)
    {
      xfer += (*_iter308).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoachActions &a, CoachActions &b) {
  using ::std::swap;
  swap(a.actions, b.actions);
  swap(a.__isset, b.__isset);
}

CoachActions::CoachActions(const CoachActions& other309) {
  actions = other309.actions;
  __isset = other309.__isset;
}
CoachActions& CoachActions::operator=(const CoachActions& other310) {
  actions = other310.actions;
  __isset = other310.__isset;
  return *this;
}
void CoachActions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoachActions(";
  out << "actions=" << to_string(actions);
  out << ")";
}


DoKickOff::~DoKickOff() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DoKickOff& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoKickOff::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoKickOff::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoKickOff");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoKickOff &a, DoKickOff &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DoKickOff::DoKickOff(const DoKickOff& other311) noexcept {
  (void) other311;
}
DoKickOff& DoKickOff::operator=(const DoKickOff& other312) noexcept {
  (void) other312;
  return *this;
}
void DoKickOff::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoKickOff(";
  out << ")";
}


DoMoveBall::~DoMoveBall() noexcept {
}


void DoMoveBall::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void DoMoveBall::__set_velocity(const RpcVector2D& val) {
  this->velocity = val;
__isset.velocity = true;
}
std::ostream& operator<<(std::ostream& out, const DoMoveBall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoMoveBall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->velocity.read(iprot);
          this->__isset.velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoMoveBall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoMoveBall");

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.velocity) {
    xfer += oprot->writeFieldBegin("velocity", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->velocity.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoMoveBall &a, DoMoveBall &b) {
  using ::std::swap;
  swap(a.position, b.position);
  swap(a.velocity, b.velocity);
  swap(a.__isset, b.__isset);
}

DoMoveBall::DoMoveBall(const DoMoveBall& other313) noexcept {
  position = other313.position;
  velocity = other313.velocity;
  __isset = other313.__isset;
}
DoMoveBall& DoMoveBall::operator=(const DoMoveBall& other314) noexcept {
  position = other314.position;
  velocity = other314.velocity;
  __isset = other314.__isset;
  return *this;
}
void DoMoveBall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoMoveBall(";
  out << "position=" << to_string(position);
  out << ", " << "velocity="; (__isset.velocity ? (out << to_string(velocity)) : (out << "<null>"));
  out << ")";
}


DoMovePlayer::~DoMovePlayer() noexcept {
}


void DoMovePlayer::__set_our_side(const bool val) {
  this->our_side = val;
}

void DoMovePlayer::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void DoMovePlayer::__set_position(const RpcVector2D& val) {
  this->position = val;
}

void DoMovePlayer::__set_body_direction(const double val) {
  this->body_direction = val;
}
std::ostream& operator<<(std::ostream& out, const DoMovePlayer& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoMovePlayer::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->our_side);
          this->__isset.our_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->body_direction);
          this->__isset.body_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoMovePlayer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoMovePlayer");

  xfer += oprot->writeFieldBegin("our_side", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->our_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body_direction", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->body_direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoMovePlayer &a, DoMovePlayer &b) {
  using ::std::swap;
  swap(a.our_side, b.our_side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.position, b.position);
  swap(a.body_direction, b.body_direction);
  swap(a.__isset, b.__isset);
}

DoMovePlayer::DoMovePlayer(const DoMovePlayer& other315) noexcept {
  our_side = other315.our_side;
  uniform_number = other315.uniform_number;
  position = other315.position;
  body_direction = other315.body_direction;
  __isset = other315.__isset;
}
DoMovePlayer& DoMovePlayer::operator=(const DoMovePlayer& other316) noexcept {
  our_side = other316.our_side;
  uniform_number = other316.uniform_number;
  position = other316.position;
  body_direction = other316.body_direction;
  __isset = other316.__isset;
  return *this;
}
void DoMovePlayer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoMovePlayer(";
  out << "our_side=" << to_string(our_side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "position=" << to_string(position);
  out << ", " << "body_direction=" << to_string(body_direction);
  out << ")";
}


DoRecover::~DoRecover() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DoRecover& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoRecover::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoRecover::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoRecover");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoRecover &a, DoRecover &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DoRecover::DoRecover(const DoRecover& other317) noexcept {
  (void) other317;
}
DoRecover& DoRecover::operator=(const DoRecover& other318) noexcept {
  (void) other318;
  return *this;
}
void DoRecover::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoRecover(";
  out << ")";
}


DoChangeMode::~DoChangeMode() noexcept {
}


void DoChangeMode::__set_game_mode_type(const GameModeType::type val) {
  this->game_mode_type = val;
}

void DoChangeMode::__set_side(const Side::type val) {
  this->side = val;
}
std::ostream& operator<<(std::ostream& out, const DoChangeMode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoChangeMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast319;
          xfer += iprot->readI32(ecast319);
          this->game_mode_type = static_cast<GameModeType::type>(ecast319);
          this->__isset.game_mode_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast320;
          xfer += iprot->readI32(ecast320);
          this->side = static_cast<Side::type>(ecast320);
          this->__isset.side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoChangeMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoChangeMode");

  xfer += oprot->writeFieldBegin("game_mode_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->game_mode_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("side", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->side));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoChangeMode &a, DoChangeMode &b) {
  using ::std::swap;
  swap(a.game_mode_type, b.game_mode_type);
  swap(a.side, b.side);
  swap(a.__isset, b.__isset);
}

DoChangeMode::DoChangeMode(const DoChangeMode& other321) noexcept {
  game_mode_type = other321.game_mode_type;
  side = other321.side;
  __isset = other321.__isset;
}
DoChangeMode& DoChangeMode::operator=(const DoChangeMode& other322) noexcept {
  game_mode_type = other322.game_mode_type;
  side = other322.side;
  __isset = other322.__isset;
  return *this;
}
void DoChangeMode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoChangeMode(";
  out << "game_mode_type=" << to_string(game_mode_type);
  out << ", " << "side=" << to_string(side);
  out << ")";
}


DoChangePlayerType::~DoChangePlayerType() noexcept {
}


void DoChangePlayerType::__set_our_side(const bool val) {
  this->our_side = val;
}

void DoChangePlayerType::__set_uniform_number(const int32_t val) {
  this->uniform_number = val;
}

void DoChangePlayerType::__set_type(const int32_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const DoChangePlayerType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DoChangePlayerType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->our_side);
          this->__isset.our_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uniform_number);
          this->__isset.uniform_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DoChangePlayerType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoChangePlayerType");

  xfer += oprot->writeFieldBegin("our_side", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->our_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uniform_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uniform_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoChangePlayerType &a, DoChangePlayerType &b) {
  using ::std::swap;
  swap(a.our_side, b.our_side);
  swap(a.uniform_number, b.uniform_number);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

DoChangePlayerType::DoChangePlayerType(const DoChangePlayerType& other323) noexcept {
  our_side = other323.our_side;
  uniform_number = other323.uniform_number;
  type = other323.type;
  __isset = other323.__isset;
}
DoChangePlayerType& DoChangePlayerType::operator=(const DoChangePlayerType& other324) noexcept {
  our_side = other324.our_side;
  uniform_number = other324.uniform_number;
  type = other324.type;
  __isset = other324.__isset;
  return *this;
}
void DoChangePlayerType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoChangePlayerType(";
  out << "our_side=" << to_string(our_side);
  out << ", " << "uniform_number=" << to_string(uniform_number);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


TrainerAction::~TrainerAction() noexcept {
}


void TrainerAction::__set_do_kick_off(const DoKickOff& val) {
  this->do_kick_off = val;
__isset.do_kick_off = true;
}

void TrainerAction::__set_do_move_ball(const DoMoveBall& val) {
  this->do_move_ball = val;
__isset.do_move_ball = true;
}

void TrainerAction::__set_do_move_player(const DoMovePlayer& val) {
  this->do_move_player = val;
__isset.do_move_player = true;
}

void TrainerAction::__set_do_recover(const DoRecover& val) {
  this->do_recover = val;
__isset.do_recover = true;
}

void TrainerAction::__set_do_change_mode(const DoChangeMode& val) {
  this->do_change_mode = val;
__isset.do_change_mode = true;
}

void TrainerAction::__set_do_change_player_type(const DoChangePlayerType& val) {
  this->do_change_player_type = val;
__isset.do_change_player_type = true;
}
std::ostream& operator<<(std::ostream& out, const TrainerAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TrainerAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_kick_off.read(iprot);
          this->__isset.do_kick_off = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_move_ball.read(iprot);
          this->__isset.do_move_ball = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_move_player.read(iprot);
          this->__isset.do_move_player = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_recover.read(iprot);
          this->__isset.do_recover = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_change_mode.read(iprot);
          this->__isset.do_change_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->do_change_player_type.read(iprot);
          this->__isset.do_change_player_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrainerAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TrainerAction");

  if (this->__isset.do_kick_off) {
    xfer += oprot->writeFieldBegin("do_kick_off", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->do_kick_off.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_move_ball) {
    xfer += oprot->writeFieldBegin("do_move_ball", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->do_move_ball.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_move_player) {
    xfer += oprot->writeFieldBegin("do_move_player", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->do_move_player.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_recover) {
    xfer += oprot->writeFieldBegin("do_recover", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->do_recover.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_change_mode) {
    xfer += oprot->writeFieldBegin("do_change_mode", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->do_change_mode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.do_change_player_type) {
    xfer += oprot->writeFieldBegin("do_change_player_type", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->do_change_player_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrainerAction &a, TrainerAction &b) {
  using ::std::swap;
  swap(a.do_kick_off, b.do_kick_off);
  swap(a.do_move_ball, b.do_move_ball);
  swap(a.do_move_player, b.do_move_player);
  swap(a.do_recover, b.do_recover);
  swap(a.do_change_mode, b.do_change_mode);
  swap(a.do_change_player_type, b.do_change_player_type);
  swap(a.__isset, b.__isset);
}

TrainerAction::TrainerAction(const TrainerAction& other325) noexcept {
  do_kick_off = other325.do_kick_off;
  do_move_ball = other325.do_move_ball;
  do_move_player = other325.do_move_player;
  do_recover = other325.do_recover;
  do_change_mode = other325.do_change_mode;
  do_change_player_type = other325.do_change_player_type;
  __isset = other325.__isset;
}
TrainerAction& TrainerAction::operator=(const TrainerAction& other326) noexcept {
  do_kick_off = other326.do_kick_off;
  do_move_ball = other326.do_move_ball;
  do_move_player = other326.do_move_player;
  do_recover = other326.do_recover;
  do_change_mode = other326.do_change_mode;
  do_change_player_type = other326.do_change_player_type;
  __isset = other326.__isset;
  return *this;
}
void TrainerAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TrainerAction(";
  out << "do_kick_off="; (__isset.do_kick_off ? (out << to_string(do_kick_off)) : (out << "<null>"));
  out << ", " << "do_move_ball="; (__isset.do_move_ball ? (out << to_string(do_move_ball)) : (out << "<null>"));
  out << ", " << "do_move_player="; (__isset.do_move_player ? (out << to_string(do_move_player)) : (out << "<null>"));
  out << ", " << "do_recover="; (__isset.do_recover ? (out << to_string(do_recover)) : (out << "<null>"));
  out << ", " << "do_change_mode="; (__isset.do_change_mode ? (out << to_string(do_change_mode)) : (out << "<null>"));
  out << ", " << "do_change_player_type="; (__isset.do_change_player_type ? (out << to_string(do_change_player_type)) : (out << "<null>"));
  out << ")";
}


TrainerActions::~TrainerActions() noexcept {
}


void TrainerActions::__set_actions(const std::vector<TrainerAction> & val) {
  this->actions = val;
}
std::ostream& operator<<(std::ostream& out, const TrainerActions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TrainerActions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actions.clear();
            uint32_t _size327;
            ::apache::thrift::protocol::TType _etype330;
            xfer += iprot->readListBegin(_etype330, _size327);
            this->actions.resize(_size327);
            uint32_t _i331;
            for (_i331 = 0; _i331 < _size327; ++_i331)
            {
              xfer += this->actions[_i331].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrainerActions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TrainerActions");

  xfer += oprot->writeFieldBegin("actions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actions.size()));
    std::vector<TrainerAction> ::const_iterator _iter332;
    for (_iter332 = this->actions.begin(); _iter332 != this->actions.end(); ++_iter332)
    {
      xfer += (*_iter332).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrainerActions &a, TrainerActions &b) {
  using ::std::swap;
  swap(a.actions, b.actions);
  swap(a.__isset, b.__isset);
}

TrainerActions::TrainerActions(const TrainerActions& other333) {
  actions = other333.actions;
  __isset = other333.__isset;
}
TrainerActions& TrainerActions::operator=(const TrainerActions& other334) {
  actions = other334.actions;
  __isset = other334.__isset;
  return *this;
}
void TrainerActions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TrainerActions(";
  out << "actions=" << to_string(actions);
  out << ")";
}


ServerParam::~ServerParam() noexcept {
}


void ServerParam::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void ServerParam::__set_inertia_moment(const double val) {
  this->inertia_moment = val;
}

void ServerParam::__set_player_size(const double val) {
  this->player_size = val;
}

void ServerParam::__set_player_decay(const double val) {
  this->player_decay = val;
}

void ServerParam::__set_player_rand(const double val) {
  this->player_rand = val;
}

void ServerParam::__set_player_weight(const double val) {
  this->player_weight = val;
}

void ServerParam::__set_player_speed_max(const double val) {
  this->player_speed_max = val;
}

void ServerParam::__set_player_accel_max(const double val) {
  this->player_accel_max = val;
}

void ServerParam::__set_stamina_max(const double val) {
  this->stamina_max = val;
}

void ServerParam::__set_stamina_inc_max(const double val) {
  this->stamina_inc_max = val;
}

void ServerParam::__set_recover_init(const double val) {
  this->recover_init = val;
}

void ServerParam::__set_recover_dec_thr(const double val) {
  this->recover_dec_thr = val;
}

void ServerParam::__set_recover_min(const double val) {
  this->recover_min = val;
}

void ServerParam::__set_recover_dec(const double val) {
  this->recover_dec = val;
}

void ServerParam::__set_effort_init(const double val) {
  this->effort_init = val;
}

void ServerParam::__set_effort_dec_thr(const double val) {
  this->effort_dec_thr = val;
}

void ServerParam::__set_effort_min(const double val) {
  this->effort_min = val;
}

void ServerParam::__set_effort_dec(const double val) {
  this->effort_dec = val;
}

void ServerParam::__set_effort_inc_thr(const double val) {
  this->effort_inc_thr = val;
}

void ServerParam::__set_effort_inc(const double val) {
  this->effort_inc = val;
}

void ServerParam::__set_kick_rand(const double val) {
  this->kick_rand = val;
}

void ServerParam::__set_team_actuator_noise(const bool val) {
  this->team_actuator_noise = val;
}

void ServerParam::__set_player_rand_factor_l(const double val) {
  this->player_rand_factor_l = val;
}

void ServerParam::__set_player_rand_factor_r(const double val) {
  this->player_rand_factor_r = val;
}

void ServerParam::__set_kick_rand_factor_l(const double val) {
  this->kick_rand_factor_l = val;
}

void ServerParam::__set_kick_rand_factor_r(const double val) {
  this->kick_rand_factor_r = val;
}

void ServerParam::__set_ball_size(const double val) {
  this->ball_size = val;
}

void ServerParam::__set_ball_decay(const double val) {
  this->ball_decay = val;
}

void ServerParam::__set_ball_rand(const double val) {
  this->ball_rand = val;
}

void ServerParam::__set_ball_weight(const double val) {
  this->ball_weight = val;
}

void ServerParam::__set_ball_speed_max(const double val) {
  this->ball_speed_max = val;
}

void ServerParam::__set_ball_accel_max(const double val) {
  this->ball_accel_max = val;
}

void ServerParam::__set_dash_power_rate(const double val) {
  this->dash_power_rate = val;
}

void ServerParam::__set_kick_power_rate(const double val) {
  this->kick_power_rate = val;
}

void ServerParam::__set_kickable_margin(const double val) {
  this->kickable_margin = val;
}

void ServerParam::__set_control_radius(const double val) {
  this->control_radius = val;
}

void ServerParam::__set_control_radius_width(const double val) {
  this->control_radius_width = val;
}

void ServerParam::__set_max_power(const double val) {
  this->max_power = val;
}

void ServerParam::__set_min_power(const double val) {
  this->min_power = val;
}

void ServerParam::__set_max_moment(const double val) {
  this->max_moment = val;
}

void ServerParam::__set_min_moment(const double val) {
  this->min_moment = val;
}

void ServerParam::__set_max_neck_moment(const double val) {
  this->max_neck_moment = val;
}

void ServerParam::__set_min_neck_moment(const double val) {
  this->min_neck_moment = val;
}

void ServerParam::__set_max_neck_angle(const double val) {
  this->max_neck_angle = val;
}

void ServerParam::__set_min_neck_angle(const double val) {
  this->min_neck_angle = val;
}

void ServerParam::__set_visible_angle(const double val) {
  this->visible_angle = val;
}

void ServerParam::__set_visible_distance(const double val) {
  this->visible_distance = val;
}

void ServerParam::__set_wind_dir(const double val) {
  this->wind_dir = val;
}

void ServerParam::__set_wind_force(const double val) {
  this->wind_force = val;
}

void ServerParam::__set_wind_angle(const double val) {
  this->wind_angle = val;
}

void ServerParam::__set_wind_rand(const double val) {
  this->wind_rand = val;
}

void ServerParam::__set_kickable_area(const double val) {
  this->kickable_area = val;
}

void ServerParam::__set_catch_area_l(const double val) {
  this->catch_area_l = val;
}

void ServerParam::__set_catch_area_w(const double val) {
  this->catch_area_w = val;
}

void ServerParam::__set_catch_probability(const double val) {
  this->catch_probability = val;
}

void ServerParam::__set_goalie_max_moves(const int32_t val) {
  this->goalie_max_moves = val;
}

void ServerParam::__set_corner_kick_margin(const double val) {
  this->corner_kick_margin = val;
}

void ServerParam::__set_offside_active_area_size(const double val) {
  this->offside_active_area_size = val;
}

void ServerParam::__set_wind_none(const bool val) {
  this->wind_none = val;
}

void ServerParam::__set_use_wind_random(const bool val) {
  this->use_wind_random = val;
}

void ServerParam::__set_coach_say_count_max(const int32_t val) {
  this->coach_say_count_max = val;
}

void ServerParam::__set_coach_say_msg_size(const int32_t val) {
  this->coach_say_msg_size = val;
}

void ServerParam::__set_clang_win_size(const int32_t val) {
  this->clang_win_size = val;
}

void ServerParam::__set_clang_define_win(const int32_t val) {
  this->clang_define_win = val;
}

void ServerParam::__set_clang_meta_win(const int32_t val) {
  this->clang_meta_win = val;
}

void ServerParam::__set_clang_advice_win(const int32_t val) {
  this->clang_advice_win = val;
}

void ServerParam::__set_clang_info_win(const int32_t val) {
  this->clang_info_win = val;
}

void ServerParam::__set_clang_mess_delay(const int32_t val) {
  this->clang_mess_delay = val;
}

void ServerParam::__set_clang_mess_per_cycle(const int32_t val) {
  this->clang_mess_per_cycle = val;
}

void ServerParam::__set_half_time(const int32_t val) {
  this->half_time = val;
}

void ServerParam::__set_simulator_step(const int32_t val) {
  this->simulator_step = val;
}

void ServerParam::__set_send_step(const int32_t val) {
  this->send_step = val;
}

void ServerParam::__set_recv_step(const int32_t val) {
  this->recv_step = val;
}

void ServerParam::__set_sense_body_step(const int32_t val) {
  this->sense_body_step = val;
}

void ServerParam::__set_lcm_step(const int32_t val) {
  this->lcm_step = val;
}

void ServerParam::__set_player_say_msg_size(const int32_t val) {
  this->player_say_msg_size = val;
}

void ServerParam::__set_player_hear_max(const int32_t val) {
  this->player_hear_max = val;
}

void ServerParam::__set_player_hear_inc(const int32_t val) {
  this->player_hear_inc = val;
}

void ServerParam::__set_player_hear_decay(const int32_t val) {
  this->player_hear_decay = val;
}

void ServerParam::__set_catch_ban_cycle(const int32_t val) {
  this->catch_ban_cycle = val;
}

void ServerParam::__set_slow_down_factor(const int32_t val) {
  this->slow_down_factor = val;
}

void ServerParam::__set_use_offside(const bool val) {
  this->use_offside = val;
}

void ServerParam::__set_kickoff_offside(const bool val) {
  this->kickoff_offside = val;
}

void ServerParam::__set_offside_kick_margin(const double val) {
  this->offside_kick_margin = val;
}

void ServerParam::__set_audio_cut_dist(const double val) {
  this->audio_cut_dist = val;
}

void ServerParam::__set_dist_quantize_step(const double val) {
  this->dist_quantize_step = val;
}

void ServerParam::__set_landmark_dist_quantize_step(const double val) {
  this->landmark_dist_quantize_step = val;
}

void ServerParam::__set_dir_quantize_step(const double val) {
  this->dir_quantize_step = val;
}

void ServerParam::__set_dist_quantize_step_l(const double val) {
  this->dist_quantize_step_l = val;
}

void ServerParam::__set_dist_quantize_step_r(const double val) {
  this->dist_quantize_step_r = val;
}

void ServerParam::__set_landmark_dist_quantize_step_l(const double val) {
  this->landmark_dist_quantize_step_l = val;
}

void ServerParam::__set_landmark_dist_quantize_step_r(const double val) {
  this->landmark_dist_quantize_step_r = val;
}

void ServerParam::__set_dir_quantize_step_l(const double val) {
  this->dir_quantize_step_l = val;
}

void ServerParam::__set_dir_quantize_step_r(const double val) {
  this->dir_quantize_step_r = val;
}

void ServerParam::__set_coach_mode(const bool val) {
  this->coach_mode = val;
}

void ServerParam::__set_coach_with_referee_mode(const bool val) {
  this->coach_with_referee_mode = val;
}

void ServerParam::__set_use_old_coach_hear(const bool val) {
  this->use_old_coach_hear = val;
}

void ServerParam::__set_slowness_on_top_for_left_team(const double val) {
  this->slowness_on_top_for_left_team = val;
}

void ServerParam::__set_slowness_on_top_for_right_team(const double val) {
  this->slowness_on_top_for_right_team = val;
}

void ServerParam::__set_start_goal_l(const int32_t val) {
  this->start_goal_l = val;
}

void ServerParam::__set_start_goal_r(const int32_t val) {
  this->start_goal_r = val;
}

void ServerParam::__set_fullstate_l(const bool val) {
  this->fullstate_l = val;
}

void ServerParam::__set_fullstate_r(const bool val) {
  this->fullstate_r = val;
}

void ServerParam::__set_drop_ball_time(const int32_t val) {
  this->drop_ball_time = val;
}

void ServerParam::__set_synch_mode(const bool val) {
  this->synch_mode = val;
}

void ServerParam::__set_synch_offset(const int32_t val) {
  this->synch_offset = val;
}

void ServerParam::__set_synch_micro_sleep(const int32_t val) {
  this->synch_micro_sleep = val;
}

void ServerParam::__set_point_to_ban(const int32_t val) {
  this->point_to_ban = val;
}

void ServerParam::__set_point_to_duration(const int32_t val) {
  this->point_to_duration = val;
}

void ServerParam::__set_player_port(const int32_t val) {
  this->player_port = val;
}

void ServerParam::__set_trainer_port(const int32_t val) {
  this->trainer_port = val;
}

void ServerParam::__set_online_coach_port(const int32_t val) {
  this->online_coach_port = val;
}

void ServerParam::__set_verbose_mode(const bool val) {
  this->verbose_mode = val;
}

void ServerParam::__set_coach_send_vi_step(const int32_t val) {
  this->coach_send_vi_step = val;
}

void ServerParam::__set_replay_file(const std::string& val) {
  this->replay_file = val;
}

void ServerParam::__set_landmark_file(const std::string& val) {
  this->landmark_file = val;
}

void ServerParam::__set_send_comms(const bool val) {
  this->send_comms = val;
}

void ServerParam::__set_text_logging(const bool val) {
  this->text_logging = val;
}

void ServerParam::__set_game_logging(const bool val) {
  this->game_logging = val;
}

void ServerParam::__set_game_log_version(const int32_t val) {
  this->game_log_version = val;
}

void ServerParam::__set_text_log_dir(const std::string& val) {
  this->text_log_dir = val;
}

void ServerParam::__set_game_log_dir(const std::string& val) {
  this->game_log_dir = val;
}

void ServerParam::__set_text_log_fixed_name(const std::string& val) {
  this->text_log_fixed_name = val;
}

void ServerParam::__set_game_log_fixed_name(const std::string& val) {
  this->game_log_fixed_name = val;
}

void ServerParam::__set_use_text_log_fixed(const bool val) {
  this->use_text_log_fixed = val;
}

void ServerParam::__set_use_game_log_fixed(const bool val) {
  this->use_game_log_fixed = val;
}

void ServerParam::__set_use_text_log_dated(const bool val) {
  this->use_text_log_dated = val;
}

void ServerParam::__set_use_game_log_dated(const bool val) {
  this->use_game_log_dated = val;
}

void ServerParam::__set_log_date_format(const std::string& val) {
  this->log_date_format = val;
}

void ServerParam::__set_log_times(const bool val) {
  this->log_times = val;
}

void ServerParam::__set_record_message(const bool val) {
  this->record_message = val;
}

void ServerParam::__set_text_log_compression(const int32_t val) {
  this->text_log_compression = val;
}

void ServerParam::__set_game_log_compression(const int32_t val) {
  this->game_log_compression = val;
}

void ServerParam::__set_use_profile(const bool val) {
  this->use_profile = val;
}

void ServerParam::__set_tackle_dist(const double val) {
  this->tackle_dist = val;
}

void ServerParam::__set_tackle_back_dist(const double val) {
  this->tackle_back_dist = val;
}

void ServerParam::__set_tackle_width(const double val) {
  this->tackle_width = val;
}

void ServerParam::__set_tackle_exponent(const double val) {
  this->tackle_exponent = val;
}

void ServerParam::__set_tackle_cycles(const int32_t val) {
  this->tackle_cycles = val;
}

void ServerParam::__set_tackle_power_rate(const double val) {
  this->tackle_power_rate = val;
}

void ServerParam::__set_freeform_wait_period(const int32_t val) {
  this->freeform_wait_period = val;
}

void ServerParam::__set_freeform_send_period(const int32_t val) {
  this->freeform_send_period = val;
}

void ServerParam::__set_free_kick_faults(const bool val) {
  this->free_kick_faults = val;
}

void ServerParam::__set_back_passes(const bool val) {
  this->back_passes = val;
}

void ServerParam::__set_proper_goal_kicks(const bool val) {
  this->proper_goal_kicks = val;
}

void ServerParam::__set_stopped_ball_vel(const double val) {
  this->stopped_ball_vel = val;
}

void ServerParam::__set_max_goal_kicks(const int32_t val) {
  this->max_goal_kicks = val;
}

void ServerParam::__set_clang_del_win(const int32_t val) {
  this->clang_del_win = val;
}

void ServerParam::__set_clang_rule_win(const int32_t val) {
  this->clang_rule_win = val;
}

void ServerParam::__set_auto_mode(const bool val) {
  this->auto_mode = val;
}

void ServerParam::__set_kick_off_wait(const int32_t val) {
  this->kick_off_wait = val;
}

void ServerParam::__set_connect_wait(const int32_t val) {
  this->connect_wait = val;
}

void ServerParam::__set_game_over_wait(const int32_t val) {
  this->game_over_wait = val;
}

void ServerParam::__set_team_l_start(const std::string& val) {
  this->team_l_start = val;
}

void ServerParam::__set_team_r_start(const std::string& val) {
  this->team_r_start = val;
}

void ServerParam::__set_keepaway_mode(const bool val) {
  this->keepaway_mode = val;
}

void ServerParam::__set_keepaway_length(const double val) {
  this->keepaway_length = val;
}

void ServerParam::__set_keepaway_width(const double val) {
  this->keepaway_width = val;
}

void ServerParam::__set_keepaway_logging(const bool val) {
  this->keepaway_logging = val;
}

void ServerParam::__set_keepaway_log_dir(const std::string& val) {
  this->keepaway_log_dir = val;
}

void ServerParam::__set_keepaway_log_fixed_name(const std::string& val) {
  this->keepaway_log_fixed_name = val;
}

void ServerParam::__set_keepaway_log_fixed(const bool val) {
  this->keepaway_log_fixed = val;
}

void ServerParam::__set_keepaway_log_dated(const bool val) {
  this->keepaway_log_dated = val;
}

void ServerParam::__set_keepaway_start(const int32_t val) {
  this->keepaway_start = val;
}

void ServerParam::__set_nr_normal_halfs(const int32_t val) {
  this->nr_normal_halfs = val;
}

void ServerParam::__set_nr_extra_halfs(const int32_t val) {
  this->nr_extra_halfs = val;
}

void ServerParam::__set_penalty_shoot_outs(const bool val) {
  this->penalty_shoot_outs = val;
}

void ServerParam::__set_pen_before_setup_wait(const int32_t val) {
  this->pen_before_setup_wait = val;
}

void ServerParam::__set_pen_setup_wait(const int32_t val) {
  this->pen_setup_wait = val;
}

void ServerParam::__set_pen_ready_wait(const int32_t val) {
  this->pen_ready_wait = val;
}

void ServerParam::__set_pen_taken_wait(const int32_t val) {
  this->pen_taken_wait = val;
}

void ServerParam::__set_pen_nr_kicks(const int32_t val) {
  this->pen_nr_kicks = val;
}

void ServerParam::__set_pen_max_extra_kicks(const int32_t val) {
  this->pen_max_extra_kicks = val;
}

void ServerParam::__set_pen_dist_x(const double val) {
  this->pen_dist_x = val;
}

void ServerParam::__set_pen_random_winner(const bool val) {
  this->pen_random_winner = val;
}

void ServerParam::__set_pen_allow_mult_kicks(const bool val) {
  this->pen_allow_mult_kicks = val;
}

void ServerParam::__set_pen_max_goalie_dist_x(const double val) {
  this->pen_max_goalie_dist_x = val;
}

void ServerParam::__set_pen_coach_moves_players(const bool val) {
  this->pen_coach_moves_players = val;
}

void ServerParam::__set_module_dir(const std::string& val) {
  this->module_dir = val;
}

void ServerParam::__set_ball_stuck_area(const double val) {
  this->ball_stuck_area = val;
}

void ServerParam::__set_coach_msg_file(const std::string& val) {
  this->coach_msg_file = val;
}

void ServerParam::__set_max_tackle_power(const double val) {
  this->max_tackle_power = val;
}

void ServerParam::__set_max_back_tackle_power(const double val) {
  this->max_back_tackle_power = val;
}

void ServerParam::__set_player_speed_max_min(const double val) {
  this->player_speed_max_min = val;
}

void ServerParam::__set_extra_stamina(const double val) {
  this->extra_stamina = val;
}

void ServerParam::__set_synch_see_offset(const int32_t val) {
  this->synch_see_offset = val;
}

void ServerParam::__set_extra_half_time(const int32_t val) {
  this->extra_half_time = val;
}

void ServerParam::__set_stamina_capacity(const double val) {
  this->stamina_capacity = val;
}

void ServerParam::__set_max_dash_angle(const double val) {
  this->max_dash_angle = val;
}

void ServerParam::__set_min_dash_angle(const double val) {
  this->min_dash_angle = val;
}

void ServerParam::__set_dash_angle_step(const double val) {
  this->dash_angle_step = val;
}

void ServerParam::__set_side_dash_rate(const double val) {
  this->side_dash_rate = val;
}

void ServerParam::__set_back_dash_rate(const double val) {
  this->back_dash_rate = val;
}

void ServerParam::__set_max_dash_power(const double val) {
  this->max_dash_power = val;
}

void ServerParam::__set_min_dash_power(const double val) {
  this->min_dash_power = val;
}

void ServerParam::__set_tackle_rand_factor(const double val) {
  this->tackle_rand_factor = val;
}

void ServerParam::__set_foul_detect_probability(const double val) {
  this->foul_detect_probability = val;
}

void ServerParam::__set_foul_exponent(const double val) {
  this->foul_exponent = val;
}

void ServerParam::__set_foul_cycles(const int32_t val) {
  this->foul_cycles = val;
}

void ServerParam::__set_golden_goal(const bool val) {
  this->golden_goal = val;
}

void ServerParam::__set_red_card_probability(const double val) {
  this->red_card_probability = val;
}

void ServerParam::__set_illegal_defense_duration(const int32_t val) {
  this->illegal_defense_duration = val;
}

void ServerParam::__set_illegal_defense_number(const int32_t val) {
  this->illegal_defense_number = val;
}

void ServerParam::__set_illegal_defense_dist_x(const double val) {
  this->illegal_defense_dist_x = val;
}

void ServerParam::__set_illegal_defense_width(const double val) {
  this->illegal_defense_width = val;
}

void ServerParam::__set_fixed_teamname_l(const std::string& val) {
  this->fixed_teamname_l = val;
}

void ServerParam::__set_fixed_teamname_r(const std::string& val) {
  this->fixed_teamname_r = val;
}

void ServerParam::__set_max_catch_angle(const double val) {
  this->max_catch_angle = val;
}

void ServerParam::__set_min_catch_angle(const double val) {
  this->min_catch_angle = val;
}

void ServerParam::__set_random_seed(const int32_t val) {
  this->random_seed = val;
}

void ServerParam::__set_long_kick_power_factor(const double val) {
  this->long_kick_power_factor = val;
}

void ServerParam::__set_long_kick_delay(const int32_t val) {
  this->long_kick_delay = val;
}

void ServerParam::__set_max_monitors(const int32_t val) {
  this->max_monitors = val;
}

void ServerParam::__set_catchable_area(const double val) {
  this->catchable_area = val;
}

void ServerParam::__set_real_speed_max(const double val) {
  this->real_speed_max = val;
}

void ServerParam::__set_pitch_half_length(const double val) {
  this->pitch_half_length = val;
}

void ServerParam::__set_pitch_half_width(const double val) {
  this->pitch_half_width = val;
}

void ServerParam::__set_our_penalty_area_line_x(const double val) {
  this->our_penalty_area_line_x = val;
}

void ServerParam::__set_their_penalty_area_line_x(const double val) {
  this->their_penalty_area_line_x = val;
}

void ServerParam::__set_penalty_area_half_width(const double val) {
  this->penalty_area_half_width = val;
}

void ServerParam::__set_penalty_area_length(const double val) {
  this->penalty_area_length = val;
}

void ServerParam::__set_goal_width(const double val) {
  this->goal_width = val;
}
std::ostream& operator<<(std::ostream& out, const ServerParam& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServerParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inertia_moment);
          this->__isset.inertia_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_size);
          this->__isset.player_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_decay);
          this->__isset.player_decay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_rand);
          this->__isset.player_rand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_weight);
          this->__isset.player_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max);
          this->__isset.player_speed_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_accel_max);
          this->__isset.player_accel_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_max);
          this->__isset.stamina_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_inc_max);
          this->__isset.stamina_inc_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recover_init);
          this->__isset.recover_init = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recover_dec_thr);
          this->__isset.recover_dec_thr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recover_min);
          this->__isset.recover_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->recover_dec);
          this->__isset.recover_dec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_init);
          this->__isset.effort_init = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_dec_thr);
          this->__isset.effort_dec_thr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_min);
          this->__isset.effort_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_dec);
          this->__isset.effort_dec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_inc_thr);
          this->__isset.effort_inc_thr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_inc);
          this->__isset.effort_inc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rand);
          this->__isset.kick_rand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->team_actuator_noise);
          this->__isset.team_actuator_noise = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_rand_factor_l);
          this->__isset.player_rand_factor_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_rand_factor_r);
          this->__isset.player_rand_factor_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rand_factor_l);
          this->__isset.kick_rand_factor_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rand_factor_r);
          this->__isset.kick_rand_factor_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_size);
          this->__isset.ball_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_decay);
          this->__isset.ball_decay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_rand);
          this->__isset.ball_rand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_weight);
          this->__isset.ball_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_speed_max);
          this->__isset.ball_speed_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_accel_max);
          this->__isset.ball_accel_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power_rate);
          this->__isset.dash_power_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_power_rate);
          this->__isset.kick_power_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_margin);
          this->__isset.kickable_margin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->control_radius);
          this->__isset.control_radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->control_radius_width);
          this->__isset.control_radius_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_power);
          this->__isset.max_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_power);
          this->__isset.min_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_moment);
          this->__isset.max_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_moment);
          this->__isset.min_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_neck_moment);
          this->__isset.max_neck_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_neck_moment);
          this->__isset.min_neck_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_neck_angle);
          this->__isset.max_neck_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_neck_angle);
          this->__isset.min_neck_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->visible_angle);
          this->__isset.visible_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->visible_distance);
          this->__isset.visible_distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wind_dir);
          this->__isset.wind_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wind_force);
          this->__isset.wind_force = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wind_angle);
          this->__isset.wind_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wind_rand);
          this->__isset.wind_rand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_area);
          this->__isset.kickable_area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catch_area_l);
          this->__isset.catch_area_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catch_area_w);
          this->__isset.catch_area_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catch_probability);
          this->__isset.catch_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->goalie_max_moves);
          this->__isset.goalie_max_moves = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->corner_kick_margin);
          this->__isset.corner_kick_margin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offside_active_area_size);
          this->__isset.offside_active_area_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->wind_none);
          this->__isset.wind_none = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_wind_random);
          this->__isset.use_wind_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coach_say_count_max);
          this->__isset.coach_say_count_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coach_say_msg_size);
          this->__isset.coach_say_msg_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_win_size);
          this->__isset.clang_win_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_define_win);
          this->__isset.clang_define_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_meta_win);
          this->__isset.clang_meta_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_advice_win);
          this->__isset.clang_advice_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_info_win);
          this->__isset.clang_info_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_mess_delay);
          this->__isset.clang_mess_delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_mess_per_cycle);
          this->__isset.clang_mess_per_cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->half_time);
          this->__isset.half_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->simulator_step);
          this->__isset.simulator_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send_step);
          this->__isset.send_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->recv_step);
          this->__isset.recv_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sense_body_step);
          this->__isset.sense_body_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lcm_step);
          this->__isset.lcm_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_say_msg_size);
          this->__isset.player_say_msg_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_hear_max);
          this->__isset.player_hear_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_hear_inc);
          this->__isset.player_hear_inc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_hear_decay);
          this->__isset.player_hear_decay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->catch_ban_cycle);
          this->__isset.catch_ban_cycle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->slow_down_factor);
          this->__isset.slow_down_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_offside);
          this->__isset.use_offside = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->kickoff_offside);
          this->__isset.kickoff_offside = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offside_kick_margin);
          this->__isset.offside_kick_margin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->audio_cut_dist);
          this->__isset.audio_cut_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_quantize_step);
          this->__isset.dist_quantize_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->landmark_dist_quantize_step);
          this->__isset.landmark_dist_quantize_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dir_quantize_step);
          this->__isset.dir_quantize_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_quantize_step_l);
          this->__isset.dist_quantize_step_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dist_quantize_step_r);
          this->__isset.dist_quantize_step_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->landmark_dist_quantize_step_l);
          this->__isset.landmark_dist_quantize_step_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->landmark_dist_quantize_step_r);
          this->__isset.landmark_dist_quantize_step_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dir_quantize_step_l);
          this->__isset.dir_quantize_step_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dir_quantize_step_r);
          this->__isset.dir_quantize_step_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->coach_mode);
          this->__isset.coach_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->coach_with_referee_mode);
          this->__isset.coach_with_referee_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_old_coach_hear);
          this->__isset.use_old_coach_hear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->slowness_on_top_for_left_team);
          this->__isset.slowness_on_top_for_left_team = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->slowness_on_top_for_right_team);
          this->__isset.slowness_on_top_for_right_team = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_goal_l);
          this->__isset.start_goal_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_goal_r);
          this->__isset.start_goal_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fullstate_l);
          this->__isset.fullstate_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fullstate_r);
          this->__isset.fullstate_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drop_ball_time);
          this->__isset.drop_ball_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->synch_mode);
          this->__isset.synch_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->synch_offset);
          this->__isset.synch_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->synch_micro_sleep);
          this->__isset.synch_micro_sleep = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->point_to_ban);
          this->__isset.point_to_ban = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->point_to_duration);
          this->__isset.point_to_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_port);
          this->__isset.player_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 111:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trainer_port);
          this->__isset.trainer_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 112:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->online_coach_port);
          this->__isset.online_coach_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 113:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->verbose_mode);
          this->__isset.verbose_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 114:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coach_send_vi_step);
          this->__isset.coach_send_vi_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 115:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replay_file);
          this->__isset.replay_file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 116:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->landmark_file);
          this->__isset.landmark_file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 117:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->send_comms);
          this->__isset.send_comms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 118:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->text_logging);
          this->__isset.text_logging = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 119:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->game_logging);
          this->__isset.game_logging = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->game_log_version);
          this->__isset.game_log_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text_log_dir);
          this->__isset.text_log_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->game_log_dir);
          this->__isset.game_log_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text_log_fixed_name);
          this->__isset.text_log_fixed_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 124:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->game_log_fixed_name);
          this->__isset.game_log_fixed_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 125:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_text_log_fixed);
          this->__isset.use_text_log_fixed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 126:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_game_log_fixed);
          this->__isset.use_game_log_fixed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 127:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_text_log_dated);
          this->__isset.use_text_log_dated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 128:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_game_log_dated);
          this->__isset.use_game_log_dated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 129:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->log_date_format);
          this->__isset.log_date_format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->log_times);
          this->__isset.log_times = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->record_message);
          this->__isset.record_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 132:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->text_log_compression);
          this->__isset.text_log_compression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 133:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->game_log_compression);
          this->__isset.game_log_compression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 134:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_profile);
          this->__isset.use_profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 135:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_dist);
          this->__isset.tackle_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 136:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_back_dist);
          this->__isset.tackle_back_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 137:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_width);
          this->__isset.tackle_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 138:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_exponent);
          this->__isset.tackle_exponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 139:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tackle_cycles);
          this->__isset.tackle_cycles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 140:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_power_rate);
          this->__isset.tackle_power_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 141:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeform_wait_period);
          this->__isset.freeform_wait_period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 142:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeform_send_period);
          this->__isset.freeform_send_period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 143:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->free_kick_faults);
          this->__isset.free_kick_faults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 144:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->back_passes);
          this->__isset.back_passes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 145:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->proper_goal_kicks);
          this->__isset.proper_goal_kicks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 146:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stopped_ball_vel);
          this->__isset.stopped_ball_vel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 147:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_goal_kicks);
          this->__isset.max_goal_kicks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 148:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_del_win);
          this->__isset.clang_del_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 149:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->clang_rule_win);
          this->__isset.clang_rule_win = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 150:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->auto_mode);
          this->__isset.auto_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 151:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kick_off_wait);
          this->__isset.kick_off_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 152:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->connect_wait);
          this->__isset.connect_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 153:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->game_over_wait);
          this->__isset.game_over_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 154:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->team_l_start);
          this->__isset.team_l_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 155:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->team_r_start);
          this->__isset.team_r_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 156:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->keepaway_mode);
          this->__isset.keepaway_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 157:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->keepaway_length);
          this->__isset.keepaway_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 158:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->keepaway_width);
          this->__isset.keepaway_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 159:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->keepaway_logging);
          this->__isset.keepaway_logging = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 160:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keepaway_log_dir);
          this->__isset.keepaway_log_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 161:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keepaway_log_fixed_name);
          this->__isset.keepaway_log_fixed_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 162:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->keepaway_log_fixed);
          this->__isset.keepaway_log_fixed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 163:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->keepaway_log_dated);
          this->__isset.keepaway_log_dated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 164:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keepaway_start);
          this->__isset.keepaway_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 165:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nr_normal_halfs);
          this->__isset.nr_normal_halfs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 166:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nr_extra_halfs);
          this->__isset.nr_extra_halfs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 167:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->penalty_shoot_outs);
          this->__isset.penalty_shoot_outs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 168:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_before_setup_wait);
          this->__isset.pen_before_setup_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 169:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_setup_wait);
          this->__isset.pen_setup_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 170:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_ready_wait);
          this->__isset.pen_ready_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 171:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_taken_wait);
          this->__isset.pen_taken_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 172:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_nr_kicks);
          this->__isset.pen_nr_kicks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 173:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pen_max_extra_kicks);
          this->__isset.pen_max_extra_kicks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 174:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pen_dist_x);
          this->__isset.pen_dist_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 175:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pen_random_winner);
          this->__isset.pen_random_winner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 176:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pen_allow_mult_kicks);
          this->__isset.pen_allow_mult_kicks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 177:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pen_max_goalie_dist_x);
          this->__isset.pen_max_goalie_dist_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 178:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pen_coach_moves_players);
          this->__isset.pen_coach_moves_players = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 179:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->module_dir);
          this->__isset.module_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 180:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_stuck_area);
          this->__isset.ball_stuck_area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 181:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coach_msg_file);
          this->__isset.coach_msg_file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 182:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_tackle_power);
          this->__isset.max_tackle_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 183:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_back_tackle_power);
          this->__isset.max_back_tackle_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 184:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max_min);
          this->__isset.player_speed_max_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 185:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->extra_stamina);
          this->__isset.extra_stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 186:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->synch_see_offset);
          this->__isset.synch_see_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 187:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->extra_half_time);
          this->__isset.extra_half_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 188:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_capacity);
          this->__isset.stamina_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 189:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_dash_angle);
          this->__isset.max_dash_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 190:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_dash_angle);
          this->__isset.min_dash_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 191:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_angle_step);
          this->__isset.dash_angle_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 192:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->side_dash_rate);
          this->__isset.side_dash_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 193:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->back_dash_rate);
          this->__isset.back_dash_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 194:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_dash_power);
          this->__isset.max_dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 195:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_dash_power);
          this->__isset.min_dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 196:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tackle_rand_factor);
          this->__isset.tackle_rand_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 197:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->foul_detect_probability);
          this->__isset.foul_detect_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 198:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->foul_exponent);
          this->__isset.foul_exponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 199:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->foul_cycles);
          this->__isset.foul_cycles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 200:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->golden_goal);
          this->__isset.golden_goal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 201:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->red_card_probability);
          this->__isset.red_card_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 202:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->illegal_defense_duration);
          this->__isset.illegal_defense_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 203:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->illegal_defense_number);
          this->__isset.illegal_defense_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 204:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->illegal_defense_dist_x);
          this->__isset.illegal_defense_dist_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 205:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->illegal_defense_width);
          this->__isset.illegal_defense_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 206:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fixed_teamname_l);
          this->__isset.fixed_teamname_l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 207:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fixed_teamname_r);
          this->__isset.fixed_teamname_r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 208:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_catch_angle);
          this->__isset.max_catch_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 209:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_catch_angle);
          this->__isset.min_catch_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 210:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->random_seed);
          this->__isset.random_seed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 211:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->long_kick_power_factor);
          this->__isset.long_kick_power_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 212:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->long_kick_delay);
          this->__isset.long_kick_delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 213:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_monitors);
          this->__isset.max_monitors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 214:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catchable_area);
          this->__isset.catchable_area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 215:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->real_speed_max);
          this->__isset.real_speed_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 216:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_half_length);
          this->__isset.pitch_half_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 217:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_half_width);
          this->__isset.pitch_half_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 218:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->our_penalty_area_line_x);
          this->__isset.our_penalty_area_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 219:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->their_penalty_area_line_x);
          this->__isset.their_penalty_area_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 220:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->penalty_area_half_width);
          this->__isset.penalty_area_half_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 221:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->penalty_area_length);
          this->__isset.penalty_area_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 222:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->goal_width);
          this->__isset.goal_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerParam");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inertia_moment", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->inertia_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_size", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->player_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_decay", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->player_decay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_rand", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->player_rand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_weight", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->player_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->player_speed_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_accel_max", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->player_accel_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_max", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->stamina_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_inc_max", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->stamina_inc_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recover_init", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->recover_init);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recover_dec_thr", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->recover_dec_thr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recover_min", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->recover_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recover_dec", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->recover_dec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_init", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->effort_init);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_dec_thr", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->effort_dec_thr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_min", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->effort_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_dec", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->effort_dec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_inc_thr", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->effort_inc_thr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_inc", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->effort_inc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rand", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->kick_rand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_actuator_noise", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->team_actuator_noise);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_rand_factor_l", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->player_rand_factor_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_rand_factor_r", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->player_rand_factor_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rand_factor_l", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->kick_rand_factor_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rand_factor_r", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->kick_rand_factor_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_size", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->ball_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_decay", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->ball_decay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_rand", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->ball_rand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_weight", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->ball_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_speed_max", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->ball_speed_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_accel_max", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->ball_accel_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power_rate", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->dash_power_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_power_rate", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->kick_power_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_margin", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->kickable_margin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("control_radius", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->control_radius);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("control_radius_width", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->control_radius_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_power", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->max_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_power", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->min_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_moment", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->max_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_moment", ::apache::thrift::protocol::T_DOUBLE, 41);
  xfer += oprot->writeDouble(this->min_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_neck_moment", ::apache::thrift::protocol::T_DOUBLE, 42);
  xfer += oprot->writeDouble(this->max_neck_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_neck_moment", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->min_neck_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_neck_angle", ::apache::thrift::protocol::T_DOUBLE, 44);
  xfer += oprot->writeDouble(this->max_neck_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_neck_angle", ::apache::thrift::protocol::T_DOUBLE, 45);
  xfer += oprot->writeDouble(this->min_neck_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("visible_angle", ::apache::thrift::protocol::T_DOUBLE, 46);
  xfer += oprot->writeDouble(this->visible_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("visible_distance", ::apache::thrift::protocol::T_DOUBLE, 47);
  xfer += oprot->writeDouble(this->visible_distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wind_dir", ::apache::thrift::protocol::T_DOUBLE, 48);
  xfer += oprot->writeDouble(this->wind_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wind_force", ::apache::thrift::protocol::T_DOUBLE, 49);
  xfer += oprot->writeDouble(this->wind_force);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wind_angle", ::apache::thrift::protocol::T_DOUBLE, 50);
  xfer += oprot->writeDouble(this->wind_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wind_rand", ::apache::thrift::protocol::T_DOUBLE, 51);
  xfer += oprot->writeDouble(this->wind_rand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_area", ::apache::thrift::protocol::T_DOUBLE, 52);
  xfer += oprot->writeDouble(this->kickable_area);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_area_l", ::apache::thrift::protocol::T_DOUBLE, 53);
  xfer += oprot->writeDouble(this->catch_area_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_area_w", ::apache::thrift::protocol::T_DOUBLE, 54);
  xfer += oprot->writeDouble(this->catch_area_w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_probability", ::apache::thrift::protocol::T_DOUBLE, 55);
  xfer += oprot->writeDouble(this->catch_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goalie_max_moves", ::apache::thrift::protocol::T_I32, 56);
  xfer += oprot->writeI32(this->goalie_max_moves);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("corner_kick_margin", ::apache::thrift::protocol::T_DOUBLE, 57);
  xfer += oprot->writeDouble(this->corner_kick_margin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offside_active_area_size", ::apache::thrift::protocol::T_DOUBLE, 58);
  xfer += oprot->writeDouble(this->offside_active_area_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wind_none", ::apache::thrift::protocol::T_BOOL, 59);
  xfer += oprot->writeBool(this->wind_none);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_wind_random", ::apache::thrift::protocol::T_BOOL, 60);
  xfer += oprot->writeBool(this->use_wind_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_say_count_max", ::apache::thrift::protocol::T_I32, 61);
  xfer += oprot->writeI32(this->coach_say_count_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_say_msg_size", ::apache::thrift::protocol::T_I32, 62);
  xfer += oprot->writeI32(this->coach_say_msg_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_win_size", ::apache::thrift::protocol::T_I32, 63);
  xfer += oprot->writeI32(this->clang_win_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_define_win", ::apache::thrift::protocol::T_I32, 64);
  xfer += oprot->writeI32(this->clang_define_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_meta_win", ::apache::thrift::protocol::T_I32, 65);
  xfer += oprot->writeI32(this->clang_meta_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_advice_win", ::apache::thrift::protocol::T_I32, 66);
  xfer += oprot->writeI32(this->clang_advice_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_info_win", ::apache::thrift::protocol::T_I32, 67);
  xfer += oprot->writeI32(this->clang_info_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_mess_delay", ::apache::thrift::protocol::T_I32, 68);
  xfer += oprot->writeI32(this->clang_mess_delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_mess_per_cycle", ::apache::thrift::protocol::T_I32, 69);
  xfer += oprot->writeI32(this->clang_mess_per_cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("half_time", ::apache::thrift::protocol::T_I32, 70);
  xfer += oprot->writeI32(this->half_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("simulator_step", ::apache::thrift::protocol::T_I32, 71);
  xfer += oprot->writeI32(this->simulator_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_step", ::apache::thrift::protocol::T_I32, 72);
  xfer += oprot->writeI32(this->send_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recv_step", ::apache::thrift::protocol::T_I32, 73);
  xfer += oprot->writeI32(this->recv_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sense_body_step", ::apache::thrift::protocol::T_I32, 74);
  xfer += oprot->writeI32(this->sense_body_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lcm_step", ::apache::thrift::protocol::T_I32, 75);
  xfer += oprot->writeI32(this->lcm_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_say_msg_size", ::apache::thrift::protocol::T_I32, 76);
  xfer += oprot->writeI32(this->player_say_msg_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_hear_max", ::apache::thrift::protocol::T_I32, 77);
  xfer += oprot->writeI32(this->player_hear_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_hear_inc", ::apache::thrift::protocol::T_I32, 78);
  xfer += oprot->writeI32(this->player_hear_inc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_hear_decay", ::apache::thrift::protocol::T_I32, 79);
  xfer += oprot->writeI32(this->player_hear_decay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catch_ban_cycle", ::apache::thrift::protocol::T_I32, 80);
  xfer += oprot->writeI32(this->catch_ban_cycle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slow_down_factor", ::apache::thrift::protocol::T_I32, 81);
  xfer += oprot->writeI32(this->slow_down_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_offside", ::apache::thrift::protocol::T_BOOL, 82);
  xfer += oprot->writeBool(this->use_offside);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickoff_offside", ::apache::thrift::protocol::T_BOOL, 83);
  xfer += oprot->writeBool(this->kickoff_offside);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offside_kick_margin", ::apache::thrift::protocol::T_DOUBLE, 84);
  xfer += oprot->writeDouble(this->offside_kick_margin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_cut_dist", ::apache::thrift::protocol::T_DOUBLE, 85);
  xfer += oprot->writeDouble(this->audio_cut_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_quantize_step", ::apache::thrift::protocol::T_DOUBLE, 86);
  xfer += oprot->writeDouble(this->dist_quantize_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("landmark_dist_quantize_step", ::apache::thrift::protocol::T_DOUBLE, 87);
  xfer += oprot->writeDouble(this->landmark_dist_quantize_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_quantize_step", ::apache::thrift::protocol::T_DOUBLE, 88);
  xfer += oprot->writeDouble(this->dir_quantize_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_quantize_step_l", ::apache::thrift::protocol::T_DOUBLE, 89);
  xfer += oprot->writeDouble(this->dist_quantize_step_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dist_quantize_step_r", ::apache::thrift::protocol::T_DOUBLE, 90);
  xfer += oprot->writeDouble(this->dist_quantize_step_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("landmark_dist_quantize_step_l", ::apache::thrift::protocol::T_DOUBLE, 91);
  xfer += oprot->writeDouble(this->landmark_dist_quantize_step_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("landmark_dist_quantize_step_r", ::apache::thrift::protocol::T_DOUBLE, 92);
  xfer += oprot->writeDouble(this->landmark_dist_quantize_step_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_quantize_step_l", ::apache::thrift::protocol::T_DOUBLE, 93);
  xfer += oprot->writeDouble(this->dir_quantize_step_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_quantize_step_r", ::apache::thrift::protocol::T_DOUBLE, 94);
  xfer += oprot->writeDouble(this->dir_quantize_step_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_mode", ::apache::thrift::protocol::T_BOOL, 95);
  xfer += oprot->writeBool(this->coach_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_with_referee_mode", ::apache::thrift::protocol::T_BOOL, 96);
  xfer += oprot->writeBool(this->coach_with_referee_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_old_coach_hear", ::apache::thrift::protocol::T_BOOL, 97);
  xfer += oprot->writeBool(this->use_old_coach_hear);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slowness_on_top_for_left_team", ::apache::thrift::protocol::T_DOUBLE, 98);
  xfer += oprot->writeDouble(this->slowness_on_top_for_left_team);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slowness_on_top_for_right_team", ::apache::thrift::protocol::T_DOUBLE, 99);
  xfer += oprot->writeDouble(this->slowness_on_top_for_right_team);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_goal_l", ::apache::thrift::protocol::T_I32, 100);
  xfer += oprot->writeI32(this->start_goal_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_goal_r", ::apache::thrift::protocol::T_I32, 101);
  xfer += oprot->writeI32(this->start_goal_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullstate_l", ::apache::thrift::protocol::T_BOOL, 102);
  xfer += oprot->writeBool(this->fullstate_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullstate_r", ::apache::thrift::protocol::T_BOOL, 103);
  xfer += oprot->writeBool(this->fullstate_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_ball_time", ::apache::thrift::protocol::T_I32, 104);
  xfer += oprot->writeI32(this->drop_ball_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("synch_mode", ::apache::thrift::protocol::T_BOOL, 105);
  xfer += oprot->writeBool(this->synch_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("synch_offset", ::apache::thrift::protocol::T_I32, 106);
  xfer += oprot->writeI32(this->synch_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("synch_micro_sleep", ::apache::thrift::protocol::T_I32, 107);
  xfer += oprot->writeI32(this->synch_micro_sleep);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_ban", ::apache::thrift::protocol::T_I32, 108);
  xfer += oprot->writeI32(this->point_to_ban);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point_to_duration", ::apache::thrift::protocol::T_I32, 109);
  xfer += oprot->writeI32(this->point_to_duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_port", ::apache::thrift::protocol::T_I32, 110);
  xfer += oprot->writeI32(this->player_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trainer_port", ::apache::thrift::protocol::T_I32, 111);
  xfer += oprot->writeI32(this->trainer_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online_coach_port", ::apache::thrift::protocol::T_I32, 112);
  xfer += oprot->writeI32(this->online_coach_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verbose_mode", ::apache::thrift::protocol::T_BOOL, 113);
  xfer += oprot->writeBool(this->verbose_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_send_vi_step", ::apache::thrift::protocol::T_I32, 114);
  xfer += oprot->writeI32(this->coach_send_vi_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("replay_file", ::apache::thrift::protocol::T_STRING, 115);
  xfer += oprot->writeString(this->replay_file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("landmark_file", ::apache::thrift::protocol::T_STRING, 116);
  xfer += oprot->writeString(this->landmark_file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_comms", ::apache::thrift::protocol::T_BOOL, 117);
  xfer += oprot->writeBool(this->send_comms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text_logging", ::apache::thrift::protocol::T_BOOL, 118);
  xfer += oprot->writeBool(this->text_logging);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_logging", ::apache::thrift::protocol::T_BOOL, 119);
  xfer += oprot->writeBool(this->game_logging);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_log_version", ::apache::thrift::protocol::T_I32, 120);
  xfer += oprot->writeI32(this->game_log_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text_log_dir", ::apache::thrift::protocol::T_STRING, 121);
  xfer += oprot->writeString(this->text_log_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_log_dir", ::apache::thrift::protocol::T_STRING, 122);
  xfer += oprot->writeString(this->game_log_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text_log_fixed_name", ::apache::thrift::protocol::T_STRING, 123);
  xfer += oprot->writeString(this->text_log_fixed_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_log_fixed_name", ::apache::thrift::protocol::T_STRING, 124);
  xfer += oprot->writeString(this->game_log_fixed_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_text_log_fixed", ::apache::thrift::protocol::T_BOOL, 125);
  xfer += oprot->writeBool(this->use_text_log_fixed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_game_log_fixed", ::apache::thrift::protocol::T_BOOL, 126);
  xfer += oprot->writeBool(this->use_game_log_fixed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_text_log_dated", ::apache::thrift::protocol::T_BOOL, 127);
  xfer += oprot->writeBool(this->use_text_log_dated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_game_log_dated", ::apache::thrift::protocol::T_BOOL, 128);
  xfer += oprot->writeBool(this->use_game_log_dated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_date_format", ::apache::thrift::protocol::T_STRING, 129);
  xfer += oprot->writeString(this->log_date_format);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_times", ::apache::thrift::protocol::T_BOOL, 130);
  xfer += oprot->writeBool(this->log_times);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("record_message", ::apache::thrift::protocol::T_BOOL, 131);
  xfer += oprot->writeBool(this->record_message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text_log_compression", ::apache::thrift::protocol::T_I32, 132);
  xfer += oprot->writeI32(this->text_log_compression);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_log_compression", ::apache::thrift::protocol::T_I32, 133);
  xfer += oprot->writeI32(this->game_log_compression);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_profile", ::apache::thrift::protocol::T_BOOL, 134);
  xfer += oprot->writeBool(this->use_profile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_dist", ::apache::thrift::protocol::T_DOUBLE, 135);
  xfer += oprot->writeDouble(this->tackle_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_back_dist", ::apache::thrift::protocol::T_DOUBLE, 136);
  xfer += oprot->writeDouble(this->tackle_back_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_width", ::apache::thrift::protocol::T_DOUBLE, 137);
  xfer += oprot->writeDouble(this->tackle_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_exponent", ::apache::thrift::protocol::T_DOUBLE, 138);
  xfer += oprot->writeDouble(this->tackle_exponent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_cycles", ::apache::thrift::protocol::T_I32, 139);
  xfer += oprot->writeI32(this->tackle_cycles);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_power_rate", ::apache::thrift::protocol::T_DOUBLE, 140);
  xfer += oprot->writeDouble(this->tackle_power_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeform_wait_period", ::apache::thrift::protocol::T_I32, 141);
  xfer += oprot->writeI32(this->freeform_wait_period);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeform_send_period", ::apache::thrift::protocol::T_I32, 142);
  xfer += oprot->writeI32(this->freeform_send_period);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("free_kick_faults", ::apache::thrift::protocol::T_BOOL, 143);
  xfer += oprot->writeBool(this->free_kick_faults);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("back_passes", ::apache::thrift::protocol::T_BOOL, 144);
  xfer += oprot->writeBool(this->back_passes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proper_goal_kicks", ::apache::thrift::protocol::T_BOOL, 145);
  xfer += oprot->writeBool(this->proper_goal_kicks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopped_ball_vel", ::apache::thrift::protocol::T_DOUBLE, 146);
  xfer += oprot->writeDouble(this->stopped_ball_vel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_goal_kicks", ::apache::thrift::protocol::T_I32, 147);
  xfer += oprot->writeI32(this->max_goal_kicks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_del_win", ::apache::thrift::protocol::T_I32, 148);
  xfer += oprot->writeI32(this->clang_del_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clang_rule_win", ::apache::thrift::protocol::T_I32, 149);
  xfer += oprot->writeI32(this->clang_rule_win);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_mode", ::apache::thrift::protocol::T_BOOL, 150);
  xfer += oprot->writeBool(this->auto_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_off_wait", ::apache::thrift::protocol::T_I32, 151);
  xfer += oprot->writeI32(this->kick_off_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connect_wait", ::apache::thrift::protocol::T_I32, 152);
  xfer += oprot->writeI32(this->connect_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("game_over_wait", ::apache::thrift::protocol::T_I32, 153);
  xfer += oprot->writeI32(this->game_over_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_l_start", ::apache::thrift::protocol::T_STRING, 154);
  xfer += oprot->writeString(this->team_l_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_r_start", ::apache::thrift::protocol::T_STRING, 155);
  xfer += oprot->writeString(this->team_r_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_mode", ::apache::thrift::protocol::T_BOOL, 156);
  xfer += oprot->writeBool(this->keepaway_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_length", ::apache::thrift::protocol::T_DOUBLE, 157);
  xfer += oprot->writeDouble(this->keepaway_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_width", ::apache::thrift::protocol::T_DOUBLE, 158);
  xfer += oprot->writeDouble(this->keepaway_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_logging", ::apache::thrift::protocol::T_BOOL, 159);
  xfer += oprot->writeBool(this->keepaway_logging);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_log_dir", ::apache::thrift::protocol::T_STRING, 160);
  xfer += oprot->writeString(this->keepaway_log_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_log_fixed_name", ::apache::thrift::protocol::T_STRING, 161);
  xfer += oprot->writeString(this->keepaway_log_fixed_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_log_fixed", ::apache::thrift::protocol::T_BOOL, 162);
  xfer += oprot->writeBool(this->keepaway_log_fixed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_log_dated", ::apache::thrift::protocol::T_BOOL, 163);
  xfer += oprot->writeBool(this->keepaway_log_dated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepaway_start", ::apache::thrift::protocol::T_I32, 164);
  xfer += oprot->writeI32(this->keepaway_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nr_normal_halfs", ::apache::thrift::protocol::T_I32, 165);
  xfer += oprot->writeI32(this->nr_normal_halfs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nr_extra_halfs", ::apache::thrift::protocol::T_I32, 166);
  xfer += oprot->writeI32(this->nr_extra_halfs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("penalty_shoot_outs", ::apache::thrift::protocol::T_BOOL, 167);
  xfer += oprot->writeBool(this->penalty_shoot_outs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_before_setup_wait", ::apache::thrift::protocol::T_I32, 168);
  xfer += oprot->writeI32(this->pen_before_setup_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_setup_wait", ::apache::thrift::protocol::T_I32, 169);
  xfer += oprot->writeI32(this->pen_setup_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_ready_wait", ::apache::thrift::protocol::T_I32, 170);
  xfer += oprot->writeI32(this->pen_ready_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_taken_wait", ::apache::thrift::protocol::T_I32, 171);
  xfer += oprot->writeI32(this->pen_taken_wait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_nr_kicks", ::apache::thrift::protocol::T_I32, 172);
  xfer += oprot->writeI32(this->pen_nr_kicks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_max_extra_kicks", ::apache::thrift::protocol::T_I32, 173);
  xfer += oprot->writeI32(this->pen_max_extra_kicks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_dist_x", ::apache::thrift::protocol::T_DOUBLE, 174);
  xfer += oprot->writeDouble(this->pen_dist_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_random_winner", ::apache::thrift::protocol::T_BOOL, 175);
  xfer += oprot->writeBool(this->pen_random_winner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_allow_mult_kicks", ::apache::thrift::protocol::T_BOOL, 176);
  xfer += oprot->writeBool(this->pen_allow_mult_kicks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_max_goalie_dist_x", ::apache::thrift::protocol::T_DOUBLE, 177);
  xfer += oprot->writeDouble(this->pen_max_goalie_dist_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pen_coach_moves_players", ::apache::thrift::protocol::T_BOOL, 178);
  xfer += oprot->writeBool(this->pen_coach_moves_players);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("module_dir", ::apache::thrift::protocol::T_STRING, 179);
  xfer += oprot->writeString(this->module_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_stuck_area", ::apache::thrift::protocol::T_DOUBLE, 180);
  xfer += oprot->writeDouble(this->ball_stuck_area);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coach_msg_file", ::apache::thrift::protocol::T_STRING, 181);
  xfer += oprot->writeString(this->coach_msg_file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_tackle_power", ::apache::thrift::protocol::T_DOUBLE, 182);
  xfer += oprot->writeDouble(this->max_tackle_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_back_tackle_power", ::apache::thrift::protocol::T_DOUBLE, 183);
  xfer += oprot->writeDouble(this->max_back_tackle_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max_min", ::apache::thrift::protocol::T_DOUBLE, 184);
  xfer += oprot->writeDouble(this->player_speed_max_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_stamina", ::apache::thrift::protocol::T_DOUBLE, 185);
  xfer += oprot->writeDouble(this->extra_stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("synch_see_offset", ::apache::thrift::protocol::T_I32, 186);
  xfer += oprot->writeI32(this->synch_see_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_half_time", ::apache::thrift::protocol::T_I32, 187);
  xfer += oprot->writeI32(this->extra_half_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_capacity", ::apache::thrift::protocol::T_DOUBLE, 188);
  xfer += oprot->writeDouble(this->stamina_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_dash_angle", ::apache::thrift::protocol::T_DOUBLE, 189);
  xfer += oprot->writeDouble(this->max_dash_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_dash_angle", ::apache::thrift::protocol::T_DOUBLE, 190);
  xfer += oprot->writeDouble(this->min_dash_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_angle_step", ::apache::thrift::protocol::T_DOUBLE, 191);
  xfer += oprot->writeDouble(this->dash_angle_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("side_dash_rate", ::apache::thrift::protocol::T_DOUBLE, 192);
  xfer += oprot->writeDouble(this->side_dash_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("back_dash_rate", ::apache::thrift::protocol::T_DOUBLE, 193);
  xfer += oprot->writeDouble(this->back_dash_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_dash_power", ::apache::thrift::protocol::T_DOUBLE, 194);
  xfer += oprot->writeDouble(this->max_dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_dash_power", ::apache::thrift::protocol::T_DOUBLE, 195);
  xfer += oprot->writeDouble(this->min_dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tackle_rand_factor", ::apache::thrift::protocol::T_DOUBLE, 196);
  xfer += oprot->writeDouble(this->tackle_rand_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_detect_probability", ::apache::thrift::protocol::T_DOUBLE, 197);
  xfer += oprot->writeDouble(this->foul_detect_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_exponent", ::apache::thrift::protocol::T_DOUBLE, 198);
  xfer += oprot->writeDouble(this->foul_exponent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_cycles", ::apache::thrift::protocol::T_I32, 199);
  xfer += oprot->writeI32(this->foul_cycles);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("golden_goal", ::apache::thrift::protocol::T_BOOL, 200);
  xfer += oprot->writeBool(this->golden_goal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("red_card_probability", ::apache::thrift::protocol::T_DOUBLE, 201);
  xfer += oprot->writeDouble(this->red_card_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("illegal_defense_duration", ::apache::thrift::protocol::T_I32, 202);
  xfer += oprot->writeI32(this->illegal_defense_duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("illegal_defense_number", ::apache::thrift::protocol::T_I32, 203);
  xfer += oprot->writeI32(this->illegal_defense_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("illegal_defense_dist_x", ::apache::thrift::protocol::T_DOUBLE, 204);
  xfer += oprot->writeDouble(this->illegal_defense_dist_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("illegal_defense_width", ::apache::thrift::protocol::T_DOUBLE, 205);
  xfer += oprot->writeDouble(this->illegal_defense_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fixed_teamname_l", ::apache::thrift::protocol::T_STRING, 206);
  xfer += oprot->writeString(this->fixed_teamname_l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fixed_teamname_r", ::apache::thrift::protocol::T_STRING, 207);
  xfer += oprot->writeString(this->fixed_teamname_r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_catch_angle", ::apache::thrift::protocol::T_DOUBLE, 208);
  xfer += oprot->writeDouble(this->max_catch_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_catch_angle", ::apache::thrift::protocol::T_DOUBLE, 209);
  xfer += oprot->writeDouble(this->min_catch_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("random_seed", ::apache::thrift::protocol::T_I32, 210);
  xfer += oprot->writeI32(this->random_seed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("long_kick_power_factor", ::apache::thrift::protocol::T_DOUBLE, 211);
  xfer += oprot->writeDouble(this->long_kick_power_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("long_kick_delay", ::apache::thrift::protocol::T_I32, 212);
  xfer += oprot->writeI32(this->long_kick_delay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_monitors", ::apache::thrift::protocol::T_I32, 213);
  xfer += oprot->writeI32(this->max_monitors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catchable_area", ::apache::thrift::protocol::T_DOUBLE, 214);
  xfer += oprot->writeDouble(this->catchable_area);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("real_speed_max", ::apache::thrift::protocol::T_DOUBLE, 215);
  xfer += oprot->writeDouble(this->real_speed_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_half_length", ::apache::thrift::protocol::T_DOUBLE, 216);
  xfer += oprot->writeDouble(this->pitch_half_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_half_width", ::apache::thrift::protocol::T_DOUBLE, 217);
  xfer += oprot->writeDouble(this->pitch_half_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_penalty_area_line_x", ::apache::thrift::protocol::T_DOUBLE, 218);
  xfer += oprot->writeDouble(this->our_penalty_area_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("their_penalty_area_line_x", ::apache::thrift::protocol::T_DOUBLE, 219);
  xfer += oprot->writeDouble(this->their_penalty_area_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("penalty_area_half_width", ::apache::thrift::protocol::T_DOUBLE, 220);
  xfer += oprot->writeDouble(this->penalty_area_half_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("penalty_area_length", ::apache::thrift::protocol::T_DOUBLE, 221);
  xfer += oprot->writeDouble(this->penalty_area_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("goal_width", ::apache::thrift::protocol::T_DOUBLE, 222);
  xfer += oprot->writeDouble(this->goal_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerParam &a, ServerParam &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.inertia_moment, b.inertia_moment);
  swap(a.player_size, b.player_size);
  swap(a.player_decay, b.player_decay);
  swap(a.player_rand, b.player_rand);
  swap(a.player_weight, b.player_weight);
  swap(a.player_speed_max, b.player_speed_max);
  swap(a.player_accel_max, b.player_accel_max);
  swap(a.stamina_max, b.stamina_max);
  swap(a.stamina_inc_max, b.stamina_inc_max);
  swap(a.recover_init, b.recover_init);
  swap(a.recover_dec_thr, b.recover_dec_thr);
  swap(a.recover_min, b.recover_min);
  swap(a.recover_dec, b.recover_dec);
  swap(a.effort_init, b.effort_init);
  swap(a.effort_dec_thr, b.effort_dec_thr);
  swap(a.effort_min, b.effort_min);
  swap(a.effort_dec, b.effort_dec);
  swap(a.effort_inc_thr, b.effort_inc_thr);
  swap(a.effort_inc, b.effort_inc);
  swap(a.kick_rand, b.kick_rand);
  swap(a.team_actuator_noise, b.team_actuator_noise);
  swap(a.player_rand_factor_l, b.player_rand_factor_l);
  swap(a.player_rand_factor_r, b.player_rand_factor_r);
  swap(a.kick_rand_factor_l, b.kick_rand_factor_l);
  swap(a.kick_rand_factor_r, b.kick_rand_factor_r);
  swap(a.ball_size, b.ball_size);
  swap(a.ball_decay, b.ball_decay);
  swap(a.ball_rand, b.ball_rand);
  swap(a.ball_weight, b.ball_weight);
  swap(a.ball_speed_max, b.ball_speed_max);
  swap(a.ball_accel_max, b.ball_accel_max);
  swap(a.dash_power_rate, b.dash_power_rate);
  swap(a.kick_power_rate, b.kick_power_rate);
  swap(a.kickable_margin, b.kickable_margin);
  swap(a.control_radius, b.control_radius);
  swap(a.control_radius_width, b.control_radius_width);
  swap(a.max_power, b.max_power);
  swap(a.min_power, b.min_power);
  swap(a.max_moment, b.max_moment);
  swap(a.min_moment, b.min_moment);
  swap(a.max_neck_moment, b.max_neck_moment);
  swap(a.min_neck_moment, b.min_neck_moment);
  swap(a.max_neck_angle, b.max_neck_angle);
  swap(a.min_neck_angle, b.min_neck_angle);
  swap(a.visible_angle, b.visible_angle);
  swap(a.visible_distance, b.visible_distance);
  swap(a.wind_dir, b.wind_dir);
  swap(a.wind_force, b.wind_force);
  swap(a.wind_angle, b.wind_angle);
  swap(a.wind_rand, b.wind_rand);
  swap(a.kickable_area, b.kickable_area);
  swap(a.catch_area_l, b.catch_area_l);
  swap(a.catch_area_w, b.catch_area_w);
  swap(a.catch_probability, b.catch_probability);
  swap(a.goalie_max_moves, b.goalie_max_moves);
  swap(a.corner_kick_margin, b.corner_kick_margin);
  swap(a.offside_active_area_size, b.offside_active_area_size);
  swap(a.wind_none, b.wind_none);
  swap(a.use_wind_random, b.use_wind_random);
  swap(a.coach_say_count_max, b.coach_say_count_max);
  swap(a.coach_say_msg_size, b.coach_say_msg_size);
  swap(a.clang_win_size, b.clang_win_size);
  swap(a.clang_define_win, b.clang_define_win);
  swap(a.clang_meta_win, b.clang_meta_win);
  swap(a.clang_advice_win, b.clang_advice_win);
  swap(a.clang_info_win, b.clang_info_win);
  swap(a.clang_mess_delay, b.clang_mess_delay);
  swap(a.clang_mess_per_cycle, b.clang_mess_per_cycle);
  swap(a.half_time, b.half_time);
  swap(a.simulator_step, b.simulator_step);
  swap(a.send_step, b.send_step);
  swap(a.recv_step, b.recv_step);
  swap(a.sense_body_step, b.sense_body_step);
  swap(a.lcm_step, b.lcm_step);
  swap(a.player_say_msg_size, b.player_say_msg_size);
  swap(a.player_hear_max, b.player_hear_max);
  swap(a.player_hear_inc, b.player_hear_inc);
  swap(a.player_hear_decay, b.player_hear_decay);
  swap(a.catch_ban_cycle, b.catch_ban_cycle);
  swap(a.slow_down_factor, b.slow_down_factor);
  swap(a.use_offside, b.use_offside);
  swap(a.kickoff_offside, b.kickoff_offside);
  swap(a.offside_kick_margin, b.offside_kick_margin);
  swap(a.audio_cut_dist, b.audio_cut_dist);
  swap(a.dist_quantize_step, b.dist_quantize_step);
  swap(a.landmark_dist_quantize_step, b.landmark_dist_quantize_step);
  swap(a.dir_quantize_step, b.dir_quantize_step);
  swap(a.dist_quantize_step_l, b.dist_quantize_step_l);
  swap(a.dist_quantize_step_r, b.dist_quantize_step_r);
  swap(a.landmark_dist_quantize_step_l, b.landmark_dist_quantize_step_l);
  swap(a.landmark_dist_quantize_step_r, b.landmark_dist_quantize_step_r);
  swap(a.dir_quantize_step_l, b.dir_quantize_step_l);
  swap(a.dir_quantize_step_r, b.dir_quantize_step_r);
  swap(a.coach_mode, b.coach_mode);
  swap(a.coach_with_referee_mode, b.coach_with_referee_mode);
  swap(a.use_old_coach_hear, b.use_old_coach_hear);
  swap(a.slowness_on_top_for_left_team, b.slowness_on_top_for_left_team);
  swap(a.slowness_on_top_for_right_team, b.slowness_on_top_for_right_team);
  swap(a.start_goal_l, b.start_goal_l);
  swap(a.start_goal_r, b.start_goal_r);
  swap(a.fullstate_l, b.fullstate_l);
  swap(a.fullstate_r, b.fullstate_r);
  swap(a.drop_ball_time, b.drop_ball_time);
  swap(a.synch_mode, b.synch_mode);
  swap(a.synch_offset, b.synch_offset);
  swap(a.synch_micro_sleep, b.synch_micro_sleep);
  swap(a.point_to_ban, b.point_to_ban);
  swap(a.point_to_duration, b.point_to_duration);
  swap(a.player_port, b.player_port);
  swap(a.trainer_port, b.trainer_port);
  swap(a.online_coach_port, b.online_coach_port);
  swap(a.verbose_mode, b.verbose_mode);
  swap(a.coach_send_vi_step, b.coach_send_vi_step);
  swap(a.replay_file, b.replay_file);
  swap(a.landmark_file, b.landmark_file);
  swap(a.send_comms, b.send_comms);
  swap(a.text_logging, b.text_logging);
  swap(a.game_logging, b.game_logging);
  swap(a.game_log_version, b.game_log_version);
  swap(a.text_log_dir, b.text_log_dir);
  swap(a.game_log_dir, b.game_log_dir);
  swap(a.text_log_fixed_name, b.text_log_fixed_name);
  swap(a.game_log_fixed_name, b.game_log_fixed_name);
  swap(a.use_text_log_fixed, b.use_text_log_fixed);
  swap(a.use_game_log_fixed, b.use_game_log_fixed);
  swap(a.use_text_log_dated, b.use_text_log_dated);
  swap(a.use_game_log_dated, b.use_game_log_dated);
  swap(a.log_date_format, b.log_date_format);
  swap(a.log_times, b.log_times);
  swap(a.record_message, b.record_message);
  swap(a.text_log_compression, b.text_log_compression);
  swap(a.game_log_compression, b.game_log_compression);
  swap(a.use_profile, b.use_profile);
  swap(a.tackle_dist, b.tackle_dist);
  swap(a.tackle_back_dist, b.tackle_back_dist);
  swap(a.tackle_width, b.tackle_width);
  swap(a.tackle_exponent, b.tackle_exponent);
  swap(a.tackle_cycles, b.tackle_cycles);
  swap(a.tackle_power_rate, b.tackle_power_rate);
  swap(a.freeform_wait_period, b.freeform_wait_period);
  swap(a.freeform_send_period, b.freeform_send_period);
  swap(a.free_kick_faults, b.free_kick_faults);
  swap(a.back_passes, b.back_passes);
  swap(a.proper_goal_kicks, b.proper_goal_kicks);
  swap(a.stopped_ball_vel, b.stopped_ball_vel);
  swap(a.max_goal_kicks, b.max_goal_kicks);
  swap(a.clang_del_win, b.clang_del_win);
  swap(a.clang_rule_win, b.clang_rule_win);
  swap(a.auto_mode, b.auto_mode);
  swap(a.kick_off_wait, b.kick_off_wait);
  swap(a.connect_wait, b.connect_wait);
  swap(a.game_over_wait, b.game_over_wait);
  swap(a.team_l_start, b.team_l_start);
  swap(a.team_r_start, b.team_r_start);
  swap(a.keepaway_mode, b.keepaway_mode);
  swap(a.keepaway_length, b.keepaway_length);
  swap(a.keepaway_width, b.keepaway_width);
  swap(a.keepaway_logging, b.keepaway_logging);
  swap(a.keepaway_log_dir, b.keepaway_log_dir);
  swap(a.keepaway_log_fixed_name, b.keepaway_log_fixed_name);
  swap(a.keepaway_log_fixed, b.keepaway_log_fixed);
  swap(a.keepaway_log_dated, b.keepaway_log_dated);
  swap(a.keepaway_start, b.keepaway_start);
  swap(a.nr_normal_halfs, b.nr_normal_halfs);
  swap(a.nr_extra_halfs, b.nr_extra_halfs);
  swap(a.penalty_shoot_outs, b.penalty_shoot_outs);
  swap(a.pen_before_setup_wait, b.pen_before_setup_wait);
  swap(a.pen_setup_wait, b.pen_setup_wait);
  swap(a.pen_ready_wait, b.pen_ready_wait);
  swap(a.pen_taken_wait, b.pen_taken_wait);
  swap(a.pen_nr_kicks, b.pen_nr_kicks);
  swap(a.pen_max_extra_kicks, b.pen_max_extra_kicks);
  swap(a.pen_dist_x, b.pen_dist_x);
  swap(a.pen_random_winner, b.pen_random_winner);
  swap(a.pen_allow_mult_kicks, b.pen_allow_mult_kicks);
  swap(a.pen_max_goalie_dist_x, b.pen_max_goalie_dist_x);
  swap(a.pen_coach_moves_players, b.pen_coach_moves_players);
  swap(a.module_dir, b.module_dir);
  swap(a.ball_stuck_area, b.ball_stuck_area);
  swap(a.coach_msg_file, b.coach_msg_file);
  swap(a.max_tackle_power, b.max_tackle_power);
  swap(a.max_back_tackle_power, b.max_back_tackle_power);
  swap(a.player_speed_max_min, b.player_speed_max_min);
  swap(a.extra_stamina, b.extra_stamina);
  swap(a.synch_see_offset, b.synch_see_offset);
  swap(a.extra_half_time, b.extra_half_time);
  swap(a.stamina_capacity, b.stamina_capacity);
  swap(a.max_dash_angle, b.max_dash_angle);
  swap(a.min_dash_angle, b.min_dash_angle);
  swap(a.dash_angle_step, b.dash_angle_step);
  swap(a.side_dash_rate, b.side_dash_rate);
  swap(a.back_dash_rate, b.back_dash_rate);
  swap(a.max_dash_power, b.max_dash_power);
  swap(a.min_dash_power, b.min_dash_power);
  swap(a.tackle_rand_factor, b.tackle_rand_factor);
  swap(a.foul_detect_probability, b.foul_detect_probability);
  swap(a.foul_exponent, b.foul_exponent);
  swap(a.foul_cycles, b.foul_cycles);
  swap(a.golden_goal, b.golden_goal);
  swap(a.red_card_probability, b.red_card_probability);
  swap(a.illegal_defense_duration, b.illegal_defense_duration);
  swap(a.illegal_defense_number, b.illegal_defense_number);
  swap(a.illegal_defense_dist_x, b.illegal_defense_dist_x);
  swap(a.illegal_defense_width, b.illegal_defense_width);
  swap(a.fixed_teamname_l, b.fixed_teamname_l);
  swap(a.fixed_teamname_r, b.fixed_teamname_r);
  swap(a.max_catch_angle, b.max_catch_angle);
  swap(a.min_catch_angle, b.min_catch_angle);
  swap(a.random_seed, b.random_seed);
  swap(a.long_kick_power_factor, b.long_kick_power_factor);
  swap(a.long_kick_delay, b.long_kick_delay);
  swap(a.max_monitors, b.max_monitors);
  swap(a.catchable_area, b.catchable_area);
  swap(a.real_speed_max, b.real_speed_max);
  swap(a.pitch_half_length, b.pitch_half_length);
  swap(a.pitch_half_width, b.pitch_half_width);
  swap(a.our_penalty_area_line_x, b.our_penalty_area_line_x);
  swap(a.their_penalty_area_line_x, b.their_penalty_area_line_x);
  swap(a.penalty_area_half_width, b.penalty_area_half_width);
  swap(a.penalty_area_length, b.penalty_area_length);
  swap(a.goal_width, b.goal_width);
  swap(a.__isset, b.__isset);
}

ServerParam::ServerParam(const ServerParam& other335) {
  register_response = other335.register_response;
  inertia_moment = other335.inertia_moment;
  player_size = other335.player_size;
  player_decay = other335.player_decay;
  player_rand = other335.player_rand;
  player_weight = other335.player_weight;
  player_speed_max = other335.player_speed_max;
  player_accel_max = other335.player_accel_max;
  stamina_max = other335.stamina_max;
  stamina_inc_max = other335.stamina_inc_max;
  recover_init = other335.recover_init;
  recover_dec_thr = other335.recover_dec_thr;
  recover_min = other335.recover_min;
  recover_dec = other335.recover_dec;
  effort_init = other335.effort_init;
  effort_dec_thr = other335.effort_dec_thr;
  effort_min = other335.effort_min;
  effort_dec = other335.effort_dec;
  effort_inc_thr = other335.effort_inc_thr;
  effort_inc = other335.effort_inc;
  kick_rand = other335.kick_rand;
  team_actuator_noise = other335.team_actuator_noise;
  player_rand_factor_l = other335.player_rand_factor_l;
  player_rand_factor_r = other335.player_rand_factor_r;
  kick_rand_factor_l = other335.kick_rand_factor_l;
  kick_rand_factor_r = other335.kick_rand_factor_r;
  ball_size = other335.ball_size;
  ball_decay = other335.ball_decay;
  ball_rand = other335.ball_rand;
  ball_weight = other335.ball_weight;
  ball_speed_max = other335.ball_speed_max;
  ball_accel_max = other335.ball_accel_max;
  dash_power_rate = other335.dash_power_rate;
  kick_power_rate = other335.kick_power_rate;
  kickable_margin = other335.kickable_margin;
  control_radius = other335.control_radius;
  control_radius_width = other335.control_radius_width;
  max_power = other335.max_power;
  min_power = other335.min_power;
  max_moment = other335.max_moment;
  min_moment = other335.min_moment;
  max_neck_moment = other335.max_neck_moment;
  min_neck_moment = other335.min_neck_moment;
  max_neck_angle = other335.max_neck_angle;
  min_neck_angle = other335.min_neck_angle;
  visible_angle = other335.visible_angle;
  visible_distance = other335.visible_distance;
  wind_dir = other335.wind_dir;
  wind_force = other335.wind_force;
  wind_angle = other335.wind_angle;
  wind_rand = other335.wind_rand;
  kickable_area = other335.kickable_area;
  catch_area_l = other335.catch_area_l;
  catch_area_w = other335.catch_area_w;
  catch_probability = other335.catch_probability;
  goalie_max_moves = other335.goalie_max_moves;
  corner_kick_margin = other335.corner_kick_margin;
  offside_active_area_size = other335.offside_active_area_size;
  wind_none = other335.wind_none;
  use_wind_random = other335.use_wind_random;
  coach_say_count_max = other335.coach_say_count_max;
  coach_say_msg_size = other335.coach_say_msg_size;
  clang_win_size = other335.clang_win_size;
  clang_define_win = other335.clang_define_win;
  clang_meta_win = other335.clang_meta_win;
  clang_advice_win = other335.clang_advice_win;
  clang_info_win = other335.clang_info_win;
  clang_mess_delay = other335.clang_mess_delay;
  clang_mess_per_cycle = other335.clang_mess_per_cycle;
  half_time = other335.half_time;
  simulator_step = other335.simulator_step;
  send_step = other335.send_step;
  recv_step = other335.recv_step;
  sense_body_step = other335.sense_body_step;
  lcm_step = other335.lcm_step;
  player_say_msg_size = other335.player_say_msg_size;
  player_hear_max = other335.player_hear_max;
  player_hear_inc = other335.player_hear_inc;
  player_hear_decay = other335.player_hear_decay;
  catch_ban_cycle = other335.catch_ban_cycle;
  slow_down_factor = other335.slow_down_factor;
  use_offside = other335.use_offside;
  kickoff_offside = other335.kickoff_offside;
  offside_kick_margin = other335.offside_kick_margin;
  audio_cut_dist = other335.audio_cut_dist;
  dist_quantize_step = other335.dist_quantize_step;
  landmark_dist_quantize_step = other335.landmark_dist_quantize_step;
  dir_quantize_step = other335.dir_quantize_step;
  dist_quantize_step_l = other335.dist_quantize_step_l;
  dist_quantize_step_r = other335.dist_quantize_step_r;
  landmark_dist_quantize_step_l = other335.landmark_dist_quantize_step_l;
  landmark_dist_quantize_step_r = other335.landmark_dist_quantize_step_r;
  dir_quantize_step_l = other335.dir_quantize_step_l;
  dir_quantize_step_r = other335.dir_quantize_step_r;
  coach_mode = other335.coach_mode;
  coach_with_referee_mode = other335.coach_with_referee_mode;
  use_old_coach_hear = other335.use_old_coach_hear;
  slowness_on_top_for_left_team = other335.slowness_on_top_for_left_team;
  slowness_on_top_for_right_team = other335.slowness_on_top_for_right_team;
  start_goal_l = other335.start_goal_l;
  start_goal_r = other335.start_goal_r;
  fullstate_l = other335.fullstate_l;
  fullstate_r = other335.fullstate_r;
  drop_ball_time = other335.drop_ball_time;
  synch_mode = other335.synch_mode;
  synch_offset = other335.synch_offset;
  synch_micro_sleep = other335.synch_micro_sleep;
  point_to_ban = other335.point_to_ban;
  point_to_duration = other335.point_to_duration;
  player_port = other335.player_port;
  trainer_port = other335.trainer_port;
  online_coach_port = other335.online_coach_port;
  verbose_mode = other335.verbose_mode;
  coach_send_vi_step = other335.coach_send_vi_step;
  replay_file = other335.replay_file;
  landmark_file = other335.landmark_file;
  send_comms = other335.send_comms;
  text_logging = other335.text_logging;
  game_logging = other335.game_logging;
  game_log_version = other335.game_log_version;
  text_log_dir = other335.text_log_dir;
  game_log_dir = other335.game_log_dir;
  text_log_fixed_name = other335.text_log_fixed_name;
  game_log_fixed_name = other335.game_log_fixed_name;
  use_text_log_fixed = other335.use_text_log_fixed;
  use_game_log_fixed = other335.use_game_log_fixed;
  use_text_log_dated = other335.use_text_log_dated;
  use_game_log_dated = other335.use_game_log_dated;
  log_date_format = other335.log_date_format;
  log_times = other335.log_times;
  record_message = other335.record_message;
  text_log_compression = other335.text_log_compression;
  game_log_compression = other335.game_log_compression;
  use_profile = other335.use_profile;
  tackle_dist = other335.tackle_dist;
  tackle_back_dist = other335.tackle_back_dist;
  tackle_width = other335.tackle_width;
  tackle_exponent = other335.tackle_exponent;
  tackle_cycles = other335.tackle_cycles;
  tackle_power_rate = other335.tackle_power_rate;
  freeform_wait_period = other335.freeform_wait_period;
  freeform_send_period = other335.freeform_send_period;
  free_kick_faults = other335.free_kick_faults;
  back_passes = other335.back_passes;
  proper_goal_kicks = other335.proper_goal_kicks;
  stopped_ball_vel = other335.stopped_ball_vel;
  max_goal_kicks = other335.max_goal_kicks;
  clang_del_win = other335.clang_del_win;
  clang_rule_win = other335.clang_rule_win;
  auto_mode = other335.auto_mode;
  kick_off_wait = other335.kick_off_wait;
  connect_wait = other335.connect_wait;
  game_over_wait = other335.game_over_wait;
  team_l_start = other335.team_l_start;
  team_r_start = other335.team_r_start;
  keepaway_mode = other335.keepaway_mode;
  keepaway_length = other335.keepaway_length;
  keepaway_width = other335.keepaway_width;
  keepaway_logging = other335.keepaway_logging;
  keepaway_log_dir = other335.keepaway_log_dir;
  keepaway_log_fixed_name = other335.keepaway_log_fixed_name;
  keepaway_log_fixed = other335.keepaway_log_fixed;
  keepaway_log_dated = other335.keepaway_log_dated;
  keepaway_start = other335.keepaway_start;
  nr_normal_halfs = other335.nr_normal_halfs;
  nr_extra_halfs = other335.nr_extra_halfs;
  penalty_shoot_outs = other335.penalty_shoot_outs;
  pen_before_setup_wait = other335.pen_before_setup_wait;
  pen_setup_wait = other335.pen_setup_wait;
  pen_ready_wait = other335.pen_ready_wait;
  pen_taken_wait = other335.pen_taken_wait;
  pen_nr_kicks = other335.pen_nr_kicks;
  pen_max_extra_kicks = other335.pen_max_extra_kicks;
  pen_dist_x = other335.pen_dist_x;
  pen_random_winner = other335.pen_random_winner;
  pen_allow_mult_kicks = other335.pen_allow_mult_kicks;
  pen_max_goalie_dist_x = other335.pen_max_goalie_dist_x;
  pen_coach_moves_players = other335.pen_coach_moves_players;
  module_dir = other335.module_dir;
  ball_stuck_area = other335.ball_stuck_area;
  coach_msg_file = other335.coach_msg_file;
  max_tackle_power = other335.max_tackle_power;
  max_back_tackle_power = other335.max_back_tackle_power;
  player_speed_max_min = other335.player_speed_max_min;
  extra_stamina = other335.extra_stamina;
  synch_see_offset = other335.synch_see_offset;
  extra_half_time = other335.extra_half_time;
  stamina_capacity = other335.stamina_capacity;
  max_dash_angle = other335.max_dash_angle;
  min_dash_angle = other335.min_dash_angle;
  dash_angle_step = other335.dash_angle_step;
  side_dash_rate = other335.side_dash_rate;
  back_dash_rate = other335.back_dash_rate;
  max_dash_power = other335.max_dash_power;
  min_dash_power = other335.min_dash_power;
  tackle_rand_factor = other335.tackle_rand_factor;
  foul_detect_probability = other335.foul_detect_probability;
  foul_exponent = other335.foul_exponent;
  foul_cycles = other335.foul_cycles;
  golden_goal = other335.golden_goal;
  red_card_probability = other335.red_card_probability;
  illegal_defense_duration = other335.illegal_defense_duration;
  illegal_defense_number = other335.illegal_defense_number;
  illegal_defense_dist_x = other335.illegal_defense_dist_x;
  illegal_defense_width = other335.illegal_defense_width;
  fixed_teamname_l = other335.fixed_teamname_l;
  fixed_teamname_r = other335.fixed_teamname_r;
  max_catch_angle = other335.max_catch_angle;
  min_catch_angle = other335.min_catch_angle;
  random_seed = other335.random_seed;
  long_kick_power_factor = other335.long_kick_power_factor;
  long_kick_delay = other335.long_kick_delay;
  max_monitors = other335.max_monitors;
  catchable_area = other335.catchable_area;
  real_speed_max = other335.real_speed_max;
  pitch_half_length = other335.pitch_half_length;
  pitch_half_width = other335.pitch_half_width;
  our_penalty_area_line_x = other335.our_penalty_area_line_x;
  their_penalty_area_line_x = other335.their_penalty_area_line_x;
  penalty_area_half_width = other335.penalty_area_half_width;
  penalty_area_length = other335.penalty_area_length;
  goal_width = other335.goal_width;
  __isset = other335.__isset;
}
ServerParam& ServerParam::operator=(const ServerParam& other336) {
  register_response = other336.register_response;
  inertia_moment = other336.inertia_moment;
  player_size = other336.player_size;
  player_decay = other336.player_decay;
  player_rand = other336.player_rand;
  player_weight = other336.player_weight;
  player_speed_max = other336.player_speed_max;
  player_accel_max = other336.player_accel_max;
  stamina_max = other336.stamina_max;
  stamina_inc_max = other336.stamina_inc_max;
  recover_init = other336.recover_init;
  recover_dec_thr = other336.recover_dec_thr;
  recover_min = other336.recover_min;
  recover_dec = other336.recover_dec;
  effort_init = other336.effort_init;
  effort_dec_thr = other336.effort_dec_thr;
  effort_min = other336.effort_min;
  effort_dec = other336.effort_dec;
  effort_inc_thr = other336.effort_inc_thr;
  effort_inc = other336.effort_inc;
  kick_rand = other336.kick_rand;
  team_actuator_noise = other336.team_actuator_noise;
  player_rand_factor_l = other336.player_rand_factor_l;
  player_rand_factor_r = other336.player_rand_factor_r;
  kick_rand_factor_l = other336.kick_rand_factor_l;
  kick_rand_factor_r = other336.kick_rand_factor_r;
  ball_size = other336.ball_size;
  ball_decay = other336.ball_decay;
  ball_rand = other336.ball_rand;
  ball_weight = other336.ball_weight;
  ball_speed_max = other336.ball_speed_max;
  ball_accel_max = other336.ball_accel_max;
  dash_power_rate = other336.dash_power_rate;
  kick_power_rate = other336.kick_power_rate;
  kickable_margin = other336.kickable_margin;
  control_radius = other336.control_radius;
  control_radius_width = other336.control_radius_width;
  max_power = other336.max_power;
  min_power = other336.min_power;
  max_moment = other336.max_moment;
  min_moment = other336.min_moment;
  max_neck_moment = other336.max_neck_moment;
  min_neck_moment = other336.min_neck_moment;
  max_neck_angle = other336.max_neck_angle;
  min_neck_angle = other336.min_neck_angle;
  visible_angle = other336.visible_angle;
  visible_distance = other336.visible_distance;
  wind_dir = other336.wind_dir;
  wind_force = other336.wind_force;
  wind_angle = other336.wind_angle;
  wind_rand = other336.wind_rand;
  kickable_area = other336.kickable_area;
  catch_area_l = other336.catch_area_l;
  catch_area_w = other336.catch_area_w;
  catch_probability = other336.catch_probability;
  goalie_max_moves = other336.goalie_max_moves;
  corner_kick_margin = other336.corner_kick_margin;
  offside_active_area_size = other336.offside_active_area_size;
  wind_none = other336.wind_none;
  use_wind_random = other336.use_wind_random;
  coach_say_count_max = other336.coach_say_count_max;
  coach_say_msg_size = other336.coach_say_msg_size;
  clang_win_size = other336.clang_win_size;
  clang_define_win = other336.clang_define_win;
  clang_meta_win = other336.clang_meta_win;
  clang_advice_win = other336.clang_advice_win;
  clang_info_win = other336.clang_info_win;
  clang_mess_delay = other336.clang_mess_delay;
  clang_mess_per_cycle = other336.clang_mess_per_cycle;
  half_time = other336.half_time;
  simulator_step = other336.simulator_step;
  send_step = other336.send_step;
  recv_step = other336.recv_step;
  sense_body_step = other336.sense_body_step;
  lcm_step = other336.lcm_step;
  player_say_msg_size = other336.player_say_msg_size;
  player_hear_max = other336.player_hear_max;
  player_hear_inc = other336.player_hear_inc;
  player_hear_decay = other336.player_hear_decay;
  catch_ban_cycle = other336.catch_ban_cycle;
  slow_down_factor = other336.slow_down_factor;
  use_offside = other336.use_offside;
  kickoff_offside = other336.kickoff_offside;
  offside_kick_margin = other336.offside_kick_margin;
  audio_cut_dist = other336.audio_cut_dist;
  dist_quantize_step = other336.dist_quantize_step;
  landmark_dist_quantize_step = other336.landmark_dist_quantize_step;
  dir_quantize_step = other336.dir_quantize_step;
  dist_quantize_step_l = other336.dist_quantize_step_l;
  dist_quantize_step_r = other336.dist_quantize_step_r;
  landmark_dist_quantize_step_l = other336.landmark_dist_quantize_step_l;
  landmark_dist_quantize_step_r = other336.landmark_dist_quantize_step_r;
  dir_quantize_step_l = other336.dir_quantize_step_l;
  dir_quantize_step_r = other336.dir_quantize_step_r;
  coach_mode = other336.coach_mode;
  coach_with_referee_mode = other336.coach_with_referee_mode;
  use_old_coach_hear = other336.use_old_coach_hear;
  slowness_on_top_for_left_team = other336.slowness_on_top_for_left_team;
  slowness_on_top_for_right_team = other336.slowness_on_top_for_right_team;
  start_goal_l = other336.start_goal_l;
  start_goal_r = other336.start_goal_r;
  fullstate_l = other336.fullstate_l;
  fullstate_r = other336.fullstate_r;
  drop_ball_time = other336.drop_ball_time;
  synch_mode = other336.synch_mode;
  synch_offset = other336.synch_offset;
  synch_micro_sleep = other336.synch_micro_sleep;
  point_to_ban = other336.point_to_ban;
  point_to_duration = other336.point_to_duration;
  player_port = other336.player_port;
  trainer_port = other336.trainer_port;
  online_coach_port = other336.online_coach_port;
  verbose_mode = other336.verbose_mode;
  coach_send_vi_step = other336.coach_send_vi_step;
  replay_file = other336.replay_file;
  landmark_file = other336.landmark_file;
  send_comms = other336.send_comms;
  text_logging = other336.text_logging;
  game_logging = other336.game_logging;
  game_log_version = other336.game_log_version;
  text_log_dir = other336.text_log_dir;
  game_log_dir = other336.game_log_dir;
  text_log_fixed_name = other336.text_log_fixed_name;
  game_log_fixed_name = other336.game_log_fixed_name;
  use_text_log_fixed = other336.use_text_log_fixed;
  use_game_log_fixed = other336.use_game_log_fixed;
  use_text_log_dated = other336.use_text_log_dated;
  use_game_log_dated = other336.use_game_log_dated;
  log_date_format = other336.log_date_format;
  log_times = other336.log_times;
  record_message = other336.record_message;
  text_log_compression = other336.text_log_compression;
  game_log_compression = other336.game_log_compression;
  use_profile = other336.use_profile;
  tackle_dist = other336.tackle_dist;
  tackle_back_dist = other336.tackle_back_dist;
  tackle_width = other336.tackle_width;
  tackle_exponent = other336.tackle_exponent;
  tackle_cycles = other336.tackle_cycles;
  tackle_power_rate = other336.tackle_power_rate;
  freeform_wait_period = other336.freeform_wait_period;
  freeform_send_period = other336.freeform_send_period;
  free_kick_faults = other336.free_kick_faults;
  back_passes = other336.back_passes;
  proper_goal_kicks = other336.proper_goal_kicks;
  stopped_ball_vel = other336.stopped_ball_vel;
  max_goal_kicks = other336.max_goal_kicks;
  clang_del_win = other336.clang_del_win;
  clang_rule_win = other336.clang_rule_win;
  auto_mode = other336.auto_mode;
  kick_off_wait = other336.kick_off_wait;
  connect_wait = other336.connect_wait;
  game_over_wait = other336.game_over_wait;
  team_l_start = other336.team_l_start;
  team_r_start = other336.team_r_start;
  keepaway_mode = other336.keepaway_mode;
  keepaway_length = other336.keepaway_length;
  keepaway_width = other336.keepaway_width;
  keepaway_logging = other336.keepaway_logging;
  keepaway_log_dir = other336.keepaway_log_dir;
  keepaway_log_fixed_name = other336.keepaway_log_fixed_name;
  keepaway_log_fixed = other336.keepaway_log_fixed;
  keepaway_log_dated = other336.keepaway_log_dated;
  keepaway_start = other336.keepaway_start;
  nr_normal_halfs = other336.nr_normal_halfs;
  nr_extra_halfs = other336.nr_extra_halfs;
  penalty_shoot_outs = other336.penalty_shoot_outs;
  pen_before_setup_wait = other336.pen_before_setup_wait;
  pen_setup_wait = other336.pen_setup_wait;
  pen_ready_wait = other336.pen_ready_wait;
  pen_taken_wait = other336.pen_taken_wait;
  pen_nr_kicks = other336.pen_nr_kicks;
  pen_max_extra_kicks = other336.pen_max_extra_kicks;
  pen_dist_x = other336.pen_dist_x;
  pen_random_winner = other336.pen_random_winner;
  pen_allow_mult_kicks = other336.pen_allow_mult_kicks;
  pen_max_goalie_dist_x = other336.pen_max_goalie_dist_x;
  pen_coach_moves_players = other336.pen_coach_moves_players;
  module_dir = other336.module_dir;
  ball_stuck_area = other336.ball_stuck_area;
  coach_msg_file = other336.coach_msg_file;
  max_tackle_power = other336.max_tackle_power;
  max_back_tackle_power = other336.max_back_tackle_power;
  player_speed_max_min = other336.player_speed_max_min;
  extra_stamina = other336.extra_stamina;
  synch_see_offset = other336.synch_see_offset;
  extra_half_time = other336.extra_half_time;
  stamina_capacity = other336.stamina_capacity;
  max_dash_angle = other336.max_dash_angle;
  min_dash_angle = other336.min_dash_angle;
  dash_angle_step = other336.dash_angle_step;
  side_dash_rate = other336.side_dash_rate;
  back_dash_rate = other336.back_dash_rate;
  max_dash_power = other336.max_dash_power;
  min_dash_power = other336.min_dash_power;
  tackle_rand_factor = other336.tackle_rand_factor;
  foul_detect_probability = other336.foul_detect_probability;
  foul_exponent = other336.foul_exponent;
  foul_cycles = other336.foul_cycles;
  golden_goal = other336.golden_goal;
  red_card_probability = other336.red_card_probability;
  illegal_defense_duration = other336.illegal_defense_duration;
  illegal_defense_number = other336.illegal_defense_number;
  illegal_defense_dist_x = other336.illegal_defense_dist_x;
  illegal_defense_width = other336.illegal_defense_width;
  fixed_teamname_l = other336.fixed_teamname_l;
  fixed_teamname_r = other336.fixed_teamname_r;
  max_catch_angle = other336.max_catch_angle;
  min_catch_angle = other336.min_catch_angle;
  random_seed = other336.random_seed;
  long_kick_power_factor = other336.long_kick_power_factor;
  long_kick_delay = other336.long_kick_delay;
  max_monitors = other336.max_monitors;
  catchable_area = other336.catchable_area;
  real_speed_max = other336.real_speed_max;
  pitch_half_length = other336.pitch_half_length;
  pitch_half_width = other336.pitch_half_width;
  our_penalty_area_line_x = other336.our_penalty_area_line_x;
  their_penalty_area_line_x = other336.their_penalty_area_line_x;
  penalty_area_half_width = other336.penalty_area_half_width;
  penalty_area_length = other336.penalty_area_length;
  goal_width = other336.goal_width;
  __isset = other336.__isset;
  return *this;
}
void ServerParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerParam(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "inertia_moment=" << to_string(inertia_moment);
  out << ", " << "player_size=" << to_string(player_size);
  out << ", " << "player_decay=" << to_string(player_decay);
  out << ", " << "player_rand=" << to_string(player_rand);
  out << ", " << "player_weight=" << to_string(player_weight);
  out << ", " << "player_speed_max=" << to_string(player_speed_max);
  out << ", " << "player_accel_max=" << to_string(player_accel_max);
  out << ", " << "stamina_max=" << to_string(stamina_max);
  out << ", " << "stamina_inc_max=" << to_string(stamina_inc_max);
  out << ", " << "recover_init=" << to_string(recover_init);
  out << ", " << "recover_dec_thr=" << to_string(recover_dec_thr);
  out << ", " << "recover_min=" << to_string(recover_min);
  out << ", " << "recover_dec=" << to_string(recover_dec);
  out << ", " << "effort_init=" << to_string(effort_init);
  out << ", " << "effort_dec_thr=" << to_string(effort_dec_thr);
  out << ", " << "effort_min=" << to_string(effort_min);
  out << ", " << "effort_dec=" << to_string(effort_dec);
  out << ", " << "effort_inc_thr=" << to_string(effort_inc_thr);
  out << ", " << "effort_inc=" << to_string(effort_inc);
  out << ", " << "kick_rand=" << to_string(kick_rand);
  out << ", " << "team_actuator_noise=" << to_string(team_actuator_noise);
  out << ", " << "player_rand_factor_l=" << to_string(player_rand_factor_l);
  out << ", " << "player_rand_factor_r=" << to_string(player_rand_factor_r);
  out << ", " << "kick_rand_factor_l=" << to_string(kick_rand_factor_l);
  out << ", " << "kick_rand_factor_r=" << to_string(kick_rand_factor_r);
  out << ", " << "ball_size=" << to_string(ball_size);
  out << ", " << "ball_decay=" << to_string(ball_decay);
  out << ", " << "ball_rand=" << to_string(ball_rand);
  out << ", " << "ball_weight=" << to_string(ball_weight);
  out << ", " << "ball_speed_max=" << to_string(ball_speed_max);
  out << ", " << "ball_accel_max=" << to_string(ball_accel_max);
  out << ", " << "dash_power_rate=" << to_string(dash_power_rate);
  out << ", " << "kick_power_rate=" << to_string(kick_power_rate);
  out << ", " << "kickable_margin=" << to_string(kickable_margin);
  out << ", " << "control_radius=" << to_string(control_radius);
  out << ", " << "control_radius_width=" << to_string(control_radius_width);
  out << ", " << "max_power=" << to_string(max_power);
  out << ", " << "min_power=" << to_string(min_power);
  out << ", " << "max_moment=" << to_string(max_moment);
  out << ", " << "min_moment=" << to_string(min_moment);
  out << ", " << "max_neck_moment=" << to_string(max_neck_moment);
  out << ", " << "min_neck_moment=" << to_string(min_neck_moment);
  out << ", " << "max_neck_angle=" << to_string(max_neck_angle);
  out << ", " << "min_neck_angle=" << to_string(min_neck_angle);
  out << ", " << "visible_angle=" << to_string(visible_angle);
  out << ", " << "visible_distance=" << to_string(visible_distance);
  out << ", " << "wind_dir=" << to_string(wind_dir);
  out << ", " << "wind_force=" << to_string(wind_force);
  out << ", " << "wind_angle=" << to_string(wind_angle);
  out << ", " << "wind_rand=" << to_string(wind_rand);
  out << ", " << "kickable_area=" << to_string(kickable_area);
  out << ", " << "catch_area_l=" << to_string(catch_area_l);
  out << ", " << "catch_area_w=" << to_string(catch_area_w);
  out << ", " << "catch_probability=" << to_string(catch_probability);
  out << ", " << "goalie_max_moves=" << to_string(goalie_max_moves);
  out << ", " << "corner_kick_margin=" << to_string(corner_kick_margin);
  out << ", " << "offside_active_area_size=" << to_string(offside_active_area_size);
  out << ", " << "wind_none=" << to_string(wind_none);
  out << ", " << "use_wind_random=" << to_string(use_wind_random);
  out << ", " << "coach_say_count_max=" << to_string(coach_say_count_max);
  out << ", " << "coach_say_msg_size=" << to_string(coach_say_msg_size);
  out << ", " << "clang_win_size=" << to_string(clang_win_size);
  out << ", " << "clang_define_win=" << to_string(clang_define_win);
  out << ", " << "clang_meta_win=" << to_string(clang_meta_win);
  out << ", " << "clang_advice_win=" << to_string(clang_advice_win);
  out << ", " << "clang_info_win=" << to_string(clang_info_win);
  out << ", " << "clang_mess_delay=" << to_string(clang_mess_delay);
  out << ", " << "clang_mess_per_cycle=" << to_string(clang_mess_per_cycle);
  out << ", " << "half_time=" << to_string(half_time);
  out << ", " << "simulator_step=" << to_string(simulator_step);
  out << ", " << "send_step=" << to_string(send_step);
  out << ", " << "recv_step=" << to_string(recv_step);
  out << ", " << "sense_body_step=" << to_string(sense_body_step);
  out << ", " << "lcm_step=" << to_string(lcm_step);
  out << ", " << "player_say_msg_size=" << to_string(player_say_msg_size);
  out << ", " << "player_hear_max=" << to_string(player_hear_max);
  out << ", " << "player_hear_inc=" << to_string(player_hear_inc);
  out << ", " << "player_hear_decay=" << to_string(player_hear_decay);
  out << ", " << "catch_ban_cycle=" << to_string(catch_ban_cycle);
  out << ", " << "slow_down_factor=" << to_string(slow_down_factor);
  out << ", " << "use_offside=" << to_string(use_offside);
  out << ", " << "kickoff_offside=" << to_string(kickoff_offside);
  out << ", " << "offside_kick_margin=" << to_string(offside_kick_margin);
  out << ", " << "audio_cut_dist=" << to_string(audio_cut_dist);
  out << ", " << "dist_quantize_step=" << to_string(dist_quantize_step);
  out << ", " << "landmark_dist_quantize_step=" << to_string(landmark_dist_quantize_step);
  out << ", " << "dir_quantize_step=" << to_string(dir_quantize_step);
  out << ", " << "dist_quantize_step_l=" << to_string(dist_quantize_step_l);
  out << ", " << "dist_quantize_step_r=" << to_string(dist_quantize_step_r);
  out << ", " << "landmark_dist_quantize_step_l=" << to_string(landmark_dist_quantize_step_l);
  out << ", " << "landmark_dist_quantize_step_r=" << to_string(landmark_dist_quantize_step_r);
  out << ", " << "dir_quantize_step_l=" << to_string(dir_quantize_step_l);
  out << ", " << "dir_quantize_step_r=" << to_string(dir_quantize_step_r);
  out << ", " << "coach_mode=" << to_string(coach_mode);
  out << ", " << "coach_with_referee_mode=" << to_string(coach_with_referee_mode);
  out << ", " << "use_old_coach_hear=" << to_string(use_old_coach_hear);
  out << ", " << "slowness_on_top_for_left_team=" << to_string(slowness_on_top_for_left_team);
  out << ", " << "slowness_on_top_for_right_team=" << to_string(slowness_on_top_for_right_team);
  out << ", " << "start_goal_l=" << to_string(start_goal_l);
  out << ", " << "start_goal_r=" << to_string(start_goal_r);
  out << ", " << "fullstate_l=" << to_string(fullstate_l);
  out << ", " << "fullstate_r=" << to_string(fullstate_r);
  out << ", " << "drop_ball_time=" << to_string(drop_ball_time);
  out << ", " << "synch_mode=" << to_string(synch_mode);
  out << ", " << "synch_offset=" << to_string(synch_offset);
  out << ", " << "synch_micro_sleep=" << to_string(synch_micro_sleep);
  out << ", " << "point_to_ban=" << to_string(point_to_ban);
  out << ", " << "point_to_duration=" << to_string(point_to_duration);
  out << ", " << "player_port=" << to_string(player_port);
  out << ", " << "trainer_port=" << to_string(trainer_port);
  out << ", " << "online_coach_port=" << to_string(online_coach_port);
  out << ", " << "verbose_mode=" << to_string(verbose_mode);
  out << ", " << "coach_send_vi_step=" << to_string(coach_send_vi_step);
  out << ", " << "replay_file=" << to_string(replay_file);
  out << ", " << "landmark_file=" << to_string(landmark_file);
  out << ", " << "send_comms=" << to_string(send_comms);
  out << ", " << "text_logging=" << to_string(text_logging);
  out << ", " << "game_logging=" << to_string(game_logging);
  out << ", " << "game_log_version=" << to_string(game_log_version);
  out << ", " << "text_log_dir=" << to_string(text_log_dir);
  out << ", " << "game_log_dir=" << to_string(game_log_dir);
  out << ", " << "text_log_fixed_name=" << to_string(text_log_fixed_name);
  out << ", " << "game_log_fixed_name=" << to_string(game_log_fixed_name);
  out << ", " << "use_text_log_fixed=" << to_string(use_text_log_fixed);
  out << ", " << "use_game_log_fixed=" << to_string(use_game_log_fixed);
  out << ", " << "use_text_log_dated=" << to_string(use_text_log_dated);
  out << ", " << "use_game_log_dated=" << to_string(use_game_log_dated);
  out << ", " << "log_date_format=" << to_string(log_date_format);
  out << ", " << "log_times=" << to_string(log_times);
  out << ", " << "record_message=" << to_string(record_message);
  out << ", " << "text_log_compression=" << to_string(text_log_compression);
  out << ", " << "game_log_compression=" << to_string(game_log_compression);
  out << ", " << "use_profile=" << to_string(use_profile);
  out << ", " << "tackle_dist=" << to_string(tackle_dist);
  out << ", " << "tackle_back_dist=" << to_string(tackle_back_dist);
  out << ", " << "tackle_width=" << to_string(tackle_width);
  out << ", " << "tackle_exponent=" << to_string(tackle_exponent);
  out << ", " << "tackle_cycles=" << to_string(tackle_cycles);
  out << ", " << "tackle_power_rate=" << to_string(tackle_power_rate);
  out << ", " << "freeform_wait_period=" << to_string(freeform_wait_period);
  out << ", " << "freeform_send_period=" << to_string(freeform_send_period);
  out << ", " << "free_kick_faults=" << to_string(free_kick_faults);
  out << ", " << "back_passes=" << to_string(back_passes);
  out << ", " << "proper_goal_kicks=" << to_string(proper_goal_kicks);
  out << ", " << "stopped_ball_vel=" << to_string(stopped_ball_vel);
  out << ", " << "max_goal_kicks=" << to_string(max_goal_kicks);
  out << ", " << "clang_del_win=" << to_string(clang_del_win);
  out << ", " << "clang_rule_win=" << to_string(clang_rule_win);
  out << ", " << "auto_mode=" << to_string(auto_mode);
  out << ", " << "kick_off_wait=" << to_string(kick_off_wait);
  out << ", " << "connect_wait=" << to_string(connect_wait);
  out << ", " << "game_over_wait=" << to_string(game_over_wait);
  out << ", " << "team_l_start=" << to_string(team_l_start);
  out << ", " << "team_r_start=" << to_string(team_r_start);
  out << ", " << "keepaway_mode=" << to_string(keepaway_mode);
  out << ", " << "keepaway_length=" << to_string(keepaway_length);
  out << ", " << "keepaway_width=" << to_string(keepaway_width);
  out << ", " << "keepaway_logging=" << to_string(keepaway_logging);
  out << ", " << "keepaway_log_dir=" << to_string(keepaway_log_dir);
  out << ", " << "keepaway_log_fixed_name=" << to_string(keepaway_log_fixed_name);
  out << ", " << "keepaway_log_fixed=" << to_string(keepaway_log_fixed);
  out << ", " << "keepaway_log_dated=" << to_string(keepaway_log_dated);
  out << ", " << "keepaway_start=" << to_string(keepaway_start);
  out << ", " << "nr_normal_halfs=" << to_string(nr_normal_halfs);
  out << ", " << "nr_extra_halfs=" << to_string(nr_extra_halfs);
  out << ", " << "penalty_shoot_outs=" << to_string(penalty_shoot_outs);
  out << ", " << "pen_before_setup_wait=" << to_string(pen_before_setup_wait);
  out << ", " << "pen_setup_wait=" << to_string(pen_setup_wait);
  out << ", " << "pen_ready_wait=" << to_string(pen_ready_wait);
  out << ", " << "pen_taken_wait=" << to_string(pen_taken_wait);
  out << ", " << "pen_nr_kicks=" << to_string(pen_nr_kicks);
  out << ", " << "pen_max_extra_kicks=" << to_string(pen_max_extra_kicks);
  out << ", " << "pen_dist_x=" << to_string(pen_dist_x);
  out << ", " << "pen_random_winner=" << to_string(pen_random_winner);
  out << ", " << "pen_allow_mult_kicks=" << to_string(pen_allow_mult_kicks);
  out << ", " << "pen_max_goalie_dist_x=" << to_string(pen_max_goalie_dist_x);
  out << ", " << "pen_coach_moves_players=" << to_string(pen_coach_moves_players);
  out << ", " << "module_dir=" << to_string(module_dir);
  out << ", " << "ball_stuck_area=" << to_string(ball_stuck_area);
  out << ", " << "coach_msg_file=" << to_string(coach_msg_file);
  out << ", " << "max_tackle_power=" << to_string(max_tackle_power);
  out << ", " << "max_back_tackle_power=" << to_string(max_back_tackle_power);
  out << ", " << "player_speed_max_min=" << to_string(player_speed_max_min);
  out << ", " << "extra_stamina=" << to_string(extra_stamina);
  out << ", " << "synch_see_offset=" << to_string(synch_see_offset);
  out << ", " << "extra_half_time=" << to_string(extra_half_time);
  out << ", " << "stamina_capacity=" << to_string(stamina_capacity);
  out << ", " << "max_dash_angle=" << to_string(max_dash_angle);
  out << ", " << "min_dash_angle=" << to_string(min_dash_angle);
  out << ", " << "dash_angle_step=" << to_string(dash_angle_step);
  out << ", " << "side_dash_rate=" << to_string(side_dash_rate);
  out << ", " << "back_dash_rate=" << to_string(back_dash_rate);
  out << ", " << "max_dash_power=" << to_string(max_dash_power);
  out << ", " << "min_dash_power=" << to_string(min_dash_power);
  out << ", " << "tackle_rand_factor=" << to_string(tackle_rand_factor);
  out << ", " << "foul_detect_probability=" << to_string(foul_detect_probability);
  out << ", " << "foul_exponent=" << to_string(foul_exponent);
  out << ", " << "foul_cycles=" << to_string(foul_cycles);
  out << ", " << "golden_goal=" << to_string(golden_goal);
  out << ", " << "red_card_probability=" << to_string(red_card_probability);
  out << ", " << "illegal_defense_duration=" << to_string(illegal_defense_duration);
  out << ", " << "illegal_defense_number=" << to_string(illegal_defense_number);
  out << ", " << "illegal_defense_dist_x=" << to_string(illegal_defense_dist_x);
  out << ", " << "illegal_defense_width=" << to_string(illegal_defense_width);
  out << ", " << "fixed_teamname_l=" << to_string(fixed_teamname_l);
  out << ", " << "fixed_teamname_r=" << to_string(fixed_teamname_r);
  out << ", " << "max_catch_angle=" << to_string(max_catch_angle);
  out << ", " << "min_catch_angle=" << to_string(min_catch_angle);
  out << ", " << "random_seed=" << to_string(random_seed);
  out << ", " << "long_kick_power_factor=" << to_string(long_kick_power_factor);
  out << ", " << "long_kick_delay=" << to_string(long_kick_delay);
  out << ", " << "max_monitors=" << to_string(max_monitors);
  out << ", " << "catchable_area=" << to_string(catchable_area);
  out << ", " << "real_speed_max=" << to_string(real_speed_max);
  out << ", " << "pitch_half_length=" << to_string(pitch_half_length);
  out << ", " << "pitch_half_width=" << to_string(pitch_half_width);
  out << ", " << "our_penalty_area_line_x=" << to_string(our_penalty_area_line_x);
  out << ", " << "their_penalty_area_line_x=" << to_string(their_penalty_area_line_x);
  out << ", " << "penalty_area_half_width=" << to_string(penalty_area_half_width);
  out << ", " << "penalty_area_length=" << to_string(penalty_area_length);
  out << ", " << "goal_width=" << to_string(goal_width);
  out << ")";
}


PlayerParam::~PlayerParam() noexcept {
}


void PlayerParam::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void PlayerParam::__set_player_types(const int32_t val) {
  this->player_types = val;
}

void PlayerParam::__set_subs_max(const int32_t val) {
  this->subs_max = val;
}

void PlayerParam::__set_pt_max(const int32_t val) {
  this->pt_max = val;
}

void PlayerParam::__set_allow_mult_default_type(const bool val) {
  this->allow_mult_default_type = val;
}

void PlayerParam::__set_player_speed_max_delta_min(const double val) {
  this->player_speed_max_delta_min = val;
}

void PlayerParam::__set_player_speed_max_delta_max(const double val) {
  this->player_speed_max_delta_max = val;
}

void PlayerParam::__set_stamina_inc_max_delta_factor(const double val) {
  this->stamina_inc_max_delta_factor = val;
}

void PlayerParam::__set_player_decay_delta_min(const double val) {
  this->player_decay_delta_min = val;
}

void PlayerParam::__set_player_decay_delta_max(const double val) {
  this->player_decay_delta_max = val;
}

void PlayerParam::__set_inertia_moment_delta_factor(const double val) {
  this->inertia_moment_delta_factor = val;
}

void PlayerParam::__set_dash_power_rate_delta_min(const double val) {
  this->dash_power_rate_delta_min = val;
}

void PlayerParam::__set_dash_power_rate_delta_max(const double val) {
  this->dash_power_rate_delta_max = val;
}

void PlayerParam::__set_player_size_delta_factor(const double val) {
  this->player_size_delta_factor = val;
}

void PlayerParam::__set_kickable_margin_delta_min(const double val) {
  this->kickable_margin_delta_min = val;
}

void PlayerParam::__set_kickable_margin_delta_max(const double val) {
  this->kickable_margin_delta_max = val;
}

void PlayerParam::__set_kick_rand_delta_factor(const double val) {
  this->kick_rand_delta_factor = val;
}

void PlayerParam::__set_extra_stamina_delta_min(const double val) {
  this->extra_stamina_delta_min = val;
}

void PlayerParam::__set_extra_stamina_delta_max(const double val) {
  this->extra_stamina_delta_max = val;
}

void PlayerParam::__set_effort_max_delta_factor(const double val) {
  this->effort_max_delta_factor = val;
}

void PlayerParam::__set_effort_min_delta_factor(const double val) {
  this->effort_min_delta_factor = val;
}

void PlayerParam::__set_random_seed(const int32_t val) {
  this->random_seed = val;
}

void PlayerParam::__set_new_dash_power_rate_delta_min(const double val) {
  this->new_dash_power_rate_delta_min = val;
}

void PlayerParam::__set_new_dash_power_rate_delta_max(const double val) {
  this->new_dash_power_rate_delta_max = val;
}

void PlayerParam::__set_new_stamina_inc_max_delta_factor(const double val) {
  this->new_stamina_inc_max_delta_factor = val;
}

void PlayerParam::__set_kick_power_rate_delta_min(const double val) {
  this->kick_power_rate_delta_min = val;
}

void PlayerParam::__set_kick_power_rate_delta_max(const double val) {
  this->kick_power_rate_delta_max = val;
}

void PlayerParam::__set_foul_detect_probability_delta_factor(const double val) {
  this->foul_detect_probability_delta_factor = val;
}

void PlayerParam::__set_catchable_area_l_stretch_min(const double val) {
  this->catchable_area_l_stretch_min = val;
}

void PlayerParam::__set_catchable_area_l_stretch_max(const double val) {
  this->catchable_area_l_stretch_max = val;
}
std::ostream& operator<<(std::ostream& out, const PlayerParam& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_types);
          this->__isset.player_types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->subs_max);
          this->__isset.subs_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pt_max);
          this->__isset.pt_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allow_mult_default_type);
          this->__isset.allow_mult_default_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max_delta_min);
          this->__isset.player_speed_max_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max_delta_max);
          this->__isset.player_speed_max_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_inc_max_delta_factor);
          this->__isset.stamina_inc_max_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_decay_delta_min);
          this->__isset.player_decay_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_decay_delta_max);
          this->__isset.player_decay_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inertia_moment_delta_factor);
          this->__isset.inertia_moment_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power_rate_delta_min);
          this->__isset.dash_power_rate_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power_rate_delta_max);
          this->__isset.dash_power_rate_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_size_delta_factor);
          this->__isset.player_size_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_margin_delta_min);
          this->__isset.kickable_margin_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_margin_delta_max);
          this->__isset.kickable_margin_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rand_delta_factor);
          this->__isset.kick_rand_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->extra_stamina_delta_min);
          this->__isset.extra_stamina_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->extra_stamina_delta_max);
          this->__isset.extra_stamina_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_max_delta_factor);
          this->__isset.effort_max_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_min_delta_factor);
          this->__isset.effort_min_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->random_seed);
          this->__isset.random_seed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->new_dash_power_rate_delta_min);
          this->__isset.new_dash_power_rate_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->new_dash_power_rate_delta_max);
          this->__isset.new_dash_power_rate_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->new_stamina_inc_max_delta_factor);
          this->__isset.new_stamina_inc_max_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_power_rate_delta_min);
          this->__isset.kick_power_rate_delta_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_power_rate_delta_max);
          this->__isset.kick_power_rate_delta_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->foul_detect_probability_delta_factor);
          this->__isset.foul_detect_probability_delta_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catchable_area_l_stretch_min);
          this->__isset.catchable_area_l_stretch_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catchable_area_l_stretch_max);
          this->__isset.catchable_area_l_stretch_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerParam");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_types", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->player_types);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subs_max", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->subs_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pt_max", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->pt_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allow_mult_default_type", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->allow_mult_default_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max_delta_min", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->player_speed_max_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max_delta_max", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->player_speed_max_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_inc_max_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->stamina_inc_max_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_decay_delta_min", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->player_decay_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_decay_delta_max", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->player_decay_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inertia_moment_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->inertia_moment_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power_rate_delta_min", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->dash_power_rate_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power_rate_delta_max", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->dash_power_rate_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_size_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->player_size_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_margin_delta_min", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->kickable_margin_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_margin_delta_max", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->kickable_margin_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rand_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->kick_rand_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_stamina_delta_min", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->extra_stamina_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_stamina_delta_max", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->extra_stamina_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_max_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->effort_max_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_min_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->effort_min_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("random_seed", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->random_seed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_dash_power_rate_delta_min", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->new_dash_power_rate_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_dash_power_rate_delta_max", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->new_dash_power_rate_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_stamina_inc_max_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->new_stamina_inc_max_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_power_rate_delta_min", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->kick_power_rate_delta_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_power_rate_delta_max", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->kick_power_rate_delta_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_detect_probability_delta_factor", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->foul_detect_probability_delta_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catchable_area_l_stretch_min", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->catchable_area_l_stretch_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catchable_area_l_stretch_max", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->catchable_area_l_stretch_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerParam &a, PlayerParam &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.player_types, b.player_types);
  swap(a.subs_max, b.subs_max);
  swap(a.pt_max, b.pt_max);
  swap(a.allow_mult_default_type, b.allow_mult_default_type);
  swap(a.player_speed_max_delta_min, b.player_speed_max_delta_min);
  swap(a.player_speed_max_delta_max, b.player_speed_max_delta_max);
  swap(a.stamina_inc_max_delta_factor, b.stamina_inc_max_delta_factor);
  swap(a.player_decay_delta_min, b.player_decay_delta_min);
  swap(a.player_decay_delta_max, b.player_decay_delta_max);
  swap(a.inertia_moment_delta_factor, b.inertia_moment_delta_factor);
  swap(a.dash_power_rate_delta_min, b.dash_power_rate_delta_min);
  swap(a.dash_power_rate_delta_max, b.dash_power_rate_delta_max);
  swap(a.player_size_delta_factor, b.player_size_delta_factor);
  swap(a.kickable_margin_delta_min, b.kickable_margin_delta_min);
  swap(a.kickable_margin_delta_max, b.kickable_margin_delta_max);
  swap(a.kick_rand_delta_factor, b.kick_rand_delta_factor);
  swap(a.extra_stamina_delta_min, b.extra_stamina_delta_min);
  swap(a.extra_stamina_delta_max, b.extra_stamina_delta_max);
  swap(a.effort_max_delta_factor, b.effort_max_delta_factor);
  swap(a.effort_min_delta_factor, b.effort_min_delta_factor);
  swap(a.random_seed, b.random_seed);
  swap(a.new_dash_power_rate_delta_min, b.new_dash_power_rate_delta_min);
  swap(a.new_dash_power_rate_delta_max, b.new_dash_power_rate_delta_max);
  swap(a.new_stamina_inc_max_delta_factor, b.new_stamina_inc_max_delta_factor);
  swap(a.kick_power_rate_delta_min, b.kick_power_rate_delta_min);
  swap(a.kick_power_rate_delta_max, b.kick_power_rate_delta_max);
  swap(a.foul_detect_probability_delta_factor, b.foul_detect_probability_delta_factor);
  swap(a.catchable_area_l_stretch_min, b.catchable_area_l_stretch_min);
  swap(a.catchable_area_l_stretch_max, b.catchable_area_l_stretch_max);
  swap(a.__isset, b.__isset);
}

PlayerParam::PlayerParam(const PlayerParam& other337) {
  register_response = other337.register_response;
  player_types = other337.player_types;
  subs_max = other337.subs_max;
  pt_max = other337.pt_max;
  allow_mult_default_type = other337.allow_mult_default_type;
  player_speed_max_delta_min = other337.player_speed_max_delta_min;
  player_speed_max_delta_max = other337.player_speed_max_delta_max;
  stamina_inc_max_delta_factor = other337.stamina_inc_max_delta_factor;
  player_decay_delta_min = other337.player_decay_delta_min;
  player_decay_delta_max = other337.player_decay_delta_max;
  inertia_moment_delta_factor = other337.inertia_moment_delta_factor;
  dash_power_rate_delta_min = other337.dash_power_rate_delta_min;
  dash_power_rate_delta_max = other337.dash_power_rate_delta_max;
  player_size_delta_factor = other337.player_size_delta_factor;
  kickable_margin_delta_min = other337.kickable_margin_delta_min;
  kickable_margin_delta_max = other337.kickable_margin_delta_max;
  kick_rand_delta_factor = other337.kick_rand_delta_factor;
  extra_stamina_delta_min = other337.extra_stamina_delta_min;
  extra_stamina_delta_max = other337.extra_stamina_delta_max;
  effort_max_delta_factor = other337.effort_max_delta_factor;
  effort_min_delta_factor = other337.effort_min_delta_factor;
  random_seed = other337.random_seed;
  new_dash_power_rate_delta_min = other337.new_dash_power_rate_delta_min;
  new_dash_power_rate_delta_max = other337.new_dash_power_rate_delta_max;
  new_stamina_inc_max_delta_factor = other337.new_stamina_inc_max_delta_factor;
  kick_power_rate_delta_min = other337.kick_power_rate_delta_min;
  kick_power_rate_delta_max = other337.kick_power_rate_delta_max;
  foul_detect_probability_delta_factor = other337.foul_detect_probability_delta_factor;
  catchable_area_l_stretch_min = other337.catchable_area_l_stretch_min;
  catchable_area_l_stretch_max = other337.catchable_area_l_stretch_max;
  __isset = other337.__isset;
}
PlayerParam& PlayerParam::operator=(const PlayerParam& other338) {
  register_response = other338.register_response;
  player_types = other338.player_types;
  subs_max = other338.subs_max;
  pt_max = other338.pt_max;
  allow_mult_default_type = other338.allow_mult_default_type;
  player_speed_max_delta_min = other338.player_speed_max_delta_min;
  player_speed_max_delta_max = other338.player_speed_max_delta_max;
  stamina_inc_max_delta_factor = other338.stamina_inc_max_delta_factor;
  player_decay_delta_min = other338.player_decay_delta_min;
  player_decay_delta_max = other338.player_decay_delta_max;
  inertia_moment_delta_factor = other338.inertia_moment_delta_factor;
  dash_power_rate_delta_min = other338.dash_power_rate_delta_min;
  dash_power_rate_delta_max = other338.dash_power_rate_delta_max;
  player_size_delta_factor = other338.player_size_delta_factor;
  kickable_margin_delta_min = other338.kickable_margin_delta_min;
  kickable_margin_delta_max = other338.kickable_margin_delta_max;
  kick_rand_delta_factor = other338.kick_rand_delta_factor;
  extra_stamina_delta_min = other338.extra_stamina_delta_min;
  extra_stamina_delta_max = other338.extra_stamina_delta_max;
  effort_max_delta_factor = other338.effort_max_delta_factor;
  effort_min_delta_factor = other338.effort_min_delta_factor;
  random_seed = other338.random_seed;
  new_dash_power_rate_delta_min = other338.new_dash_power_rate_delta_min;
  new_dash_power_rate_delta_max = other338.new_dash_power_rate_delta_max;
  new_stamina_inc_max_delta_factor = other338.new_stamina_inc_max_delta_factor;
  kick_power_rate_delta_min = other338.kick_power_rate_delta_min;
  kick_power_rate_delta_max = other338.kick_power_rate_delta_max;
  foul_detect_probability_delta_factor = other338.foul_detect_probability_delta_factor;
  catchable_area_l_stretch_min = other338.catchable_area_l_stretch_min;
  catchable_area_l_stretch_max = other338.catchable_area_l_stretch_max;
  __isset = other338.__isset;
  return *this;
}
void PlayerParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerParam(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "player_types=" << to_string(player_types);
  out << ", " << "subs_max=" << to_string(subs_max);
  out << ", " << "pt_max=" << to_string(pt_max);
  out << ", " << "allow_mult_default_type=" << to_string(allow_mult_default_type);
  out << ", " << "player_speed_max_delta_min=" << to_string(player_speed_max_delta_min);
  out << ", " << "player_speed_max_delta_max=" << to_string(player_speed_max_delta_max);
  out << ", " << "stamina_inc_max_delta_factor=" << to_string(stamina_inc_max_delta_factor);
  out << ", " << "player_decay_delta_min=" << to_string(player_decay_delta_min);
  out << ", " << "player_decay_delta_max=" << to_string(player_decay_delta_max);
  out << ", " << "inertia_moment_delta_factor=" << to_string(inertia_moment_delta_factor);
  out << ", " << "dash_power_rate_delta_min=" << to_string(dash_power_rate_delta_min);
  out << ", " << "dash_power_rate_delta_max=" << to_string(dash_power_rate_delta_max);
  out << ", " << "player_size_delta_factor=" << to_string(player_size_delta_factor);
  out << ", " << "kickable_margin_delta_min=" << to_string(kickable_margin_delta_min);
  out << ", " << "kickable_margin_delta_max=" << to_string(kickable_margin_delta_max);
  out << ", " << "kick_rand_delta_factor=" << to_string(kick_rand_delta_factor);
  out << ", " << "extra_stamina_delta_min=" << to_string(extra_stamina_delta_min);
  out << ", " << "extra_stamina_delta_max=" << to_string(extra_stamina_delta_max);
  out << ", " << "effort_max_delta_factor=" << to_string(effort_max_delta_factor);
  out << ", " << "effort_min_delta_factor=" << to_string(effort_min_delta_factor);
  out << ", " << "random_seed=" << to_string(random_seed);
  out << ", " << "new_dash_power_rate_delta_min=" << to_string(new_dash_power_rate_delta_min);
  out << ", " << "new_dash_power_rate_delta_max=" << to_string(new_dash_power_rate_delta_max);
  out << ", " << "new_stamina_inc_max_delta_factor=" << to_string(new_stamina_inc_max_delta_factor);
  out << ", " << "kick_power_rate_delta_min=" << to_string(kick_power_rate_delta_min);
  out << ", " << "kick_power_rate_delta_max=" << to_string(kick_power_rate_delta_max);
  out << ", " << "foul_detect_probability_delta_factor=" << to_string(foul_detect_probability_delta_factor);
  out << ", " << "catchable_area_l_stretch_min=" << to_string(catchable_area_l_stretch_min);
  out << ", " << "catchable_area_l_stretch_max=" << to_string(catchable_area_l_stretch_max);
  out << ")";
}


PlayerType::~PlayerType() noexcept {
}


void PlayerType::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void PlayerType::__set_id(const int32_t val) {
  this->id = val;
}

void PlayerType::__set_stamina_inc_max(const double val) {
  this->stamina_inc_max = val;
}

void PlayerType::__set_player_decay(const double val) {
  this->player_decay = val;
}

void PlayerType::__set_inertia_moment(const double val) {
  this->inertia_moment = val;
}

void PlayerType::__set_dash_power_rate(const double val) {
  this->dash_power_rate = val;
}

void PlayerType::__set_player_size(const double val) {
  this->player_size = val;
}

void PlayerType::__set_kickable_margin(const double val) {
  this->kickable_margin = val;
}

void PlayerType::__set_kick_rand(const double val) {
  this->kick_rand = val;
}

void PlayerType::__set_extra_stamina(const double val) {
  this->extra_stamina = val;
}

void PlayerType::__set_effort_max(const double val) {
  this->effort_max = val;
}

void PlayerType::__set_effort_min(const double val) {
  this->effort_min = val;
}

void PlayerType::__set_kick_power_rate(const double val) {
  this->kick_power_rate = val;
}

void PlayerType::__set_foul_detect_probability(const double val) {
  this->foul_detect_probability = val;
}

void PlayerType::__set_catchable_area_l_stretch(const double val) {
  this->catchable_area_l_stretch = val;
}

void PlayerType::__set_unum_far_length(const double val) {
  this->unum_far_length = val;
}

void PlayerType::__set_unum_too_far_length(const double val) {
  this->unum_too_far_length = val;
}

void PlayerType::__set_team_far_length(const double val) {
  this->team_far_length = val;
}

void PlayerType::__set_team_too_far_length(const double val) {
  this->team_too_far_length = val;
}

void PlayerType::__set_player_max_observation_length(const double val) {
  this->player_max_observation_length = val;
}

void PlayerType::__set_ball_vel_far_length(const double val) {
  this->ball_vel_far_length = val;
}

void PlayerType::__set_ball_vel_too_far_length(const double val) {
  this->ball_vel_too_far_length = val;
}

void PlayerType::__set_ball_max_observation_length(const double val) {
  this->ball_max_observation_length = val;
}

void PlayerType::__set_flag_chg_far_length(const double val) {
  this->flag_chg_far_length = val;
}

void PlayerType::__set_flag_chg_too_far_length(const double val) {
  this->flag_chg_too_far_length = val;
}

void PlayerType::__set_flag_max_observation_length(const double val) {
  this->flag_max_observation_length = val;
}

void PlayerType::__set_kickable_area(const double val) {
  this->kickable_area = val;
}

void PlayerType::__set_reliable_catchable_dist(const double val) {
  this->reliable_catchable_dist = val;
}

void PlayerType::__set_max_catchable_dist(const double val) {
  this->max_catchable_dist = val;
}

void PlayerType::__set_real_speed_max(const double val) {
  this->real_speed_max = val;
}

void PlayerType::__set_player_speed_max2(const double val) {
  this->player_speed_max2 = val;
}

void PlayerType::__set_real_speed_max2(const double val) {
  this->real_speed_max2 = val;
}

void PlayerType::__set_cycles_to_reach_max_speed(const int32_t val) {
  this->cycles_to_reach_max_speed = val;
}

void PlayerType::__set_player_speed_max(const double val) {
  this->player_speed_max = val;
}
std::ostream& operator<<(std::ostream& out, const PlayerType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->stamina_inc_max);
          this->__isset.stamina_inc_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_decay);
          this->__isset.player_decay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->inertia_moment);
          this->__isset.inertia_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dash_power_rate);
          this->__isset.dash_power_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_size);
          this->__isset.player_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_margin);
          this->__isset.kickable_margin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_rand);
          this->__isset.kick_rand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->extra_stamina);
          this->__isset.extra_stamina = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_max);
          this->__isset.effort_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->effort_min);
          this->__isset.effort_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kick_power_rate);
          this->__isset.kick_power_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->foul_detect_probability);
          this->__isset.foul_detect_probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->catchable_area_l_stretch);
          this->__isset.catchable_area_l_stretch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->unum_far_length);
          this->__isset.unum_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->unum_too_far_length);
          this->__isset.unum_too_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->team_far_length);
          this->__isset.team_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->team_too_far_length);
          this->__isset.team_too_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_max_observation_length);
          this->__isset.player_max_observation_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_vel_far_length);
          this->__isset.ball_vel_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_vel_too_far_length);
          this->__isset.ball_vel_too_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ball_max_observation_length);
          this->__isset.ball_max_observation_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->flag_chg_far_length);
          this->__isset.flag_chg_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->flag_chg_too_far_length);
          this->__isset.flag_chg_too_far_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->flag_max_observation_length);
          this->__isset.flag_max_observation_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kickable_area);
          this->__isset.kickable_area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->reliable_catchable_dist);
          this->__isset.reliable_catchable_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_catchable_dist);
          this->__isset.max_catchable_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->real_speed_max);
          this->__isset.real_speed_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max2);
          this->__isset.player_speed_max2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->real_speed_max2);
          this->__isset.real_speed_max2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cycles_to_reach_max_speed);
          this->__isset.cycles_to_reach_max_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->player_speed_max);
          this->__isset.player_speed_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerType");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stamina_inc_max", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->stamina_inc_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_decay", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->player_decay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inertia_moment", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->inertia_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_power_rate", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->dash_power_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_size", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->player_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_margin", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->kickable_margin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_rand", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->kick_rand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_stamina", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->extra_stamina);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_max", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->effort_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effort_min", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->effort_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_power_rate", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->kick_power_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foul_detect_probability", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->foul_detect_probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catchable_area_l_stretch", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->catchable_area_l_stretch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unum_far_length", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->unum_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unum_too_far_length", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->unum_too_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_far_length", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->team_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("team_too_far_length", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->team_too_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_max_observation_length", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->player_max_observation_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_vel_far_length", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->ball_vel_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_vel_too_far_length", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->ball_vel_too_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_max_observation_length", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->ball_max_observation_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag_chg_far_length", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->flag_chg_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag_chg_too_far_length", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->flag_chg_too_far_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag_max_observation_length", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->flag_max_observation_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickable_area", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->kickable_area);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reliable_catchable_dist", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->reliable_catchable_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_catchable_dist", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->max_catchable_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("real_speed_max", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->real_speed_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max2", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->player_speed_max2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("real_speed_max2", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->real_speed_max2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cycles_to_reach_max_speed", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->cycles_to_reach_max_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_speed_max", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->player_speed_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerType &a, PlayerType &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.id, b.id);
  swap(a.stamina_inc_max, b.stamina_inc_max);
  swap(a.player_decay, b.player_decay);
  swap(a.inertia_moment, b.inertia_moment);
  swap(a.dash_power_rate, b.dash_power_rate);
  swap(a.player_size, b.player_size);
  swap(a.kickable_margin, b.kickable_margin);
  swap(a.kick_rand, b.kick_rand);
  swap(a.extra_stamina, b.extra_stamina);
  swap(a.effort_max, b.effort_max);
  swap(a.effort_min, b.effort_min);
  swap(a.kick_power_rate, b.kick_power_rate);
  swap(a.foul_detect_probability, b.foul_detect_probability);
  swap(a.catchable_area_l_stretch, b.catchable_area_l_stretch);
  swap(a.unum_far_length, b.unum_far_length);
  swap(a.unum_too_far_length, b.unum_too_far_length);
  swap(a.team_far_length, b.team_far_length);
  swap(a.team_too_far_length, b.team_too_far_length);
  swap(a.player_max_observation_length, b.player_max_observation_length);
  swap(a.ball_vel_far_length, b.ball_vel_far_length);
  swap(a.ball_vel_too_far_length, b.ball_vel_too_far_length);
  swap(a.ball_max_observation_length, b.ball_max_observation_length);
  swap(a.flag_chg_far_length, b.flag_chg_far_length);
  swap(a.flag_chg_too_far_length, b.flag_chg_too_far_length);
  swap(a.flag_max_observation_length, b.flag_max_observation_length);
  swap(a.kickable_area, b.kickable_area);
  swap(a.reliable_catchable_dist, b.reliable_catchable_dist);
  swap(a.max_catchable_dist, b.max_catchable_dist);
  swap(a.real_speed_max, b.real_speed_max);
  swap(a.player_speed_max2, b.player_speed_max2);
  swap(a.real_speed_max2, b.real_speed_max2);
  swap(a.cycles_to_reach_max_speed, b.cycles_to_reach_max_speed);
  swap(a.player_speed_max, b.player_speed_max);
  swap(a.__isset, b.__isset);
}

PlayerType::PlayerType(const PlayerType& other339) {
  register_response = other339.register_response;
  id = other339.id;
  stamina_inc_max = other339.stamina_inc_max;
  player_decay = other339.player_decay;
  inertia_moment = other339.inertia_moment;
  dash_power_rate = other339.dash_power_rate;
  player_size = other339.player_size;
  kickable_margin = other339.kickable_margin;
  kick_rand = other339.kick_rand;
  extra_stamina = other339.extra_stamina;
  effort_max = other339.effort_max;
  effort_min = other339.effort_min;
  kick_power_rate = other339.kick_power_rate;
  foul_detect_probability = other339.foul_detect_probability;
  catchable_area_l_stretch = other339.catchable_area_l_stretch;
  unum_far_length = other339.unum_far_length;
  unum_too_far_length = other339.unum_too_far_length;
  team_far_length = other339.team_far_length;
  team_too_far_length = other339.team_too_far_length;
  player_max_observation_length = other339.player_max_observation_length;
  ball_vel_far_length = other339.ball_vel_far_length;
  ball_vel_too_far_length = other339.ball_vel_too_far_length;
  ball_max_observation_length = other339.ball_max_observation_length;
  flag_chg_far_length = other339.flag_chg_far_length;
  flag_chg_too_far_length = other339.flag_chg_too_far_length;
  flag_max_observation_length = other339.flag_max_observation_length;
  kickable_area = other339.kickable_area;
  reliable_catchable_dist = other339.reliable_catchable_dist;
  max_catchable_dist = other339.max_catchable_dist;
  real_speed_max = other339.real_speed_max;
  player_speed_max2 = other339.player_speed_max2;
  real_speed_max2 = other339.real_speed_max2;
  cycles_to_reach_max_speed = other339.cycles_to_reach_max_speed;
  player_speed_max = other339.player_speed_max;
  __isset = other339.__isset;
}
PlayerType& PlayerType::operator=(const PlayerType& other340) {
  register_response = other340.register_response;
  id = other340.id;
  stamina_inc_max = other340.stamina_inc_max;
  player_decay = other340.player_decay;
  inertia_moment = other340.inertia_moment;
  dash_power_rate = other340.dash_power_rate;
  player_size = other340.player_size;
  kickable_margin = other340.kickable_margin;
  kick_rand = other340.kick_rand;
  extra_stamina = other340.extra_stamina;
  effort_max = other340.effort_max;
  effort_min = other340.effort_min;
  kick_power_rate = other340.kick_power_rate;
  foul_detect_probability = other340.foul_detect_probability;
  catchable_area_l_stretch = other340.catchable_area_l_stretch;
  unum_far_length = other340.unum_far_length;
  unum_too_far_length = other340.unum_too_far_length;
  team_far_length = other340.team_far_length;
  team_too_far_length = other340.team_too_far_length;
  player_max_observation_length = other340.player_max_observation_length;
  ball_vel_far_length = other340.ball_vel_far_length;
  ball_vel_too_far_length = other340.ball_vel_too_far_length;
  ball_max_observation_length = other340.ball_max_observation_length;
  flag_chg_far_length = other340.flag_chg_far_length;
  flag_chg_too_far_length = other340.flag_chg_too_far_length;
  flag_max_observation_length = other340.flag_max_observation_length;
  kickable_area = other340.kickable_area;
  reliable_catchable_dist = other340.reliable_catchable_dist;
  max_catchable_dist = other340.max_catchable_dist;
  real_speed_max = other340.real_speed_max;
  player_speed_max2 = other340.player_speed_max2;
  real_speed_max2 = other340.real_speed_max2;
  cycles_to_reach_max_speed = other340.cycles_to_reach_max_speed;
  player_speed_max = other340.player_speed_max;
  __isset = other340.__isset;
  return *this;
}
void PlayerType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerType(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "id=" << to_string(id);
  out << ", " << "stamina_inc_max=" << to_string(stamina_inc_max);
  out << ", " << "player_decay=" << to_string(player_decay);
  out << ", " << "inertia_moment=" << to_string(inertia_moment);
  out << ", " << "dash_power_rate=" << to_string(dash_power_rate);
  out << ", " << "player_size=" << to_string(player_size);
  out << ", " << "kickable_margin=" << to_string(kickable_margin);
  out << ", " << "kick_rand=" << to_string(kick_rand);
  out << ", " << "extra_stamina=" << to_string(extra_stamina);
  out << ", " << "effort_max=" << to_string(effort_max);
  out << ", " << "effort_min=" << to_string(effort_min);
  out << ", " << "kick_power_rate=" << to_string(kick_power_rate);
  out << ", " << "foul_detect_probability=" << to_string(foul_detect_probability);
  out << ", " << "catchable_area_l_stretch=" << to_string(catchable_area_l_stretch);
  out << ", " << "unum_far_length=" << to_string(unum_far_length);
  out << ", " << "unum_too_far_length=" << to_string(unum_too_far_length);
  out << ", " << "team_far_length=" << to_string(team_far_length);
  out << ", " << "team_too_far_length=" << to_string(team_too_far_length);
  out << ", " << "player_max_observation_length=" << to_string(player_max_observation_length);
  out << ", " << "ball_vel_far_length=" << to_string(ball_vel_far_length);
  out << ", " << "ball_vel_too_far_length=" << to_string(ball_vel_too_far_length);
  out << ", " << "ball_max_observation_length=" << to_string(ball_max_observation_length);
  out << ", " << "flag_chg_far_length=" << to_string(flag_chg_far_length);
  out << ", " << "flag_chg_too_far_length=" << to_string(flag_chg_too_far_length);
  out << ", " << "flag_max_observation_length=" << to_string(flag_max_observation_length);
  out << ", " << "kickable_area=" << to_string(kickable_area);
  out << ", " << "reliable_catchable_dist=" << to_string(reliable_catchable_dist);
  out << ", " << "max_catchable_dist=" << to_string(max_catchable_dist);
  out << ", " << "real_speed_max=" << to_string(real_speed_max);
  out << ", " << "player_speed_max2=" << to_string(player_speed_max2);
  out << ", " << "real_speed_max2=" << to_string(real_speed_max2);
  out << ", " << "cycles_to_reach_max_speed=" << to_string(cycles_to_reach_max_speed);
  out << ", " << "player_speed_max=" << to_string(player_speed_max);
  out << ")";
}


RpcCooperativeAction::~RpcCooperativeAction() noexcept {
}


void RpcCooperativeAction::__set_category(const RpcActionCategory::type val) {
  this->category = val;
}

void RpcCooperativeAction::__set_index(const int32_t val) {
  this->index = val;
}

void RpcCooperativeAction::__set_sender_unum(const int32_t val) {
  this->sender_unum = val;
}

void RpcCooperativeAction::__set_target_unum(const int32_t val) {
  this->target_unum = val;
}

void RpcCooperativeAction::__set_target_point(const RpcVector2D& val) {
  this->target_point = val;
}

void RpcCooperativeAction::__set_first_ball_speed(const double val) {
  this->first_ball_speed = val;
}

void RpcCooperativeAction::__set_first_turn_moment(const double val) {
  this->first_turn_moment = val;
}

void RpcCooperativeAction::__set_first_dash_power(const double val) {
  this->first_dash_power = val;
}

void RpcCooperativeAction::__set_first_dash_angle_relative(const double val) {
  this->first_dash_angle_relative = val;
}

void RpcCooperativeAction::__set_duration_step(const int32_t val) {
  this->duration_step = val;
}

void RpcCooperativeAction::__set_kick_count(const int32_t val) {
  this->kick_count = val;
}

void RpcCooperativeAction::__set_turn_count(const int32_t val) {
  this->turn_count = val;
}

void RpcCooperativeAction::__set_dash_count(const int32_t val) {
  this->dash_count = val;
}

void RpcCooperativeAction::__set_final_action(const bool val) {
  this->final_action = val;
}

void RpcCooperativeAction::__set_description(const std::string& val) {
  this->description = val;
}

void RpcCooperativeAction::__set_parent_index(const int32_t val) {
  this->parent_index = val;
}
std::ostream& operator<<(std::ostream& out, const RpcCooperativeAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RpcCooperativeAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast341;
          xfer += iprot->readI32(ecast341);
          this->category = static_cast<RpcActionCategory::type>(ecast341);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sender_unum);
          this->__isset.sender_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target_unum);
          this->__isset.target_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->target_point.read(iprot);
          this->__isset.target_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_ball_speed);
          this->__isset.first_ball_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_turn_moment);
          this->__isset.first_turn_moment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_dash_power);
          this->__isset.first_dash_power = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->first_dash_angle_relative);
          this->__isset.first_dash_angle_relative = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->duration_step);
          this->__isset.duration_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kick_count);
          this->__isset.kick_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->turn_count);
          this->__isset.turn_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dash_count);
          this->__isset.dash_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->final_action);
          this->__isset.final_action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parent_index);
          this->__isset.parent_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RpcCooperativeAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RpcCooperativeAction");

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->category));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sender_unum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sender_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_unum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->target_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_point", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->target_point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_ball_speed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->first_ball_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_turn_moment", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->first_turn_moment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_dash_power", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->first_dash_power);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("first_dash_angle_relative", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->first_dash_angle_relative);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration_step", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->duration_step);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kick_count", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->kick_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("turn_count", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->turn_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dash_count", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->dash_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("final_action", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->final_action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_index", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->parent_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RpcCooperativeAction &a, RpcCooperativeAction &b) {
  using ::std::swap;
  swap(a.category, b.category);
  swap(a.index, b.index);
  swap(a.sender_unum, b.sender_unum);
  swap(a.target_unum, b.target_unum);
  swap(a.target_point, b.target_point);
  swap(a.first_ball_speed, b.first_ball_speed);
  swap(a.first_turn_moment, b.first_turn_moment);
  swap(a.first_dash_power, b.first_dash_power);
  swap(a.first_dash_angle_relative, b.first_dash_angle_relative);
  swap(a.duration_step, b.duration_step);
  swap(a.kick_count, b.kick_count);
  swap(a.turn_count, b.turn_count);
  swap(a.dash_count, b.dash_count);
  swap(a.final_action, b.final_action);
  swap(a.description, b.description);
  swap(a.parent_index, b.parent_index);
  swap(a.__isset, b.__isset);
}

RpcCooperativeAction::RpcCooperativeAction(const RpcCooperativeAction& other342) {
  category = other342.category;
  index = other342.index;
  sender_unum = other342.sender_unum;
  target_unum = other342.target_unum;
  target_point = other342.target_point;
  first_ball_speed = other342.first_ball_speed;
  first_turn_moment = other342.first_turn_moment;
  first_dash_power = other342.first_dash_power;
  first_dash_angle_relative = other342.first_dash_angle_relative;
  duration_step = other342.duration_step;
  kick_count = other342.kick_count;
  turn_count = other342.turn_count;
  dash_count = other342.dash_count;
  final_action = other342.final_action;
  description = other342.description;
  parent_index = other342.parent_index;
  __isset = other342.__isset;
}
RpcCooperativeAction& RpcCooperativeAction::operator=(const RpcCooperativeAction& other343) {
  category = other343.category;
  index = other343.index;
  sender_unum = other343.sender_unum;
  target_unum = other343.target_unum;
  target_point = other343.target_point;
  first_ball_speed = other343.first_ball_speed;
  first_turn_moment = other343.first_turn_moment;
  first_dash_power = other343.first_dash_power;
  first_dash_angle_relative = other343.first_dash_angle_relative;
  duration_step = other343.duration_step;
  kick_count = other343.kick_count;
  turn_count = other343.turn_count;
  dash_count = other343.dash_count;
  final_action = other343.final_action;
  description = other343.description;
  parent_index = other343.parent_index;
  __isset = other343.__isset;
  return *this;
}
void RpcCooperativeAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RpcCooperativeAction(";
  out << "category=" << to_string(category);
  out << ", " << "index=" << to_string(index);
  out << ", " << "sender_unum=" << to_string(sender_unum);
  out << ", " << "target_unum=" << to_string(target_unum);
  out << ", " << "target_point=" << to_string(target_point);
  out << ", " << "first_ball_speed=" << to_string(first_ball_speed);
  out << ", " << "first_turn_moment=" << to_string(first_turn_moment);
  out << ", " << "first_dash_power=" << to_string(first_dash_power);
  out << ", " << "first_dash_angle_relative=" << to_string(first_dash_angle_relative);
  out << ", " << "duration_step=" << to_string(duration_step);
  out << ", " << "kick_count=" << to_string(kick_count);
  out << ", " << "turn_count=" << to_string(turn_count);
  out << ", " << "dash_count=" << to_string(dash_count);
  out << ", " << "final_action=" << to_string(final_action);
  out << ", " << "description=" << to_string(description);
  out << ", " << "parent_index=" << to_string(parent_index);
  out << ")";
}


RpcPredictState::~RpcPredictState() noexcept {
}


void RpcPredictState::__set_spend_time(const int32_t val) {
  this->spend_time = val;
}

void RpcPredictState::__set_ball_holder_unum(const int32_t val) {
  this->ball_holder_unum = val;
}

void RpcPredictState::__set_ball_position(const RpcVector2D& val) {
  this->ball_position = val;
}

void RpcPredictState::__set_ball_velocity(const RpcVector2D& val) {
  this->ball_velocity = val;
}

void RpcPredictState::__set_our_defense_line_x(const double val) {
  this->our_defense_line_x = val;
}

void RpcPredictState::__set_our_offense_line_x(const double val) {
  this->our_offense_line_x = val;
}
std::ostream& operator<<(std::ostream& out, const RpcPredictState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RpcPredictState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spend_time);
          this->__isset.spend_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ball_holder_unum);
          this->__isset.ball_holder_unum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_position.read(iprot);
          this->__isset.ball_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ball_velocity.read(iprot);
          this->__isset.ball_velocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->our_defense_line_x);
          this->__isset.our_defense_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->our_offense_line_x);
          this->__isset.our_offense_line_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RpcPredictState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RpcPredictState");

  xfer += oprot->writeFieldBegin("spend_time", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->spend_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_holder_unum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ball_holder_unum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_position", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->ball_position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ball_velocity", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->ball_velocity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_defense_line_x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->our_defense_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("our_offense_line_x", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->our_offense_line_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RpcPredictState &a, RpcPredictState &b) {
  using ::std::swap;
  swap(a.spend_time, b.spend_time);
  swap(a.ball_holder_unum, b.ball_holder_unum);
  swap(a.ball_position, b.ball_position);
  swap(a.ball_velocity, b.ball_velocity);
  swap(a.our_defense_line_x, b.our_defense_line_x);
  swap(a.our_offense_line_x, b.our_offense_line_x);
  swap(a.__isset, b.__isset);
}

RpcPredictState::RpcPredictState(const RpcPredictState& other344) noexcept {
  spend_time = other344.spend_time;
  ball_holder_unum = other344.ball_holder_unum;
  ball_position = other344.ball_position;
  ball_velocity = other344.ball_velocity;
  our_defense_line_x = other344.our_defense_line_x;
  our_offense_line_x = other344.our_offense_line_x;
  __isset = other344.__isset;
}
RpcPredictState& RpcPredictState::operator=(const RpcPredictState& other345) noexcept {
  spend_time = other345.spend_time;
  ball_holder_unum = other345.ball_holder_unum;
  ball_position = other345.ball_position;
  ball_velocity = other345.ball_velocity;
  our_defense_line_x = other345.our_defense_line_x;
  our_offense_line_x = other345.our_offense_line_x;
  __isset = other345.__isset;
  return *this;
}
void RpcPredictState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RpcPredictState(";
  out << "spend_time=" << to_string(spend_time);
  out << ", " << "ball_holder_unum=" << to_string(ball_holder_unum);
  out << ", " << "ball_position=" << to_string(ball_position);
  out << ", " << "ball_velocity=" << to_string(ball_velocity);
  out << ", " << "our_defense_line_x=" << to_string(our_defense_line_x);
  out << ", " << "our_offense_line_x=" << to_string(our_offense_line_x);
  out << ")";
}


RpcActionState::~RpcActionState() noexcept {
}


void RpcActionState::__set_action(const RpcCooperativeAction& val) {
  this->action = val;
}

void RpcActionState::__set_predict_state(const RpcPredictState& val) {
  this->predict_state = val;
}

void RpcActionState::__set_evaluation(const double val) {
  this->evaluation = val;
}
std::ostream& operator<<(std::ostream& out, const RpcActionState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RpcActionState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action.read(iprot);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->predict_state.read(iprot);
          this->__isset.predict_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->evaluation);
          this->__isset.evaluation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RpcActionState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RpcActionState");

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->action.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("predict_state", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->predict_state.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evaluation", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->evaluation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RpcActionState &a, RpcActionState &b) {
  using ::std::swap;
  swap(a.action, b.action);
  swap(a.predict_state, b.predict_state);
  swap(a.evaluation, b.evaluation);
  swap(a.__isset, b.__isset);
}

RpcActionState::RpcActionState(const RpcActionState& other346) {
  action = other346.action;
  predict_state = other346.predict_state;
  evaluation = other346.evaluation;
  __isset = other346.__isset;
}
RpcActionState& RpcActionState::operator=(const RpcActionState& other347) {
  action = other347.action;
  predict_state = other347.predict_state;
  evaluation = other347.evaluation;
  __isset = other347.__isset;
  return *this;
}
void RpcActionState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RpcActionState(";
  out << "action=" << to_string(action);
  out << ", " << "predict_state=" << to_string(predict_state);
  out << ", " << "evaluation=" << to_string(evaluation);
  out << ")";
}


BestPlannerActionRequest::~BestPlannerActionRequest() noexcept {
}


void BestPlannerActionRequest::__set_register_response(const RegisterResponse& val) {
  this->register_response = val;
}

void BestPlannerActionRequest::__set_pairs(const std::map<int32_t, RpcActionState> & val) {
  this->pairs = val;
}

void BestPlannerActionRequest::__set_state(const State& val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const BestPlannerActionRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BestPlannerActionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->register_response.read(iprot);
          this->__isset.register_response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->pairs.clear();
            uint32_t _size348;
            ::apache::thrift::protocol::TType _ktype349;
            ::apache::thrift::protocol::TType _vtype350;
            xfer += iprot->readMapBegin(_ktype349, _vtype350, _size348);
            uint32_t _i352;
            for (_i352 = 0; _i352 < _size348; ++_i352)
            {
              int32_t _key353;
              xfer += iprot->readI32(_key353);
              RpcActionState& _val354 = this->pairs[_key353];
              xfer += _val354.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.pairs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->state.read(iprot);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BestPlannerActionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BestPlannerActionRequest");

  xfer += oprot->writeFieldBegin("register_response", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->register_response.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pairs", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pairs.size()));
    std::map<int32_t, RpcActionState> ::const_iterator _iter355;
    for (_iter355 = this->pairs.begin(); _iter355 != this->pairs.end(); ++_iter355)
    {
      xfer += oprot->writeI32(_iter355->first);
      xfer += _iter355->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->state.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BestPlannerActionRequest &a, BestPlannerActionRequest &b) {
  using ::std::swap;
  swap(a.register_response, b.register_response);
  swap(a.pairs, b.pairs);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

BestPlannerActionRequest::BestPlannerActionRequest(const BestPlannerActionRequest& other356) {
  register_response = other356.register_response;
  pairs = other356.pairs;
  state = other356.state;
  __isset = other356.__isset;
}
BestPlannerActionRequest& BestPlannerActionRequest::operator=(const BestPlannerActionRequest& other357) {
  register_response = other357.register_response;
  pairs = other357.pairs;
  state = other357.state;
  __isset = other357.__isset;
  return *this;
}
void BestPlannerActionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BestPlannerActionRequest(";
  out << "register_response=" << to_string(register_response);
  out << ", " << "pairs=" << to_string(pairs);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


BestPlannerActionResponse::~BestPlannerActionResponse() noexcept {
}


void BestPlannerActionResponse::__set_index(const int32_t val) {
  this->index = val;
}
std::ostream& operator<<(std::ostream& out, const BestPlannerActionResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BestPlannerActionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BestPlannerActionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BestPlannerActionResponse");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BestPlannerActionResponse &a, BestPlannerActionResponse &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.__isset, b.__isset);
}

BestPlannerActionResponse::BestPlannerActionResponse(const BestPlannerActionResponse& other358) noexcept {
  index = other358.index;
  __isset = other358.__isset;
}
BestPlannerActionResponse& BestPlannerActionResponse::operator=(const BestPlannerActionResponse& other359) noexcept {
  index = other359.index;
  __isset = other359.__isset;
  return *this;
}
void BestPlannerActionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BestPlannerActionResponse(";
  out << "index=" << to_string(index);
  out << ")";
}


Empty::~Empty() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Empty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Empty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Empty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Empty");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Empty &a, Empty &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Empty::Empty(const Empty& other360) noexcept {
  (void) other360;
}
Empty& Empty::operator=(const Empty& other361) noexcept {
  (void) other361;
  return *this;
}
void Empty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Empty(";
  out << ")";
}

} // namespace
